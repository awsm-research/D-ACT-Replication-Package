@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.list(this, guid).entrySet().forEach(( graphicsInfo) -> consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity)))); return consoles; }
@java.lang.Override protected void reassignBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { finaljava.util.function.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnicWithBadMacPredicate = new org.ovirt.engine.core.bll.network.predicate.VnicWithBadMacPredicate(macPool); vnics.stream().filter(vnicWithBadMacPredicate).forEach((vnic) -> vnic.setMacAddress(macPool.allocateNewMac())); }
@java.lang.Override protected void init() { macPool = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getMacPool(); org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration!= null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm())!= null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }
private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics,java.util.function.Predicate<java.lang.String> badMacPredicate) { return vnics.stream().map(VmNetworkInterface::getMacAddress).filter(java.util.Objects::nonNull).anyMatch(badMacPredicate); }
private boolean validateMacs(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isReassignBadMacs())) { return true; } finaljava.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); return reportDuplicateMacs(vnics); }
private boolean reportDuplicateMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { if ((!(macPool.isDuplicateMacAddressesAllowed())) && (foundBadMacs(vnics, macPool::isMacInUse))) { return failValidation(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } return true; }
@java.lang.Override public void removeAllForVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { getCallsHandler().executeModification(VdcActionType.DeleteVmGuestAgentInterfacesByVmIds, getCustomMapSqlParameterSource().addValue("vm_id", createArrayOfUUIDs(vmIds)); }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = org.ovirt.engine.core.bll.GetAllVmsQuery.getDbFacade().getVmDao().getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.VmHandler.updateVmStatistics(vm); } org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); }
boolean isCpuHotPlugSupported(int os_id);
boolean isCpuHotPlugSupported(int os_id);
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionType actionType = getEndActionType(dbAsyncTask); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, coco.retrieveCommandContext(dbAsyncTask.getCommandId()).getExecutionContext(), coco.getCommandStatus(dbAsyncTask.getCommandId())); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }
private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbType usbType) { switch (usbType) { case NATIVE : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }
private void initUsbPolicy() {java.lang.Integer osType = getOSType().getSelectedItem(); org.ovirt.engine.core.common.businessentities.DisplayType displayType = getDisplayType().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (((osType == null) || (displayType == null)) || (graphicsTypes == null)) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLinuxOsType(osType)) { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } else { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } if (!(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE))) { getUsbPolicy().setIsChangeable(false); } if (getBehavior().basedOnCustomInstanceType()) {java.util.Collection<org.ovirt.engine.core.common.businessentities.UsbPolicy> policies = getUsbPolicy().getItems(); if (policies.contains(prevSelectedUsbPolicy)) { getUsbPolicy().setSelectedItem(prevSelectedUsbPolicy); } else if ((policies.size()) > 0) { getUsbPolicy().setSelectedItem(policies.iterator().next()); } } }
java @java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { if ((((this.model)!= null) && (fenceAgentModel!= null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); } driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); fenceAgentModel.getConcurrentSelectList().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { determineLabelValue(model); } } }); }
java @java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { if ((((this.model)!= null) && (fenceAgentModel!= null)) && (!(fenceAgentModel.equals(this.model)))) { driver.cleanup(); } driver.edit(fenceAgentModel); this.model = fenceAgentModel; determineLabelValue(fenceAgentModel); fenceAgentModel.getManagementIp().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { determineLabelValue(model); } }); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors!= null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"); for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element!= null : "errors shouldn't be null if errors is the same size as the contents of the table!";java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(element, com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(error)); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent,java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, getTooltip()); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip() { return tooltip; }
public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, placement, org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(null)); }
@java.lang.Override publicjava.util.Set<java.lang.String> getConsumedEvents() {java.util.Set<java.lang.String> set = newjava.util.HashSet<>(); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.add(BrowserEvents.MOUSEMOVE); return set; }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) {java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey!= null) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(keyField.getElement(), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey)); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.gwtbootstrap3.client.ui.constants.Placement placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), tooltip, placement); }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), tooltip); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null)? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.webadmin.widget.table.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column.column
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value, parent); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, tooltip); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void setText(com.google.gwt.safehtml.shared.SafeHtml text) { setTooltipText(text.asString()); }
@java.lang.Override public void execute() { applyTooltip(); }
private void applyTooltip() { if (((getWidget())!= null) && ((tooltip)!= null)) {java.lang.String template = org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(extraTooltipClassNames.trim()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getWidget().getElement(), tooltip, placement, template); } }
private static void destroyTooltip(com.google.gwt.dom.client.Element e);
@java.lang.Override publicjava.util.Set<java.lang.String> getConsumedEvents() { return newjava.util.HashSet(super.getConsumedEvents()); }
public void setPlacement(org.gwtbootstrap3.client.ui.constants.Placement placement) { this.placement = placement; }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(alertPanel.getElement(), tooltipContent, Placement.BOTTOM); } }
private void updateBadge() { badge.setVisible(((count)!= 1)); badgeText.setText(java.lang.String.valueOf(count)); if (badge.isVisible()) { com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (com.google.gwt.safehtml.shared.SafeHtml message : messagesList) { builder.append(message); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), builder.toSafeHtml()); } }
public void setHtml(com.google.gwt.safehtml.shared.SafeHtml html) { assert html!= null : "Tooltip HTML content cannot be null"; if (((tooltip) == null) || (!(tooltip.asString().equals(html.asString())))) { tooltip = html; applyTooltip(); } }
public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width) { extraTooltipClassNames += " " + (width.getClassName()); }
private static native void createTooltip(com.google.gwt.dom.client.Element e,java.lang.String placement,java.lang.String template);
@java.lang.Override public void setWidget(com.google.gwt.user.client.ui.Widget w) { super.setWidget(w); if ((w!= null) && (w == (getWidget()))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { applyTooltip(); } }); } }
public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, TooltipConfig.PLACEMENT); }
public staticjava.lang.String getTooltipTemplate(java.lang.String extraTooltipClassNames) {java.lang.String outerClassNames = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE_CLASS_OUTER; if (org.ovirt.engine.ui.uicompat.external.StringUtils.isNotEmpty(extraTooltipClassNames)) { outerClassNames += " " + extraTooltipClassNames; }java.lang.String template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = template.replace("{0}", outerClassNames); template = template.replace("{1}", TooltipConfig.TEMPLATE_CLASS_ARROW); template = template.replace("{2}", TooltipConfig.TEMPLATE_CLASS_INNER); return template; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CUSTOM_EMULATED_MACHINE); _writer.writeRaw(emulatedMachine); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.CUSTOM_CPU_NAME); _writer.writeRaw(cpuId); _writer.writeEndElement(); }
@org.junit.Test public void cpuNameIsNull() { cpuId = null; assertThatThrownBy(() -> new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, emulatedMachine, cpuId)).isInstanceOf(java.lang.NullPointerException.class).hasMessageContaining("cpuId"); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template!= null)? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isEnabled()); if (model.isSetSkipIfSdActive()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipIfConnectivityBroken()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); if ((model.getSkipIfConnectivityBroken().getThreshold())!= null) { entity.setHostsWithBrokenConnectivityThreshold(model.getSkipIfConnectivityBroken().getThreshold()); } else { entity.setHostsWithBrokenConnectivityThreshold(50); } } if (model.isSetSkipIfGlusterBricksUp()) { entity.setSkipFencingIfGlusterBricksUp(model.getSkipIfGlusterBricksUp().isEnabled()); } if (model.isSetSkipIfGlusterQuorumNotMet()) { entity.setSkipFencingIfGlusterQuorumNotMet(model.getSkipIfGlusterQuorumNotMet().isEnabled()); } return entity; }
@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().isValid())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return validateCreateAllSnapshotsFromVmCommand(); }
private void initSpyCommand() { doReturn(true).when(command).validateSpaceRequirements(); doReturn(true).when(command).checkImagesStatus(); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(true).when(command).validateCreateAllSnapshotsFromVmCommand(); }
@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getId())); }
@java.lang.Override protected void executeVdsBrokerCommand() {java.util.Map<java.lang.String,java.lang.Object> volumeAddress = newjava.util.HashMap<>(); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getStorageId()); volumeAddress.put("img_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getImageId()); volumeAddress.put("vol_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getVolumeId()); result = org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getBroker().sparsifyInplace(jobId, volumeAddress); org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.proceedProxyReturnValue(); }
private boolean selectProxyHost() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> activeHosts = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVdsDao().getAllForStoragePoolAndStatus(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStoragePoolId(), VDSStatus.Up); if (activeHosts.isEmpty()) { return false; } org.ovirt.engine.core.common.businessentities.VDS activeHost = activeHosts.get(0); setVds(activeHost); return true; }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getImageId()); } return disk; }
@java.lang.Override protected void init() { setImageId(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getImageId()); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() {java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permsList = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDisk(); if (disk!= null) { permsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(disk.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SPARSIFY_DISK)); } return permsList; }
org.ovirt.engine.core.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId,java.util.Map<java.lang.String,java.lang.Object> volumeAddress);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId,java.util.Map<java.lang.String,java.lang.Object> volumeAddress) { throw newjava.lang.UnsupportedOperationException(); }
@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds()) == null) && (!(selectProxyHost()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId,java.util.Map<java.lang.String,java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_inplace").withParameter("job_id", jobId).withParameter("vol_addr", volumeAddress).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(newjava.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); log.info("Successfully created {} image", getImageType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
public boolean isDownloading() { return isDownloading; }
public void setIsDownloading(boolean isDownloading) { this.isDownloading = isDownloading; }
@org.junit.Test public void testUploadIsDefaultTransferType() { assertEquals(transferImageCommand.getTransferType(), transferImageCommand.UPLOAD); }
protectedjava.lang.String getTransferDescription() { returnjava.lang.String.format("Transfer type '%s' (id '%s')", getTransferType(), getImageType(), getImageAlias(), getImageIdNullSafe()); }
@org.junit.Test public void testFailOnDownloadWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); junit.framework.Assert.assertFalse(transferImageCommand.validate()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateImageTransfer(imageId); } else { if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } return true; }
@java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepaliveInterval(ConfigurationValues.UploadImageUiInactivityTimeoutInSeconds.getValue()); return performCreate(VdcActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@org.junit.Test public void testFailsDownloadExecutionWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); transferImageCommand.executeCommand(); junit.framework.Assert.assertFalse(transferImageCommand.getReturnValue().getSucceeded()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }
java @java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(newjava.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isDownloading()) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Image {}", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) {java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = unregisteredOVFDataDao.getAllForStorageDomainByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); return entityList; }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy clientPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type,java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, port, connectionPolicy, clientPolicy, parallelism); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error("An error occured during building ssl context or obtaining selector", e); throw newjava.lang.IllegalStateException(e); } }
private org.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov
boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();finaljava.io.ByteArrayOutputStream cmdOut = newjava.io.ByteArrayOutputStream();finaljava.io.ByteArrayOutputStream cmdErr = newjava.io.ByteArrayOutputStream()) { try { log.info("Running SSH power down session on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Running SSH power down command on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("SSH power down command failed on host {} {} {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException", e); log.debug("Exception", e); } return ret; }
private void cloneStructureNotCollapsed() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters p = new org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestinationFormat(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters()); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType()); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); runInternalAction(VdcActionType.CloneImageGroupVolumesStructure, p); }
private void prepareParameters() {java.util.Map<java.lang.Object,java.lang.Integer> weights = newjava.util.HashMap(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().setOperationsWeight(weights); int createWeight = (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) / 10; weights.put(CopyStage.DEST_CREATION, createWeight); weights.put(CopyStage.DATA_COPY, ((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) - createWeight)); }
org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName,java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job!= null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for job '{}', '{}': {}", stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep!= null)) { step = addSubStep(contextStep, stepName, description,java.util.Collections.emptyList(), false); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@java.lang.Override protected void executeCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.sortImageList(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); double totalSize = images.stream().mapToDouble(( di) -> di.getActualSize()).sum(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setOperationsWeight(images.stream().collect(java.util.stream.Collectors.toMap(DiskImage::getImageId, ( x) -> calculateImageWeight(totalSize, x)))); persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback())!= null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }
private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDataCommandParameters parameters = new org.ovirt.engine.core.common.action.CopyDataCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getOperationsWeight().get(image)); runInternalActionWithTasksContext(VdcActionType.CopyData, parameters); }
org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName,java.lang.String description,java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep!= null) { step = addSubStep(parentTaskStep, stepName, description, stepSubjectEntities, true); } } return step; }
org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName,java.lang.String description,java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities, boolean hasProgress) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep!= null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); if (hasProgress) { step.setProgress(0); } try { jobRepository.saveStep(step, stepSubjectEntities); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for step '{}', '{}': {}", stepName.name(), parentStep.getId(), parentStep.getStepType().name(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }
private int calculateImageWeight(double totalSize, org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { double weight = (totalSize == 0)? 1 / (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageIds().size()) : (image.getActualSize()) / totalSize; returnjava.lang.Long.valueOf(java.lang.Math.round((weight * (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getJobWeight())))).intValue(); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { returnjava.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return null; }
org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand,java.lang.String description,java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description, command.getCommandStepSubjectEntities()); command.getExecutionContext().setStep(taskStep); if (taskStep!= null) { asyncTaskCreationInfo.setStepId(taskStep.getId()); } org.ovirt.engine.core.bll.tasks.SPMAsyncTask task = concreteCreateTask(taskId, command, asyncTaskCreationInfo, parentCommand); task.setEntitiesMap(entitiesMap); org.ovirt.engine.core.bll.tasks.AsyncTaskUtils.addOrUpdateTaskInDB(task); getAsyncTaskManager().lockAndAddTaskToManager(task); org.ovirt.engine.core.compat.Guid vdsmTaskId = task.getVdsmTaskId(); org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().updateStepExternalId(taskStep, vdsmTaskId, ExternalSystemType.VDSM); return vdsmTaskId; }
private void handleCommandStepAndEntities() { if ((getCommandStep())!= null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), getCommandStep(), null); if (taskStep!= null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } }
publicjava.util.Map<java.lang.String,java.lang.Integer> getOperationsWeight() { return operationsWeight; }
public void setOperationsWeight(java.util.Map<java.lang.Object,java.lang.Integer> operationsWeight) { this.operationsWeight = operationsWeight; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight())!= null) { returnjava.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight().intValue())); } return null; }
org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params,java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(dbUser); user.setId((dbUser == null? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getPrincipalId()); user.setDomain(authzName); user.setEmail(params.getEmail()); user.setFirstName(params.getFirstName()); user.setLastName(params.getLastName()); user.setNamespace(params.getNamespace()); user.setLoginName(params.getPrincipalName());java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = newjava.util.ArrayList<>();java.util.List<java.lang.String> groupRecordIds = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupId : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbGroup!= null) { groupIds.add(dbGroup.getId()); } } user.setGroupIds(groupIds); if (dbUser == null) { dbUserDao.save(user); } else if (!(dbUser.equals(user))) { dbUserDao.update(user); } return user; }

@java.lang.Override public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId()));java.util.List<org.ovirt.engine.core.compat.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); org.ovirt.engine.core.common.utils.HostUpgradeManagerResult hostUpgradeManagerResult = new org.ovirt.engine.core.common.utils.HostUpgradeManagerResult(); hostUpgradeManagerResult.setUpdatesAvailable(updateAvailable); if (updateAvailable) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLog = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLog.setVds(host); auditLogDirector.log(auditLog, AuditLogType.OVIRT_NODE_UPDATES_ARE_AVAILABLE); } return hostUpgradeManagerResult; }
org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host);
private void onUpgrade() { if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters params = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); invokeCheckForHostUpgrade(params); }
public org.ovirt.engine.core.common.utils.HostUpgradeManagerResult isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }
private org.ovirt.engine.core.compat.Guid findChildCommandByActionType(org.ovirt.engine.core.common.action.VdcActionType commandType,java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { for (org.ovirt.engine.core.compat.Guid cmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId); if ((commandEntity.getCommandType()) == commandType) { return cmdId; } } return null; }
@java.lang.Override public void initialize() { setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.upgradeHostTitle()); setHelpTag(HelpTag.upgrade_host); setHashName(HelpTag.upgrade_host.name); setMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg()); org.ovirt.engine.ui.uicommonweb.UICommand upgradeCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.ON_CHECK_UPGRADE, this); upgradeCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.ok()); upgradeCommand.setIsDefault(true); getCommands().add(upgradeCommand); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId()); org.ovirt.engine.core.common.utils.HostUpgradeManagerResult hostUpgradeManagerResult; try { hostUpgradeManagerResult = availableUpdatesFinder.isUpdateAvailable(vds); if (hostUpgradeManagerResult.isUpdatesAvailable()) {java.lang.String message = ((hostUpgradeManagerResult.getAvailablePackages()) == null)? "found updates." :java.lang.String.format("found updates for packages %s", org.apache.commons.lang.StringUtils.join(hostUpgradeManagerResult.getAvailablePackages(), ", ")); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); vds.getDynamicData().setUpdateAvailable(hostUpgradeManagerResult.isUpdatesAvailable()); vdsDynamicDao.updateUpdateAvailable(vds.getId(), hostUpgradeManagerResult.isUpdatesAvailable()); } else { org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", "no updates found."); } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getReturnValue().setActionReturnValue(hostUpgradeManagerResult); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.setSucceeded(true); setCommandStatus(CommandStatus.SUCCEEDED); } catch (java.lang.Exception e) { log.error("Failed to check if updates are available for host '{}'", vds.getName()); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.setSucceeded(false); setCommandStatus(CommandStatus.FAILED); } }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FINISHED : org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FAILED; }
@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.isUpdateAvailable(host); }
@java.lang.Override protected void executeCommand() {java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> upgradeCheckCmd = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.HostUpgradeCheckInternal, createUpgradeCheckParameters(), org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.cloneContext()); if (!(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getParameters().isRunAsync())) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; try { result = upgradeCheckCmd.get(); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getReturnValue().setActionReturnValue(result.getActionReturnValue()); if (!(result.getSucceeded())) { propagateFailure(result); return; } } catch (java.lang.InterruptedException |java.util.concurrent.ExecutionException e) { log.error("Exception", e); return; } } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.setSucceeded(true); }
@java.lang.Override publicjava.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUNId()).append("physicalVolumeId", getPhysicalVolumeId()).append("volumeGroupId", getVolumeGroupId()).append("serial", getSerial()).append("lunMapping", getLunMapping()).append("vendorId", getVendorId()).append("productId", getProductId()).append("lunConnections", getLunConnections()).append("deviceSize", getDeviceSize()).append("pvSize", getPvSize()).append("vendorName", getVendorName()).append("pathsDictionary", getPathsDictionary()).append("pathsCapacity", getPathsCapacity()).append("lunType", getLunType()).append("status", getStatus()).append("diskId", getDiskId()).append("diskAlias", getDiskAlias()).append("storageDomainId", getStorageDomainId()).append("storageDomainName", getStorageDomainName()).append("discardMaxBytes", getDiscardMaxBytes()).append("discardZeroesData", isDiscardZeroesData()).build(); }
publicjava.lang.Boolean isDiscardZeroesData() { return staticData.isDiscardZeroesData(); }
public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { this.supportsDiscard = supportsDiscard; }
publicjava.lang.Boolean isSupportsDiscard() { return supportsDiscard; }
publicjava.lang.Long getDiscardMaxBytes() { return discardMaxBytes; }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && (java.util.Objects.equals(discardMaxBytes, other.discardMaxBytes))) && (java.util.Objects.equals(discardZeroesData, other.discardZeroesData))) && (org.ovirt.engine.core.bll.LUNsHandler.lunType.equals(other.lunType))) && (org.ovirt.engine.core.bll.LUNsHandler.pathsDictionary.equals(other.pathsDictionary))) && (org.ovirt.engine.core.bll.LUNsHandler.pathsCapacity.equals(other.pathsCapacity))) && (org.ovirt.engine.core.bll.LUNsHandler.vendorName.equals(other.vendorName))) && (org.ovirt.engine.core.bll.LUNsHandler.productId.equals(other.productId)) && (org.ovirt.engine.core.bll.LUNsHandler.serial.equals(other.serial))) && (org.ovirt.engine.core.bll.LUNsHandler.vendorId.equals(other.vendorId))) && (org.ovirt.engine.core.bll.LUNsHandler.storageDomainId.equals(other.storageDomainId))) && (org.ovirt.engine.core.bll.LUNsHandler.storageDomainName.equals(other.storage
public void setDiscardZeroesData(java.lang.Boolean discardZeroesData) { staticData.setDiscardZeroesData(discardZeroesData); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()); getCallsHandler().executeModification("InsertLUNs", parameterSource); }
publicjava.lang.Boolean isSupportsDiscard() { return staticData.isSupportsDiscard(); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()); }
javajavajavajava.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) {java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId,java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId =java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((org.ovirt.engine.core.common.businessentities.storage.LUNs.getDeviceSize())!= (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxBytes(), lunFromVgInfo.getDiscardMaxBytes())))) || (!(java.util.Objects.equals(lunFromDb.isDiscardZeroesData(), lunFromVgInfo.isDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; } })); }
@org.junit.Test public void testGetLunsToUpdateInDbDiffDiscardMaxBytes() { lunFromVg.setDiscardMaxBytes(2048L); lunFromDb.setDiscardMaxBytes(1024L); assertLunShouldBeUpdatedDueToFieldChange(); }
public void setSupportsDiscard(java.lang.Boolean supportsDiscard) { staticData.setSupportsDiscard(supportsDiscard); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("lun_id", lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("product_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()); getCallsHandler().executeModification("UpdateLUNs", parameterSource); }
public void setDiscardMaxBytes(java.lang.Long discardMaxBytes) { this.discardMaxBytes = discardMaxBytes; }
public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { boolean needsAlert = false; if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { needsAlert = (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentTimezone(vm)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm)) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasDifferentOSType(vm)); } return (needsAlert || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasPauseError(vm)); }
public void setVdsNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> getVdsNumaNodeList() { return vdsNumaNodeList; }
private static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode!= (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) {java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = ((vdsNumaNodeList!= null) && ((vdsNumaNodeList.size()) == 1)) && (vdsNumaNodeList.get(0).isPinned()); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
javajavajavajava.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> getAllVmNumaNodePinInfo() {java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfomation", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeAssignmentRowMapper, null);java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = newjava.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> pair : numaNodesAssign) { if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(), newjava.util.ArrayList()); } vmNumaNodesPinMap.get(pair.getFirst()).add(pair.getSecond()); } return vmNumaNodesPinMap; }
javajava.lang.Override publicjava.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster);java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource);java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap();java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : vmNumaNodes) { if (numaNodesCpusMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setCpuIds(numaNodesCpusMap.get(pair.getSecond().getId())); } if (vmNumaNodesPinMap.containsKey(pair.getSecond().getId())) { pair.getSecond().setVdsNumaNodeList(vmNumaNodesPinMap.get(pair.getSecond().getId())); } } return vmNumaNodes; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId);java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeCpuRowMapper, parameterSource);java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index,java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> numaPinning = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(vdsNumaNode.getId(), true, vdsNumaNode.getIndex())); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_id", pinning.getVmNumaNodeId()).addValue("vds_numa_node_index", pinning.getVmNumaNodeIndex()).addValue("is_pinned", pinning.isPinned()); }
private staticjava.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() {java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(org.ovirt.engine.core.compat.Guid.newGuid(), true, 1)); newVmNodes.add(newVmNumaNode); return newVmNodes; }
private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((nodes == null) || (nodes.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { return true; } } } return false; }
@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().get(0).setVdsNodeIndex(null); assertValidationFailure(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }
org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(null, pinned, hostNodeIndex))); } return newNode; }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) {java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; }java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { if ((vNode.getMemTotal()) > (indexMap.get(pinning.getVdsNodeIndex ()).getNumaNodeStatistics().getMemFree())) { return false; } } } } return true; }
@org.junit.Test public void testGetAllVmNumaNodeByVmId() {java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(existingVm.getId()); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b517"); org.ovirt.engine.core.compat.Guid vmNumaNode2 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-5080-4ad1-86a1-cf513b15b518");java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = newjava.util.HashMap<>(2); nodes.put(result.get(0).getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertTrue(nodes.containsKey(vmNumaNode2)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().size()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).isInned()); assertEquals(true, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(1).isInned()); assertEquals(1, nodes.get(vmNumaNode2).getVdsNumaNodeList().size()); assertEquals(false, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).isInned()); assertEquals(0, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).getVdsNodeIndex ().intValue()); }
@java.lang.Override protected void executeCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList();java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVdsNumaNodes();java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning pinning : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { int index = pinning.getVdsNodeIndex(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { if ((vdsNumaNode.getIndex()) == index) { pinning.setVdsNodeId(vdsNumaNode.getId()); break; } } } } nodes.add(vmNumaNode); } org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVmNumaNodeDao().massUpdateNumaNode(nodes); org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.setSucceeded(true); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { final boolean rngUpdateRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin())!= OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } return true; }
@java.lang.Override protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isUpdateRngDevice())) { rngDeviceUtils.handleUrandomRandomChange(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getClusterLevelChangeFromVersion(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getCluster().getCompatibilityVersion(), templateId, org.ovirt.engine.core.bll.UpdateVmTemplateCommand.cloneContextAndDetachFromParent(), false); return; } super.updateRngDevice(templateId); }
@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster)!= null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } else { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } }
public void handleUrandomRandomChange(org.ovirt.engine.core.compat.Version oldClusterVersion, org.ovirt.engine.core.compat.Version newClusterVersion, org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.bll.context.CommandContext commandContext, boolean isVm) { if (oldClusterVersion == null) { return; } final boolean updatePotentiallyRequired = VmRngDevice.Source.urandomRandomUpdateRequired(oldClusterVersion, newClusterVersion); if (!updatePotentiallyRequired) { return; } finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = backend.runInternalQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBaseId), commandContext.getEngineContext()).getReturnValue(); if (rngDevices.isEmpty()) { return; } final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = rngDevices.get(0); if (!(java.util.Arrays.asList(VmRngDevice.Source.RANDOM, VmRngDevice.Source.URANDOM).contains(rngDevice.getSource()))) { return; } rngDevice.setSource(VmRngDevice.Source.getUrandomOrRandomFor(newClusterVersion)); final org.ovirt.engine.core.common.action.RngDeviceParameters params = new org.ovirt.engine.core.common.action.RngDeviceParameters(rngDevice, isVm); backend.runInternalAction(VdcActionType.UpdateRngDevice, params, commandContext); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngDevice.Source.urandomRandomUpdateRequired(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()))) { returnjava.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }
public void onSparsify(final org.ovirt.engine.ui.uicommonweb.ICommandTarget target) {java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(disk.getId()); parameterList.add(parameters); } startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.SparsifyImage, parameterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { stopProgress(); target.executeCommand(cancelCommand); } }, this); }
private boolean isSparsifyCommandAvailable() {java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems())!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((isDiskLocked(disk)) || ((!(isVmDown())) && (disk.getPlugged()))) { return false; } } return true; }
public void initialize(org.ovirt.engine.core.common.businessentities.VM vm,java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disksToSparsify, org.ovirt.engine.ui.uicommonweb.ICommandTarget target) { this.vm = vm; this.disksToSparsify = disksToSparsify; org.ovirt.engine.ui.uicompat.UIConstants uiConstants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); setTitle(uiConstants.sparsifyDisksTitle()); setMessage(uiConstants.sparsifyConfirmationPopupMessage()); setHelpTag(HelpTag.sparsify_disk); setHashName("sparsify_disk"); getLatch().setEntity(false);java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); diskModel.setVm(vm); items.add(diskModel); if ((disk.getNumberOfVms()) > 1) { getLatch().setIsChangeable(false); } } setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.ON_SPARSIFY, target); getCommands().add(okCommand); cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SparsifyDiskModel.CANCEL, target); getCommands().add(cancelCommand); }
@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setQcowComapt(QcowCompat.QCOW2_V3); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }
public void setQcowComapt(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowComapt) { getImage().setQcowCompat(qcowComapt); }
@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("image_id", disk.getDiskImage().getImageId()).addValue("disk_alias", disk.getDiskImage().getDiskAlias()).addValue("disk_description", disk.getDiskImage().getDiskDescription()).addValue("creation_date", disk.getDiskImage().getCreationDate()).addValue("last_modified", disk.getDiskImage().getLastModified()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("qcow_compat", disk.getDiskImage().getQcowCompat()).addValue("actual_size", disk.getDiskImage().getActualSize()).addValue("size", disk.getDiskImage().getSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("entity_id", vmBase.getId()).addValue("entity_name", vmBase.getName()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); } }
public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java.lang.String action, @java x.ws.rs.PathParam("oid")java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
java publicjava.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm,java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.utils.ovf.OvfVmWriter vmWriter; if (vm.isHostedEngine()) { vmWriter = new org.ovirt.engine.core.utils.ovf.HostedEngineOvfWriter(vm, images, version, clusterDao.get(vm.getClusterId())); } else { vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); } return vmWriter.build().getStringRepresentation(); }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CLUSTER_EMULATED_MACHINE); _writer.writeRaw(cluster.getEmulatedMachine()); _writer.writeEndElement(); _writer.writeStartElement(OvfProperties.CLUSTER_CPU_NAME); _writer.writeRaw(cluster.getCpuName()); _writer.writeEndElement(); }
private static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId,java.util.Collections.emptyList()); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.debug("Failed to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }
public staticjava.util.Map<java.lang.String,java.lang.Object> buildVmNumatuneSetting(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes,java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) {java.util.Map<java.lang.String,java.lang.Object> createNumaTune = newjava.util.HashMap<>(numaTuneMode);java.util.List<java.util.Map<java.lang.String,java.lang.String>> memNodeList = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { continue; }java.util.Map<java.lang.String,java.lang.String> memNode = newjava.util.HashMap<>(); memNode.put(VdsProperties.NUMA_TUNE_VM_NODE_INDEX,java.lang.String.valueOf(node.getIndex())); memNode.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(node.getVdsNumaNodeList())); memNodeList.add(memNode); } if (memNodeList.isEmpty()) { returnjava.util.Collections.emptyMap(); } createNumaTune.put(VdsProperties.NUMA_TUNE_MEMNODES, memNodeList); createNumaTune.put(VdsProperties.NUMA_TUNE_MODE, numaTuneMode.getValue()); createNumaTune.put(VdsProperties.NUMA_TUNE_NODESET, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNuma(vdsNumaNodes.getVdsNumaNodeList())); returnjava.util.Collections.collect(java.util.Map.stream.map(java.util.
@org.junit.Test public void testBuildVmNumatuneSetting() throwsjava.lang.Exception {java.util.Map<java.lang.String,java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumatuneSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vmNumaNodes, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.vdsNumaNodes); assertEquals(2, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MODE)); assertEquals(NumaTuneMode.INTERLEAVE.getValue(), numaTune.get(VdsProperties.NUMA_TUNE_MODE)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("0,1", numaTune.get(VdsProperties.NUMA_TUNE_NODESET)); assertTrue(numaTune.containsKey(VdsProperties.NUMA_TUNE_MEMNODES));java.util.List<java.util.Map<java.lang.String,java.lang.String>> memNodes = ((java.util.List<java.util.Map<java.lang.String,java.lang.String>>) (numaTune.get(VdsProperties.NUMA_TUNE_MEMNODES))); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("0", memNodes.get(0).get(VdsProperties.NUMA_TUNE_NODESET)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_VM_NODE_INDEX)); assertEquals("1", memNodes.get(1).get(VdsProperties.NUMA_TUNE_NODESET)); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes =java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(java.lang.Integer pinnedIndex, org.ovirt.engine.core.compat.Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes =java.util.Collections.singletonList(createVmNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); }java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach((node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
private void populateVMNUMAInfo(finaljava.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { finaljava.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = getVmNumaNodeDao().getNumaNodeInfoByClusterId(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) {java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty())? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); } })); }
java @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) {java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> devs = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty())? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); }
java @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate();java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
private boolean isPassDiscardSupported() { return validate(getDiskValidator(disk).isPassDiscardSupported(getDiskVmElement(), HotPlugDiskToVmCommand.getStorageDomain())); }
@org.junit.Test public void testPassDirectLunSupport() { testPassDiscardSupport(new org.ovirt.engine.core.common.businessentities.storage.LunDisk(), null); }
private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().getPropagateErrors()); diskToUpdate.setWipeAfterDelete(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().getDiskAlias()); diskToUpdate.setDiskDescription(getNewDisk().getDiskDescription()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setReadOnly(getNewDisk().getReadOnly()); diskToUpdate.setSgio(getNewDisk().getSgio()); dveToUpdate.setBoot(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().getDiskInterface()); dveToUpdate.setPassDiscard(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscard()); }
@org.junit.Test public void testValidateFailsForPassDiscard() { initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid()); mockVm(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
.lang.StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString
@org.junit.Test public void validateDiscardSucceeded() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
@org.junit.Test public void validateFailedDiscardNotSupported() { mockVmStatusUp(); mockInterfaceList(); createVirtIODisk(); initStorageDomain(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskVmElement that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return ((((boot) == (that.boot)) && ((passDiscard) == (that.passDiscard))) && ((diskInterface) == (that.diskInterface))) && ((id)!= null)? id.equals(that.id) : (that.id) == null; }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(id, boot, passDiscard, diskInterface); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue("pass_discard", entity.isPassDiscard()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())); }
@org.junit.Test public void validateDiscardFailed() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
@org.junit.Test public void testPassDiscardDiskImageSupport() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain(); storageDomain.setStorageType(StorageType.NFS); testPassDiscardSupport(diskImage, storageDomain); storageDomain.setStorageType(StorageType.ISCSI); testPassDiscardSupport(diskImage, storageDomain); }
@org.junit.Test public void testValidateFailsWhenDiscardIsNotSupported() { when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isPassDiscardSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.storage.StorageDomain.class))).thenReturn(ValidationResult.VALID); }
java @java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setBootable(false); } if (disk.isSetInterface()) { diskAttachment.setInterface(disk.getInterface()); } else { diskAttachment.setInterface(DiskInterface.VIRTIO); } diskAttachment.setDisk(disk); if (disk.isSetId()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(diskId)); } else { return getAttachmentsResource().createDisk(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }

java.lang.Override public void onSuccess(java.lang.Object model,java.lang.Object virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO); updatePassDiscardChangeability(diskModel); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); parentModel.getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable(false); } }java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModel(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel.storageDisks, diskModels);java.
private void updatePassDiscardAvailability() { if (getIsFloating()) { getPassDiscard().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskStorageType selectedDiskStorageType = getDiskStorageType().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) || (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)); boolean isApplicalbeStorageType = (selectedDiskStorageType!= (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (((getStorageDomain().getSelectedItem())!= null) && (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain())); if ((isApplicableInterface && isApplicableDiskStorageType) && isApplicalbeStorageType) { getPassDiscard().setIsAvailable(true); if (!(getIsNew())) { getPassDiscard().setEntity(getDiskVmElement().isPassDiscard()); } } else { getPassDiscard().setIsAvailable(false); getPassDiscard().setEntity(false); } } }
private void listenToPassDiscardItemChangedEvent(final org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> disks, final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel diskModel) { disks.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disks.getItems()) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> entityModel : disks.getItems()) { entityModel.getEntity().getPassDiscard().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("IsChangable")) { revealDiskPanel(diskModel); } } }); } } }); }
java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); cinderVolumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); passDiscardEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndexes((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
public void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setBackgroundOperationDescription(resourceManager.getVmManager(vm.getId()).getConvertOperationDescription()); vm.setBackgroundOperationProgress(resourceManager.getVmManager(vm.getId()).getConvertOperationProgress()); }
java @java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot!= null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }
public void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setStatisticsData(resourceManager.getVmManager(vm.getId()).getStatistics()); }
public boolean isUsbPolicyLegal(org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy, int osId,java.util.List<java.lang.String> messages) { boolean retVal = true; if (UsbPolicy.ENABLED_LEGACY.equals(usbPolicy)) { if (osRepository.isLinux(osId)) { messages.add(EngineMessage.USB_LEGACY_NOT_SUPPORTED_ON_LINUX_VMS.toString()); retVal = false; } } return retVal; }
javajavajava privatejava.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { returnjava.util.Collections.emptyList(); }java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateVmLock(vm); vmHandler.updateOperationProgress(vm); vmHandler.updateVmStatistics(vm); } return vms; }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true);java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.comparators.DiskByDiskAliasComparator()); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmHandler.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getVmDeviceUtils())); return validator.validate(); }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { vmHandler.updateVmGuestAgentVersion(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }
protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmGuestAgentVersion(vm); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmHandler.updateNumaNodesFromDb(vm); }
java @java.lang.Override publicjava x.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(name, clusterId, volumeType, status, replicaCount, stripeCount, disperseCount, redundancyCount, arbiterCount, options, accessProtocols, transportTypes, bricks, asyncTask, advancedDetails, snapshotsCount, snapMaxLimit, snapshotScheduled); }
public void setArbiterCount(java.lang.Integer arbiterCount) { this.arbiterCount = arbiterCount; }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return ((((((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (java.util.Objects.equals(arbiterCount, other.arbiterCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails)); }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.id.equals(other.id)) && (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.volumeId.equals(other.volumeId))) && (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.serverId.equals(other.serverId))) && (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.brickDirectory.equals(other.brickDirectory))) && (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.brickOrder.equals(other.brickOrder))) && (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.asyncTask.equals(other.asyncTask))) && ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.status.equals(other.status))) && (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.isArbiter.equals(other.isArbiter))) && ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.isArbiter.equals(other.isArbiter))) && ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.isArbiter.equals(other.isArbiter))) && ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity.isArbiter.equals(other.isArbiter))) && ((org.ovirt.engine.core.common.businessentities.
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); setIsArbiter(brick.getIsArbiter()); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(id, volumeId, serverId, brickDirectory, brickOrder, status, asyncTask, isArbiter); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("arbiter_count", volume.getArbiterCount()); }
@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()).addValue("arbiter_count", volume.getArbiterCount()); }
publicjava.lang.Integer getArbiterCount() { return arbiterCount; }
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("is_arbiter", entity.getIsArbiter()).addValue("task_id", ((entity.getAsyncTask().getTaskId())!= null? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; } }; }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(newjava.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (isImageSupplied()) { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Image {}", getImageType()); createImage(); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protected boolean isImageSupplied() { return!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() {java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = newjava.util.ArrayList<>(); if (!(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageSupplied())) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected boolean validate() { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())!= null) { return validateImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType())!= (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addValidationMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getCluster().getCompatibilityVersion(), getParameters().isForce())))) { return false; } if (((volume.getArbiterCount())!= 0) && (!(validate(createVolumeValidator().isArbiterVolumeSupported(getCluster().getCompatibilityVersion()))))) { return false; } if ((((volume.getArbiterCount())!= 0) && (!(volume.getVolumeType().isReplicatedType()))) || ((volume.getReplicaCount())!= 3)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_ARBITER_VOLUME_SHOULD_BE_REPLICA_3_VOLUME); return false; } return validateBricks(volume); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterForceCreateVolumeSupported(CreateGlusterVolumeVDSCommand.getParameters().getClusterVersion()); uuidReturn = (supportForceCreateVolume)? CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(newjava.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce, volume.getArbiterCount()); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName,java.lang.String[] brickList, int replicaCount, int stripeCount,java.lang.String[] transportList, boolean force, int arbiterCount) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", newjava.util.ArrayList(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", newjava.util.ArrayList(java.util.Arrays.asList(transportList))).withParameter("force", force).withOptionalParameter("arbiterCount", arbiterCount).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
publicjava.util.Map<java.lang.String,java.lang.Object> glusterVolumeCreate(java.lang.String volumeName,java.lang.String[] brickList, int replicaCount, int stripeCount,java.lang.String[] transportList, boolean force, int arbiterCount);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName,java.lang.String[] brickList, int replicaCount, int stripeCount,java.lang.String[] transportList, boolean force, int arbiterCount);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName,java.lang.String[] brickList, int replicaCount, int stripeCount,java.lang.String[] transportList, boolean force, int arbiterCount) { try { if (arbiterCount == 0) { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force)); } else { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, stripeCount, transportList, force, arbiterCount)); } } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public void buildVmVirtioScsi() {java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName());java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface,java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.vdsbroker.architecture.GetControllerIndices()).returnValue(); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) {java.util.Map<java.lang.String,java.lang.Object> struct = newjava.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.Scsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index,java.lang.Integer.toString(virtioScsiIndex)); if ((vm.getNumOfIoThreads()) > 0) { struct.put(VdsProperties.ioTrheadId,java.lang.Integer.toString(virtioScsiIndex)); virtioScsiIndex++; } vmInfoBuildUtils.addAddress(vmDevice, struct); virtioScsiIndex++; addDevice(struct, vmDevice, null); } }
public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = oldVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateVideoDevices(oldVmBase, newVmBase); updateUsbSlots(oldVmBase, newVmBase); updateMemoryBalloon(newVmBase.getId(), params.isBalloonEnabled()); updateSoundDevice(oldVmBase, newVmBase, oldVm.getCompatibilityVersion(), params.isSoundDeviceEnabled()); updateSmartcardDevice(oldVm, newVmBase); updateConsoleDevice(newVmBase.getId(), params.isConsoleEnabled()); int scsiControllers = (((newVmBase.getNumOfIoThreads()) > 1) && (params.isVirtioScsiEnabled()))? newVmBase.getNumOfIoThreads() : 1; for (int i = 1; i <= scsiControllers; i++) { updateVirtioScsiController(newVmBase.getId(), params.isVirtioScsiEnabled()); } }
public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return (getReplicaCount().getIsValid()) && (getStripeCount().getIsValid()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("The Arbiter Volume should be a REPLICATE volume with replica count 3")java.lang.String arbiterVolumeShouldBeReplica3();
public static boolean glusterArbiterVolumeSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v4_0.compareTo(version)) <= 0; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); }java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = newjava.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); getArbiterVolume().setEntity(volumeBrickModel.getArbiterVolume().getEntity()); setWindow(null); }
private void updateArbiterAvailability() { getArbiterVolume().setIsAvailable(((getTypeList().getSelectedItem().isReplicatedType()) && (org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.glusterArbiterVolumeSupported(getCluster().getSelectedItem().getCompatibilityVersion())))); }
protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); arbiterVolumeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }
private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem())!= null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); updateArbiterAvailability(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model,java.lang.Object returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (((java.lang.Boolean) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } } }), cluster.getName()); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { final int checks = (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_SECONDS) / (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); for (int i = 0; i < checks; i++) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' ('{}')", host.getName(), host.getId()); return true; } } return false; }
public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { getDiskInterface().setSelectedItem(DiskInterface.VirtIO_SCSI); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) {java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName), false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } }
protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T,?> popup, boolean isConfirm) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopup = popup; } else { windowPopup.put(windowPropertyName, popup); } }
java @java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> currentPopup, boolean isConfirmation,java.lang.String propertyName) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation)? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel!= null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider)!= null)) { newPopup = defaultConfirmPopupProvider.get(); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } if (newPopup!= null) { revealAndAssignPopup(windowModel, ((org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<org.ovirt.engine.ui.uicommonweb.models.Model,?>) (newPopup)), isConfirmation, propertyName); } else { if (isConfirmation) { popupResolver.clearConfirmWindowModel(sourceModel, propertyName); } else { popupResolver.clearWindowModel(sourceModel, propertyName); } } } else if ((windowModel == null) && (currentPopup!= null)) { hideAndClearPopup(currentPopup, isConfirmation, propertyName); } }
protected void hideAndClearPopup(org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> popup, boolean isConfirm) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopup = null; } else { windowPopup.put(windowPropertyName, null); } }
void hideAndClearAllPopups() { if ((confirmWindowPopup)!= null) { hideAndClearPopup(confirmWindowPopup, true, null); } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?>> popupPair : windowPopup.entrySet()) { if ((popupPair.getValue())!= null) { hideAndClearPopup(popupPair.getValue(), false, popupPair.getKey()); } } }
public void addDialogModelListener(final M source) { hideAndClearAllPopups(); source.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) {java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName), false, propName); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } } }); }
@org.junit.Test public void testEmptySignKeyVal() {java.util.Map<java.lang.String,java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }
@org.junit.Test public void testOneKeyVal() {java.util.Map<java.lang.String,java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.ONE_KEY_VAL); assertEquals(1, map.size()); }
javajava.util.Map<java.lang.String,java.lang.String> getAddressMapForScsiDisk(java.lang.String address,java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice,java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) {java.util.Map<java.lang.String,java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(address); int unit =java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
void void(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice,java.util.Map<java.lang.String,java.lang.Object> struct) {java.util.Map<java.lang.String,java.lang.String> addressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.apache.commons.httpclient.HttpClient client = org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections)) ;java.lang.String eventQueue = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); return new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient(hostname, port, connectionTimeOut, clientTimeOut, clientRetries, heartbeat, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), client); }
@org.junit.Test public void testEmptyKeyVal() {java.util.Map<java.lang.String,java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.EMPTY_KEY_VAL); assertEquals(2, map.size()); }
public static org.apache.commons.httpclient.HttpClient getConnection(int clientTimeOut, int connectionTimeOut, int clientRetries, int maxConnectionsPerHost, int maxTotalConnections) { org.apache.commons.httpclient.params.HttpConnectionManagerParams params = new org.apache.commons.httpclient.params.HttpConnectionManagerParams(); params.setConnectionTimeout(connectionTimeOut); params.setDefaultMaxConnectionsPerHost(maxConnectionsPerHost); params.setMaxTotalConnections(maxTotalConnections); org.apache.commons.httpclient.MultiThreadedHttpConnectionManager httpConnectionManager = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.HttpClient(httpConnectionManager); int retries = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.vdsRetries); org.apache.commons.httpclient.HttpMethodRetryHandler handler = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler(retries, false); org.apache.commons.httpclient.params.HttpClientParams parameters = client.getParams(); parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler); return client; }
private void addAddress(java.util.Map<java.lang.String,java.lang.Object> map,java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress())); } }
javajava.util.Map<java.lang.String,java.lang.Object> buildData() {java.util.Map<java.lang.String,java.lang.Object> data = newjava.util.HashMap<>();java.util.Map<java.lang.String,java.lang.Object> memDeviceData = newjava.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@org.junit.Test public void testMulKeyVal() {java.util.Map<java.lang.String,java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.MUL_KEY_VAL); assertEquals(4, map.size()); }
@org.junit.Test public void testNullKeyVal() {java.util.Map<java.lang.String,java.lang.String> map = org.ovirt.engine.core.utils.StringHelper.string2Map(org.ovirt.engine.core.utils.StringHelperTest.NULL_KEY_VAL); assertEquals(0, map.size()); }
org.ovirt.engine.core.bll.ValidationResult validateMountOptions() {java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; }java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS))? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.NFS_MANAGED_OPTIONS;java.util.Map<java.lang.String,java.lang.String> optionsMap = org.ovirt.engine.core.utils.StringHelper.string2Map(mountOptions);java.util.Set<java.lang.String> optionsKeys = newjava.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys, ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_CONTAINS_MANAGED_PROPERTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
staticjava.util.Map<java.lang.String,java.lang.String> string2Map(java.lang.String str) {java.util.Map<java.lang.String,java.lang.String> map = newjava.util.HashMap<>(); if (str!= null) { str = str.trim(); if (str.startsWith("{")) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("}")) { str = str.substring(0, ((str.length()) - 1)); } str = str.trim(); if ((str.length()) > 0) {java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.utils.StringHelper.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) {java.lang.String[] keyval = pair.split(org.ovirt.engine.core.utils.StringHelper.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval[0].trim(), keyval[1].trim()); } else if ((keyval.length) == 1) { map.put(keyval[0].trim(), ""); } } } } return map; }
@java x.annotation.PostConstruct protected final void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); } }
private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) {java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; }java.util.Map<java.lang.String,java.lang.String> addressMapToHotplug = org.ovirt.engine.core.utils.StringHelper.string2Map(deviceAddress);java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) {java.util.Map<java.lang.String,java.lang.String> deviceAddressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress()); if (deviceAddressMap.equals(addressMapToHotplug)) { return true; } } } return false; }
protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BOTTOM);java.lang.String tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item, this); if (tooltipContent!= null) { tooltip.setHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(tooltipContent)); } }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolA = factory.createDecoratedPool(poolId, macPool,java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolB = factory.createDecoratedPool(poolId, macPool,java.util.Collections.singletonList(macPoolDecoratorB)); assertThat(decoratedPoolA, is(macPoolDecoratorA)); assertThat(decoratedPoolB, is(macPoolDecoratorB)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool1 = factory.createDecoratedPool(poolId, macPool,java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool2 = factory.createDecoratedPool(poolId, macPool,java.util.Collections.singletonList(macPoolDecoratorA)); assertThat(decoratedPool1, is(macPoolDecoratorA)); assertThat(decoratedPool2, is(macPoolDecoratorA)); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPool), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class)); }
public void performPendingOperations() {java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = newjava.util.concurrent.ConcurrentLinkedQueue<>(); operations.forEach(task -> { if (task instanceofjava.util.concurrent.FutureTask) { ((java.util.concurrent.FutureTask<?>) (task)).run(); } else { org.ovirt.vdsm.jsonrpc.client.utils.ReactorScheduler.LOG.error("Cannot find task type in the queue '{}'", task); } }); }
public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats entered, host='{}'({})", vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statsReturnValue.getExceptionObject())!= null)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Error getting vds stats, host='{}'({}): {}", vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds); updateV2VJobs(); saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); alertIfLowDiskSpaceOnHost(); checkVdsInterfaces(); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats\n{}", this); } }
public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus)!= (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("ResourceManager::refreshVdsRunTimeInfo '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Exception", ex); } } }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.info("Updated host status from for Maintenance to 'Maintenance' in database, host '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; finaljava.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = newjava.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); processHardwareCapsNeeded = (processHardwareCapsNeeded)? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } if ((vds.getStatus())!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.update(dynamicData); cachedVds.setDynamicData(dynamicData); cachedDynamicData = dynamicData; }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); } if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); finaljava.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = newjava.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }
public org.ovirt.engine.core.common.HostUpgradeManagerResult checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) {java.lang.String error =java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process is already running.", host.getName()); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.warn(error); throw newjava.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
javajava.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava x.servlet.ServletException { log.debug("Start SsoPostLoginFilter");java x.servlet.http.HttpServletRequest req = ((java x.servlet.http.HttpServletRequest) (request)); try {java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false))!= null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) {java x.naming.InitialContext ctx = newjava x.naming.InitialContext(); try {java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx)));java.lang.Object loggedInUser = runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx); if (loggedInUser!= null) { log.debug("adding userInfo to session"); req.getSession(true).setAttribute(org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (loggedInUser))); } else { log.warn("Unable to find logged user by sessionId"); } chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn("Cannot find sessionId in either request or session scope."); log.debug("Cannot configure SSO properly with SsoPostLoginServlet."); } } catch (java.lang.Exception ex) { log.error("Failed to get token for engine session {}", ex.getMessage()); log.debug("Exception", ex); log.debug("Exception", ex); } }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) {java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())!= null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }
@java.lang.Override public boolean test(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return (diskStorageType) == (disk.getDiskStorageType()); }
java privatejava.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks;java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = newjava.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }
java @java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmDao().get(getVmIdFromSnapshot()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist =!(org.ovirt.engine.core.bll.storage.disk.image.DiskFilter.filterCinderDisks(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }
public boolean validateCinder() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DiskImageDisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }
public boolean validateCinder() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DiskImageDisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }
private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForVmSnapshot(previewedSnapshotId));java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) {java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundantVolumesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll(redundantSnapshotIdsToDelete.stream().filter(( snapIdToDelete) -> isSnapshotEligibleToBeDeleted(getSnapshotDao().get(snapIdToDelete))).collect(java.util.stream.Collectors.toList())); } }
javajavajava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())!= null)? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId());java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity);java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = newjava.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.exportimport.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap())!= null) {java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = newjava.util.HashMap<>();java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm().getDiskMap().values(); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getAllowPartialImport()) { disks = disks.stream().filter(( disk) -> getImages().stream().anyMatch((image) -> image.getId().equals(disk.getId()))).collect(java.util.stream.Collectors.toList()); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getCurrentUser())); } return true; }
org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } if (!(validateMacs(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAllowPartialImport(), imageToDestinationDomainMap))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }
org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), any(java.lang.Boolean.class), any(java.util.Map.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public void performPendingOperations() {java.util.Queue<java.util.concurrent.Future<?>> operations = pendingOperations; pendingOperations = newjava.util.concurrent.ConcurrentLinkedQueue<>(); while (!(operations.isEmpty())) { ((java.util.concurrent.FutureTask) (operations.poll())); } }
@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough(true); vnicProfile.setMigratable(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPortMirroring()); assertTrue(result.isPassthrough()); assertTrue(result.isMigratable()); }
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); assertTrue(result.isMigratable()); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(customProperties, id, name, networkId, networkQosId, portMirroring, passthrough, migratable, description); }
@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); assertTrue(result.isMigratable()); }
@java.lang.Override publicjava.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getId()).append("networkId", getNetworkId()).append("networkQosId", getNetworkQosId()).append("portMirroring", isPortMirroring()).append("passthrough", isPassthrough()).append("migratable", isMigratable()).append("customProperties", getCustomProperties()).append("description", getDescription()).build(); }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return ((((((((java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(networkId, other.networkId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((portMirroring) == (other.portMirroring))) && ((passthrough) == (other.passthrough))) && (org.ovirt.engine.core.bll.network.VnicProfileUtils.equals(description, other.description))) &&java.util.Objects.equals(networkQosId, other.networkQosId))) &&java.util.Objects.equals(networkQosId, other.networkQosId)); }
@java.lang.Override public void setUp() throwsjava.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); vnicProfile.setMigratable(true); }
org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface mockVnic(boolean passthrough, boolean migratable) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mock(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class); org.ovirt.engine.core.compat.Guid vnicId = org.ovirt.engine.core.compat.Guid.newGuid(); when(vnic.getId()).thenReturn(vnicId); when(vnic.isPassthrough()).thenReturn(passthrough); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = mock(org.ovirt.engine.core.common.businessentities.network.VnicProfile.class); when(vnicProfileDao.get(vnicId)).thenReturn(profile); when(profile.isMigratable()).thenReturn(migratable); return vnic; }
@org.junit.Test public void allPassthroughVnicsMigratableNoPassthroughVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 2); assertThatAllPassthroughVnicsMigratable(true); }
org.ovirt.engine.core.bll.ValidationResult allPassthroughVnicsMigratable() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) {java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId());java.util.List<java.lang.String> nonMigratablePassthroughVnicNames = vnics.stream().filter(isVnicMigratable(vm).negate()).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(nonMigratablePassthroughVnicNames.isEmpty())) {java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", nonMigratablePassthroughVnicNames); replacements.add(java.lang.String.format("$%s %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
privatejava.util.function.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return (vnic) -> (!(vnic.isPassthrough())) || ((org.ovirt.engine.core.common.FeatureSupported.sriovHotPlugSupported(vm.getClusterCompatibilityVersion())) && (getVnicProfile(vnic).isMigratable())); }
@org.junit.Test public void notAllPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 1, 3); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED))); }
@org.junit.Test public void allPassthroughVnicsMigratableMulitpleVmsNotValid() {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); vmNotHavingPassthroughVnicsCommon(vmList.get(0).getId(), 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 0, 1); allPassthroughVnicsMigratableCommon(vmList.get(2).getId(), 4); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED))); }
@org.junit.Test public void allPassthroughVnicsMigratableMulitpleVmsValid() {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(2); assertThat(validator.allPassthroughVnicsMigratable(vmList), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void allPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 0, 3); assertThatAllPassthroughVnicsMigratable(true); }
@org.junit.Test public void allPassthroughVnicsMigratableNoVnics() { allPassthroughVnicsMigratableCommon(vm.getId(), 0); assertThatAllPassthroughVnicsMigratable(true); }
private void populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime =java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime =java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory,java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventoy cache updated in {}ms", (endTime - startTime)); }
@java.lang.Override public void run() { log.debug("Attempting to update the Inventory cache"); try { populateInventoryCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Inventory Cache: {}", e.getMessage(), e); } }
@java x.annotation.PreDestroy private void stopScheduledTasks() { dashboardCacheUpdate.cancel(true); inventoryCacheUpdate.cancel(true); }
private void populateDashboardCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime =java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime =java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, 5,java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache updated in {}ms", (endTime - startTime)); }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard; org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory; synchronized(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_LOCK) { dashboard = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY); if (dashboard == null) { org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache is empty, querying dashboard data directly"); dashboard = getDashboard(); } inventory = org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.inventoryCache.get(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY); if (inventory == null) { org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventory cache is empty, querying inventory data directly"); inventory = lookupInventory(); } } dashboard.setInventory(inventory); return dashboard; }
@java.lang.Override public void run() { log.debug("Attempting to update the Dashboard cache"); try { populateDashboardCache(); } catch (org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException e) { log.error("Could not update the Dashboard Cache: {}", e.getMessage(), e); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); autoSetVmHostname(object); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); autoSetVmHostname(object); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().isCreateImage()? org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateImage : org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateSnapshot, getCreateVDSCommandParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().setVdsmTaskIds(newjava.util.ArrayList()); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return (org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getParameters().isUseCinderCommandCallback()) || (org.ovirt.engine.core.common.FeatureSupported.dataOperationsByHSM(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getStoragePool().getCompatibilityVersion()))? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if (org.ovirt.engine.core.bll.CreateCloneOfTemplateCommand.isDataOperationsByHSM()) { return new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback(); } return null; }
private void updateVmStatistics() { statistics = getVmManager().getStatistics();java.lang.Integer reportedMigrationProgress = vdsmVm.getVmStatistics().getMigrationProgressPercent(); boolean updateMigrationProgress = (reportedMigrationProgress == null) || (getVmManager().getVmCompatibilityVersion().less(Version.v4_1)); statistics.updateRuntimeData(vdsmVm.getVmStatistics(), getVmManager().getNumOfCpus(), updateMigrationProgress); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String,java.lang.Object> map) { try { map.entrySet().stream().forEach((vmInfo) -> { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid(vmInfo.getKey());java.util.Map<?,?> properties = ((java.util.Map<?,?>) (vmInfo.getValue())); int progress =java.lang.Integer.valueOf(properties.get("progress").toString()); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(progress); }); } finally { subscription.request(1); } }
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); origin = vmStatic.getOrigin(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); clusterId = vmStatic.getClusterId(); }
public org.ovirt.engine.core.compat.Version getVmCompatibilityVersion() { return clusterDao.get(clusterId).getCompatibilityVersion(); }
java @java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent,java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) {java.lang.String tooltip; if (tooltipHtml == null) { tooltip = getTooltip(value); } else { tooltip = tooltipHtml.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), parent); } }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) {java.lang.String tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); } super.onBrowserEvent(context, parent, value, event, valueUpdater); }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) {java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey!= null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(selectedKey, keyField.getElement()); } }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), alertPanel.getElement()); } }
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip())!= null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(getNodeDisabledTooltip(), element); } }
@java.lang.Override public void setTooltip(java.lang.String tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) {java.lang.StringBuilder title = newjava.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }
public void setContentWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainerConfiguredTooltip = tooltipText; contentWidgetContainer.setTitle(tooltipText); }
public void setText(java.lang.String text) { this.setTitle(text); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) {java.lang.String tooltip = ""; if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (tooltipContent!= null) { tooltip = tooltipContent.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent,java.lang.String value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.asString().isEmpty())) {java.lang.String renderedTooltip = renderTooltip(context, parent, value); tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(renderedTooltip); } super.onBrowserEvent(context, parent, value, tooltipContent, event, valueUpdater); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors!= null) && ((errors.size()) == rowCount) : "errors must be the same size as the contents of the table!"); for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element!= null : "errors shouldn't be null if errors is the same size as the contents of the table!";java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(error, element); element.addClassName(style.invalidRow()); } else { element.removeClassName(style.invalidRow()); } } }
public static boolean haveHostsAvailableforHE(final org.ovirt.engine.core.dao.VdsDao vdsDao, final org.ovirt.engine.core.common.businessentities.VDS vds, finaljava.lang.Iterable<org.ovirt.engine.core.compat.Guid> vdsesInBatch) {java.util.Set<org.ovirt.engine.core.compat.Guid> vdsIds = newjava.util.HashSet<>(); vdsesInBatch.forEach(vdsIds::add); return vdsDao.getAllForClusterWithStatus(vds.getClusterId(), VDSStatus.Up).stream().filter(( v) ->!(v.getId().equals(vds.getId()))).filter(( v) ->!(vdsIds.contains(v))).filter(VDS::getHighlyAvailableIsConfigured).filter(VDS::getHighlyAvailableIsActive).filter(( v) ->!(v.getHighlyAvailableLocalMaintenance())).filter(( v) -> (v.getHighlyAvailableScore()) > 0).findAny().isPresent(); }
@org.ovirt.engine.ui.webadmin.Source("images/host_ha_configured.png") com.google.gwt.resources.client.ImageResource hostHaConfigured();

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc amendVolume(java.lang.String jobId,java.util.Map<java.lang.String,java.lang.Object> imgInfo,java.util.Map<java.lang.String,java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("job_id", jobId).withParameter("img_info", imgInfo).withParameter("vol_attr", volAttr).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskFormat.class, to =java.lang.String.class) public static org.ovirt.engine.core.common.businessentities.storage.QcowCompat map(org.ovirt.engine.api.model.QcowVersion qcowVersion, org.ovirt.engine.core.common.businessentities.storage.QcowCompat template) { switch (qcowVersion) { case QCOW2_V2 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.QCOW2_V3; default : return org.ovirt.engine.core.common.businessentities.storage.QcowCompat.Undefined; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QcowVersion.class, to =java.lang.String.class) public static org.ovirt.engine.api.model.QcowVersion map(org.ovirt.engine.core.common.businessentities.storage.QcowCompat qcowCompat, org.ovirt.engine.api.model.QcowVersion template) { switch (qcowCompat) { case QCOW2_V2 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V2; case QCOW2_V3 : return org.ovirt.engine.api.model.QcowVersion.QCOW2_V3; default : return null; } }
org.ovirt.engine.core.vdsbroker.AsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsyncAsync............javajava.lang.String jobId,java.util.Map<java.lang.String,java.lang.Object> imgInfo,java.util.Map<java.lang.String,java.lang.Object> volAttr);
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(params)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDelete> T fixParameters(T parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), false)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }
public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDeleteParametersBase> T fixParameters(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(parameters, storageDomainStatic.getStorageType().isFileDomain()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) {java.util.Map<com.google.gwt.safehtml.shared.SafeHtml,java.lang.String> imagesToText = getSafeHtmlStringMap(vm); if (!(imagesToText.isEmpty()))) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); } return null; }
privatejava.util.Map<com.google.gwt.safehtml.shared.SafeHtml,java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VM vm) {java.util.Map<com.google.gwt.safehtml.shared.SafeHtml,java.lang.String> res = newjava.util.LinkedHashMap<>(); if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(config.getImageResource()), config.getTooltip()); } else { com.google.gwt.resources.client.ImageResource img = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.getPoolVmImageResource(vm.getVmType(), vm.isNextRunConfigurationExists()); res.put(getImageSafeHtml(img), getPoolVmTooltip(vm.getVmType())); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.mgmtNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.isVmHostedEngineTooltip()); } return res; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(object.getVm()); }
private com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(com.google.gwt.resources.client.ImageResource imageResource) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(java.lang.Object object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }

@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.businessentities.VM vm) {java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = newjava.util.ArrayList(getSafeHtmlStringMap(vm)); if (!(imagesHtml.isEmpty()))) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
public staticjava.util.Map<java.lang.String,java.lang.Object> authenticate(java x.servlet.http.HttpServletRequest req,java x.servlet.http.HttpServletResponse response) { org.apache.http.client.methods.HttpPost request; try { request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request);java.lang.String[] credentials = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getUserCredentialsFromHeader(req);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", credentials[0])); form.add(new org.apache.http.message.BasicNameValuePair("password", credentials[1])); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static org.ovirt.engine.core.utils.EngineLocalConfig createEngineLocalConfig(java.lang.String path) throwsjava.lang.Exception { org.ovirt.engine.core.utils.EngineLocalConfig config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance();java.lang.String base = config.getProperty("ENGINE_SSO_SERVICE_URL"); org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(base + path)); request.setURI(newjava.net.URI((base + path))); request.setHeader("Accept", "application/json"); request.setHeader("Content-Type", "application/x-www-form-urlencoded"); request.setHeader("Content-Language", "en-US"); return request; }
private staticjava.util.Map<java.lang.String,java.lang.Object> search(java.lang.String token,java.util.Map<java.lang.String,java.lang.Object> params,java.lang.String queryType,java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("query_type", queryType)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { form.add(new org.apache.http.message.BasicNameValuePair("token", token)); } if (params!= null) { form.add(new org.apache.http.message.BasicNameValuePair("params", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params)))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
public staticjava.util.Map<java.lang.String,java.lang.Object> getTokenInfo(java.lang.String token,java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); if (org.apache.commons.lang.StringUtils.isNotEmpty(scope)) { form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form));java.util.Map<java.lang.String,java.lang.Object> jsonData = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request);java.util.Map<java.lang.String,java.lang.Object> ovirtData = ((java.util.Map<java.lang.String,java.lang.Object>) (jsonData.get("ovirt"))); if (ovirtData!= null) {java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> groupIds = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (ovirtData.get("group_ids"))); if (groupIds!= null) { ovirtData.put("group_ids", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.processGroupMembershipsFromJson(groupIds)); } } return jsonData; } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
public staticjava.util.Map<java.lang.String,java.lang.Object> getToken(java.lang.String grantType,java.lang.String code,java.lang.String scope,java.lang.String redirectUri) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", grantType)); form.add(new org.apache.http.message.BasicNameValuePair("code", code)); form.add(new org.apache.http.message.BasicNameValuePair("redirect_uri", redirectUri)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private staticjava.util.Map<java.lang.String,java.lang.Object> loginWithPasswordImpl(java.lang.String username,java.lang.String password,java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(5); form.add(new org.apache.http.message.BasicNameValuePair("grant_type", "password")); form.add(new org.apache.http.message.BasicNameValuePair("username", username)); form.add(new org.apache.http.message.BasicNameValuePair("password", password)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (authRecord!= null) { form.add(new org.apache.http.message.BasicNameValuePair("ovirt_auth_record", new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(authRecord))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static org.apache.http.client.methods.HttpPost createPost(java.lang.String url) throwsjava.lang.Exception { org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(newjava.net.URI(url)); request.setHeader("Accept", "application/json"); request.setHeader("Content-Type", "application/x-www-form-urlencoded"); return request; }
public staticjava.util.Map<java.lang.String,java.lang.Object> isSsoDeployed() { org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.HttpGet request; try { request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createGet("/status"); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.io.FileNotFoundException ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", Engine is initializing."); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext,java.lang.String clientId,java.lang.String token) throwsjava.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId);java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "logout")); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("token_type", "bearer")); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } }
private staticjava.util.Map<java.lang.String,java.lang.Object> getResponse(org.apache.http.client.methods.HttpUriRequest request) throwsjava.lang.Exception { try (org.apache.http.client.methods.CloseableHttpResponse response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.execute(request)) { if ((response.getStatusLine().getStatusCode()) == (org.apache.http.HttpStatus.SC_NOT_FOUND)) { throw newjava.io.FileNotFoundException(); } try (java.io.ByteArrayOutputStream os = newjava.io.ByteArrayOutputStream()) { try (java.io.InputStream input = response.getEntity().getContent()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); }java.lang.ClassLoader loader =java.lang.Thread.currentThread().getContextClassLoader();java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.class.getClassLoader()); try { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(newjava.lang.String(os.toByteArray(),java.nio.charset.StandardCharsets.UTF_8.name()),java.util.HashMap.class); } finally {java.lang.Thread.currentThread().setContextClassLoader(loader); } } } }
public staticjava.util.Map<java.lang.String,java.lang.Object> revoke(java.lang.String token,java.lang.String scope) { try { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/revoke"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(2); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.RunVmCommand.cleanupPassthroughVnics(); setFlow(null); super.rerun(); }
protected void cleanupPassthroughVnics() {java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> vnicToVfMap = getVnicToVfMap(); if (vnicToVfMap!= null) { networkDeviceHelper.setVmIdOnVfs(org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(), null, newjava.util.HashSet(vnicToVfMap.values())); } vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()); }
@java.lang.Override protected void runningFailed() { org.ovirt.engine.core.bll.RunVmCommand.cleanupPassthroughVnics(); if (memoryFromSnapshotUsed) { removeMemoryFromActiveSnapshot(); } super.runningFailed(); }
@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false); affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm4)); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }
@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm3, vm5, vm6)); when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList())).thenReturn(false, true); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isIn(vm5, vm6); verify(schedulingManager).canSchedule(eq(cluster), eq(vm5), anyList(), anyList()); verify(schedulingManager).canSchedule(eq(cluster), eq(vm6), anyList(), anyList()); }
protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVnicToVfMap()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }
protectedjava.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> getVnicToVfMap() { org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(); return hostId == null? null : vfScheduler.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), hostId); }
private void updateMetadataDevice() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(metadataDevice); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.addStorageDomainInDb(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs();java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); updateMetadataDevice(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }
private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError())!= null) { jobInfo.setStatus(cmd.inspectJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }
public org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus inspectJobError(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }
org.ovirt.engine.core.vdsbroker.StatusOnlyReturnForXmlRpcMovePV(java.lang.String jobId,java.lang.String sdUUID,java.lang.String device);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId,java.lang.String sdUUID,java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.movePV").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
public void setValue(T value, boolean fireEvents, boolean fromClick) { if (changing) { return; } else if (value == null) { updateCurrentValue(null, fireEvents); } else { boolean found = false; for (T listItem : this.valueList) { if ((listItem == value) || ((listItem!= null) && (listItem.equals(value)))) { updateCurrentValue(value, fireEvents); found = true; break; } } if (!found) { addValue(value); updateCurrentValue(value, fireEvents); } } }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents, boolean fromClick) { if (((values!= null) && ((lastValues)!= null)) && (lastValues.equals(values)) { return; } if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value!= null) { selectedList.add(value); } } } else { selectedList.clear(); for (T value : values) { if (value!= null) { selectedList.add(value); } } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
org.ovirt.engine.core.vdsbroker.StatusOnlyReturnForXmlRpcJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJobJob
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc getRedirectStorageDomain(java.lang.String jobId,java.lang.String sdUUID,java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.reduce").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling'reduceStorageDomain'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getBroker().reduceStorageDomain(org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getDeviceId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionState()) == (org.ovirt.engine.core.bll.CommandActionState.EXECUTE)? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_STARTED : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_SUCCEEDED : org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES_FAILED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }
private void endOperation() { try { disconnectHostFromDomain(); } catch (java.lang.Exception e) { log.error("Failed to disconnect the host from the domain storage servers, ignoring", e); } endActionOnDevices(); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }
private void prepareForRemove() {java.util.List<java.lang.String> devices = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorage()).stream().map(LUNs::getId).filter(( x) ->!(getParameters().getDevicesToReduce().contains(x))).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); }
private org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters createRemoveParameters(java.lang.String deviceId) { org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters p = new org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId(), deviceId); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); p.setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getVdsId()); p.setParentCommand(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters()); p.setDestinationDevices(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDstDevices()); return p; }
private void disconnectHostFromDomain() { org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()); }
protected void endActionOnDevices() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getBackend().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getContext().clone().withoutCompensationContext().withoutExecutionContext().withoutLock()); } }
.lang.StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { prepareForRemove(); connectHostToDomain(); } if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) < (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().get(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()))); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setRemoveIndex(((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) + 1)); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }
@java.lang.Override protected boolean initializeVds() { if (super.initializeVds()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVds().getId()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }
private void connectHostToDomain() { if (!(org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.StorageServerConnectionError); } }
private boolean validateReduceDeviceSupported() { if (((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool())!= null) && (!(org.ovirt.engine.core.common.FeatureSupported.reduceDeviceFromStorageDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_REDUCE_DOMAIN_DEVICE_NOT_SUPPORTED); } return true; }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId())!= null) { returnjava.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_DEVICES_ARE_BEING_EDITED)); } return super.getExclusiveLocks(); }
public org.ovirt.engine.core.bll.ValidationResult lunsInDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain,java.util.Set<java.lang.String> luns) { luns.removeAll(lunDao.getAllForVolumeGroup(storageDomain.getStorage()).stream().map(LUNs::getId).collect(java.util.stream.Collectors.toSet())); if (luns.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; }java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.validator.storage.BlockStorageDomainValidator.VAR_LUN_IDS, luns, ","); replacements.add(java.lang.String.format("$storageDomainName %s", storageDomain.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DEVICE_NOT_IN_STORAGE_DOMAIN, replacements); }
private org.ovirt.engine.core.bll.ValidationResult validateDevices() {java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().collect(java.util.stream.Collectors.toSet()); if ((devices.size())!= (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE); } return blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), devices); }
@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { failValidation(EngineMessage.ACTION_TYPE_FAILED_PARAMETERS_INVALID); } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(validateReduceDeviceSupported())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validate(validateDevices()))) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } if (!(initializeVds())) { return false; } return true; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isEnforcing()); assertNotNull(transform.getHostsRule()); assertEquals(model.getHostsRule().isEnabled(), transform.getHostsRule().isEnabled()); assertEquals(model.getHostsRule().isEnforcing(), transform.getHostsRule().isEnforcing()); assertEquals(model.getHostsRule().isPositive(), transform.getHostsRule().isPositive()); assertNotNull(transform.getVmsRule()); assertEquals(model.getVmsRule().isEnabled(), transform.getVmsRule().isEnabled()); assertEquals(model.getVmsRule().isEnforcing(), transform.getVmsRule().isEnforcing()); assertEquals(model.getVmsRule().isPositive(), transform.getVmsRule().isPositive()); }
public org.ovirt.engine.core.common.businessentities.LeaseInfo getLeaseInfo() { return leaseInfo; }
public void setLeaseInfo(org.ovirt.engine.core.common.businessentities.LeaseInfo leaseInfo) { this.leaseInfo = leaseInfo; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity!= null)? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getJob().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.types.StepMapper.map(step.getType())); } if (step.isSetDescription()) { target.setDescription(step.getDescription()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetStatus()) { target.setStatus(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } target.setProgress(step.getProgress()); target.setStartTime((step.isSetStartTime()? step.getStartTime().toGregorianCalendar().getTime() : newjava.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setEndTime((step.isSetEndTime()? step.getEndTime().toGregorianCalendar().getTime() : newjava.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); target.setExternal((step.isSetExternal()? step.getExternal().isSetExternal() : true)); return target; }
private boolean perform() { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(newjava.util.Date()); org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult invocationResult = plugOrUnplugNics(allVmPassthroughNics, PlugAction.UNPLUG); if (!(invocationResult.success)) { invocationResult.producedErrorMessages.forEach(this::addValidationMessage); return false; } if (connectLunDisks(getDestinationVdsId())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } }
private void logPlugUnplug(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { switch (plugAction) { case PLUG : log.debug("Plugging nic id='{}'", nic.getId()); break; case UNPLUG : log.debug("Unplugging nic id='{}'", nic.getId()); break; default : throw newjava.lang.RuntimeException("Unknown enum value"); } }
private org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult plugOrUnplugNic(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters(nic, plugAction, false); parameters.setVmId(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getVmId()); logPlugUnplug(nic, plugAction); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.ActivateDeactivateVmNic, parameters); return new org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult(returnValue.getSucceeded(), returnValue.getValidationMessages()); }
java @java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugOrUnplugNics(allVmPassthroughNics, PlugAction.PLUG); } finally { super.runningSucceded(); } }
public void setHostedEngineDeployed(boolean value) { this.hostedEngineDeployed = value; }
public void setHostedEngineDeployed(boolean value) { vdsDynamic.setHostedEngineDeployed(value); }
public boolean isHostedEngineDeployed() { return vdsDynamic.isHostedEngineDeployed(); }
public int hashCode() { returnjava.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName); }
public boolean isHostedEngineDeployed() { return hostedEngineDeployed; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean filtered) { return getCallsHandler().executeReadList("GetVnicProfileViewsByDataCenterId", org.ovirt.engine.core.dao.network.VnicProfileViewDaoImpl.VnicProfileViewRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userId).addValue("is_filtered", filtered)); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnDeleteImage(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String imgGUID,java.lang.String postZero, boolean discard,java.lang.String force);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnMoveImage(java.lang.String spUUID,java.lang.String srcDomUUID,java.lang.String dstDomUUID,java.lang.String imgGUID,java.lang.String vmGUID, int op,java.lang.String postZero, boolean discard,java.lang.String force);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnCopyImage(org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuidUuid
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(4), isPostZero(), discardAfterDelete, false)); }
protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }
@java.lang.Override @java.lang.SuppressWarnings("unchecked") protected boolean validateDiscardAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) {java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetDeviceList, new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageType(), false, org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds())).getReturnValue())); return validate(storageDomainValidator.isDiscardAfterDeleteLegalForNewBlockStorageDomain(luns)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0)).isDiscardAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), discardAfterDelete, false)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if ((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate(storageDomainValidator))) || (!(validate(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()))) { return false; }java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void mockStorageDomainValidator() { doReturn(storageDomainValidator).when(cmd).getStorageDomainValidator(); when(storageDomainValidator.isDiscardAfterDeleteLegalForExistingStorageDomain()).thenReturn(ValidationResult.VALID); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String imgGUID,java.lang.String[] volUUID,java.lang.String postZero, boolean discard,java.lang.String force);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID,java.lang.String srcDomUUID,java.lang.String dstDomUUID,java.lang.String imgGUID,java.lang.String vmGUID, int op,java.lang.String postZero, boolean discard,java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("dstSdUUID", dstDomUUID).withParameter("operation", op).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn merge(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String vmGUID,java.lang.String imgGUID,java.lang.String ancestorUUID,java.lang.String successorUUID,java.lang.String postZero, boolean discard);
private void updateDiscardAfterDelete() { if ((getAvailableStorageTypeItems().getSelectedItem())!= null) { boolean isBlockDomain = getAvailableStorageTypeItems().getSelectedItem().isBlockDomain(); getDiscardAfterDelete().setIsAvailable(isBlockDomain); if (isBlockDomain) { if (isNewStorage()) { getDiscardAfterDelete().setEntity(false); } else { getDiscardAfterDelete().setEntity(getStorage().isDiscardAfterDelete()); } } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String vmGUID,java.lang.String imgGUID,java.lang.String ancestorUUID,java.lang.String successorUUID,java.lang.String postZero, boolean discard) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.mergeSnapshots").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("ancestor", ancestorUUID).withParameter("successor", successorUUID).withParameter("postZero", postZero).withParameter("discard", discard).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String imgGUID,java.lang.String[] volUUID,java.lang.String postZero, boolean discard,java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.deleteVolumes").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("volumeList", newjava.util.ArrayList(java.util.Arrays.asList(volUUID))).withOptionalParameter("postZero", postZero).withOptionalParameter("discard", discard).withOptionalParameter("force", force).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String imgGUID,java.lang.String postZero, boolean discard,java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.delete").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID,java.lang.String spUUID,java.lang.String vmGUID,java.lang.String srcImgGUID,java.lang.String srcVolUUID,java.lang.String dstImgGUID,java.lang.String dstVolUUID,java.lang.String descr,java.lang.String dstSdUUID, int volType, int volFormat, int preallocate,java.lang.String postZero, boolean discard,java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("imageID", srcImgGUID).withParameter("dstSdUUID", dstSdUUID).withParameter("dstImgUUID", dstImgGUID).withParameter("dstVolUUID", dstVolUUID).withParameter("desc", descr).withParameter("volType", volType).withParameter("volFormat", volFormat).withParameter("preallocate", preallocate).withParameter("postZero", postZero).withParameter("discard", discard).withParameter("force", force).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn(response); }
public org.ovirt.engine.core.bll.network.macpool.ReadOnlyMacPool getMacPoolForCluster(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }
@java.lang.Override publicjava.lang.String toString() { return (((((((("SubchainInfo [" + "storageDomainId=") + (storageDomainId)) + ", imageGroupId=") + (imageGroupId)) + ", baseImageId=") + (baseImageId)) + ", topImageId=") + (topImageId)) + ']'; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getJobId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.PrepareMerge, parameters); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid topVolumeId, org.ovirt.engine.core.compat.Guid baseVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getJobId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.PREPARE_MERGE; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID,java.lang.String jobUUID,java.util.Map<java.lang.String,java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.prepare_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subchain_info", subchainInfo).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID,java.lang.String jobUUID,java.util.Map<java.lang.String,java.lang.String> subchainInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("srcInfo", srcInfo).append("dstInfo", dstInfo).append("collapse", collapse); }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.COLD_MERGE; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.ColdMerge, new org.ovirt.engine.core.common.vdscommands.ColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getDstInfo()), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), this); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: calling'merge'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getBroker().merge(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSrcInfo()), org.ovirt.engine.core.common.utils.LocationInfoHelper.prepareLocationInfoForVdsCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getDstInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId,java.util.Map topImage,java.util.Map baseImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid srcImageGuid, org.ovirt.engine.core.compat.Guid destImageDuid) { org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getStoragePoolId(), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), srcImageGuid), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), destImageDuid)); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.FINALIZE_MERGE; }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID,java.lang.String jobUUID,java.util.Map<java.lang.String,java.lang.String> subchainInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID,java.lang.String jobUUID,java.util.Map<java.lang.String,java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.finalize_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subchain_info", subchainInfo).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getJobId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.FinalizeMerge, parameters); }
private void updateHaMaintenanceAvailability(java.util.List items) { getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); getDisableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); if ((items == null) || ((items.size())!= 1)) { return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if ((vm == null) || (!(vm.isHostedEngine()))) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.businessentities.VDS vds) { boolean isMaintenance = vds.getHighlyAvailableGlobalMaintenance(); getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed((!isMaintenance)); getDisableGlobalHaMaintenanceCommand().setIsExecutionAllowed(isMaintenance); } }), vm.getRunOnVds()); }
@java.lang.Override publicjava.util.Map<java.lang.String,java.lang.String> getJobMessageProperties() {java.util.Map<java.lang.String,java.lang.String> props = super.getJobMessageProperties(); props.put(org.ovirt.engine.core.bll.storage.domain.STEP_DEVICE_TYPE, org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId()); return props; }
@org.junit.Test public void testFindExternalMacAddresses() { when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.lang.Boolean.FALSE); vm.setInterfaces(java.util.Arrays.asList(vNic1, vNic2)); finaljava.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }
private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.businessentities.DisplayType displayType,java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { if (displayType == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { return true; } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }
public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { for (int i = 0; i < numberOfVideoDevices; i++) { if ((vmBase.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType().getDefaultVmDeviceType(), getVideoDeviceSpecParams(vmBase), true, false); } } }
java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } else if ((java.util.Objects.equals(p.getObjectId(), MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID)) && (java.util.Objects.equals(p.getAdElementId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) { addValidationMessage(EngineMessage.SYSTEM_PERMISSIONS_CANT_BE_REMOVED_TO_EVERYONE); returnValue = false; } if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))!= null)) { addValidationMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityFullPassDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport),java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@org.junit.Test public void testGetLunsThatBreakPassDiscardFunctionalityPassDiscardFunctionalityDoesntBreak() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); assertGetLunsThatBreakPassDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), createLunWithDiscardFunctionality(2048L, true)),java.util.Collections.emptyList()); }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { boolean hostStatusLegalForSetupNetworks = (org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { org.ovirt.engine.core.bll.network.host.HostValidator.logger.error((("HostValidator::hostStatusLegalForSetupNetworks: operation can only be done when Host status is one of: {} " + "current status is {}")), org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES_STR, host.getStatus()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUS, org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES, ",",org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.size())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setOldClusterVersionOfSnapshotWithMemory(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalClusterVersion = vm.getClusterCompatibilityVersionOrigin(); originalClusterVersion = (originalClusterVersion == null)? org.ovirt.engine.core.compat.Version.v3_6 : originalClusterVersion; this.oldClusterVersionOfSnapshotWithMemory = originalClusterVersion; } else { this.oldClusterVersionOfSnapshotWithMemory = null; } }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getIrsProxy().removeVmLease(org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn removeVmLease(java.lang.String leaseUUID,java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.delete").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID,java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.create").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getIrsProxy().addVmLease(org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion());java.util.List<java.lang.String> errorMessages = newjava.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}",java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId())!= null) { addVmToPool(); } }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() {java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesSupportedAsStorageDomain", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getGlusterVolumeDao().getVolumesSupportedAsStorageDomain()); org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setSucceeded(true); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() {java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); org.ovirt.engine.core.common.errors.EngineMessage failMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE; return org.ovirt.engine.core.bll.ValidationResult.failWith(failMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, macAddress)).when(illegalDuplicateMacUsage); }
private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue!= null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }
@java.lang.Override public boolean validate() { getGlusterVolumes().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(128) }); return (getGlusterVolumes().getIsValid()) && (super.validate()); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue!= null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override protectedjava.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null? "" : glusterVolume.getName(); }
java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { driver.edit(object); glusterVolumesEditor.setVisible(false); pathEditor.setVisible(((object.getPath().getIsAvailable()) && (object.getPath().getIsChangable()))); glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterVolumesEditor.setVisible(true); pathEditor.setVisible(false); } else { glusterVolumesEditor.setVisible(false); pathEditor.setVisible(true); } } }); }
void initEditors() { linkGlusterVolumeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); glusterVolumesEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>() { @java.lang.Override protectedjava.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume) { return glusterVolume == null? "" : glusterVolume.getName(); } }); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster,java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm,java.util.Map<java.lang.String,java.lang.String> parameters) {java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> hostViolations = getHostsViolations(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages());java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> retList = newjava.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId()))? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster,java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm,java.util.Map<java.lang.String,java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) {java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> hostViolations = getHostsViolations(true, hosts, vm, messages); return hosts.stream().filter((host) ->!(hostViolations.containsKey(host.getId()))).collect(java.util.stream.Collectors.toList()); }
public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao(); }
private static org.ovirt.engine.core.common.businessentities.UsbControllerModel getUsbControllerModel(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao.get(vmBase.getId()); return org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository.getOsUsbControllerModel(vmBase.getOsId(), vm.getCompatibilityVersion()); }
@java.lang.Override publicjava.lang.String render(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { return domain!= null? domain.getName() : org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.constants.emptyStorageDomain(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem())!= null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); updateLeaseStorageDomains(); }

public void buildVmLease() {java.util.Map<java.lang.String,java.lang.Object> device = newjava.util.HashMap<>(); device.put(VdsProperties.Type, VdsProperties.VmLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); device.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId()); device.put(VdsProperties.VmLeaseId, vm.getId()); devices.add(device); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator))) { return false; }java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = Types.getInterfaceName(type); org.ovirt.api.metamodel.tool.JavaClassName containerName = Types.getContainerName(type);java Buffer.addImport(typeName);java Buffer.addImport(containerName);java x.json.stream.JsonParser.class.addLine("public static %1$s readOne(JsonReader reader) {java x.json.stream.JsonParser.class.addLine("public static %1$s readOne(JsonReader reader) {java x.json.stream.JsonParser.class.addLine("public static %1$s readOne(JsonReader reader) {java x.json.stream.JsonParser.class.addLine("public static %1$s readOne(JsonReader reader) {java Buffer.addLine("public static %1$s readOne(JsonReader reader, false);java Buffer.addLine("}");java Buffer.addLine("public static %1$s readOne(JsonReader reader, boolean started) {java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = newjava.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks());java.util.List<org.ovirt.api.metamodel.concepts.StructMember> object = newjava.util.ArrayList<>();java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = newjava.util.ArrayList<>();java.util.List<org.ovirt.api.metamodel.concepts.StructMember> objectList = newjava.util.ArrayList<>();java.util.List<org.ovirt.api.metamodel.concepts.StructMember> membersList = newjava.util.ArrayList<>();java.util.List<org.ovirt.api.metamodel.concepts.StructMember> objectList = newjava.util.ArrayList<>();java.util.List<org.ovirt.api.metamodel.concepts.StructMember> nameList = newjava.util.ArrayList<>();java.util.List<org.ovirt.api
protected void removeSnapshotsFromDB() {java.util.List<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>(findSnapshotsWithOnlyIllegalDisks()); for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snap = snapshotDao.get(snapshotId); if (snap!= null) {java.lang.String memoryVolume = snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error("Failed to remove memory '{}' of snapshot '{}'", memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }
public static org.ovirt.engine.core.bll.ValidationResult snapshotVmConfigurationBroken(org.ovirt.engine.core.common.businessentities.Snapshot snapshot,java.lang.String vmName) { return!(snapshot.isVmConfigurationBroken())? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION,java.lang.String.format("$VmName %1$s", vmName),java.lang.String.format("$SnapshotName %1$s", snapshot.getDescription())); }
privatejava.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() {java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot);java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = newjava.util.HashSet<>(); newerSnapshots.forEach((snapshot) -> { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); if (vm!= null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (vm.getImages().stream().allMatch((diskImage) -> (diskImage.getImageStatus()) == ImageStatus.ILLEGAL)); if (shouldRemove) { snapshotsToRemove.add(snapshot.getId()); } } }); return snapshotsToRemove; }
public boolean validate() { if ((backingFile) == null) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageFileNotExist()); return false; } if (backingFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.uploadImageBackingFileUnsupported()); return false; } return true; }
..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
private boolean isAttributes(com.thoughtworks.qdox.model.JavaMethod Method) { return Method.getName().equals("attributes"); }
void analyzeMethod(com.thoughtworks.qdox.model.JavaClass Class, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName( Class, method); analyzeAnnotations( Class, method); analyzeDocumentation( Class, method); Class.getMethods().forEach(( x) -> analyzeMethodMember(x, method)); com.thoughtworks.qdox.model.JavaMethod attributesMethod = Class.getMethod("attributes", null, false); if (attributesMethod!= null) { org.ovirt.api.metamodel.analyzer.AttributesAnalyzer attributesAnalyzer = new org.ovirt.api.metamodel.analyzer.AttributesAnalyzer(); attributesAnalyzer.analyzeAttributes(attributesMethod.getSourceCode(), method.getParameters()); } method.setDeclaringService(service); service.addMethod(method); }
publicjava.util.List<org.ovirt.api.metamodel.concepts.Parameter.AttributeNode> getNodes() { return nodes; }
public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getNode(org.ovirt.api.metamodel.concepts.Name name) { for (org.ovirt.api.metamodel.concepts.Parameter.AttributeNode node : nodes) { if (node.getName().equals(name)) { return node; } } return null; }
public org.ovirt.api.metamodel.concepts.Parameter.AttributeNode getAttributes() { return attributes; }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { finaljava.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.VNIC_PROFILE1_NAME,java.util.Arrays.asList(emptySourceMapping)); assertFalse(actual.isPresent()); }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { finaljava.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(null, null,java.util.Arrays.asList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@java.lang.Override public <U extends T>java x.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass,java.lang.annotation.Annotation... annotations) { return createMockInstance(aClass); }
java privatejava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = newjava.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); finaljava.util.Set<org.ovirt.engine.core.common.businessentities.VnicProfile> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = newjava.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } finaljava.util.Set<org.ovirt.engine.core.common.businessentities.VnicProfile> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel model) { driver.edit(model); refreshMappingsTable(model.getMappingModelRows()); model.getMappingModelRows().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshMappingsTable(model.getMappingModelRows()); } }); cluster.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.constants.importVm_destCluster()); }
private void refreshMappingsTable(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel> mappingModelRows) { vnicProfileMappingsTable.asEditor().edit(mappingModelRows); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel flush() { return driver.flush(); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ListModel getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel object) { return object.getTargetVnicProfile(); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getTargetVnicProfile() { return targetVnicProfile; }
privatejava.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getExternalVnicProfileMappings(org.ovirt.engine.core.common.businessentities.Cluster cluster) { finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vnicProfileMappingEnities = externalVnicProfilesPerTargetCluster.get(cluster); finaljava.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = newjava.util.ArrayList(vnicProfileMappingEnities.size()); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity vnicProfileMappingEnity : vnicProfileMappingEnities) { result.add(new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnicProfileMappingEnity)); } return result; }
private void createVnicProfileMappingsModel() { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingsModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingsModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingsModel.initialize(); }
private void selectTargetVnicProfileByPredicate(org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate) { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(targetVnicProfile.getItems(), predicate, VnicProfileView.EMPTY); targetVnicProfile.setSelectedItem(vnicProfile); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getEntity().setVnicProfileId(getTargetVnicProfileId()); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if ((getEntity().getVnicProfileId()) == null) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { returnjava.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } selectTargetVnicProfileByPredicate(predicate); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if (getEntity().isChanged()) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { returnjava.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { returnjava.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName()); } }; } selectTargetVnicProfileByPredicate(predicate); }
private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId() { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView selectedVnicProfile = targetVnicProfile.getSelectedItem(); if ((selectedVnicProfile == null) || (selectedVnicProfile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY))) { return null; } else { return selectedVnicProfile.getId(); } }
private void onVnicProfileMap() { if ((getWindow())!= null) { return; } createVnicProfileMappingsModel(); setConfirmWindow(vnicProfileMappingsModel); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel.VNIC_PROFILE_MAPPING_COMMAND.equals(command.getName())) { onVnicProfileMap(); } }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model,?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (source.getVnicProfileMappingCommand())) { return vnicProfileMappingsPopupPresenterWidgetProvider.get(); } return super.getModelPopup(source, lastExecutedCommand, windowModel); }
@java.lang.Override protectedjava.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile) { return profile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)? org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.messages.emptyProfile().asString() : org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.register.VnicProfileMappingsView.messages.profileAndNetworkSelected(profile.getName(), profile.getNetworkName()).asString(); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) {java.lang.String problem; if ((registerVmData.getError())!= null) { problem = registerVmData.getError(); } else { problem = registerVmData.getWarning(); } return problem == null? null : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(problem); }
private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { finaljava.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } } }; registerVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } }
@java.lang.Override public void initialize() { getCluster().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { postClustersInit(); } }); super.initialize(); vmsById = mapVmsById(getEntities().getItems()); }
private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vmData,java.lang.String message,java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { finaljava.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { clusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { clusterVnicProfileMappings = newjava.util.HashSet(); externalVnicProfilesPerTargetCluster.put(cluster, clusterVnicProfileMappings); } finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> vmVnicProfiles = getNewVnicProfileMappings(registerVmData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } }
java privatejava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = newjava.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping)) { result.add(newMapping); } } return result; }
privatejava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> mapVmsById(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> vms) { finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData> result = newjava.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData vm : vms) { result.put(vm.getVm().getId(), vm); } return result; }
public long setArik(long arik) { long result = this.arik; this.arik = arik; return result; }
@java x.annotation.PostConstruct public void init() { setArik(java.lang.System.nanoTime()); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic!= null) { updateStaticFields(vmStatic); } }
void proceedDownVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) { clearVm(VmExitStatus.Normal,java.lang.String.format("VmManager %s shutdown complete", getVmManager().getName()), VmExitReason.Success); return; } destroyVm(); if (!(isVmRunningInDatabaseOnMonitoredHost())) { return; } logVmStatusTransition(); switch (dbVm.getStatus()) { case SavingState : resourceManager.internalSetVmStatus(dbVm, VMStatus.Suspended); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (vdsmVm.getVmDynamic().getExitStatus()) { case Normal : handOverVm(); break; case Error : abortVmMigration(); if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } break; default : auditVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVm.getVmDynamic().getExitMessage(), vdsmVm.getVmDynamic().getExitReason()); switch (vdsmVm.getVmDynamic().getExitStatus()) { case Error : if (resourceManager.isVmInAsyncRunningList(vdsmVm.getVmDynamic().getId())) { setRerunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } break; case Normal : resourceManager.removeAsyncRunningVm(vdsmVm.getVmDynamic().getId()); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } } }
private void proceedDisappearedVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) { clearVm(VmExitStatus.Normal,java.lang.String.format("VmManager %s shutdown complete", getVmManager().getName()), VmExitReason.Success); return; } switch (dbVm.getStatus()) { case MigratingFrom : handOverVm(); break; case PoweringDown : clearVm(VmExitStatus.Normal,java.lang.String.format("VmManager %s shutdown complete", getVmManager().getName()), VmExitReason.Success); if (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error,java.lang.String.format("Could not find VM %s on host, assuming it went down unexpectedly", getVmManager().getName()), VmExitReason.GenericError); if (resourceManager.isVmInAsyncRunningList(dbVm.getId())) { setRerunFlag(); break; } if (getVmManager().isColdReboot()) { setColdRebootFlag(); break; } if (getVmManager().isAutoStart()) { setAutoRunFlag(); break; } } }
public long getArik() { return arik; }
private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue())!= null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setBytesSent(rv.getBytesSent()); startStatusPolling(); model.stopProgress(); model.getCancelCommand().execute(); } else { setErrorMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue())!= null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal())!= (getImageSize())) { if ((rv.getBytesTotal()) == 0) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeUploadOriginatedInAPI()); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.RESUMING); final org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeUploadStartTransfer(result); } }, model); } else { setErrorMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeResumeMessage(result.getReturnValue().getActionReturnValue())); } model.stopProgress(); }
private boolean hasBootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (hasIpv4BootProtocol(ipConfiguration)) || (hasIpv6BootProtocol(ipConfiguration)); }
private org.ovirt.engine.core.bll.validator.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.bll.validator.NetworkClusterId networkClusterId = new org.ovirt.engine.core.bll.validator.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
private boolean hasIpv6BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv6PrimaryAddressSet()) && ((ipConfiguration.getIpv6PrimaryAddress().getBootProtocol())!= (Ipv6BootProtocol.NONE)); }
private boolean validBootProtocolForRoleNetwork() { if (!(isRoleNetwork())) { return true; } org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (ipConfiguration == null) { return false; } if (getNetworkCluster().isMigration()) { return hasBootProtocol(ipConfiguration); } return hasIpv4BootProtocol(ipConfiguration); }
org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.bll.validator.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithTheSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.bll.validator.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null)? null : oldAttachment.getId(); boolean when = (oldAttachment!= null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }
private boolean hasIpv4BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.hasIpv4PrimaryAddressSet()) && ((ipConfiguration.getIpv4PrimaryAddress().getBootProtocol())!= (Ipv4BootProtocol.NONE)); }
protected org.ovirt.engine.core.bll.validator.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Remove ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endWithFailure(); log.error("Failed to transfer disk {} (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Remove ImageTransfer id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endSuccessfully(); log.info("Successfully transferred disk {} (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error(("Runnable rejected due to: " + (e.getMessage())), e); return false; } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCallback(); }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession() { return geoRepDao.getById(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getGeoRepSessionId()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("syncData") public void syncData(java.lang.String storageDomainId,java.lang.String geoRepSessionId) { try { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(new org.ovirt.engine.core.compat.Guid(storageDomainId)); if (storageDomain == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No storage domain found"); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = geoRepDao.getById(new org.ovirt.engine.core.compat.Guid(geoRepSessionId)); if (session == null) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("No geo-replication session found"); } backend.runInternalAction(VdcActionType.GlusterStorageSync, new org.ovirt.engine.core.common.action.GlusterStorageSyncCommandParameters(storageDomain.getId(), session.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.dr.GlusterStorageDomainDRSyncJob.log.error("Error running dr sync", e); } }
public void setSnapshotIdVmIds(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> snapshotIdVmIds) { this.snapshotIdVmIds = snapshotIdVmIds; }
publicjava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> getSnapshotIdVmIds() { return snapshotIdVmIds; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersSource(org.ovirt.engine.core.common.businessentities.StorageDomainDR storageDomainDR) { return getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainDR.getStorageDomainId()).addValue("georep_session_id", storageDomainDR.getGeoRepSessionId()).addValue("sync_schedule", storageDomainDR.getSyncSchedule()).addValue("qrtz_job_id", storageDomainDR.getJobId()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule other = ((org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule) (obj)); return (((java.util.Objects.equals(frequency, other.frequency)) && (java.util.Objects.equals(days, other.days))) && (java.util.Objects.equals(hour, other.hour))) && (java.util.Objects.equals(mins, other.mins)); }
publicjava.lang.String getCronExpression() {java.lang.String cronExpression = ""; switch (frequency) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s * *? *", mins, hour); break; case WEEKLY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s %s? * %s *", mins, hour, getDaysCron()); break; case NONE : cronExpression = ""; } return cronExpression; }
public org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule get(java.lang.String cronExpression) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); if (((cronExpression == null) || (cronExpression.isEmpty())) || ((cronExpression.split(" ").length)!= 7)) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.NONE); return schedule; }java.lang.String[] cronParts = cronExpression.split(" "); if (cronParts[5].equals("?")) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.DAILY); } else { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.WEEKLY); } schedule.setMins(java.lang.Integer.valueOf(cronParts[1])); schedule.setHour(java.lang.Integer.valueOf(cronParts[2])); return schedule; }
privatejava.lang.String getDaysCron() {java.lang.StringBuffer sb = newjava.lang.StringBuffer(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Day day : days) { sb.append(day.name()).append(","); } sb.deleteCharAt(sb.length()); return sb.toString(); }
private boolean doesNicHaveMacAddress(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { return (vmNic.getMacAddress())!= null; }
public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpool.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, false).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) {java.lang.String str = iface.getMacAddress(); if (!(org.ovirt.engine.core.bll.validator.VmNicMacsUtils.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID,java.lang.String.format("$nicName %1$s", iface.getName()),java.lang.String.format("$macAddress %1$s", iface.getMacAddress())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void replaceInvalidEmptyStringMacAddressesWithNull(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNetworkInterface : vmNetworkInterfaces) {java.lang.String macAddress = vmNetworkInterface.getMacAddress(); if ((macAddress!= null) && (macAddress.isEmpty())) { vmNetworkInterface.setMacAddress(null); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool();java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = newjava.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; }java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces(); vmNicMacsUtils.replaceInvalidEmptyStringMacAddressesWithNull(vmNetworkInterfaces); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } return validateAfterCloneVm(domainsMap); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds());java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.orElse(null)); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if (org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds().equals(vdsToRunOn.get())) { return false; } if ((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
java privatejava.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() {java.util.List<org.ovirt.engine.core.compat.Guid> blackList = newjava.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if ((org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId())!= null) { blackList.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blackList; }
javajava.lang.Override protected void processIncoming() throwsjava.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.ibuff) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, headerBuffer.position()); if ((this.message) == null) { this.ibuff = null; this.message = null; return; } int contentLength = this.message.getContentLength(); if (contentLength == (-1)) {java.lang.String[] messages = newjava.lang.String(headerBuffer.array(), UTF8).split(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.END_OF_MESSAGE); for (java.lang.String message : messages) { message = message + (END_OF_MESSAGE); emitOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse(message.getBytes(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF8))); } return; } int length = this.message.getContent().length; if (contentLength == (length - 1)) { emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this.ibuff =java.nio.ByteBuffer.allocate(((contentLength - length) + 1)); } else { byte[] content = this.message.getContent(); this.message.withContent(java.util.Arrays.copyOfRange(content, 0, (contentLength + 1))); emitOnMessageReceived(this.message); headerBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1), content.length)); return; } } read(this.ibuff); updateLastIncomingHeartbeat(); int length = (this.message.getContent().length) + (this.ibuff.position()); if ((this.message.getContentLength())!= (length - 1)) { return; } this.message.withAdditionalContent(this.ibuff.array()); emitOnMessageReceived(this.message); }
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) {java.lang.String volumeType = translator.translate(volumeEntity.getVolumeType()); if (volumeEntity.getIsArbiter()) { volumeType += " " + (org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().arbiter()); } getDetailModel().setVolumeTypeSilently(volumeType); } }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) {java.lang.String qualifiedName = brick.getQualifiedName(); if (brick.getIsArbiter()) { qualifiedName += " " + (org.ovirt.engine.ui.webadmin.section.main.view.tab.gluster.SubTabVolumeBrickView.constants.arbiter()); } return qualifiedName; }
@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (parentModel)); if ((model.getVmNumaNodes())!= null) { this.getVm().setvNumaNodeList(model.getVmNumaNodes()); } vmsWithvNumaNodeList.add(vm); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithvNumaNodeList) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setvNumaNodeList(vm.getvNumaNodeList()); break; } } } }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.codehaus.jackson.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) {java.lang.Object result = null; try {java.util.Map apiResult = activateApi(params); if ((fieldName())!= null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error("Failed to run api call", e);java.util.Map<java.lang.String,java.lang.Object> error = newjava.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); return builder.withError(error); } if (result instanceofjava.util.Map) { builder = builder.withResult(((java.util.Map) (result))); } else if (result instanceofjava.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceofjava.lang.String) { builder = builder.withResult(((java.lang.String) (result))); } else if ((result!= null) && (result.getClass().isArray())) {java.util.List tempList = newjava.util.ArrayList();java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); builder = builder.withResult(tempList); } else { org.ovirt.vdsmfake.rpc.json.commands.JsonCommand.log.error("Failed to get response data --> " + result), newjava.lang.Exception()); } return builder; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getQueryReturnValue().setReturnValue(storageDomainDRDao.get(org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getParameters().getId())); }
private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); this.vmBackupModel.setIsAvailable(false); this.templateBackupModel.setIsAvailable(false); vmRegisterListModel.setIsAvailable(false); templateRegisterListModel.setIsAvailable(false); diskImageRegisterListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); templateListModel.setIsAvailable(false); isoListModel.setIsAvailable(false); diskListModel.setIsAvailable(false); registerDiskListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); this.diskProfileListModel.setIsAvailable(false); this.storageDRModel.setIsAvailable(false);java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain>> list = newjava.util.ArrayList<>(); list.add(generalModel); list.add(dcListModel); list.add(vmBackupModel); list.add(templateBackupModel); list.add(vmRegisterListModel); list.add(templateRegisterListModel); list.add(diskImageRegisterListModel); list.add(vmListModel); list.add(templateListModel); list.add(isoListModel); list.add(diskListModel); list.add(registerDiskListModel); list.add(snapshotListModel); list.add(this.diskProfileListModel); list.add(this.storageDRModel); list.add(permissionListModel); setDetailModels(list); }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel,?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel) (getWindow()));java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramerterList = newjava.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(disk.getId(), getEntity().getId()); paramerterList.add(parameters); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveDisk, paramerterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }
private void updateActionAvailability() {java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR> domainDRs = ((getSelectedItems())!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomainDR>cast(getSelectedItems()) : newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainDR>(); getRemoveCommand().setIsExecutionAllowed(((domainDRs.size()) > 0)); }
private void remove() { if ((getWindow())!= null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDisksTitle()); model.setHelpTag(HelpTag.remove_disk); model.setHashName("remove_disk"); model.getLatch().setIsAvailable(false);java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = newjava.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); items.add(diskModel); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand onRemoveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(onRemoveCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); model.getCommands().add(cancelCommand); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainDR, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }
private void onSave() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setHour(model.getHour().getEntity()); syncSchedule.setMins(model.getMins().getEntity()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem())!= null)? model.getGeoRepSession().getSelectedItem().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncSchedule, storageDomain.getId(), georepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorageSync, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { model.getGeoRepSession().setItems(geoRepSessions); model.getGeoRepSession().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(selectedDR.getGeoRepSessionId()))); }
public boolean isQualifyForOnDemandCheckUpdates() { return (((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational))) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { for (org.ovirt.engine.core.common.businessentities.VDS host : hostDao.getAll()) { if (!(host.getStatus().isQualifyForCheckUpdates())) { org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.warn("Check for available updates is skipped for host '{}' due to unsupported host status '{}'", host.getName(), host.getStatus()); continue; } org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.executor.submit(() -> hostUpdatesChecker.checkForUpdates(host)); } }
public boolean isQualifyForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }
public void setVdsName(finaljava.lang.String value) { vdsName = value; }
protected void executeSPMMergeCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo().getBaseImageId())); org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SPMColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand()); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.setSucceeded(true); } }
private void mockSnapshotValidator() { when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }
@org.junit.Before public void initializeMocks() { doReturn(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.class) { org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.class.getgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetgetget
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostList().setIsAvailable(true); getVmList().setIsAvailable(true); getUserList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); getHostList().setSearchString("Host:"); getVmList().setSearchString("Vms:"); getUserList().setSearchString("Users:"); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem!= (getHostList()))) && (oldSelectedItem!= (getVolumeList()))) && (oldSelectedItem!= (getVmList()))) && (oldSelectedItem!= (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) {java.lang.String prefix = "";java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }
private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { if (!(m instanceof org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel)) { m.setIsAvailable(false); } } }
private org.ovirt.engine.ui.uicommonweb.models.tags.TagModel findRootNode(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel tagModel) { if ((tagModel.getParent())!= null) { return findRootNode(tagModel.getParent()); } return tagModel; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SelectedItems".equals(args.propertyName)) { if ((getSelectionModel().getSelectedObject())!= null) { org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent.fire(this, findRootNode(getSelectionModel().getSelectedObject())); } } }
public static org.ovirt.engine.ui.webadmin.plugin.entity.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { if (model!= null) { org.ovirt.engine.ui.webadmin.plugin.entity.TagObject result = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); com.google.gwt.core.client.JsArray<org.ovirt.engine.ui.webadmin.plugin.entity.TagObject> children = com.google.gwt.core.client.JavaScriptObject.createArray().cast(); result.setValueAsString("description", model.getDescription().getEntity()); result.setValueAsString("name", model.getName().getEntity()); result.setValueAsBoolean("selected", model.getSelection()); if ((model.getParent()) == null) { result.setValueAsDouble("selectedTagCount", org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(model)); } for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { children.push(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(child)); } result.setValueAsJavaScriptObject("children", children); return result; } else { return null; } }
private staticjava.lang.Double calculateSelectedTagCount(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { double result = 0; for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { result += org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(child); } if (model.getSelection()) { result++; } return result; }
@java.lang.Override public void onTagActivated(org.ovirt.engine.ui.webadmin.uicommon.model.TagActivatedEvent event) { manager.invokePluginsNow("TagActivated", org.ovirt.engine.ui.webadmin.plugin.jsni.JsArrayHelper.createMixedArray(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(event.getRoot()))); }
public void setTasksMonitored(boolean tasksMonitored) { this.tasksMonitored = tasksMonitored; }
public boolean isTasksMonitored() { return isTasksMonitored; }
public void setMonitored(boolean monitored) { this.monitored = monitored; }
public void setJobRequired(boolean jobRequired) { this.jobRequired = jobRequired; }
public void setCompleted(boolean completed) { this.completed = completed; }
private org.ovirt.engine.core.common.utils.PersistedCommandContext buildPersistedCommandContext() { org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = new org.ovirt.engine.core.common.utils.PersistedCommandContext(); persistedCommandContext.setJobId((((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null)? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId())); persistedCommandContext.setStepId((((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null)? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId())); persistedCommandContext.setExecutionMethod(((getExecutionContext()) == null? ExecutionContext.ExecutionMethod.AsStep.toString() : getExecutionContext().getExecutionMethod().toString())); if ((getExecutionContext())!= null) { persistedCommandContext.setCompleted(getExecutionContext().isCompleted()); persistedCommandContext.setJobRequired(getExecutionContext().isJobRequired()); persistedCommandContext.setMonitored(getExecutionContext().isMonitored()); persistedCommandContext.setShouldEndJob(getExecutionContext().shouldEndJob()); persistedCommandContext.setTasksMonitored(getExecutionContext().isTasksMonitored()); } return persistedCommandContext; }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.utils.PersistedCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(persistedCommandContext.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(persistedCommandContext.getStepId())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getExecutionMethod())) { executionContext.setExecutionMethod(ExecutionContext.ExecutionMethod.valueOf(persistedCommandContext.getExecutionMethod())); } executionContext.setCompleted(persistedCommandContext.isCompleted()); executionContext.setJobRequired(persistedCommandContext.isJobRequired()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setShouldEndJob(persistedCommandContext.shouldEndJob()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid parentCommandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.common.utils.PersistedCommandContext commandContext, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.compat.CommandStatus status, boolean callbackEnabled, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue,java.util.Map<java.lang.String,java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setCommandContext(commandContext); entity.setCommandType(actionType); entity.setCommandParameters(params); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setReturnValue(returnValue); entity.setData(data); return entity; }
public boolean isCompleted() { return isCompleted; }
publicjava.lang.String getExecutionMethod() { return executionMethod; }
public void setExecutionMethod(java.lang.String executionMethod) { this.executionMethod = executionMethod; }
public boolean isJobRequired() { return isJobRequired; }
public boolean isMonitored() { return isMonitored; }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) {java.util.Map<java.lang.String,java.lang.Object> returnVal = null; if (event.isExternal()) { returnVal = getCallsHandler().executeModification("InsertExternalAuditLog", getExternalEventSqlMapper(event)); } else { returnVal = getCallsHandler().executeModification("InsertAuditLog", getSqlMapper(event)); } event.setAuditLogId(((java.lang.Integer) (returnVal.get("audit_log_id")))); }
private staticjava.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) {java.lang.String message; if (loggerString.isEmpty()) { message = auditLog.toStringForLogging(); } else { message =java.text.MessageFormat.format(loggerString, auditLog.getMessage()); } returnjava.text.MessageFormat.format("Audit Log ID: {0}, {1}", auditLog.getAuditLogId(), message); }
public staticjava.lang.String escapeUnderScore(finaljava.lang.String customizedValue, finaljava.lang.String customizedRelation) {java.lang.String escapedValue = customizedValue; if ((customizedRelation.equalsIgnoreCase("LIKE")) || (customizedRelation.equalsIgnoreCase("ILIKE"))) {java.lang.String replaceWith = "_"; int pgMajorRelease = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG8.getValue())) { replaceWith = "\\\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } escapedValue = customizedValue.replace("_", replaceWith); } return escapedValue; }
privatejava.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine())!= null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine(); }java.lang.String recentDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((removeThisDebugSwitch) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion())!= null)) {java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.<java.util.List<java.lang.String>>getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue());java.util.Optional<java.lang.String> best = oldSupported.stream().max(( s1, s2) -> (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s1)) - (org.apache.commons.lang.StringUtils.indexOfDifference(recentDefault, s2))); org.ovirt.engine.core.bll.RunVmCommand.log.info("Emulated machine '{}' selected since Custom Compatibility Version is set for the '{}' VM", best.orElse(recentDefault), org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); return best.orElse(recentDefault); } return recentDefault; }
public staticjava.util.Map<java.lang.String,java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfo locationInfo) { if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (locationInfo)); if (ConnectionMethod.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.HttpLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info));java.util.Map<java.lang.String,java.lang.Object> infoMap = newjava.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getHeaders()); return infoMap; } } if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (locationInfo));java.util.Map<java.lang.String,java.lang.Object> infoMap = newjava.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getStorageDomainId().toString()); infoMap.put("img_id", info.getImageGroupId().toString()); infoMap.put("vol_id", info.getImageId().toString()); infoMap.put("generation", info.getGeneration()); return infoMap; } throw newjava.lang.RuntimeException("Wrong location info"); }
@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { org.ovirt.engine.api.model.ImageTransfer imageTransfer = performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); if (imageTransfer.isSetImage()) { imageTransfer.getImage().unsetLinks(); } return imageTransfer; }
@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities) { org.ovirt.engine.core.common.job.Step step = stepDao.get(stepId); if (includeSubjectEntities) { step.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(stepId)); } return step; }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId);
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.job.Step> steps = stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId()); steps.forEach((s) -> s.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(s.getId()))); org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(steps); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId(), false)); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
private void reorderNics() {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices();java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = vmNicDao.getAllForVm(org.ovirt.engine.core.bll.network.vm.ReorderVmNicsCommand.getParameters().getVmId());java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = newjava.util.ArrayList<>();java.util.List<java.lang.String> macsToReorder = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nicDevice.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic.getMacAddress()); } }java.util.Collections.sort(nicsToReorder, new org.ovirt.engine.core.bll.common.comparator.NumericSuffixNameableComparator());java.util.Collections.sort(macsToReorder); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(macsToReorder.get(i)); vmNicDao.update(nic); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { finaljava.lang.String name1 = nameable1.getName(); finaljava.lang.String name2 = nameable2.getName(); final org.ovirt.engine.core.bll.common.NumericSuffixNormalizer numericSuffixNormalizer = new org.ovirt.engine.core.bll.common.NumericSuffixNormalizer(); finaljava.util.List<java.lang.String> normalizedNames = numericSuffixNormalizer.normalize(name1, name2); return org.apache.commons.lang.ObjectUtils.compare(normalizedNames.get(0), normalizedNames.get(1)); }
org.ovirt.engine.core.common.businessentities.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("{} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); org.ovirt.engine.core.common.businessentities.HostJobStatus status = pollEntity(cmd); if (status!= null) { return status; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)); if (entityPollingCommand.isJobFencingSupported()) && (!(cmd.getParameters().getJobStarted()))) { log.info("{} id: '{}': attempting to fence job {}", cmd.getActionType(), cmd.getCommandId(), cmd.getJobId()); entityPollingCommand.attemptToFenceJob(); } return null; } if (jobsReportedByHost) { log.error("{} id: '{}': entity polling isn supported and the job isn reported by the host, " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
private void handlePolledJobInfo(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.running)) { cmd.getParameters().setJobStarted(true); cmd.persistCommand(cmd.getParameters().getParentCommand(), true); } if ((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed)) { return; } if ((jobInfo.getError())!= null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.done)) { jobInfo.setProgress(null); } } }
org.ovirt.engine.core.vdsbroker.StatusOnlyReturn setVolumeVolume(java.lang.String jobId,java.util.Map<?,?> volumeInfo);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn setVolumeGeneration(java.lang.String jobId,java.util.Map<?,?> volumeInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.set_volume_generation").withParameter("job_id", jobId).withParameter("vol_info", volumeInfo).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error("Command {} id: '{}': entity polling isn supported and the job isn reported by the host, " + "it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error("Command {} id: '{}': failed to determine the actual job status, considering as failed as per " + "the command implementation."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }
@java.lang.Override public boolean isJobFencingSupported() { return isDstVdsmImage(); }
@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p); } }
protected void initEffectiveCompatibilityVersion() { org.ovirt.engine.core.compat.Version effectiveCompatibilityVersion = (org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils.getInstance().getSupportedClusterLevels().contains(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getCustomCompatibilityVersion()))? org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(), this::getCluster) : org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(this::getCluster); setEffectiveCompatibilityVersion(effectiveCompatibilityVersion); }
public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("Execution executeVdsBrokerCommand: calling 'copyVolumeData'"); boolean b = true; if (b) { status = org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getBroker().copyData(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getDstInfo())); } else { status = createFailStatus(); } org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.proceedProxyReturnValue(); }
protected boolean validateLeaseStorageDomain(org.ovirt.engine.core.compat.Guid leaseStorageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(leaseStorageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(validator.isDomainExistAndActive()))) { return false; } if (getStoragePoolId().equals(domain.getStoragePoolId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_LEASE_STORAGE_IS_NOT_A_PART_OF_POOL); } return true; }
@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())) { if (validateLeaseStorageDomain(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId())) { if (!(addVmLease(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()))) { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_STORAGE_DOMAIN_ERROR); } } else { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().setLeaseStorageDomainId(null); auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_COMPAT_VERSION); } } super.executeVmCommand(); }
publicjava.lang.String getConfigurationValue(java.lang.String value) {java.lang.String extraOption = ""; if (value.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)) { extraOption =java.lang.String.format("%s",java.lang.String.valueOf(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)); } return (((org.ovirt.engine.core.common.businessentities.network.BondMode.MODE) + (value)) + " " + extraOption)); }
void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor(new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor.NullSafeSuggestBoxRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo>() { @java.lang.Override publicjava.lang.String getReplacementStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo option) { return option.getKey(); } @java.lang.Override publicjava.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data == null? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString(); } }); }
@java.lang.Override publicjava.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.templates.typeAheadNameDescription((data == null? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString(); }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Handling successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo!= null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.AbstractUiCommandButton createCommandButton(java.lang.String label,java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.NAME.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton leftAlignedUiCommandButton = new org.ovirt.engine.ui.common.widget.LeftAlignedUiCommandButton(label); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }
publicjava x.ws.rs.Path("{action: (activate|migrate|stopmigrate)}/{oid}") publicjava x.ws.rs.PathAction getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid"))java x.ws.rs.PathAction getActionStatus(java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws
publicjava x.ws.rs.Path("{action: undelete}") { returnjava x.ws.rs.PathParam("action: undelete",java x.ws.rs.PathParam("oid: oid")); }
java x.ws.rs.Path("{action: (getprofilestatistics|rebalance|resetalloptions|resetoption|setoption|start|startprofile|stop|stopprofile|stoprebalance)}/{oid}") publicjava x.ws.rs.core.Response getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }
publicjava x.ws.rs.Path("{action: (activate|deactivate|export|move)}/{oid}") publicjava x.ws.rs.PathAction getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x
publicjava x.ws.rs.Path("{action:end}") { returnjava x.ws.rs.PathParam("action:end"); }
java x.ws.rs.Path("{action: (activate|approve|commitnetconfig|deactivate|enrollcertificate|fence|forceselectspm|install|iscsidiscover|iscsilogin|refresh|setupnetworks|unregisteredstoragedomainsdiscover|upgrade)}/{oid}") publicjava x.ws.rs.core.Response getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.
@java.lang.Override publicjava x.ws.rs.core.Response getActionStatus(java.lang.String action,java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id)).get(); }
publicjava x.ws.rs.Path("{action: (disable|enable|resolve)}/{oid}") publicjava x.ws.rs.PathAction getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.
publicjava x.ws.rs.core.Response.Status getActionStatus(java.lang.String action,java.lang.String oid) {java x.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; returnjava x.ws.rs.core.Response.status(status).location(uri).build(); }
public staticjava.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) {java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = newjava.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCES)) {java.lang.String name = method.getName(); if ((!("getActionStatus".equals(name))) && (!("getCreationResource".equals(name)))) {java.lang.String path = method.getAnnotation(java x.ws.rs.Path.class).value();java.lang.Class<?> type = method.getReturnType(); resources.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(type, path)); } } return resources; }
publicjava x.ws.rs.Path("{action: ${action} (isattached|refreshluns)}/{oid}") publicjava x.ws.rs.PathParam getActionStatus(org.ovirt.engine.core.common.businessentities.Action action,java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam
@java x.ws.rs.Path("{action:export} {oid:${action:export}") publicjava x.ws.rs.core.Response getActionStatus(org.ovirt.engine.core.common.businessentities.Action action,java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")
publicjava x.ws.rs.Path("{action:allocatevm}/{oid}") publicjava x.ws.rs.PathAction getActionStatus(org.ovirt.engine.core.compat.String action,java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam
java x.ws.rs.Path("{action: (attach|detach|updatevirtualfunctionsconfiguration)}/{oid}") publicjava x.ws.rs.core.Response getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java.lang.String action, @java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs
publicjava x.ws.rs.Path("{action: restore}") { returnjava x.ws.rs.PathParam("action: restore",java x.ws.rs.PathParam("oid: oid")); }
publicjava x.ws.rs.Path("{action: copy}") { return getActionResource(action, null); }
publicjava x.ws.rs.Path("{action: copy|export}") { returnjava x.ws.rs.PathParam("action: copy|export"); }
publicjava x.ws.rs.Path("{action: move}") { returnjava x.ws.rs.PathParam("action: move",java x.ws.rs.PathParam("oid: oid")); }
java x.ws.rs.Path("{action: (cancelmigration|clone|commit_snapshot|detach|export|freezefilesystems|logon|maintenance|migrate|move|preview_snapshot|reboot|reordermacaddresses|shutdown|start|stop|suspend|thawfilesystems|ticket|undo_snapshot)}/{oid}") publicjava x.ws.rs.core.Response getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java.lang.String oid) { return adaptResponse(getDelegate().getActionStatus(action, oid)); }
publicjava x.ws.rs.Path("{action:proxyticket}/{oid}") publicjava x.ws.rs.PathParam getActionStatus(org.ovirt.engine.core.common.businessentities.Action action,java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs
publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{oid}") publicjava x.ws.rs.Path("{action: replace}{action: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace}{oid: replace
publicjava x.ws.rs.Path("{action: copy|export|move}") { returnjava x.ws.rs.PathParam("action: copy|export|move"); }
publicjava x.ws.rs.Path("{action:reloadconfigurations}") { returnjava x.ws.rs.PathParam("action:reloadconfigurations"); }
@java x.ws.rs.Path("{action:resetemulatedmachine}/{oid}") publicjava x.ws.rs.core.Response getActionStatus(@java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("oid")java x.ws.rs.PathParam("action")java x.ws.rs.
@java x.ws.rs.Path("{action:importcertificates|testconnectivity}")java x.ws.rs.PathParam("action:importcertificates|testconnectivity")java x.ws.rs.PathParam("oid: oid")java x.ws.rs.PathParam("oid: oid")java x.ws.rs.PathParam("oid: oid")java x.ws.rs.PathParam("action: action",java x.ws.rs.PathParam.ActionType.importcertificates);
publicjava x.ws.rs.Path("{action:clear|end}") { returnjava x.ws.rs.PathParam("action:clear|end"); }
public void addNetworkFiltersToNic(java.util.Map<java.lang.String,java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter!= null) { finaljava.lang.String networkFilterName = networkFilter.getName();java.util.List<java.util.Map<java.lang.String,java.lang.Object>> parameters = newjava.util.LinkedList<>(); finaljava.util.List<org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter> vmNicFilterParameters = vmNicFilterParameterDao.getAllForVmNic(vmNic.getId()); vmNicFilterParameters.forEach(( nicFilterParameter) -> {java.util.Map<java.lang.String,java.lang.Object> parameter = new org.ovirt.engine.core.vdsbroker.builder.vminfo.HashMap<>(); parameter.put("name", nicFilterParameter.getName()); parameter.put("value", nicFilterParameter.getValue()); parameters.add(parameter); } ); struct.put(VdsProperties.NW_FILTER_PARAMETERS, parameters); } }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm())!= null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap())!= null)) { imageList = newjava.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); }
public static org.ovirt.vdsmfake.rpc.Api getInstance() { return org.ovirt.vdsmfake.rpc.Api.singleton; }
javajavajava.util.Map<java.lang.String,java.util.Map> hostDevListByCaps() {java.util.Map resultMap = getDoneStatus();java.util.Map<java.lang.String,java.util.Map> infoMap = map(); try { infoMap.put("computer", getCapability()); infoMap.put("pci_0000_00_1b_0", getHardware(0)); infoMap.put("pci_0000_00_1b_1", getHardware(1)); infoMap.put("pci_0000_00_1b_2", getHardware(2)); infoMap.put("pci_0000_00_1b_3", getHardware(3)); infoMap.put("pci_0000_00_1b_4", getHardware(4)); infoMap.put("pci_0000_00_1b_5", getHardware(5)); infoMap.put("pci_0000_00_1b_6", getHardware(6)); infoMap.put("pci_0000_00_1b_7", getHardware(7)); infoMap.put("pci_0000_00_1b_8", getHardware(8)); infoMap.put("pci_0000_00_1b_9", getHardware(9)); infoMap.put("pci_0000_00_1b_10", getHardware(10)); infoMap.put("pci_0000_00_1b_11", getHardware(11)); infoMap.put("pci_0000_00_1f_12", getHardware(12)); resultMap.put("info", infoMap); } catch (java.lang.NullPointerException e) { log.error("HostDevListByCaps failed due to {}", e); throw error(e); } finally { return resultMap; } }
public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }
private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); }
private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeStartElement("disk"); writer.writeAttributeString("type", "file"); writer.writeAttributeString("device", "cdrom"); writer.writeAttributeString("snapshot", "no"); writer.writeStartElement("source"); writer.writeAttributeString("file", "optional"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeEndElement();java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.ChipsetType.fromMachineType(vm.getEmulatedMachine())); writer.writeStartElement("target"); writer.writeAttributeString("dev", "hdc"); writer.writeAttributeString("bus", cdInterface); writer.writeEndElement(); writer.writeElement("readonly", null); writeAliasAndAddress(writer, device); writer.writeEndElement(); }
java @java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool();java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = newjava.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.validateSoundDevice())) { return false; } if (!(validate(org.ovirt.engine.core.bll.VmHandler.validateMaxMemorySize(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return false; } return validateAfterCloneVm(domainsMap); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev(); vmDeviceDao.remove(graphicsDev.getId()); if (noGraphicsDevicesLeft()) { getVmDeviceUtils().removeVideoDevices(getParameters().getDev().getVmId()); setVmToHeadlessMode(); setTemplateToHeadlessMode(); } setSucceeded(true); }
private void setVmToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic!= null) && ((vmStatic.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.none); vmStatic.setSingleQxlPci(false); vmStaticDao.update(vmStatic); } }
private boolean noGraphicsDevicesLeft() {java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())).getReturnValue(); return devices.isEmpty(); }
private void setTemplateToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate!= null) && ((vmTemplate.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.qxl); vmTemplateDao.update(vmTemplate); } if (getVmDeviceUtils().getVideoDevices(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceUtils().addVideoDevices(vmTemplate, getVmDeviceUtils().getNeededNumberOfVideoDevices(vmTemplate)); } }
private void setVmToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic!= null) && ((vmStatic.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmStatic.setDefaultDisplayType(DisplayType.qxl); vmStaticDao.update(vmStatic); } if (getVmDeviceUtils().getVideoDevices(getParameters().getDev().getVmId()).isEmpty()) { getVmDeviceUtils().addVideoDevices(vmStatic, getVmDeviceUtils().getNeededNumberOfVideoDevices(vmStatic)); } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if (res.getSucceeded()) { org.ovirt.engine.core.common.businessentities.GraphicsDevice device = res.getReturnValue(); if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } return true; }
public int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci())? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc =java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); returnjava.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }
private void setTemplateToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate!= null) && ((vmTemplate.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.none))) { vmTemplate.setDefaultDisplayType(DisplayType.none); vmTemplate.setSingleQxlPci(false); vmTemplateDao.update(vmTemplate); } }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> getPrevDevices() { return prevDevices; }
private void updateQcowCompat() { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo!= null) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQcowCompat(qemuImageInfo.getQcowCompat()); } } imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage()); } }
private void completeGenerationInfo() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId()); info.setGeneration(image.getImage().getGeneration()); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.persistCommandIfNeeded(); }
public staticjava.util.Map<java.lang.String,java.lang.Object> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) {java.util.Map<java.lang.String,java.lang.Object> map = newjava.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("img_id", subchainInfo.getImageGroupId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); map.put("top_id", subchainInfo.getTopImageId().toString()); if ((subchainInfo.getGeneration())!= null) { map.put("base_generation", subchainInfo.getGeneration()); } return map; }
publicjava.lang.Integer getGeneration() { return generation; }
@java.lang.Override publicjava.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("generation", generation).toString(); }
public void setGeneration(java.lang.Integer generation) { this.generation = generation; }
@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getCommandId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }
@java.lang.Override public void attemptToFenceJob() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo locationInfo = new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(info.getStorageDomainId(), info.getImageGroupId(), info.getBaseImageId(), info.getGeneration()); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters parameters = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(locationInfo); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters()); parameters.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters); }
@java.lang.Override publicjava.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImageId", baseImageId).append("topImageId", topImageId).append("generation", baseImageGeneration).build(); }
private void setNextRunMessages() { com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder();java.lang.String translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.minAllocatedMem(); try { translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.getString("minAllocatedMem"); } catch (java.util.MissingResourceException e) { }java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(translated); changedFieldsBuilder.append(bulletedItem(escapedField)); }
java @java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); if (object.isVmUnpinned()) { setVisibilityToVmUnpinningWarrningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) {java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(field); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibilityToHotChanges(object); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) {java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.host.HostUpgradeManager.getPackagesForCheckUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (finaljava.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}' packages '{}'.", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", ")); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e.getMessage()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.debug("Exception", e); throw newjava.lang.RuntimeException(e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getCopyVds().getStatus())) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime =java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring."); vdsManager.getVdsName(); } } }
boolean isMonitoringNeeded(org.ovirt.engine.core.common.businessentities.VDSStatus status) { return (status == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || (((((((status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned)) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.PendingApproval))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Down))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template!= null)? new org.ovirt.engine.core.common.businessentities.LabelBuilder(template) : new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.id(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if (model.isSetReadOnly()) { entity.readOnly(model.getReadOnly()); } if ((model.isSetVms()) && (model.getVms().isSetVms())) { model.getVms().getVms().forEach((vm) -> entity.vm(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getHosts().getHosts().forEach((host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } return entity.build(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getReadOnly(), transform.getReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getOpenstackVolumeType().getName(), transform.getOpenstackVolumeType().getName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("status", model.getStatus(), transform.getStatus()); assertEquals("sparse", model.isSparse(), transform.isSparse()); assertEquals(" propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals(" wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals(" shareable", model.isShareable(), transform.isShareable()); }
java x.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.getReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.LabelBuilder newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.getReadOnly()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getReadOnly(), transform.getReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("status", model.getStatus()); assertEquals("sparse", model.isSparse(), transform.isSparse()); assertEquals(" propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("shareable", model.isShareable(), transform.isShareable()); }
publicjava.lang.String getValidationMessage() { return validationMessage; }
private staticjava.lang.String pretty(java.lang.String xmlString) { try {java x.xml.parsers.DocumentBuilderFactory documentBuilderFactory =java x.xml.parsers.DocumentBuilderFactory.newInstance();java x.xml.parsers.DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder(); org.w3c.dom.Document document = documentBuilder.parse(new org.xml.sax.InputSource(newjava x.io.StringReader(xmlString)));java x.xml.transform.TransformerFactory transformerFactory =java x.xml.transform.TransformerFactory.newInstance();java x.xml.transform.Transformer transformer = transformerFactory.newTransformer(); transformer.setOutputProperty(java x.xml.transform.OutputKeys.ENCODING, "UTF-8"); transformer.setOutputProperty(java x.xml.transform.OutputKeys.INDENT, "yes"); transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");java x.xml.transform.stream.StreamResult result = newjava x.xml.transform.stream.StreamResult(newjava x.io.StringWriter());java x.xml.transform.Source source = newjava x.xml.transform.dom.DOMSource(document); transformer.transform(source, result); return result.getWriter().toString(); } catch (java x.xml.transform.Exception e) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("failed"); return ""; } }
java @java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("Creating VM {}", createInfo); if (Version.v4_1.lessOrEquals(vm.getCompatibilityVersion())) {java.lang.String libvirtXml = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder()).build(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds().getId()); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("Creating VM {}", org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.pretty(libvirtXml)); createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds()); }
java x.annotation.PostConstruct public void create() { log.info("optimizer service starting"); int refresh =java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); executors.getScheduler().schedule(() -> executors.getThreadPool().submit(this::refreshClusters), refresh,java.util.concurrent. TimeUnit.MILLISECONDS); }
private void refreshClusters() { log.debug("Refreshing clusters...");java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Cluster discovery failed"); return; } availableClusters.removeAll(clusterOptimizers.keySet());java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); final int maxSteps =java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("Found cluster %s", clusterId)); long timeout = (java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_TIMEOUT))) * 1000; int refresh =java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_DATA_REFRESH)); org.ovirt.optimizer.solver.thread.ClusterOptimizer optimizer = new org.ovirt.optimizer.solver.thread.ClusterOptimizer(clusterId, maxSteps, timeout, configProvider.customRuleFiles()); org.ovirt.optimizer.solver.thread.ClusterInfoUpdater updater = new org.ovirt.optimizer.solver.thread.ClusterInfoUpdater(this.client, optimizer); clusterOptimizers.put(clusterId, optimizer);java.util.concurrent.CompletableFuture.supplyAsync(optimizer, executors.getThreadPool()).thenApply(OptimalDistributionStepsSolution::getClusterId).thenApply(clusterOptimizers::remove); executors.getScheduler().schedule(() -> executors.getThreadPool().submit(updater), refresh,java.util.concurrent.TimeUnit.SECONDS); } }
javajava.util.List<java.nio.file.Path> customRuleFiles() {java.nio.file.Path dir =java.nio.file.FileSystems.getDefault().getPath(config.getProperty(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR)); finaljava.util.List<java.nio.file.Path> candidateFiles; try { candidateFiles =java.nio.file.Files.list(dir).collect(java.util.stream.Collectors.toList()); } catch (java.io.IOException e) { org.ovirt.optimizer.config.ConfigProvider.log.warn("Could not get a list of custom DRL files: {}", e); returnjava.util.Collections.emptyList(); } org.ovirt.optimizer.config.ConfigProvider.log.debug("Found {} custom DRL candidate files", candidateFiles.size()); return candidateFiles.stream().filter(( p) -> p.endsWith(".drl")).filter(java.nio.file.Files::isRegularFile).peek(( p) -> org.ovirt.optimizer.config.ConfigProvider.log.debug("Found {} custom DRL file", p)).collect(java.util.stream.Collectors.toList()); }
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice!= null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
private void addDiskVmElements() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().forEach(( dve) -> dve.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vmBase.getId()))); disk.setDiskVmElements(disk.getDiskVmElements()); } }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString());java.lang.String type = streamReader.readString(); if (type.equals("java.lang.String")) { instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } }
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Attempting to do poll for host {}."); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Task executed for host{}.", hostId); boolean succeeded = getValue(task, hostId); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Result of FutureVDSCommandType.Poll for host {}: {}", hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp(); return succeeded; }
private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task, org.ovirt.engine.core.compat.Guid hostId) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout),java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { return false; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGGER.trace("Failed to poll host {} - it's in recovery mode.", hostId, e); return false; } }
@org.junit.Test public void testGetValue() {java.lang.System.out.println("test1"); assertEquals((("getValue() for " + (value)), value.ordinal(), value.getValue()); }
@org.junit.Test public void testForValue() { assertEquals(("forValue() for " + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }
private void updatePassDiscardChangeabilityForDiskImage() { if (getStorageDomain().getSelectedItem().getStorageType().isFileDomain()) { getPassDiscard().setIsChangeable(true); } else if (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain()) { if (!(getStorageDomain().getSelectedItem().getSupportsDiscard())) { getPassDiscard().setIsChangeable(false, org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); getPassDiscard().setEntity(false); } else { getPassDiscard().setIsChangeable(((!(getIsWipeAfterDelete().getEntity())) || (getStorageDomain().getSelectedItem().getSupportsDiscardZeroesData())), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.theUnderlyingStorageDoesNotSupportDiscardWhenWipeAfterDeleteIsEnabled()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } }
private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase())!= null) && ((getSanStorageModelBase().getAddedLuns())!= null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false, null); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk())!= null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }
@java.lang.Override protected void executeQueryCommand() { try { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); } catch (java.lang.Exception e) { log.error("Failed to retrieve image list: {}", e.getCause().getMessage()); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setExceptionString(e.getCause().getMessage()); org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setSucceeded(false); } }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM.VmWithStatusForExclusive.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent =!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled =java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
privatejava.util.List<org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive> getSelectedItemsWithStatusForExclusiveLock() {java.util.List<org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive> vmsWithStatusForExclusive = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { vmsWithStatusForExclusive.add(new org.ovirt.engine.core.common.businessentities.VM.VmWithStatusForExclusive(vm)); } return vmsWithStatusForExclusive; }
@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e) { handleException(e, "network exception was caught and ignored"); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSRecoveringException e) { handleException(e, "vds recovery mode was caught and ignored"); } }
private void handleException(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e,java.lang.String reason) { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getVDSReturnValue(); vdsReturnValue.setSucceeded(false); vdsReturnValue.setExceptionString(e.toString()); vdsReturnValue.setExceptionObject(e); vdsReturnValue.setVdsError(e.getVdsError()); finaljava.lang.String msg = org.slf4j.helpers.MessageFormatter.format("Failed to poll host {} - {}.", org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason).getMessage(); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug(msg, e); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool,java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool,java.util.Collections.singletonList(macPoolDecoratorB)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor2 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor2.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }
@java.lang.Override public finaljava.lang.String toString() { returnjava.lang.String.format("%s, macPool = %s", super.toString(), macPool); }
@org.junit.Test public void testCreateDecoratedPoolByTwoDecorators() { doAnswer(( invocation) -> invocation.getArguments()[0]).when(lockedObjectFactoryMock).createLockingInstance(any(), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePoolWhileNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); assertThat(decoratedPool, is(macPoolDecoratorB));java.lang.String macToPropagate = "macToPropagate"; when(macPool.allocateNewMac()).thenReturn(macToPropagate);java.lang.String propagatedMac = decoratedPool.allocateNewMac(); assertThat(propagatedMac, is(macToPropagate)); verify(macPoolDecoratorA).allocateNewMac(); verify(macPoolDecoratorB).allocateNewMac(); verify(macPool).getId(); verify(macPool).allocateNewMac(); verifyNoMoreInteractions(macPoolDecoratorA); verifyNoMoreInteractions(macPoolDecoratorB); verifyNoMoreInteractions(macPool); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool,java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPool, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool,java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool,java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture());java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }
public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { if (!(macPools.containsKey(macPool.getId()))) { throw newjava.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); } org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Modified pool {}. (old will be deleted and new initialized from db entity)", macPool); removeWithoutLocking(macPool.getId()); initializeMacPool(macPool); } }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) {java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.warn("Failed to release with empty collection as parameter."); } else { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState strategyForMacRelease = getStrategyForMacRelease(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug("Found {} as release strategy", strategyForMacRelease); strategyForMacRelease.releaseMacsOnCommit(macsToRelease); } }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.UsingCompensationState.ReleaseMacsCompensationListener compensationListener = this.compensationListener; log.debug("Waiting macs: {} to be released in case of successful execution",java.util.Arrays.toString(macs.toArray())); compensationListener.macsToReleaseOnCommit.addAll(macs); compensationContext.addListener(compensationListener); }
public org.ovirt.engine.core.bll.network.macpool.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.bll.network.macpool.MacPool result = getMacPoolById(macPoolId,java.util.Collections.emptyList()); org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Found mac pool { } for use in compensation mechanism", result); return result; }
java @java.lang.Override publicjava.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) {java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses);java.util.List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Allocated mac addresses: {} from {}.",java.util.Arrays.toString(result.toArray()), this);java.util.Collections.sort(result); logWhenMacPoolIsEmpty(); return result; }
private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) {java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpool.MacPool pool = createPoolInternal(macPool); org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("Adding mac pool {} with macs: {}", pool,java.util.Arrays.toString(macsForMacPool.toArray())); for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Freeing mac addresses {} back to {}",java.util.Arrays.toString(macs.toArray()), this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool,java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("Creating decorated MacPool for {}", macPool); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPool, decorators); org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("Decorated {} decorated as {}.", macPool, decoratedPool); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPool.getId())); }
@java.lang.Override publicjava.lang.String toString() { returnjava.lang.String.format("%s, allowDuplicateMacAddresses = %s, defaultPool = %s, description = %s, id = %s, name = %s, ranges = %s", super.toString(), allowDuplicateMacAddresses, defaultPool, description, id, name, ranges); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { log.debug(("Cleaning successfully executed, releasing macs: {}", (macsToReleaseOnCommit))); macsToReleaseOnCommit.forEach(macPool::freeMac); this.macsToReleaseOnCommit.clear(); }
@java.lang.Override public void onSuccess() { log.debug("Successfully releasing macs {}.",java.util.Arrays.toString(super.macs.toArray())); releaseMacs(); }
@java.lang.Override public void onRollback() { log.debug("Rollback occured, releasing macs {}.",java.util.Arrays.toString(super.macs.toArray())); releaseMacs(); }
javajavajava privatejava.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> getStrategyForMacAllocation() {java.util.List<org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState> states = newjava.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUseTxDecorator = (org.ovirt.engine.core.utils.transaction.TransactionSupport.current())!= null; if (shouldUseTxDecorator) { states.add(usingTxDecoratorState); } if (states.isEmpty()) { states.add(nontransactionalState); } org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug("Found {} as allocation strategies",java.util.Arrays.toString(states.toArray())); return states; }
org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool,java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { if ((decorators == null) || (decorators.isEmpty())) { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("No MacPoolDecorators passed to decorate pool {}.", macPool); return macPool; } org.ovirt.engine.core.bll.network.macpool.MacPool result = macPool; org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory.log.debug("Decorated MacPool {} with decorators: {}.",java.util.Arrays.toString(decorators.toArray())); for (org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator decorator : decorators) { decorator.setMacPool(result); result = decorator; } return result; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("In non-compensation state, immediately releasing macs {}.",java.util.Arrays.toString(macs.toArray())); macs.forEach(macPool::freeMac); }
private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase())!= null) && ((getSanStorageModelBase().getAddedLuns())!= null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk())!= null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }
private boolean isMigrationOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster())!= null) && (clusterNetworkModel.getOriginalNetworkCluster().isMigration()); }
private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isDisplayOriginally(clusterNetworkModel)); }
private boolean isGlusterOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster())!= null) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster()); }
private boolean isDisplayOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster())!= null) && (clusterNetworkModel.getOriginalNetworkCluster().isDisplay()); }
private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isManagementOriginally(clusterNetworkModel)); }
private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allExistingNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParametersData().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } }
public void addBondToParameters(org.ovirt.engine.core.common.action.CreateOrUpdateBond bond) { assert (bond.getId()) == null : "When adding a bond to the parameters its id should be null"; org.ovirt.engine.core.compat.Guid originalIdOfBondWithTheSameName = originalBondNameToId.get(bond.getName()); bond.setId(originalIdOfBondWithTheSameName); if (originalIdOfBondWithTheSameName!= null) { removedBonds.remove(originalIdOfBondWithTheSameName); } bonds.add(bond); }
private void initOrginalBondNameToIdMap(org.ovirt.engine.core.common.action.CreateOrUpdateBond... bonds) {java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId = newjava.util.HashMap<>(); for (org.ovirt.engine.core.common.action.CreateOrUpdateBond bond : bonds) { originalBondNameToId.put(bond.getName(), bond.getId()); } dataFromHostSetupNetworksModel.setOriginalBondNameToId(originalBondNameToId); }
public void setOriginalBondNameToId(java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId) { this.originalBondNameToId = originalBondNameToId; }
@org.junit.Test public void testBondNotUpdatedAndRemovedSimultaneouslyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(params).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; assertThat(validator.bondNotUpdatedAndRemovedSimultaneously(), failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage,java.util.Collections.singletonList(bond.getName())))); }
public org.ovirt.engine.core.bll.ValidationResult bondNotUpdatedAndRemovedSimultaneously() {java.util.List<org.ovirt.engine.core.common.action.CreateOrUpdateBond> duplicateBonds = params.getCreateOrUpdateBonds().stream().filter(( bond) -> params.getRemovedBonds().contains(bond.getId())).collect(java.util.stream.Collectors.toList()); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(duplicateBonds)) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, duplicateBonds.stream().map(CreateOrUpdateBond::getName).collect(java.util.stream.Collectors.toList()))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed,java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand =!(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus()); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond(); iscsiBond.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(getQueryParameters().getId()).thenReturn(iscsiBondId); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }
@java.lang.Override protected void executeCommand() { T parameters = org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.getParameters(); addCustomValue("ApiVersion", parameters.getApiVersion()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("DeprecatingVersion", parameters.getDeprecatingVersion()); addCustomValue("RemovingVersion", parameters.getRemovingVersion()); org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.setSucceeded(true); }
java @java.lang.Override public void init(java x.servlet.FilterConfig config) throwsjava x.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersion = localConfig.getDefaultVersion();java.util.Set<org.ovirt.engine.api.restapi.DeprecatedVersionInfo> deprecatedVersionInfos = localConfig.getDeprecatedVersions(); deprecatedVersionsSet = deprecatedVersionInfos.stream().map(DeprecatedVersionInfo::getVersion).collect(java.util.stream.Collectors.toSet()); deprecatedVersionsMap = deprecatedVersionInfos.stream().collect(java.util.stream.Collectors.toMap(DeprecatedVersionInfo::getVersion,java.util.function.Function.identity())); deprecatedMessagesTime = (localConfig.getDeprecatedMessagesFrequency()) * 1000L; }
@java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Start initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Setting data center compatibility checker manager to run every 7 days"); schedulerUtil.scheduleAFixedDelayJob(this, "onTimer", newjava.lang.Class[]{ }, newjava.lang.Object[]{ }, 0, 7,java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Finished initializing {}", getClass().getSimpleName()); }
@java.lang.Override public synchronizedjava.lang.String format(java.util.logging.LogRecord record) { cal.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); cal.setTimeInMillis(record.getMillis());java.lang.String source; if ((record.getSourceClassName())!= null) { source = record.getSourceClassName(); if ((record.getSourceMethodName())!= null) { source += " " + (record.getSourceMethodName()); } } else { source = record.getLoggerName(); }java.lang.String message = formatMessage(record);java.lang.String throwable = ""; if ((record.getThrown())!= null) {java.io.StringWriter sw = newjava.io.StringWriter();java.io.PrintWriter pw = newjava.io.PrintWriter(sw); record.getThrown().printStackTrace(pw); pw.close(); throwable = sw.toString(); } returnjava.lang.String.format(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.recordFormat, org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.dateTimeFormat.format(cal.getTime()), source, record.getLoggerName(), record.getLevel().getName(), message, throwable); }
private staticjava.lang.String getLoggingProperty(java.lang.String key,java.lang.String defaultValue) {java.lang.String value =java.util.logging.LogManager.getLogManager().getProperty(key); return value == null? defaultValue : value; }
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile())!= null) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel())!= null) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) {java.lang.System.out.println(t.getMessage());java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Failed with error: ", t);java.lang.System.out.println(t.getMessage());java.lang.System.exit(1); } }
public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.utils.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.EngineMonitorService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); org.ovirt.engine.core.uutils.log.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.NotificationService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.snmp.Snmp(prop)); if (!(notificationService.hasTransports())) { throw newjava.lang.RuntimeException((("No transport is enabled, please enable at least one of SMTP (using MAIL_SERVER option) or SNMP (using SNMP_MANAGERS option) transports."))); } } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to initialize", ex);java.lang.System.err.println(ex.getMessage());java.lang.System.exit(1); } if (((args!= null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) {java.lang.System.exit(0); } try { notificationService.run(); engineMonitorService.run(); } catch (java.lang.Exception e) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to run the event notification service.", e);java.lang.System.exit(1); } }
public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.uutils.log.JavaLoggingUtils.OVIRT_LOGGER.setLevel(org.ovirt.engine.core.uutils.log.JavaLoggingUtils.parseLevel(levelName)); }
privatejava.lang.Integer calcMaxVCpu() { org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion(), architecture); }
private static int bitWidth(int n) { return n == 0? 0 : 32 - (java.lang.Integer.numberOfLeadingZeros(n)); }
public static boolean validateCpuCounts(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.ArchitectureType architecture = vm.getClusterArch().getFamily(); if (architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.x86)) { return (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(((org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getThreadsPerCpu())) + (org.ovirt.engine.core.common.utils.VmCpuCountHelper.bitWidth(vm.getCpuPerSocket()))))) <= (org.ovirt.engine.core.common.utils.VmCpuCountHelper.maxBitWidth); } return true; }
private void writevCpu(org.ovirt.engine.core.utils.ovf.xml.XmlTextWriter writer,java.util.Map<java.lang.String,java.lang.Object> createInfo, org.ovirt.engine.core.common.businessentities.VM vm) { writer.writeStartElement("vcpu"); writer.writeAttributeString("current",java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch())? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion(), vm.getClusterArch().getFamily()) :java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }
public void updateSuggestedLabels() { suggestedLabels = newjava.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelecetedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.setItems(suggestedLabels, labelModel.getSelectedItem()); } }
@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); } }); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); model.updateSuggestedLabels(); }
@java.lang.Override protected void init(final org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); } }); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.edit(model); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(flush().getSuggestedLabels()); value.setSelectedItem(""); return value; }
org.junit.Before public void init() {java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.String>> initialHashes = newjava.util.ArrayList<>(); initialHashes.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHashes).when(vmDynamicDao).getAllDevicesHashes(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.AddVmLease; }
protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalAction(VdcActionType.RemoveVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return runInternalAction(VdcActionType.AddVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.RemoveVmLease; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() {java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = newjava.util.ArrayList<>(); permissionCheckSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType().getActionGroup())); return permissionCheckSubjects; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters params = new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getVmId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(getLeaseAction(), params); if (returnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getTaskIdList().add(createTask(taskId, returnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId())); } setSucceeded(returnValue.getSucceeded()); }
@org.junit.Test public void networkInUseBySingleVm() throwsjava.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.common.businessentities.VM.class); when(vm.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByVmsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(),java.util.Collections.singletonList(vm)); }
@org.junit.Test public void networkInUseByTemplates() throwsjava.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(),java.util.Collections.singletonList(template)); }
@org.junit.Test public void networkInUseByHosts() throwsjava.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(),java.util.Collections.singletonList(host)); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId())!= null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isRemovePoolUponDetachAllVMs()) { removeVmPool(); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
protected void removeVmPool() { try { lockManager.acquireLockWait(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); if ((vmPoolDao.getVmPoolsMapByVmPoolId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()).size()) == 0) { org.ovirt.engine.core.common.action.VmPoolParametersBase removePoolParam = new org.ovirt.engine.core.common.action.VmPoolParametersBase(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); removePoolParam.setSessionId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().getSessionId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { removePoolParam.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); } org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RemoveVmPool, removePoolParam); } } finally { lockManager.releaseLock(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); }
@org.junit.Test public void replaceProductKey_definedKeyShouldBeReplaced() {java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "someKey", false); assertThat(res, containsString("<Key><![CDATA[someKey]]></Key>")); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() {java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("<ProductKey>"))); assertThat(res, not(containsString("</ProductKey>"))); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWholeSectionForCustomScript() {java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("<ProductKey>")); assertThat(res, containsString("</ProductKey>")); }
@org.junit.Test public void testLimit() {java.lang.Integer maxVCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVCpu(null, newjava.lang.Integer(16), newjava.lang.Integer(100), 2, 8); assertEquals(newjava.lang.Integer(100), maxVCpu); }
@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) {java.lang.String vmGid = event.getData("VM_GID"); if (!(vmGid.isEmpty())) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(vmGid); boolean pinned =java.lang.Boolean.valueOf(event.getData("PINNED")); int vNumaNodeIndex =java.lang.Integer.parseInt(event.getData("INDEX")); container.removeStyleName(style.dragOver()); event.preventDefault(); org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, vmGuid, pinned, vNumaNodeIndex, pNumaNodeIndex); } }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.StoragePool object) {java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = newjava.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) {java.util.Map<com.google.gwt.safehtml.shared.SafeHtml,java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }
public boolean isClusterCompatibilityLevelUpgradeNeeded() { return clusterCompatibilityLevelUpgradeNeeded; }
@org.ovirt.engine.ui.webadmin.Template("<span style='position: relative; margin-left: 3px; margin-right: 3px; white-space: nowrap; height: 14px; line-height: 14px;'>{0}</span></span>") com.google.gwt.safehtml.shared.SafeHtml text(java.lang.String text);
public void setClusterCompatibilityLevelUpgradeNeeded(boolean clusterCompatibilityLevelUpgradeNeeded) { this.clusterCompatibilityLevelUpgradeNeeded = clusterCompatibilityLevelUpgradeNeeded; }
protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.gwtbootstrap3.client.ui.constants.IconType iconType) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((("<i class='fa " + (iconType.getCssName())) + "' style='font-size:16px;color:orange'></i>")); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.Cluster object) {java.util.Map<com.google.gwt.safehtml.shared.SafeHtml,java.lang.String> imagesToText = getSafeHtmlStringMap(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.Cluster object) {java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = newjava.util.ArrayList(getSafeHtmlStringMap(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
javajava privatejava.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() {java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(( v1, v2) -> v1.compareTo(v2));java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); dataCenters.stream().forEach((dataCenter) -> dataCenter.setClusterCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }

protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)) && (java.util.Objects.equals(bootMenuEnabled, other.bootMenuEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled)); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, bootMenuEnabled, spiceFileTransferEnabled, spiceCopyPasteEnabled); }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && ((acpiEnable) == (other.acpiEnable))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, acpiEnable, win2kHackEnable, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return (((((super.equals(obj)) && (bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepDomainName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepPassword, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(destinationVdsId, other.destinationVdsId))) && (java.util.Objects.equals(customEmulatedMachine, other.customEmulatedMachine))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName, bootSequence); }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(customProperties, other.customProperties))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(clientIp, other.clientIp))) && (java.util.Objects.equals(requestingUser, other.requestingUser))) && ((initializationType) == (other.initializationType))) && (java.util.Objects.equals(runAsStateless, other.runAsStateless))) && (java.util.Objects.equals(initrdUrl, other.initrdUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelParams, other.kernelParams))) && (java.util.Objects.equals(payload, other.payload))) && ((balloonEnabled) == (other.balloonEnabled))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(getVmId(), diskPath, runAndPause, customProperties, floppyPath, clientIp, requestingUser, initializationType, runAsStateless, initrdUrl, kernelUrl, kernelParams, payload, balloonEnabled, cpuShares); }
javajava.lang.String messageFormatter(java.lang.String msg,java.lang.String vmid,java.lang.String module,java.lang.String callType) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash",java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", (((("|" + module) + "|") + callType) + "|") + vmid)); return node.toString(); }
private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, finaljava.lang.String msg, final boolean removeClient) throwsjava.lang.InterruptedException {java.util.concurrent.ExecutorService executor =java.util.concurrent.Executors.newFixedThreadPool(5);java.util.concurrent.Future<java.lang.Void> future = ((java.util.concurrent.Future<java.lang.Void>) (executor.submit(() -> { try {java.util.concurrent.TimeUnit.MILLISECONDS.sleep(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient, "virt", "VmStatus"); org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.info("VM {} set to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } catch (java.lang.Exception e) { e.printStackTrace(); } }))); try { future.get(); } catch (java.util.concurrent.ExecutionException e) { e.printStackTrace(); } }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { if (((status == (VM.VMStatus.Up) || status == (VM.VMStatus.PoweringDown) )) || (status == (VM.VMStatus.Paused)))) { return true; } return false; }
private void sendNotification(java.lang.String message,java.lang.String vmId, boolean removeClient,java.lang.String module,java.lang.String callType) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if (message == null) { org.ovirt.vdsmfake.rpc.json.JsonRpcNotification.log.warn("The message has arrived, ignore empty messages"); } send(messageFormatter(message, vmId, module, callType), vmId, removeClient); }
org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setInitializationType(InitializationType.None); if ((((InitializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if ((((InitializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); parameters.setHibernationVolHandle(getMemoryFromActiveSnapshot()); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
private void refresh() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allVds = vdsDao.getAll(org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getUserID(), org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getParameters().isFiltered());java.lang.StringBuilder sb = newjava.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VDS vds : allVds) { if ((sb.length()) > 0) { sb.append(','); } sb.append(HTTPS); sb.append(vds.getHostName()); } cachedResult = sb.toString(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.log.debug("Default list of origins refreshed to: {}", cachedResult); }
privatejava.lang.String mergeOrigins(java.lang.String fromConfig,java.lang.String fromDefault) { if ("*".equals(fromConfig)) { return fromConfig; } if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return fromDefault; } return (fromConfig + ",") + fromDefault; }
privatejava.lang.String getDefaultAllowedOrigins() throwsjava x.servlet.ServletException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runPublicQuery(VdcQueryType.GetDefaultAllowedOrigins, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase()); if (!(value.getSucceeded())) { throw newjava x.servlet.ServletException("Can't get list of default origins"); } return value.getReturnValue(); }
private void refreshIfNeeded() { long now =java.lang.System.currentTimeMillis(); if (((lastRefresh) + (DELAY)) < now) { refresh(); lastRefresh = now; } }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case CheckDBConnection : case GetDbUserBySession : case GetEngineSessionIdForSsoToken : case ValidateSession : case GetDefaultAllowedOrigins : return runQueryImpl(actionType, parameters, false); case GetConfigurationValue : org.ovirt.engine.core.common.queries.GetConfigurationValueParameters configParameters = ((org.ovirt.engine.core.common.queries.GetConfigurationValueParameters) (parameters)); switch (configParameters.getConfigValue()) { case VdcVersion : case ProductRPMVersion : case ApplicationMode : case UserSessionTimeOutInterval : case CORSSupport : case CORSAllowedOrigins : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }
@java.lang.Override protected void executeQueryCommand() { refreshIfNeeded(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getQueryReturnValue().setReturnValue(cachedResult); }
protectedjava.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> initParametersForPassthroughVnics() {java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> result = getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return result; }
org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
public int getControllerForScsiDisk(org.ovirt.engine.core.common.businessentities.VmDevice disk, org.ovirt.engine.core.common.businessentities.VM vm) {java.util.Map<java.lang.String,java.lang.String> address = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(disk.getAddress());java.lang.String controllerStr = address.get(VdsProperties.Controller); int defaultIndex = getDefaultVirtioScsiIndex(vm); if (org.apache.commons.lang.StringUtils.isNotEmpty(controllerStr)) { returnjava.lang.Integer.parseInt(controllerStr); } if (((vm.getNumOfIoThreads()) > 0) && (org.ovirt.engine.core.common.FeatureSupported.virtioScsiIoThread(vm.getCompatibilityVersion()))) { int numOfDisks = ((vm.getDiskMap())!= null)? vm.getDiskMap().values().size() : 0; return (numOfDisks % (vm.getNumOfIoThreads())) + defaultIndex; } return defaultIndex; }
privatejava.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice,java.lang.Integer> vmDeviceUnitMapForController(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice,java.util.Map<java.lang.Integer,java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice,java.lang.Integer>> vmDeviceUnitMap) { int controllerId = vmInfoBuildUtils.getControllerForScsiDisk(vmDevice, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()); if (!(vmDeviceUnitMap.containsKey(controllerId))) { return newjava.util.HashMap<>(); } return vmDeviceUnitMap.get(controllerId); }
public org.ovirt.engine.core.bll.ValidationResult defaultRouteNetworkCannotBeExternal(org.ovirt.engine.core.common.businessentities.network.Network network) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL,java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, network.getName())).when(((networkCluster.isManagement()) && (network.isExternal()))); }
private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores,java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) {java.util.ArrayList<java.lang.Integer> cpuIds = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { cpuIds.addAll(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId =java.util.Collections.min(cpuIds); int maxId =java.util.Collections.max(cpuIds); if ((minId < 0) || (maxId >= cpuCores)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID,java.lang.String.format("$cpuIndex %d", (minId < 0? minId : maxId)),java.lang.String.format("$cpuIndexMax %d", (cpuCores - 1))); }java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIds.size()) - 1); ++i) { if (cpuIds.get(i).equals(cpuIds.get((i + 1)))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID,java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void shouldDetectDupliciteCpuAssignment() { vmNumaNodes.get(0).setCpuIds(java.util.Collections.singletonList(0)); vmNumaNodes.get(1).setCpuIds(java.util.Collections.singletonList(0)); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID); }
private void storeIp(java.lang.StringBuilder output, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.IpInfoFetcher ipInfoFetcher) { output.append(java.lang.String.format("iface %s inet%s %s\n", ipInfoFetcher.fetchName(), ipInfoFetcher.getIpStackVersion(), ipInfoFetcher.fetchBootProtocol())); if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIp())) { output.append(java.lang.String.format(" address %s\n", ipInfoFetcher.fetchIp())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchNetmask())) { output.append(java.lang.String.format(" netmask %s\n", ipInfoFetcher.fetchNetmask())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchGateway())) { output.append(java.lang.String.format(" gateway %s\n", ipInfoFetcher.fetchGateway())); } }
private void storeIpv4(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv4InfoFetcher(iface)); }
private void storeNetwork() throwsjava.io.UnsupportedEncodingException {java.lang.StringBuilder output = newjava.lang.StringBuilder(); if ((vmInit.getNetworks())!= null) {java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getStartOnBoot())) { output.append(" ").append(iface.getName()).append(" "); storeIpv4(output, iface); if ((vmInit.getDnsServers())!= null) { output.append(" dns-nameservers").append(" "); output.append("\n"); } if ((vmInit.getDnsSearch())!= null) { output.append(" dns-search").append(" "); output.append("\n"); } storeIpv6(output, iface); } } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces); storeNextFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } }
private void storeIpv6(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv6InfoFetcher(iface)); }
private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster!= null) { res += (networkCluster.isDefaultRoute())? 16 : 10; } if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isDisplay()) { res += 4; } if (networkCluster.isMigration()) { res += 2; } if (networkCluster.isGluster()) { res += 1; } return res; }
private HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return HostJobInfo.HostJobStatus.failed; } log.error("Command {} id: '{}': entity polling isn't supported, will retry to poll the job soon.", cmd.getActionType(), cmd.getCommandId()); return null; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getHostJobId() { return getStorageJobId(); }
protected org.ovirt.engine.core.bll.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster.gluster
protected org.ovirt.engine.core.bll.CommandBase<?> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }
private org.ovirt.engine.core.bll.storage.EntityPollingCommand<java.lang.Void> pollEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command entity", cmd.getActionType(), cmd.getCommandId()); } return null; }
public staticjava.util.Map<java.lang.String,java.lang.Object> createVmMemoryDeviceMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) {java.util.Map<java.lang.String,java.lang.Object> data = newjava.util.HashMap<>();java.util.Map<java.lang.String,java.lang.Object> memDeviceData = newjava.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.ovirt.engine.core.utils.StringMapUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().getDeviceId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getParameters().getMemoryDeviceToUnplug())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice())); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(volumeDao).when(syncJob).getVolumeDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_GUID); }
javajavajava.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() {java.util.Optional<org.ovirt.engine.core.compat.Version> optionalVersion = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder());java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); optionalVersion.ifPresent(( version) -> dataCenters.forEach(( dataCenter) -> { dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((version.compareTo(dataCenter.getCompatibilityVersion())) > 0)); dataCenter.setMacPoolId(dcSingleMacPoolFinder.find(dataCenter.getId())); })); return dataCenters; }
private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol())!= null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv6InfoFetcher(entity))); }
private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol())!= null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv4InfoFetcher(entity))); }
private static org.ovirt.engine.api.model.Ip createIpModel(org.ovirt.engine.core.common.network.vm.VmInitNetworkIpInfoFetcher ipInfoFetcher) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setAddress(ipInfoFetcher.fetchIp()); ip.setNetmask(ipInfoFetcher.fetchNetmask()); ip.setGateway(ipInfoFetcher.fetchGateway()); return ip; }
privatejava.lang.String getCompatVersion() { int version =java.lang.Integer.parseInt(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getStoragePoolFormatType().getValue()); if (version >= 4) { return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_VERSION_1_1; } return org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.VDSM_COMPAT_DEFAULT_VERSION; }
javajavajava.util.Map<java.lang.String,java.lang.Object> createVmProperties() {java.util.Map<java.lang.String,java.lang.Object> map = newjava.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.compat_version, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getCompatVersion()); map.put(VdsProperties.vm_disks, getDisksProperties()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getDisks()) { map.put(VdsProperties.Format, diskImage.getVolumeFormat().toString()); map.put(VdsProperties.DISK_ALLOCATION, diskImage.getVolumeType().toString()); break; } if ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath())!= null) { map.put(VdsProperties.VIRTIO_ISO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getVirtioIsoPath()); } return map; }
private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob())!= null) { setJobId(executionContext.getJob().getId()); } else if ((executionContext.getStep())!= null) { setJobId(executionContext.getStep().getJobId()); } if ((parameters.getParentParameters())!= null) { parameters.setCorrelationId(parameters.getParentParameters().getCorrelationId()); } }
public long getMinimum() { return privateMinimum; }
public void setMinimum(long value) { privateMinimum = value; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value!= null) && (((value instanceofjava.lang.String) && (!(((java.lang.String) (value)).equals("")))) || (value instanceofjava.lang.Long))) {java.lang.Long longValue = (value instanceofjava.lang.String)? org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value));java.lang.String msg = "";java.lang.String prefixMsg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thisFieldMustContainNumberInvalidReason(); if (longValue == null) { result.setSuccess(false); msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); result.getReasons().add(msg); } else if ((longValue < (getMinimum())) || (longValue > (getMaximum()))) { if (((getMinimum())!= (java.lang.Long.MIN_VALUE)) && ((getMaximum())!= (java.lang.Long.MAX_VALUE))) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); } else if ((getMinimum())!= (java.lang.Long.MIN_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberGreaterInvalidReason(prefixMsg, getMinimum()); } else if ((getMaximum())!= (java.lang.Long.MAX_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberLessInvalidReason(prefixMsg, getMaximum()); } result.setSuccess(false); result.getReasons().add(
@org.junit.Test public void tryParse() { org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("no good")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("$1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(1), org.ovirt.engine.core.compat.LongCompat.tryParse("1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf((-1)), org.ovirt.engine.core.compat.LongCompat.tryParse("-1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.LongCompat.tryParse("0")); }
public void setMaximum(long value) { privateMaximum = value; }
public long getMaximum() { return maximum; }
java @java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId))) && (validate(validator.validNetworkFilterId()))))) && (validate(validator.validNetworkFilterForPassthroughProfile(useDefaultNetworkFilterId))) && (validate(validator.validNetworkFilterForVdsGroup(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().getVdsGroup()))); }
javajava.lang.String ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH();
public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterForPassthroughProfile(boolean useDefaultNetworkFilterId) { if (!(vnicProfile.isPassthrough())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_FILTER_CANNOT_BE_USED_WITH_PASSTHROUGH; boolean allowedState = ((vnicProfile.getNetworkFilterId()) == null) && (!useDefaultNetworkFilterId); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage).unless(allowedState); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return (((((((validate(validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.portMirroringNotChangedIfUsedByVms()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughNotChangedIfUsedByVms()))) && (validate(validator.passthroughProfileContainsSupportedProperties()))) && (validate(validator.validNetworkFilterId()))); }
javajava.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() {java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder());java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.forEach((dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }
public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING).when(((((cluster.getMaxVdsMemoryOverCommit()) > 100) || ((cluster.getMaxVdsMemoryOverCommit()) <= 0)) && (!((cluster.isEnableKsm()) || (cluster.isEnableBallooning()))))); }
@org.junit.Test public void memoryOptimizationLowerThenZeroWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit((-52)); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }
javajava.lang.String CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING();
@org.junit.Test public void memoryOptimizationWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit(150); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_KSM_AND_BALLOONING); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles!= null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = (((getDisk())!= null) && (isExistingDisk())) && (getDisk().getDiskStorageType().equals (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)))? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId!= null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk())!= null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.api.restapi.resource.BackendVmResource.UpdateParametersProvider()); if (isNextRunRequested()) { org.ovirt.engine.core.common.businessentities.VM entity = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true); vm = addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(entity, null, false), entity)); } if (vm!= null) { org.ovirt.engine.api.restapi.util.DisplayHelper.adjustDisplayData(this, vm, false); removeRestrictedInfo(vm); } return vm; }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus)!= (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("ResourceManager::refreshVdsRunTimeInfo '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Exception", ex); } } }
@org.junit.Test public void testListWithCustomGlobalHeaderOverridden() {java.util.Map<java.lang.String,java.lang.String> headers = newjava.util.HashMap<>(1); headers.put("my", "local"); clustersService.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
public org.ovirt.engine.sdk4.ConnectionBuilder headers(java.util.Map<java.lang.String,java.lang.String> headers) { this.headers = headers; return this; }
@org.junit.Test public void testAddWithCustomGlobalHeader() { clustersService.add().cluster(cluster()).send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testLGetWithCustomGlobalHeader() { clusterService.get().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Before public void setUp() {java.util.Map<java.lang.String,java.lang.String> headers = newjava.util.HashMap<>(); headers.put("my", "value"); setXmlResponse("clusters", 200, "<clusters/>"); setXmlResponse("clusters/123", 200, "<cluster id=\"123\"><name>test</name></cluster>"); startServer(); connection = ((org.ovirt.engine.sdk4.internal.HttpConnection) (testConnectionBuilder().headers(headers).build())); clustersService = connection.systemService().clustersService(); clusterService = clustersService.clusterService("123"); }
@org.junit.Test public void testListWithCustomGlobalHeader() { clustersService.list().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testRemoveWithCustomGlobalHeader() { clusterService.remove().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testRemoveWithCustomGlobalHeaderOverridden() {java.util.Map<java.lang.String,java.lang.String> headers = newjava.util.HashMap<>(1); headers.put("my", "local"); clusterService.remove().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateAdditionalHeadersParameters() { buffer.addLine(); buffer.addLine("if (headers!= null) {"); buffer.addLine("for (Map.Entry<String,java.lang.String>> header : headers.entrySet()) {"); buffer.addLine("request.setHeader(header.getKey(), header.getValue());"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine(); }
private void generateAdditionalQueryParameters() { buffer.addLine("if (query!= null) {"); buffer.addLine("for (Map.Entry<String,java.lang.String> queryParam : query.entrySet()) {"); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue());"); buffer.addLine("}"); buffer.addLine("}"); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String,java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); }java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated!= null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", "Bearer " + (getAccessToken()))); }
@org.junit.Test public void testGetWithCustomGlobalHeaderOverridden() {java.util.Map<java.lang.String,java.lang.String> headers = newjava.util.HashMap<>(1); headers.put("my", "local"); clusterService.get().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testListWithTwoCustomQueryParam() {java.util.Map<java.lang.String,java.lang.String> query = newjava.util.HashMap<>(2); query.put("first", "value1"); query.put("second", "value2"); vmsService.list().query(query).send(); assertEquals("first=value1&second=value2", getLastRequestQuery()); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) {java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated!= null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", "Bearer " + (getAccessToken()))); }
@org.junit.Test public void testListWithCustomQueryParam() {java.util.Map<java.lang.String,java.lang.String> query = newjava.util.HashMap<>(1); query.put("my", "value"); vmsService.list().query(query).send(); assertEquals("my=value", getLastRequestQuery()); }
void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method);java.lang.String request = getRequestName(method);java.lang.String response = getResponseName(method);java Buffer.addLine("Request interface %1$s extends Request<%1$s, %2$s> {", request, response); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterInterface);java Buffer.addDocComment("HTTP headers.");java Buffer.addLine(headers(Map<String,java Buffer.Http.Headers> headers); request);java Buffer.addDocComment("URL query parameters.");java Buffer.addLine(query(Map<String,java Buffer.Http.QueryParameters> query); request.addLine("}");java Buffer.addLine(); }
@org.junit.Test public void testAddWithCustomGlobalHeaderOverridden() {java.util.Map<java.lang.String,java.lang.String> headers = newjava.util.HashMap<>(1); headers.put("my", "local"); clustersService.add().cluster(cluster()).headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) {java.lang.String request = getRequestName(method);java.lang.String requestImpl = getRequestImplName(method);java.util.Map<java.lang.String,java.lang.String> headers; headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =java.util.Collections.emptyMap(); headers =
java @java.lang.Override publicjava x.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = deriveGraphicsType(); if (graphicsType == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Cannot get graphics type for the backend console."); fault.setDetail(localize(Messages.CANNOT_GET_TICKET_FOR_DOWN_VM)); returnjava x.ws.rs.core.Response.status(Response.Status.CONFLICT).entity(fault).build(); }java x.ws.rs.core.Response consoleId = org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsoleId(graphicsType); return getGraphicsConsolesResource().getConsoleResource(consoleId).ticket(action); }
public boolean isAction() {java.util.List<java.lang.String> nonActionMethodNames = newjava.util.ArrayList<>(java.util.Arrays.asList("add", "get", "list", "update", "remove")); if ((nonActionMethodNames.contains(getName().toString().toLowerCase())) || (((base)!= null) && (nonActionMethodNames.contains(base.getName().toString().toLowerCase())))) { return false; } else { return true; } }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) {java.lang.System.err.println((("Method " + method) + " doesn't have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType);java x.ws.rs.Consumes.class.addImport(java x.ws.rs.PUT.class);java x.ws.rs.Consumes.PUT.addImports(mainTypeReference.getImports()); generateDoc(method);java Buffer.addLine("@PUT");java Buffer.addLine("{} update(%s %s)", generateMediaTypes());java.lang.String parameterName = Names.getJavaMemberStyleName(mainParameter.getName()); if (base) {java x.ws.rs.Consumes.update(mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, method.getName());java x.ws.rs.PUT.addLine("}"); } else { addMethod(mainTypeReference.getText(), %s) mainTypeReference.getText(),java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.format("%s",java.lang.String.
private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) {java.lang.System.err.println((("Method " + method) + " doesn't have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType);java x.ws.rs.Consumes.class);java x.ws.rs.POST.class);java x.ws.rs.core.Response.class);java Buffer.addImports(mainTypeReference.getImports()); generateDoc(method);java Buffer.addLine("@POST");java Buffer.addLine("public void add(java x.ws.rs.Consumes %s)",java x.ws.rs.POST.getText());java.lang.String parameterName = Names.getJavaMemberStyleName(mainParameter.getName()); if (base) {java.lang.String response =java.lang.String.format("public void add(java.lang.String %s)", mainTypeReference.getText(), parameterName); writeHelperInvocation(helperClassName, parameterName, response);java.lang.String responseReturnMethod =java.lang.String.format("public void add(java.lang.String %s)", mainTypeReference.getText(),java.lang.String.format("public void add(java.lang.String %s)",java.lang.String.format("public void add(java.lang.String %s)",java.lang.String.format("public void add(java.lang.String %s)",java.lang.String.format("public void add(java.lang.String %s)",java.lang.String.format("public void add(java.lang.String %s)",java.lang.String.format("public void add(java.lang.String %s)",java.lang.String.format("public void add(java
void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) {java.lang.System.err.println((("Method " + method) + " doesn't have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method);java x.ws.rs.GET.class.addImports(java x.ws.rs.GET.class);java x.ws.rs.GET.addLine("@GET"); if (isRoot) {java x.ws.rs.core.Response.class.addImports(java x.ws.rs.core.Response.class); addResponseReturnMethod("get()"); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType);java Buffer.addImports(mainTypeReference.getImports()); addMethod(mainTypeReference.getText(), "get()"); }java Buffer.addLine(); }
void generateMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName,java.util.Map<org.ovirt.api.metamodel.concepts.Method,java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if (JaxrsGeneratorUtils.ADD.equals(name)) { generateAddMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.GET.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateListMethod(method); } else if (JaxrsGeneratorUtils.REMOVE.equals(name)) { generateRemoveMethod(method); } else if (JaxrsGeneratorUtils.UPDATE.equals(name)) { generateUpdateMethod(method, helperClassName, base); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isAddSignature(method)) { generateAddSignature(method); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateUpdateSignature(method); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isActionSignature(method)) { generateActionSignature(method); } else { generateActionMethod(method, helperClassName, base); } }
private void generateActionMethod(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Name helperClassName, boolean base) {java Buffer.addImport(java x.ws.rs.Consumes.class);java Buffer.addImport(java x.ws.rs.POST.class);java Buffer.addImport(java x.ws.rs.Path.class);java Buffer.addImport(java x.ws.rs.core.Response.class);java Buffer.addImport(java x.ws.rs.core.Response.class);java Buffer.addImport(java Buffer.getXjcPackageName(), "Action");java Buffer.addImport(java x.ws.rs.core.Response.class);java Buffer.addImport(java x.ws.rs.core.Response.class);java Buffer.addImport(java x.ws.rs.core.Response.class);java x.ws.rs.core.Response.addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "action") + "actionable");java x.ws.rs.core.Response.addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "actionable") + "actionable"));java x.ws.rs.core.Response.addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "action") + "actionable");java x.ws.rs.core.Response.addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "actionable") + "actionable");java x.ws.rs.core.Response.addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + "actionable") + "actionable"); }
private void generateUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) {java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType);java.lang.String methodName = concatenateName(method, method.getBase().getName());java.lang.String fieldName =java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(), mainTypeReference.getText(),java.lang.String.format("%s %s",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s %s") ",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s %s",java.lang.String.format("%s %s", fieldName, mainTypeReference.getText(),java.lang.String.format("%s %s %s",java.lang.String.format("%s %s %s", fieldName, mainTypeReference.getText(), mainTypeReference.getText(),java.lang.String.format("%s
private void initVariables(org.ovirt.api.metamodel.concepts.Service service) { resourceName = jaxrsNames.getInterfaceName(service); helperName = new org.ovirt.api.metamodel.tool.JavaClassName(resourceName.getPackageName(), ((resourceName.getSimpleName()) + "Helper")); serviceMethods = service.getDeclaredMethods(); baseMethods = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getBaseMethodsMap(serviceMethods); Buffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); Buffer.setClassName(helperName);java Buffer.addImport(resourceName); }
private void writeHelperInvocation(org.ovirt.api.metamodel.concepts.Name helperClassName,java.lang.String parameterName, org.ovirt.api.metamodel.concepts.Name methodName) {java.lang.String helperMethodName = ("get" + (java.lang.String.format("%s %s", Names.getJavaClassStyleName(methodName))) + "Signature";java Buffer.addLine("try {");java Buffer.addLine((((((((("return (Response)" + (java.lang.String.format("%s %s", Names.getJavaClassStyleName(helperClassName))) + ".") + helperMethodName) + "(") + parameterName) + ").invoke(this, ") + parameterName) + ");"));java.lang.String result =java.lang.String.format("%s %s", helperMethodName, parameterName);java.lang.String returnValue =java.lang.String.format("%s %s", helperMethodName, result);java.lang.String returnValueString = result.substring(0, result.length());java.lang.String resultString = result.substring(result.length());java.lang.String resultString2 = result.substring(result.length());java.lang.String resultString3 = result.substring(result.length());java.lang.String resultString4 = result.substring(result.length());java.lang.String resultString5 = result.substring(result.length());java.lang.String resultString6 = result.substring(result.length());java.lang.String resultString7 = result.substring(result.length());java.lang.String resultString8 = result.substring(result.length());java.lang.String resultString9 = result.substring(result.length());java.lang.String resultString10 = resultString7.substring(result.length());java.lang.String resultString10 = resultString7.substring(result.length());java.lang.String resultString8 = resultString7.substring(result.length());java.lang.String resultString10 = resultString7.substring(result.length());java.lang.String resultString8 = resultString7.substring(result.length());java.lang.String resultString10 = resultString7.substring(result.length());java.lang.String resultString8 = resultString7.substring(result.length());java.lang.String resultString
private void writeActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) {java Buffer.addLine("public static void validate%s(Action action) {", Names.getJavaClassStyleName(method.getName())); }
private static void updateBaseMethodsMap(org.ovirt.api.metamodel.concepts.Method method,java.util.List<org.ovirt.api.metamodel.concepts.Method> methods,java.util.Map<org.ovirt.api.metamodel.concepts.Method,java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (((currentMethod.getBase())!= null) && (currentMethod.getBase().equals(method))) { org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.add(baseMethods, method, currentMethod); } } }
public static boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase())!= null) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE))); }
private static void add(java.util.Map<org.ovirt.api.metamodel.concepts.Method,java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods, org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method currentMethod) { if (!(baseMethods.containsKey(method))) { baseMethods.put(method, newjava.util.HashSet()); }java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); signatures.add(currentMethod); }
private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method);java Buffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports());java Buffer.addLine("public static void validate%s(%s %s) {", Names.getJavaClassStyleName(method.getName()), Names.getJavaClassStyleName(parameter.getName()), Names.getJavaMemberStyleName(parameter.getName())); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType)).findFirst().orElse(null); return mainParameter; }
public static boolean isAddSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase())!= null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainUpdateParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); return mainParameter; }
public static boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase())!= null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE)); }
public staticjava.util.Map<org.ovirt.api.metamodel.concepts.Method,java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method> methods) {java.util.Map<org.ovirt.api.metamodel.concepts.Method,java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = newjava.util.HashMap<>(); methods.forEach((java.util.Iterator<org.ovirt.api.metamodel.concepts.Method> x) -> updateBaseMethodsMap(x, methods, baseMethods)); return baseMethods; }
private void closeSignatureDetectionMethod() { Buffer.addLine("else {"); Buffer.addLine("return null;"); Buffer.addLine("}"); }
private void generateAddSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) {java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType);java.lang.String parameterName = Names.getJavaMemberStyleName(mainParameter.getName());java.lang.String methodName = concatenateName(method, method.getBase().getName());java.lang.String returnValue =java.lang.String.format("%s %s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName,java.lang.String.format("%s %s", methodName
private static boolean isAttributesContained(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes1,java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes2) { return org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(mandatoryAttributes2).containsAll(org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(mandatoryAttributes1)); }
private staticjava.util.List<org.ovirt.api.metamodel.concepts.Name> toNames(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> attributes) {java.util.List<org.ovirt.api.metamodel.concepts.Name> names = newjava.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute : attributes) { names.add(((attribute.getAlternative()) == null? attribute.shallowToString() : org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.combineAlternatives(attribute))); } return names; }
private void generateValidation(org.ovirt.api.metamodel.concepts.Method method) { generateValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateParameterValidation(parameter); }java Buffer.addLine("}"); }
private void generateHelperCode(org.ovirt.api.metamodel.concepts.Method method) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if ((((((JaxrsGeneratorUtils.GET.equals(name)) || (JaxrsGeneratorUtils.LIST.equals(name))) || (JaxrsGeneratorUtils.REMOVE.equals(name))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isAddSignature(method))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isUpdateSignature(method))) || (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isActionSignature(method))) { return; } if ((JaxrsGeneratorUtils.ADD.equals(name)) || (JaxrsGeneratorUtils.UPDATE.equals(name))) { if (base) { generateSignatureDetection(method); } else { if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateValidation(method); } else { } } } else { if (base) { generateActionSignatureDetection(method, serviceMethods); } else if (org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateValidation(method); } else { } } }
private void generateActionSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Name methodName = new org.ovirt.api.metamodel.concepts.Name(method.getBase().getName()); methodName.addWords(method.getName().getWords());java Buffer.addLine("Response %s(Action action) {", jaxrsNames.getMethodName(methodName));java Buffer.addLine("throw new UnsupportedOperationException();");java Buffer.addLine("}"); }
private void generateParameterValidation(org.ovirt.api.metamodel.concepts.Parameter parameter) {java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list = stackAttributeComponents(parameter);java.lang.String attributePath = getAttributePath(list);java.lang.String name = Names.getJavaMemberStyleName(parameter.getName());java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> required =java.util.Arrays.asList(required);java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> requiredList =java.util.Arrays.asList(required);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String name = Names.getJavaMemberStyleName(parameter.getName());java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> requiredList =java.util.Arrays.asList(required);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String requiredPath = getAttributePath(requiredList);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = getAttributePath(requiredPath);java.lang.String requiredPath = org.ovirt
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if (((method.getBase()) == null) || ((method2.getBase()) == null)) { return false; } if (!(method.getBase().getName().equals(method2.getBase().getName()))) { return false; } return (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isParametersContained(method.getMandatoryParameters(), method2.getMandatoryParameters())) && (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isAttributesContained(method.getMandatoryAttributes(), method2.getMandatoryAttributes())); }
private void generateSignatureDetection(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.getMainAddParameter(method);java Buffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); org.ovirt.api.metamodel.concepts.Name methodName = getSignatureDetectionMethodName(method); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName();java Buffer.addLine("public static void %s(%s %s) throws NoSuchMethodException, SecurityException {", Names.getJavaMemberStyleName(methodName), Names.getJavaClassStyleName(parameterName),java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.of(java.util.Set.Set(
privatejava.lang.String getFullAttributeCheck(java.lang.String paramName,java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.Operator operator) {java.lang.StringBuilder builder = newjava.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { builder.append(operator.getPaddedSign()).append(paramName).append(getAttributePath(list.subList(0, (i + 1)))).append(operator.comaprison).append("null"); }java.lang.String attributeCheck = builder.toString(); if (attributeCheck.endsWith(".size()!=0!=null")) { attributeCheck = attributeCheck.substring(0, ((attributeCheck.length()) - 6)); } return attributeCheck; }
private void generateActionValidation(org.ovirt.api.metamodel.concepts.Method method) { writeActionValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateActionParameterValidation(parameter); }java Buffer.addLine("}"); }
privatejava.lang.String getAttributePath(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list) {java.lang.StringBuilder attributePath = newjava.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { org.ovirt.api.metamodel.concepts.MemberInvolvementTree current = list.get(i); attributePath.append(".get").append(Names.getJavaClassStyleName(current.getName())).append("()"); if (current.isCollection()) { if (i == ((list.size()) - 1)) { attributePath.append(".get").append(Names.getJavaClassStyleName(current.getName())).append("().size()!=0"); } else { attributePath.append(".get").append(Names.getJavaClassStyleName(current.getName())).append("().get(0)"); } } } return attributePath.toString(); }
private void generateHelper(org.ovirt.api.metamodel.concepts.Service service) { initVariables(service); serviceMethods.forEach((java.lang.String x) -> generateHelperCode(java.lang.String.valueOf(x))); try { Buffer.write(outDir); } catch (java.io.IOException exception) { exception.printStackTrace(); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method,java.util.Collection<org.ovirt.api.metamodel.concepts.Method> methods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.isContained(method, currentMethod)) { return true; } } return false; }
private static boolean isParametersContained(java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters1,java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters2) {java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = newjava.util.ArrayList<>();java.util.List<org.ovirt.api.metamodel.concepts.Name> names2 = newjava.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters1) { names1.add(p.getName()); } for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names2.add(p.getName()); } return mandatoryParameters2.containsAll(mandatoryParameters1); }
private static org.ovirt.api.metamodel.concepts.Name combineAlternatives(org.ovirt.api.metamodel.concepts.MemberInvolvementTree attribute) { org.ovirt.api.metamodel.concepts.Name name1 = attribute.shallowToString(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlternative().shallowToString(); if ((name1.toString().compareTo(name2.toString())) < 0) { name1.addWords(name2.getWords()); return name1; } else { name2.addWords(name1.getWords()); return name2; } }
public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getIsWindowsOS()))); getIsCloudInitEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setIsAvailable((!(getIsWindowsOS()))); if ((getIsSysprepPossible().getEntity()) && (getIsSysprepEnabled().getEntity())) { getVmInitModel().updateSysprepDomain(null); } }
private void vmInitEnabledChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); getCloudInitEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitEnabled().setEntity((!(getIsWindowsOS()))); autoSetHostname(); } }
@java.lang.Override publicjava.util.List<java.lang.String> addMacs(java.util.List<java.lang.String> macs) {java.util.List<java.lang.String> notAddedMacs = newjava.util.ArrayList<>(macs.size()); for (java.lang.String mac : macs) { if (addMac(mac)) { notAddedMacs.add(mac); } } return notAddedMacs; }
public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.compat.Guid idOfClusterHavingSourceMacPool, org.ovirt.engine.core.bll.context.CommandContext commandContext) {java.util.Objects.requireNonNull(sourceMacPoolId);java.util.Objects.requireNonNull(targetMacPoolId); if (needToMigrateMacs(sourceMacPoolId, targetMacPoolId)) {java.util.List<java.lang.String> macToMigrate = vmNicDao.getAllMacsByClusterId(idOfClusterHavingSourceMacPool); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macToMigrate, commandContext); } }
private void migrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId,java.util.List<java.lang.String> macToMigrate, org.ovirt.engine.core.bll.context.CommandContext commandContext) {java.util.Objects.requireNonNull(macToMigrate); org.ovirt.engine.core.bll.network.macpool.MacPool sourcePool = poolPerCluster.getMacPoolById(sourceMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId, commandContext); for (java.lang.String mac : macToMigrate) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId!= null; if (shouldSetNewMacPoolOnAllClusters) {java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacs.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public org.ovirt.engine.api.model.Disks list() { throw newjava x.ws.rs.WebApplicationException(java x.ws.rs.core.Response.status(Response.Status.NOT_IMPLEMENTED).build()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion());java.util.List<java.lang.String> errorMessages = newjava.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}",java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); getVmDeviceUtils().updateVirtioScsiController(getVm().getStaticData(), getParameters().isVirtioScsiEnabled()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId())!= null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }
@org.junit.Test public void statusSupportedForHostUpgrade() { assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void removeImage() { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getDestinationImageId()); removeImageParams.setStorageDomainId(getDestinationStorageDomainId()); removeImageParams.setParentCommand(VdcActionType.RemoveImage); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); removeImageParams.setCorrelationId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getCorrelationId()); removeImageParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (!(returnValue.getSucceeded())) { addAuditLogOnRemoveFailure(); } }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(@java.lang.String[] parameters,java.lang.String[] messages) { if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { return hosts; }java.util.List<org.ovirt.engine.core.common.businessentities.VDS> goodHosts = newjava.util.ArrayList<>(); final int allowedSwapUsage = org.apache.commons.lang.math.NumberUtils.toInt(parameters.get(PolicyUnitParameter.MAX_ALLOWED_SWAP_USAGE.getDbName()), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BlockMigrationOnSwapUsagePercentage)); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (isHostSwapping(vds, allowedSwapUsage)) { org.ovirt.engine.core.bll.scheduling.policyunits.SwapFilterPolicyUnit.log.debug("Host '{}' is swapping more than allowed. Ignoring it.", vds.getName()); messages.addMessage(vds.getId(), EngineMessage.VAR__DETAIL__SWAP_VALUE_ILLEGAL.toString()); continue; } goodHosts.add(vds); } return goodHosts; }
private boolean isHostSwapping(@java x.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDS host, int allowedSwapUsage) { if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapCheck))) { return false; } if (((((((host.getSwapTotal()) == null) || ((host.getSwapFree()) == null)) || ((host.getMemAvailable()) == null)) || ((host.getMemAvailable()) <= 0)) || ((host.getPhysicalMemMb()) == null)) || ((host.getPhysicalMemMb()) <= 0)) { return false; } long swap_total = host.getSwapTotal(); long swap_free = host.getSwapFree(); long mem_available = host.getMemAvailable(); long physical_mem_mb = host.getPhysicalMemMb(); return ((((swap_total - swap_free) - mem_available) * 100) / physical_mem_mb) > allowedSwapUsage; }
@org.junit.Test public void externalNetworkNameChanged() throwsjava.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@org.junit.Test public void externalNetworkDescriptionChanged() throwsjava.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("In non-compensation state, immediately releasing macs {}", macs); macPool.freeMacs(macPool.getMacs()); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { log.debug(("Cleaning successfully executed, releasing macs: {}", macsToReleaseOnCommit)); macPool.freeMacs(macToReleaseOnCommit); }
private void mockThatDuringAddingToTargetPoolOnlyFirstMacWillBeAdded() { when(targetMacPool.addMacs(anyList())).thenAnswer(( invocation) -> {java.util.List<java.lang.String> macs = invocation.getArgument(0); returnjava.util.Collections.singletonList(macs.get(1)); }); }
private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(java.util.concurrent.locks.ReentrantReadWriteLock.class))).thenAnswer(org.mockito.AdditionalAnswers.returnsArgAt(0)); }
@java.lang.Override publicjava.lang.String toString() {java.lang.String prefix = ((TotalMilliseconds) < 0)? "-" : ""; returnjava.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getExclusiveLocks() { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); return hostLocking.getSetupNetworksLock(originalHostId); }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(newjava.util.Date()); destinationHostLock = new org.ovirt.engine.core.utils.lock.EngineLock(hostLocking.getSetupNetworksLock(getDestinationVdsId())); lockManager.acquireLockWait(destinationHostLock); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
publicjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { returnjava.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS)); }
@java.lang.Override protected void runningFailed() { try { cleanupPassthroughVnics(getDestinationVdsId()); } finally { super.runningFailed(); lockManager.releaseLock(destinationHostLock); } }
javajava.lang.String ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_OR_MIGRATION_IN_PROGRESS();
java @java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); lockManager.releaseLock(destinationHostLock); } }
org.ovirt.engine.core.vdsbroker.StatusOnlyReturnReturnReturn(org.ovirt.engine.core.vdsbroker.vdsbroker.VmVmVmVmVmVmVmVmVmVmVmVmVmVmVmVm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm.Vm
@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.SealVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setVmId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); getDiskImages().forEach((diskImage) -> parameters.addVolume(diskImage.getStorageIds().get(0), diskImage.getId(), diskImage.getImageId())); lockTemplateInDb(); lockDiskImagesInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SealDisks, parameters, getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); unlockDiskImagesInDb(); unlockTemplateInDb(); } setSucceeded(vdsReturnValue.getSucceeded()); }
@java.lang.Override protected void endSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); setVmId(getVmIdFromImageParameters()); isVmInDb = (org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm())!= null; vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } if ((reloadVmTemplateFromDB())!= null) { endDefaultOperations(); } checkTrustedService(); sealVmTemplate(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB())!= null) { endDefaultOperations(); } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void sealVmTemplate() { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return; } org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn sealDisks(java.lang.String vmId,java.lang.String jobId,java.util.List<java.util.Map<java.lang.String,java.lang.String>> volumes) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.seal").withParameter("vmID", vmId).withParameter("job_id", jobId).withOptionalParameterAsList("volumes", volumes).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }
privatejava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages() { if ((diskImages) == null) { diskImages = diskDao.getAllForVm(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmTemplateId()).stream().map((disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).collect(java.util.stream.Collectors.toList()); } return diskImages; }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("vmId", vmId).append("jobId", jobId).append("volumes", volumes); }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getExclusiveLocks() {java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> locks = newjava.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.SealVmTemplateCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, EngineMessage.VMT_SEALING)); getDiskImages().forEach((diskImage) -> locks.put(diskImage.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.VMT_SEALING))); return locks; }
public void addVolume(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid volumeId) { volumes.add(new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress(storageDomainId, imageId, volumeId)); }
@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getBroker().sealDisks(org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVolumes().stream().map(this::mapToEndpoint).collect(java.util.stream.Collectors.toList())); org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override protected void endWithFailure() { super.endWithFailure(); unlockDiskImagesInDb(); unlockTemplateInDb(); }
private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach(( diskImage) -> { getCompensationContext().snapshotEntityStatus(diskImage.getImage()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); }); getCompensationContext().stateChanged(); return null; }); }
privatejava.util.Map<java.lang.String,java.lang.String> mapToEndpoint(org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress volumeAddress) {java.util.Map<java.lang.String,java.lang.String> endpoint = newjava.util.HashMap<>(); endpoint.put("sd_id", volumeAddress.getStorageDomainId().toString()); endpoint.put("img_id", volumeAddress.getImageId().toString()); endpoint.put("vol_id", volumeAddress.getVolumeId().toString()); return endpoint; }
private void unlockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { getDiskImages().forEach((diskImage) -> { diskImage.setImageStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.OK); }); return null; }); }
publicjava.util.List<org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress> getVolumes() { return volumes; }
@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); unlockDiskImagesInDb(); unlockTemplateInDb(); }
private void assignLegalAndShared(boolean legalAndShared) { org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters parameters = new org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId(), legalAndShared, (legalAndShared? org.ovirt.engine.core.common.businessentities.storage.CopyVolumeType.SharedVol : null)); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.UpdateAllTemplateDisks, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (completedChildCount < (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.AddVmTemplateCommand.getCommandId()).size())) { return false; } switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE_TEMPLATE : if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_ILLEGAL); break; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SEAL); break; case SEAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.ASSIGN_LEGAL_SHARED); break; case ASSIGN_LEGAL_SHARED : return true; } org.ovirt.engine.core.bll.AddVmTemplateCommand.persistCommandIfNeeded(); executeNextOperation(); return false; }
private void sealVmTemplate() { org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs,java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex =java.lang.Integer.MAX_VALUE;java.util.List<org.ovirt.engine.ui.TabListItem> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex!= (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }
@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel())!= null) && (event.getModel().equals(presenterWidget.getModel()))) {java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs();java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } }
public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel())!= null) && (event.getModel().equals(presenterWidget.getModel()))) {java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs();java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } } }); }
private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem())!= (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { scheduleTab.setVisible(object.isScheduleTabVisible()); } }
@java.lang.Override publicjava.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }
@java.lang.Override public void init(java.lang.String title,java.lang.String width,java.lang.String height, boolean closeIconVisible) { asWidget().setWidth(width); asWidget().setHeight(height); asWidget().setCloseIconButtonVisible(closeIconVisible); }
java @java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) {java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); dialogTabPanel.switchTab((object.getIsGrouppedByTarget()? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); }
@java.lang.Override publicjava.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping() { return tabMap; }
@java.lang.Override public void show() { super.show(); contentScrollPanel.getElement().getStyle().setHeight(((getOffsetHeight()) - 100), Unit.PX); contentPanel.getElement().getStyle().setProperty("minHeight", ((getOffsetHeight()) - 100), Unit.PX); }
@org.ovirt.engine.ui.uicompat.DefaultActionHandler public void setDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamicDynamic
@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(java.lang.String headerTitle) { com.google.gwt.user.client.ui.HTMLPanel headerTitlePanel = new com.google.gwt.user.client.ui.HTMLPanel( "H4", headerTitle); headerTitlePanel.addStyleName(Styles.MODAL_TITLE); if ((header.getWidgetCount()) > 1) { header.remove(((header.getWidgetCount()) - 1)); } header.add(headerTitlePanel); }
javajavajavajava publicjava.util.List<org.gwtbootstrap3d.client.ui.TabListItem> getTabs() {java.util.List<org.gwtbootstrap3d.client.ui.TabListItem> tabs = newjava.util.ArrayList<>(); for (int i = 0; i < (navTabs.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = navTabs.getWidget(i); if (tab instanceof org.gwtbootstrap3d.client.ui.TabListItem) { tabs.add(((org.gwtbootstrap3d.client.ui.TabListItem) (tab))); } } return tabs; }
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { org.ovirt.engine.ui.uicommonweb.UICommand.getHelpContext().getWindow().setHelp(HelpContext.HelpId.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommonweb.ui.uicommon
@java.lang.Override public finaljava.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping() { return tabMap; }
public org.gwtbootstrap3.client.ui.TabListItem getTabListItem() { return tabListItem; }
javajavajava.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> getTabNameMapping();
public void setNoScroll(boolean value) { if (value) { contentScrollPanel.getElement().getStyle().setOverflow(Overflow.VISIBLE); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs,java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.gwtbootstrap3.client.ui.TabListItem> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return null; }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm())!= null; radioButtonsPanel.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) {java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(radioButtonsPanel); } else { disableWidget(radioButtonsPanel); } } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); revealDiskPanel(disk); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModelDisabled().getEntity()) { disableWidget(getWidget()); enableWidget(radioButtonsPanel); enableWidget(datacenterEditor); disk.getDefaultCommand().setIsExecutionAllowed(false); disk.setIsChangeable(false); } else { enableWidget(getWidget()); disk.getDefaultCommand().setIsExecutionAllowed(true); disk.setIsChangeable(true); driver.edit(disk); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); }
@java.lang.Override publicjava.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.constants.gb()); }
@java.lang.Override publicjava.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageLunToTargetList.constants.gb()); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return (java.lang.String.valueOf(object.getVmMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageVmBackupView.constants.mb()); }
privatejava.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))))? org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.diskSizeRenderer.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA))) : ((int) (memory)) + (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.constants.mb())); }
javajava privatejava.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return (org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.GiB).longValue()) + "GB"; } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB)) { return (org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.MiB).longValue()) + " MB"; } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) { return (org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.KiB).longValue()) + " KiB"; } else { return (sizeInBytes + " GB"); } }
@java.lang.Override publicjava.lang.String render(T sizeInMB) { return sizeInMB!= null? (sizeInMB.toString()) + "mb" : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return (java.lang.String.valueOf(object.getVm().getVmMemSizeMb())) + "mb"; }
@java.lang.Override publicjava.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.AbstractFindStoragePopupView.constants.gb(); } return (storage.getAvailableDiskSize()) + "GB"; }
privatejava.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB))? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return ((sizeInGB >= 1? sizeInGB : 1)); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return (size + "mb") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb()); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return (java.lang.String.valueOf(object.getVmMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterVmView.constants.mb()); }
@java.lang.Override publicjava.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return (size + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.constants.mb())); }
java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double value; double allocated = 0; double used = 0; if ((object.getGlobalQuotaStorage())!= null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - used;java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb(); } else { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.diskSizeRenderer.render(value); } returnVal; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (java.lang.String.valueOf(object.getMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageTemplateBackupView.constants.mb()); }
void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override publicjava.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override publicjava.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return "null"; } return (storage.getAvailableDiskSize()) + " " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb()); } }; storageDomainItems.setColumnWidth(freeSpaceColumn, "80px"); storageDomainItems.addColumn(freeSpaceColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.freeSpace()); }
@java.lang.Override publicjava.lang.String getValue(java.lang.Object object) { return (java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())) + "mb"; }
@java.lang.Override publicjava.lang.String getValue(java.lang.Object object) { return (java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())) + "mb"; }

javajava.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int value; long allocated = 0; long used = 0; if ((object.getGlobalQuotaCluster())!= null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quotaCluster : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += ((quotaCluster.getMemSizeMB())!= null)? quotaCluster.getMemSizeMB() : 0; used += quotaCluster.getMemSizeMBUsage(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used));java.lang.String returnVal; if (allocated < 0) { returnVal = org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.unlimited(); } else if (value <= 0) { returnVal = value + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.mb()); } else if (value <= (5 * 1024)) { returnVal = value + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.mb()) + "GB"; } else { returnVal = (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.decimalFormat.format((((double) (value)) / 1024))) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabQuotaView.constants.gb()) + "GB"; } returnVal; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (java.lang.String.valueOf(object.getMemSizeMb())) + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageRegisterTemplateView.constants.mb()); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getDiskSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (asDisk(entity).getSizeInGigabytes()) + (org.ovirt.engine.ui.userportal.widget.resources.VmTable.constants.gb()); }
@java.lang.Override publicjava.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.gb(); } return (storage.getAvailableDiskSize()) + "GB"; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return (java.lang.String.valueOf(object.getSizeInGigabytes())) + "GB"; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateVmwareVisible(model.getVmwarePropertiesModel().getIsAvailable()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateDataCenterVisible(model.getDataCenter().getIsAvailable()); } }
void updateDataCenterVisible(boolean isAvailable);
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateKvmVisible(model.getKvmPropertiesModel().getIsAvailable()); } }
public void updateDataCenterVisible(boolean isAvailable) { if (isAvailable) { typeEditorRow.removeStyleName(style.headerSeparator()); datacenterEditorRow.addStyleName(style.headerSeparator()); } else { typeEditorRow.addStyleName(style.headerSeparator()); datacenterEditorRow.removeStyleName(style.headerSeparator()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateXenVisible(model.getXenPropertiesModel().getIsAvailable()); } }
@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator StorageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(0), diskImage.getStoragePoolId())); return (((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked())) && (validate(StorageDomainValidator.isDomainExistAndActive()))); }
protected void initializeSuppliedImage() { super.initializeSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("VmName", vm.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_VM_COMPATIBILITY_VERSION); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmStaticDao.update(vm); } } return true; }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("TemplateName", template.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "todo"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_TEMPLATE_COMPATIBILITY_VERSION); template.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmTemplateDao.update(template); } } return true; }
@java.lang.Override public void initialize() throws org.quartz.SchedulerConfigException { executorService = newjava.util.concurrent.ThreadPoolExecutor(10, count, 60L,java.util.concurrent.TimeUnit.SECONDS, newjava.util.concurrent.ArrayBlockingQueue<java.lang.Runnable>(queueSize), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this)); }
private void generateParameterSpec(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); org.ovirt.api.metamodel.concepts.Name name = parameter.getName();java.lang.String symbol = rubyNames.getMemberStyleName(name);java.lang.String clazz = null; if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (type == (model.getStringType())) { clazz = "String"; } else if (type == (model.getBooleanType())) { clazz = "TrueClass"; } else if (type == (model.getIntegerType())) { clazz = "Fixnum"; } else if (type == (model.getDecimalType())) { clazz = "Float"; } else if (type == (model.getDateType())) { clazz = "DateTime"; } else { throw newjava.lang.IllegalArgumentException((("I don't know how to generate the parameter spec for type \"" + type) + "\"")); } } else if (type instanceof org.ovirt.api.metamodel.concepts.ListType) { clazz = "List"; } if (clazz!= null) { buffer.addLine(java.lang.String.format("%s %2$s",java.lang.String.format("%1$s",java.lang.String.format("%2$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String.format("%1$s",java.lang.String
protected void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID,java.util.List<org.ovirt.engine.core.compat.Guid> hostsForExecution, boolean shouldPrepareAndTeardown) { diskImage.setQcowCompat(QcowCompat.QCOW2_V2); if (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, hostsForExecution, shouldPrepareAndTeardown); if (qemuImageInfo!= null) { diskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.info("Handling successful transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferingVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { setQcowCompat(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(),java.util.Collections.emptyList(), false); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.unLockImage(); updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageTransferPhase.FINALIZING_FAILURE); } tearDownImage(context.entity.getVdsId()); } }
private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) {java.util.List<org.ovirt.engine.core.compat.Guid> hostIdToExecuteQemuImageInfo =java.util.Collections.emptyList();java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo.add(vm.getRunOnVds()); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo, (hostIdToExecuteQemuImageInfo == null)); }
void showPanelItems(boolean show) { securityCheckbox.setVisible(show); bugCheckbox.setVisible(show); enhancementCheckbox.setVisible(show); bugCheckboxIcon.setVisible(show); securityCheckboxIcon.setVisible(show); }
@java.lang.Override public org.gwtbootstrap3.client.ui.constants.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("ORANGERED")); return org.gwtbootstrap3.client.ui.constants.IconType.BUG; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.constants.IconType.PLUS_SQUARE; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORANGE")); return org.gwtbootstrap3.client.ui.constants.IconType.WARNING; } return null; }
protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage(org.gwtbootstrap3.client.ui.constants.IconType value,java.lang.String color) { return org.ovirt.engine.ui.common.widget.table.cell.IconTypeCell.TEMPLATE.icon(value.getCssName(), color); }
@org.ovirt.engine.ui.common.widget.table.cell.Template("<span class=\"fa {0} inline-icon\" style=\"color: {1}\"/>") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className,java.lang.String color);
private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newStorageDomainID) { org.ovirt.engine.core.compat.Guid hostIdToExecuteQemuImageInfo = null;java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo = vm.getRunOnVds(); break; } } } setQcowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, newImageId, newStorageDomainID, hostIdToExecuteQemuImageInfo); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(disk().format()); optional(disk().alias()); optional(disk().bootable()); optional(disk().description()); optional(disk().propagateErrors()); optional(disk().quota().id()); optional(disk().shareable()); optional(disk().sparse()); optional(disk().wipeAfterDelete()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().id()); optional(attachment().active()); optional(attachment().disk().readOnly()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment().id()); mandatory(attachment().disk().snapshot().id()); optional(attachment().active()); }
public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "scsi" : return 2; case "ide" : return 2; case "sata" : return 2; default : return -1; } }
public boolean hasDiscardZeroesTheDataSupport() { returnjava.lang.Boolean.TRUE.equals(getDiscardZeroesData()); }
public boolean supportsDiscard() { return ((getDiscardMaxSize())!= null) && ((getDiscardMaxSize()) > 0); }
java privatejava.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels, boolean selectedLuns, boolean includedLuns) {java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = newjava.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if ((selectedLuns && (lun.getIsSelected()) || ((includedLuns && (lun.getIsIncluded())) && ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(lun))) == null)) { luns.add(lun); } } return luns; }
private boolean isStorageDomainSupportDiscard(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : luns) {java.lang.Long discardMaxSize = lun.getEntity().getDiscardMaxSize(); if ((discardMaxSize!= null) && (discardMaxSize == 0)) { return false; } } return true; }
private void validateDiscardAfterDelete() { if ((getDiscardAfterDelete().getIsAvailable()) && (getDiscardAfterDelete().getEntity())) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem()));java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = sanStorageModel.getAddedLuns(); if ((luns!= null) && (!(isStorageDomainSupportDiscard(luns)))) { getDiscardAfterDelete().setIsValid(false); getDiscardAfterDelete().getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.constants.discardIsNotSupportedByUnderlyingStorage()); return; } } getDiscardAfterDelete().setIsValid(true); }
public void updateLunWarningForDiscardAfterDelete() { if (getContainer().getDiscardAfterDelete().getEntity()) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getAddedLuns()) { if (!(lunSupportsDiscard(lunModel.getEntity()))) { setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.uiConstants.discardIsNotSupportedByUnderlyingStorage()); return; } } } setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase.uiConstants.emptyString()); }
private boolean lunSupportsDiscard(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return ((lun.getDiscardMaxSize())!= null) && ((lun.getDiscardMaxSize()) > 0); }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb,java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwtbootstrap3.client.ui.base.helper.StyleHelper.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled(value)) { icon.getElement().getStyle().setProperty("color", enabledColor); icon.getElement().getStyle().setProperty("cursor", "pointer"); } else { icon.getElement().getStyle().setProperty("color", disabledColor); icon.getElement().getStyle().setProperty("cursor", "default"); } sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?,?> presenter = ((com.gwtplatform.mvp.client.Presenter<?,?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTabHistoryToken(proxy.getTargetHistoryToken()); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTab(proxy.getTab()); } catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, "Exception while updating tab view", e); } } }
@org.junit.Test public void testSetStatusForRequiredNetworksAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); finaljava.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks =java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1), createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID2, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2)); when(vdsStaticDao.countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, networks); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); managementNetwork = createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID)).thenReturn(managementNetwork); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID))).thenReturn(managementNetworkCluster); when(vdsDynamicDao.countHostsInClusterWithStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, VDSStatus.Up)).thenReturn(666); }
@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); when(vdsStaticDao.countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID,java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID,java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1))); verify(vdsStaticDao).countHostsInClusterThatMissNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up); verify(networkClusterDao, never()).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, finaljava.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster!= null; if (doUpdateNetworkClusterStatus) { if (networkCluster.isRequired()) { updateStatusOfRequiredNetworkCluster(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
public staticjava.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return (sourceImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)? org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()) : imageInfoFromStorage.getActualSizeInBytes(); } return null; }
public static void redirectToModule(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava.io.IOException { org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Redirecting to module: {}", org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request).toString()); try { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request); org.ovirt.engine.core.uutils.net.URLBuilder redirectUrl = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.sso.utils.SsoUtils.getRedirectUrl(request).toString()).addParameter("code", ssoSession.getAuthorizationCode());java.lang.String appUrl = ssoSession.getAppUrl(); if (org.apache.commons.lang.StringUtils.isNotEmpty(appUrl)) { redirectUrl.addParameter("app_url", appUrl); }java.lang.String state = ssoSession.getState(); if (org.apache.commons.lang.StringUtils.isNotEmpty(state)) { redirectUrl.addParameter("state", state); } response.sendRedirect(redirectUrl.build()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Successfully redirecting back to module: {}", redirectUrl); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.log.error("Exception redirecting back to module: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Exception", ex); throw newjava.lang.RuntimeException(ex); } finally { org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).cleanup(); } }
private staticjava.lang.String createTmpSsoClientConfFile(java.lang.String clientId,java.lang.String clientSecret,java.lang.String certificateFile,java.lang.String callbackPrefix) throwsjava.io.FileNotFoundException { if (!(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir().exists())) { org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir().mkdirs(); }java.io.File tmpFile = newjava.io.File(org.ovirt.engine.ssoreg.core.SsoLocalConfig.getInstance().getTmpDir(),java.lang.String.format("99_sso_client_%s.conf",java.lang.System.currentTimeMillis())); try (java.io.PrintWriter pw = newjava.io.PrintWriter(newjava.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_ID=%s", clientId)); pw.println(java.lang.String.format("SSO_CLIENT_SECRET=%s", clientSecret)); pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", certificateFile)); pw.println(java.lang.String.format("SSO_CLIENT_CALLBACK_PREFIX=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }
public staticjava.lang.String createJWT(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession,java.lang.String clientId) throwsjava.security.NoSuchAlgorithmException {java.lang.String serverName = request.getServerName();java.lang.String issuer =java.lang.String.format("%s://%s:%s", request.getScheme(), (org.apache.http.conn.util.InetAddressUtils.isIPv6Address(serverName)?java.lang.String.format("[%s]", serverName) : serverName), request.getServerPort()); io.jsonwebtoken.JwtBuilder builder = io.jsonwebtoken.Jwts.builder().setId(ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.ID)).setIssuedAt(newjava.util.Date(java.lang.System.currentTimeMillis())).setIssuer(issuer).setSubject(java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())).setAudience(clientId).signWith(SignatureAlgorithm.HS256, org.ovirt.engine.core.sso.utils.SsoUtils.base64SecretBytes); io.jsonwebtoken.Claims claims = io.jsonwebtoken.Jwts.claims(); claims.put("sub",java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); claims.put("preferred_username",java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); claims.put("email", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.EMAIL)); claims.put("name", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.FIRST_NAME)); builder.setClaims(claims); return builder.compact(); }
protectedjava.lang.String findBestMatchForEmulatedMachine(java.lang.String currentEmulatedMachine,java.util.List<java.lang.String> candidateEmulatedMachines) { if (candidateEmulatedMachines.contains(currentEmulatedMachine)) { return currentEmulatedMachine; } return candidateEmulatedMachines.stream().max(org.ovirt.engine.core.bll.Comparator.comparingInt(( s) -> org.apache.commons.lang.StringUtils.indexOfDifference(currentEmulatedMachine, s))).orElse(currentEmulatedMachine); }
private void setQcowCompatForSnapshot(org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot) { try { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImageIRS = getVolumeInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); if ((newImageIRS!= null) && (newImageIRS.getVolumeFormat().equals(VolumeFormat.COW))) { setQcowCompatByQemuImageInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getId(), snapshot.getImageId()); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", snapshot.getImageId(), snapshot.getId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId()); } }
@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDiskProfileId())); setQcowCompatForSnapshot(snapshot); } } super.endSuccessfully(); }
@org.junit.Test public void testBadGuid() throwsjava.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.DATA_CENTER_ID, "foo"); fail("expected WebApplicationException"); } catch (java x.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name");java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); org.ovirt.engine.core.common.businessentities.network.Network net = null; if (network.isSetId()) { net = getNetworkById(network.getId(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } else if (network.isSetName()) { net = getNetworkByName(network.getName(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } return performCreate(VdcActionType.AttachNetworkToCluster, new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter(getCluster(), net), new org.ovirt.engine.api.restapi.resource.BackendClusterNetworksResource.AttachedNetworkResolver(net.getId())); }
@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId, id)); }
protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserIdIfExternal())); }
protected boolean setAndValidateCpuProfile() { return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getUserIdIfExternal())); }
public org.ovirt.engine.core.compat.Guid getUserIdIfExternal() { return isInternalExecution()? null : getUserId(); }
protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserIdIfExternal())); }
@java x.ws.rs.PUT @java x.ws.rs.Consumes({ "application/xml", "application/json" }) public org.ovirt.engine.api.v3.types.V3Host update(org.ovirt.engine.api.v3.types.V3Host host) { host = adaptUpdate(getDelegate()::update, host); org.ovirt.engine.api.v3.helpers.V3HostHelper.addStatistics(host); return host; }
private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try {java.security.KeyStore trustStore =java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType());java.io.FileInputStream inputStream = newjava.io.FileInputStream(newjava.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme sch = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(sch); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.CustomizedRESTEasyConnector.log.warn("Cannot register external providers trust store: ", ex); } }
private void registerExternalProvidersTrustStore(org.apache.http.impl.client.DefaultHttpClient httpClient) { try {java.security.KeyStore trustStore =java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType());java.io.FileInputStream inputStream = newjava.io.FileInputStream(newjava.io.File(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStorePassword().toCharArray()); } finally { inputStream.close(); } org.apache.http.conn.ssl.SSLSocketFactory socketFactory = new org.apache.http.conn.ssl.SSLSocketFactory(trustStore); org.apache.http.conn.scheme.Scheme sch = new org.apache.http.conn.scheme.Scheme("https", 443, socketFactory); httpClient.getConnectionManager().getSchemeRegistry().register(sch); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.warn("Cannot register external providers trust store: ", ex); } }
java @java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.GlusterStorageGeoRepSyncInternal, parameters, org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }
public static boolean isValidCredentials(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials) throws org.ovirt.engine.core.sso.utils.AuthenticationException { return org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials, false); }
public static boolean isValidCredentials(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.Credentials credentials, boolean isInteractiveAuth) throws org.ovirt.engine.core.sso.utils.AuthenticationException { org.ovirt.engine.core.sso.utils.SsoContext ssoContext = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request); if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getUsername())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize((isInteractiveAuth? SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS_INTERACTIVE_AUTH : SsoConstants.APP_ERROR_NO_USER_NAME_IN_CREDENTIALS), ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (!(credentials.isProfileValid())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_VALID_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (org.apache.commons.lang.StringUtils.isEmpty(credentials.getProfile())) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_NO_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } return true; }
javajavajavajavajava.lang.String authenticateUser(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throwsjava x.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, userCredentials))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java x.servlet.http.HttpServletRequest) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Adding user using credentials"); response.addCookie(newjava x.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw newjava.lang.RuntimeException(ex.getMessage(), ex); } }
java @java.lang.Override public org.ovirt.engine.core.sso.utils.AuthResult doAuth(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava x.servlet.http.HttpServletException { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Authn: Basic Auth"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.AuthResult retVal = new org.ovirt.engine.core.sso.utils.AuthResult(); if ((credentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials))) { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(credentials); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN)))); if ((retVal.getToken())!= null) { org.ovirt.engine.core.sso.utils.NonInteractiveAuth.log.debug("Authn: authentication succeeded"); retVal.setStatus(Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } } return retVal; }
@java.lang.Override protected void service(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava x.servlet.ServletException { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Getting basic auth credentials from header"); org.ovirt.engine.core.sso.utils.Credentials credentials = org.ovirt.engine.core.sso.utils.SsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (credentials!= null) && (org.ovirt.engine.core.sso.utils.SsoUtils.isValidCredentials(request, credentials)); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.error("Error validating credentials: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Valid redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_URI); org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_URI))); } else { org.ovirt.engine.core.sso.servlets.InteractiveBasicAuthServlet.log.debug("Failed redirecting to url: {}", SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_LOGIN_NEXT_AUTH_URI))); } }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId,java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Failed to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }
javajava publicjava.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid dstDomain, org.ovirt.engine.core.compat.Guid imageGroupID) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }
java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, storageDomainDao.get(dstDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
public staticjava.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcDomain) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, srcDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(srcDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(),java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVds(host); return event; }
private void verifyAuditLoggableBaseFilledProperly(org.ovirt.engine.core.bll.network.NetworkConfigurator underTest, org.ovirt.engine.core.common.AuditLogType auditLogType) { try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), eq(auditLogType), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); return; } fail("The test should lead to NetworkConfiguratorException"); }
@org.junit.Test public void testCreateManagementNetworkIfRequiredFailsOnDifferentVlanId() { host.setActiveNic(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID); managementNetwork.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID); try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogDirector).log(auditLogableBaseArgumentCaptor.capture(), same(AuditLogType.VLAN_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); finaljava.util.Map<java.lang.String,java.lang.String> capturedCustomValues = capturedEvent.getCustomValues(); assertThat(capturedCustomValues, hasEntry("vlanid",java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("mgmtvlanid",java.lang.String.valueOf(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("interfacename", org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME)); return; } fail("The test should lead to NetworkConfiguratorException"); }
public static <T>java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) {java.util.List<java.lang.String> messages =java.util.Collections.emptyList();java.util.Set<java x.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(newjava.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = newjava.util.ArrayList(violations.size()); for (java x.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage());java x.validation.metadata.ConstraintDescriptor<?> constraintDescriptor = constraintViolation.getConstraintDescriptor(); if (constraintDescriptor!= null) {java.util.Map<java.lang.String,java.lang.Object> violationAttributes = constraintDescriptor.getAttributes(); for (java.util.Map.Entry violationAttribute : violationAttributes.entrySet()) {java.lang.String message =java.lang.String.format("$%s %s", violationAttribute.getKey(), violationAttribute.getValue()); messages.add(message); } } if ((constraintViolation.getPropertyPath())!= null) { messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("path", constraintViolation.getPropertyPath())); } messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString("validatedValue", constraintViolation.getInvalidValue())); } } return messages; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity(), 22); }
@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { waitForConnect(); } finally { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message); send(addCorrelationId(msg)); } }
@java.lang.Override public void sendMessage(byte[] message) { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, this.getRequestQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message); send(addCorrelationId(msg)); }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB,java.lang.String.valueOf(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb())); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())).<org.ovirt.engine.core.common.businessentities.VM>getReturnValue().getStaticData(); final int finalMemorySize = (nextRunConfigurationStatic.getMemSizeMb()) - (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()); if (finalMemorySize > 0) { updateVm(nextRunConfigurationStatic, finalMemorySize); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("currentVmState", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())); } if ((getDeviceToHotUnplug()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("memorySize", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getName())); } return true; }
private void updateVm(org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic, int finalMemorySize) { nextRunConfigurationStatic.setMemSizeMb(finalMemorySize); final org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(nextRunConfigurationStatic); updateVmParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); runInternalAction(VdcActionType.UpdateVm, updateVmParams); }
public void setReturnValueFailure(org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueFailure) { org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(false); final org.ovirt.engine.core.common.errors.EngineFault engineFault = new org.ovirt.engine.core.common.errors.EngineFault(); engineFault.setError(returnValueFailure.getVdsError().getCode()); engineFault.setMessage(returnValueFailure.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().setFault(engineFault); }
.lang.StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString
javajava.lang.String ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND();
public staticjava.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw newjava.lang.RuntimeException(java.lang.String.format("Memory device expected but device %s passed of type %s", memoryDevice, memoryDevice.getType())); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { returnjava.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); }
protected org.ovirt.engine.core.common.businessentities.VmDevice getDeviceToHotUnplug() { if ((deviceToHotUnplug) == null) { deviceToHotUnplug = computeDeviceToHotUnplug(); } return deviceToHotUnplug; }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }
private org.ovirt.engine.core.common.businessentities.VmDevice computeDeviceToHotUnplug() { finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = vmDeviceDao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), VmDeviceGeneralType.MEMORY); finaljava.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice> reversedMemoryDevices = newjava.util.ArrayList(memoryDevices);java.util.Collections.reverse(reversedMemoryDevices); return memoryDevices.stream().filter(( device) ->java.util.Objects.equals(getParameters().getMemorySizeMb(), org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device))).findFirst().orElse(null); }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getSharedLocks() { finaljava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> result = newjava.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().getSucceeded()? org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUGGED : org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUG_FAILED; }
private void setQcowCompat(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { newDiskImage.setQcowCompat(QcowCompat.QCOW2_V2); org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get(storagePoolId); if ((sp!= null) && (org.ovirt.engine.core.common.FeatureSupported.qcowCompatSupported(sp.getCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(storagePoolId, storageDomainId, diskId, volumeId, null, true); if (qemuImageInfo!= null) { newDiskImage.setQcowCompat(qemuImageInfo.getQcowCompat()); } } } }
private void setQcowCompat(org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { try { setQcowCompatByQemuImageInfo(newDiskImage.getStoragePoolId(), newDiskImage.getId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage); imageDao.update(newDiskImage.getImage()); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image info for image '{}' (image group: '{}') on domain '{}'", newDiskImage.getImageId(), newDiskImage.getId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } } }
protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VmStatic.class); expect(vmStatic.getId()).andReturn(id).anyTimes(); org.ovirt.engine.core.common.businessentities.VM vm = control.createMock(org.ovirt.engine.core.common.businessentities.VM.class); expect(vm.getId()).andReturn(id).anyTimes(); expect(vm.getStaticData()).andReturn(vmStatic).anyTimes(); return vm; }
private org.ovirt.engine.ui.frontend.server.dashboard.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime =java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime =java.lang.System.currentTimeMillis(); dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_CACHE_UPDATE_INTERVAL,java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Data utilization cache updated in {}ms", (endTime - startTime)); return dashboard; }
private org.ovirt.engine.ui.frontend.server.dashboard.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime =java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Inventory inventory = lookupInventory(); long endTime =java.lang.System.currentTimeMillis(); inventoryCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_KEY, inventory, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL,java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Inventoy cache updated in {}ms", (endTime - startTime)); return inventory; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVmId(iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModelChangedEvent() { @java.lang.Override public void onPropertyChanged(org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModelChangedEvent event) {java.lang.String propertyName = event.getPropertyName(); if ("Message".equals(propertyName)) { getView().setMessageLabel(model.getMessage()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener((this, sender, args) -> getView().toggleSubnetVisibility(model.getExport().getEntity())); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener((this, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler((event) -> getView().getQosButton().getCommand().execute()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (event) -> { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); })); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler((event) -> menuItem.setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }
public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_STRING, ((org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.String>) (result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_STRING; })); }
public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_BOOLEAN, ((org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Boolean>) (result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_BOOLEAN; })); }
public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, JsFunction.RESULT_TYPE_NUMBER, ((org.ovirt.engine.ui.webadmin.plugin.jsni.JsFunction.ResultHandler<java.lang.Double>) (result) -> { this.resultValue = result; this.resultType = JsFunction.RESULT_TYPE_NUMBER; })); }
@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(new com.google.gwt.user.client.Command<java.lang.Void>() { @java.lang.Override public void execute() { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.model.removeFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.menuPopup.hide(); } }); } else { menuBar.addItem(new com.google.gwt.user.client.Command<java.lang.Void>() { @java.lang.Override public void execute() { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.model.addFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.menuPopup.hide(); } }); } }
org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item);java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation,java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (finaljava.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation,java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { finaljava.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "There is a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), ((com.google.gwt.user.client.Command) (() -> executeCommand(entry.getKey(), commands.get(0))))); } else {java.util.Collections.sort(commands,java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), ((com.google.gwt.user.client.Command) (() -> executeCommand(command.getKey(), command.getVerb())), command.getCommand())); } } } return menu; }
protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), ((com.google.gwt.user.client.Command) (() -> { model.removeFilter(policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } else { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.addFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } }
void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position)!= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, 0); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); }))); } if ((position) >= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.firstFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, (-1)); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); })); } if ((position) <= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.lastFilter(), ((com.google.gwt.user.client.Command) (() -> { model.addFilter(policyUnit, used, 1); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } )) ); } menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.position(), subMenu); }
com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.resources.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.event.dom.client.ClickHandler(event) -> toggleVisibleWestPanel())); result.setVisible(false); result.addStyleName(style.sliderButton()); result.addStyleName("tslp_sliderButton_pfly_fix"); return result; }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(event1, event2); }
org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu getRefreshOptionsMenu() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu refreshOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenu(true); refreshOptionsMenu.setStylePrimaryName(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.constants.refreshRate(), ((com.google.gwt.user.client.Command) (() -> { }))); title.setEnabled(false); title.setStylePrimaryName(style.refreshMenuTitle()); refreshOptionsMenu.addItem(title);java.util.Set<java.lang.Integer> refreshRates = org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.getRefreshRates(); int itemIndex = 0; for (java.lang.Integer refreshRate : refreshRates) { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand command = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionCommand(); org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem refreshRateOption = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionMenuItem(refreshRate, command); refreshRateOption.setStylePrimaryName(style.refreshRateOption()); command.setMenuItem(refreshRateOption); refreshOptionsMenu.addItem(refreshRateOption); if (itemIndex!= ((refreshRates.size()) - 1)) { com.google.gwt.user.client.ui.MenuItemSeparator separator = refreshOptionsMenu.addSeparator(); separator.getElement().getStyle().setBackgroundColor("#E0E9F2"); } itemIndex++; } return refreshOptionsMenu; }
@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileUpload inputFileWidget = new com.google.gwt.user.client.ui.FileUpload(); inputFileWidget.getElement().setAttribute("accept", "image/gif,image/jpeg,image/png"); inputFileWidget.addChangeHandler(event1 -> readUploadedIconFile(inputFileWidget.getElement())); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.click(); }
private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.Command) (() -> { menuPopup.asPopupPanel().hide(); buttonDef.onClick(selectedItemsProvider.getSelectedItems()); }))); menuItem.addStyleName(style.menuItem()); updateMenuItem(menuItem, buttonDef, selectedItemsProvider.getSelectedItems()); menuPopup.getMenuBar().addItem(menuItem); items.add(new org.ovirt.engine.core.common.utils.Pair(menuItem, buttonDef)); } menuPopup.asPopupPanel().setAutoHideEnabled(true); menuPopup.asPopupPanel().addAutoHidePartner(dropdownButton.getElement()); menuPopup.asPopupPanel().addCloseHandler((event) -> dropdownButton.setDown(false)); }
private void createMenu(finaljava.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), ((com.google.gwt.user.client.Command) (() -> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }))); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), ((com.google.gwt.user.client.Command) (() -> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }))); } }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (memoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); onMemoryHotUnplugConfirmed(); } else if (command == (cancelMemoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); } }
private void onMemoryHotUnplugConfirmed() { final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } log(("call MemoryHotUnplugCommand " + vmDevice)); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\"></span>{1}</button>") com.google.gwt.safehtml.shared.SafeHtml button(java.lang.String id,java.lang.String hotUnplugLabel);

@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_HEART_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Running Heart Beat - Start"); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew, () -> { heartBeatVar.setDateTime(newjava.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Running Heart Beat - End"); return null; }); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
@java.lang.Override protected void teardown() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> { int sleepTimeInSec = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ServerRebootTimeout); org.ovirt.engine.core.bll.pm.log.info("Sleeping { } seconds, for server to finish boot process.", sleepTimeInSec); org.ovirt.engine.core.utils.ThreadUtils.sleep(TimeUnit.SECONDS.toMillis(sleepTimeInSec)); if (getParameters().isChangeHostToMaintenanceOnStart()) { setStatus(VDSStatus.Maintenance); } else { setStatus(VDSStatus.NonResponsive); } }); }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { try { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user!= null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } } catch (java x.ws.rs.WebApplicationException ex) { } }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity device) { return device.getAddress(); }
private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity>() { @java.lang.Override publicjava.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity object) { return object.isPlugged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity object) { return false; } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity vmDevice) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity device, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLICK.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget()))))) { return; } for (org.ovirt.engine.ui.common.widget.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity> clickHandler : clickHandlers) { clickHandler.onClick(event, device); } }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button class=\"btn btn-default\" id=\"{0}\" disabled></span>{1}</button>") com.google.gwt.safehtml.shared.SafeHtml disabledButton(java.lang.String id,java.lang.String hotUnplugLabel);
@java.lang.Override publicjava.lang.String toString() { return newjava.lang.StringBuilder().append("{0}.", super.toString()).build(); }
public boolean isBeingUnplugged() { return isBeingUnplugged; }
@java.lang.SuppressWarnings("unchecked") protectedjava.util.Collection<T> convertQueriedData(org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue) { return ((java.util.Collection<T>) (queryReturnValue.getReturnValue())); }
private void onMemoryHotUnplugConfirmed() { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity vmDeviceFeEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } devicesBeingHotUnplugged.add(vmDeviceFeEntity, new org.ovirt.engine.ui.uicommonweb.models.utils.ExpiringSet.RemovalAction<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); } }); updateItems(); log(("MemoryHotUnplugCommand " + vmDeviceFeEntity)); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder getToStringBuilder() { return super.getToStringBuilder().append("isBeingUnplugged", isBeingUnplugged); }
public void setBeingUnplugged(boolean beingUnplugged) { this.isBeingUnplugged = beingUnplugged; }
@java.lang.Override publicjava.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFe object) { return object.isManaged(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(convertQueriedData(returnValue)); }
private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.
private void updateItems() {java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity : items) { vmDeviceFeEntity.setBeingUnplugged(devicesBeingHotUnplugged.contains(vmDeviceFeEntity)); } setItems(items); }
private int toSortingIndex(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice)))? 0 : 1; }
@java.lang.Override publicjava.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFe object) { return object.getReadOnly(); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity device) { return device.getSpecParams().toString(); }
public void onHotUnplug(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDeviceFeEntity) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { return; } finaljava.lang.Integer memorySizeMb = ((java.lang.Integer) (vmDeviceFeEntity.getSpecParams().get("size"))); if (memorySizeMb == null) { return; } setSelectedItem(vmDeviceFeEntity); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.constants.memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.memoryHotUnplugConfirmation(memorySizeMb, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity().getName())); confirmationModel.getCommands().add(memoryHotUnplugCommand); confirmationModel.getCommands().add(cancelMemoryHotUnplugCommand); setConfirmWindow(confirmationModel); }
@java.lang.Override publicjava.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFe object) { return object.isPlugged(); }
@java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); }
private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm.vm
private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity>() { @java.lang.Override publicjava.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity object) { return object.isManaged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity object) { return false; } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.vm.VmDeviceFeEntity> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.vm.VmDeviceFeEntity>() { @java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.vm.VmDeviceFeEntity device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity> readonlyColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity>() { @java.lang.Override publicjava.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity object) { return object.getReadOnly(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity object) { return false; } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDeviceFeEntity device) { return device.getDevice(); }
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.setWipeAfterDelete(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
privatejava.lang.String composeObjectId() { return new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventKeyComposer(event, logType).composeObjectId(); }
private void compose(java.lang.StringBuilder builder,java.lang.String key,java.lang.String value) { if ((builder.length()) > 0) { builder.append(KEY_PARTS_DELIMITER); } builder.append(key).append(NAME_VALUE_SEPARATOR).append(value); }
private boolean hasHostExternalStatus() { return ((getEvent().getVdsId())!= null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())!= null); }
@java.lang.Override protected boolean validate() { if (((getEvent()) == null) || (org.ovirt.engine.core.bll.AuditLog.OVIRT_ORIGIN.equalsIgnoreCase(getEvent().getOrigin()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); } return true; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() {java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_HOST_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }
private boolean hasStorageDomainExternalStatus() { return ((getEvent().getStorageDomainId())!= null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())!= null); }
protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageStaticData = getStorageDomain().getStorageStaticData(); org.ovirt.engine.core.bll.storage.domain.storageDomainStaticDao.save(storageStaticData); getCompensationContext().snapshotNewEntity(storageStaticData); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic newStorageDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(null, getStorageDomain().getId(), null); getReturnValue().setActionReturnValue(getStorageDomain().getId()); storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().snapshotNewEntity(newStorageDynamic); getCompensationContext().stateChanged(); return null; }); if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.createDefaultDiskProfile(); } }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastFilesBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.FILES); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else {java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays);java.util.Date lastDbBackupDate = lastDbBackup.getDoneAt();java.util.Date lastFilesBackupDate = lastFilesBackup.getDoneAt();java.util.Date lastFullBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0)? lastDbBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
private staticjava.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { finaljava.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error("Resource bundle '{}' is not translated in '{}'", key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { getCallsHandler().executeModification("InsertAuditLog", event.isExternal()? getExternalEventSqlMapper(event) : getSqlMapper(event)); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true);java.lang.String message = truncateMessage(getEvent().getMessage()); switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); break; case WARNING : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_WARNING, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case ALERT : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.alert(event, AuditLogType.EXTERNAL_ALERT, auditLogDirector, message); break; } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = auditLogDao.getByOriginAndCustomEventId(getEvent().getOrigin(), getEvent().getCustomEventId()); if (auditLog!= null) { setActionReturnValue(auditLog.getAuditLogId()); org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasStorageDomainExternalStatus()) { storageDomainDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
public boolean discover() { boolean dbUpdated = false;java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("DB updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Broker returned empty result when talking to broker. Disabling external units");java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void hotSetMemory(int currentMemoryMb, int newAmountOfMemoryMb) { final int minimalHotPlugDeviceSizeMb = HotSetAmountOfMemoryCommand.HOTPLUG_MEMORY_SIZE_FACTOR_MB; finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDeviceUtils().getMemoryDevices(getVmId()); final boolean minimalMemoryDevicePresent = memoryDevices.stream().anyMatch(( device) -> (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device)) == minimalHotPlugDeviceSizeMb); final int secondPartSizeMb = (newAmountOfMemoryMb - currentMemoryMb) - minimalHotPlugDeviceSizeMb; if (minimalMemoryDevicePresent || (secondPartSizeMb == 0)) { hotPlugMemoryDevice(currentMemoryMb, newAmountOfMemoryMb); return; } hotPlugMemoryDevice(currentMemoryMb, (currentMemoryMb + minimalHotPlugDeviceSizeMb)); hotPlugMemoryDevice((currentMemoryMb + minimalHotPlugDeviceSizeMb), newAmountOfMemoryMb); }
private void hotPlugMemoryDevice(int currentMemoryMb, int newAmountOfMemoryMb) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugAction.PLUG, 0, (newAmountOfMemoryMb - currentMemoryMb)); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded()? newAmountOfMemoryMb : currentMemoryMb)); } hotSetMemlog(params, setAmountOfMemoryResult); }
private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId()) { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().isPassthrough()) { org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.setNetworkFilterId(null); } else { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); if (networkFilter!= null) { final org.ovirt.engine.core.compat.Guid networkFilterId = networkFilter.getId(); setNetworkFilterId(networkFilterId); } } } }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId(); return (((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }
public boolean isUseDefaultNetworkFilterId() { return useDefaultNetworkFiterId; }
publicjava.lang.String getCompatibilityVersion() { return compatibilityVersion; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); actionParameters.setParentCommand(VdcActionType.RunAsyncAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncActionCommand.setSucceeded(true); }
public boolean isLegal() { if (useTimeout) {java.lang.String keyForCheck = ("".equals(timeoutObjectId))? logType.toString() : timeoutObjectId;java.lang.String value = org.ovirt.engine.core.dal.utils.CacheManager.getTimeoutBaseCache().get(keyForCheck, keyForCheck, endTime,java.util.concurrent.TimeUnit.MILLISECONDS); return value == null; } return true; }
private boolean validateManagementNetworkAttachment() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolume, topVolume); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.SubchainInfo that = ((org.ovirt.engine.core.common.businessentities.SubchainInfo) (o)); return ((((java.util.Objects.equals(storageDomainId, that.storageDomainId)) && (java.util.Objects.equals(imageGroupId, that.imageGroupId))) && (java.util.Objects.equals(baseImageGeneration, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImage))) && (java.util.Objects.equals(topImage, that.topImage)); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((storageDomainId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageGroupId) == null? 0 : imageGroupId.hashCode()); result = (prime * result) + ((baseImageGeneration) == null? 0 : baseImageGeneration.hashCode()); result = (prime * result) + ((topImage) == null? 0 : topImage.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImageGeneration) == null? 0 : baseImageGeneration.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImageGeneration) == null? 0 : baseImageGeneration.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImageGeneration) == null? 0 : baseImageGeneration.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImageGeneration) == null? 0 : baseImageGeneration.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImageGeneration) == null? 0 : baseImageGeneration.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); result = (prime * result) + ((baseImage) == null? 0 : baseImage.hashCode()); return result; }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksListForStorageAllocations() { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSnapshotsDummiesForStorageAllocations(getSourceImages()); }
@java.lang.Override publicjava.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId).append("imageGroupId", imageGroupId).append("baseImage", baseImage).append("topImage", topImage).append("baseImageGeneration", baseImageGeneration).build(); }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo())!= null) {java.util.Map<java.lang.String,java.lang.Object> vmInfo = ((java.util.Map<java.lang.String,java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) {java.util.Map<java.lang.String,java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String,java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(((java.lang.String) (vdsmDevice.get(VdsProperties.DeviceId))))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo())!= null) {java.util.Map<java.lang.String,java.lang.Object> vmInfo = ((java.util.Map<java.lang.String,java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object[]) (vmInfo.get(VdsProperties.Devices)))) {java.util.Map<java.lang.String,java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String,java.lang.Object>) (o)); if (vmDevice.getId().getDeviceId().toString().equals(vdsmDevice.get(VdsProperties.DeviceId))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAlias(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.get(VdsProperties.Alias))))); } } } } }
@java.lang.Override protected boolean validateInputManagementNetwork() { if (!(org.ovirt.engine.core.bll.AddClusterCommand.findInputManagementNetwork())) return false; final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkRequired(managementNetwork))) && (validate(networkClusterValidator.managementNetworkNotExternal(managementNetwork))))); }
protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())); } return false; }
protectedjava.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId()); } return cachedVmsDeviceInfo; }
@java.lang.Override protected void init() { cachedParamsToDisks = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getParametersList().stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), (p) -> diskImageDao.get(p.getImageId()))); }
private boolean isTemplate() { return!(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == null) || (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType()))); }
protected boolean checkTemplateInDestStorageDomain() { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean isImageExist() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
privatejava.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())!= null? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
protected boolean checkOperationIsCorrect() { if ((((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType())!= null)) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK,java.lang.String.format("$%1$s %2$s", "diskAliases", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getExclusiveLocks() { returnjava.util.Collections.singletonMap(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())!= null? org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId() : org.ovirt.engine.core.compat.Guid.Empty).toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage())); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() {java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = newjava.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSizeInGigabytes())))); if ((org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move) == (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation())) { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())!= null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), ((double) (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSizeInGigabytes())))); } } return list; }
protected boolean setAndValidateDiskProfiles() { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED,java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) || ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)); if ((moveOrCopy && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS,java.lang.String.format("$%1$s %2$s", "diskAlias", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }
@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImageWithNoVmDevice(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } } }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return null; }java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = vmTemplateDao.getAllForImage(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId()).values(); return!(templates.isEmpty())? templates.iterator().next() : null; }
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
java @java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = newjava.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null)? org.ovirt.engine.core.compat.Guid.Empty : image.getId(); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(diskId, org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); cachedPermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }
protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); image.setId(newId); image.setImageId(newImageId); image.setDiskAlias(getDiskAlias()); image.setStorageIds(newjava.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.setQuotaId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); image.setImageTemplateId(Guid.Empty); parameters.setDestinationImageId(newImageId); parameters.setDestImageGroupId(newId); }
private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskProfileId())); }
protected void log() { finaljava x.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { try { auditLogDirector.log(this, org.ovirt.engine.core.bll.CommandBase.getAuditLogTypeValue()); } catch (finaljava.lang.RuntimeException ex) { log.error("Error during log command: {}. Exception {}", getClass().getName(), ex.getMessage()); log.debug("Exception", ex); } } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } }

protected static org.ovirt.engine.core.dao.BaseDaoTestCase.IDatabaseConnection getConnection() throwsjava.lang.Exception {java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.FEATURE_ALLOW_EMPTY_FIELDS, true); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }
public void setComment(java.lang.String value) { comment = value; }
java @java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throwsjava.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId!= null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } entity.setQosId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id")); entity.setLabel(rs.getString("label")); entity.setDnsResolverConfiguration(new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().parseNameServersString(rs.getString("name_servers"))); return entity; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); mapper.addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().getNameServersString(networkAttachment.getDnsResolverConfiguration())); return mapper; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId())).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()); }
org.ovirt.engine.core.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds);
@java.lang.Override protected void executeVdsBrokerCommand() { vmDevicesListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getBroker().listVmDevices(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getParameters().getVmIds()); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.proceedProxyReturnValue(); setReturnValue(vmDevicesListReturn.getDevicesList()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn listVmDevices(java.util.List<java.lang.String> vmIds) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMDevices").withOptionalParameterAsList("vmList", vmIds).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmDevices").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturn(response); }
org.ovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovov
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageLeaseListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageLeasePresenter.constants.storageLeaseSubTabLabel(), 8, modelProvider); }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, "", true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.VmPopupView.getTooltip(vmStatic); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.businessentities.VmStatic>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getVmStaticTooltip(); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.Context context, org.ovirt.engine.core.common.businessentities.VmStatic vm, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb,java.lang.String id) { com.google.gwt.resources.client.ImageResource image = (Guid.Empty.equals(vm.getVmtGuid()))? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.vmImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.resources.templatesImage(); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML())); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsWithLeaseByStorageId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }
private boolean isManagementNetworkChanged(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork,java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure) {java.lang.String mgmtNetworkName = managementNetwork.getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : networksToConfigure) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId()); if (bondNic!= null) { if (mgmtNetworkName.equals(bondNic.getNetworkName())) { return true; } } } return false; }
org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); org.ovirt.engine.core.common.businessentities.network.Network managementNetworkOfThisCluster = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId());java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(managementNetworkOfThisCluster); boolean managementNetworkChanged = isManagementNetworkChanged(managementNetworkOfThisCluster, networksToConfigure); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), networksToConfigure, getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); return hostCmdParams; }
private void testFillReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { nic.setNetworkName(network.getName()); when(interfaceDao.getAllInterfacesForVds(eq(hostId))).thenReturn(java.util.Arrays.asList(baseNic, vlanNic)); when(networkDao.getAllForCluster(eq(clusterId))).thenReturn(java.util.Collections.singletonList(network)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setNetworkId(network.getId()); when(effectiveHostNetworkQos.getQos(networkAttachment, network)).thenReturn(networkQos); filler.fillReportedConfiguration(networkAttachment, hostId); verify(filler).createNetworkInSyncWithVdsNetworkInterface(networkAttachment, nic, network, vds, cluster); }

private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncedNetwork = attachmentNotReportedByTheEngine || (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncRequestedByUser = (!syncedNetwork) && (java.lang.Boolean.TRUE.equals(getIsToSync().getEntity())); if ((newAttachment || syncedNetwork) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } }
java @java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); nameServerWidget.edit(model.getDnsConfigurationModel().getNameServerModelListModel()); }
@java.lang.Override public T flush() { profilesEditor.flush(); subnetWidget.flush(); nameServerWidget.flush(); return null; }
java @java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); getTabNameMapping().put(TabName.DNS_CONFIGURATION_TAB, this.dnsConfigurationTab); }
public void init() { listenToSetDnsConfigurationCheckboxChanges(); boolean shouldSetDnsConfiguration = shouldSetDnsConfiguration(); setDnsConfiguration.setEntity(shouldSetDnsConfiguration);java.util.List<org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel> nameServerModels = newjava.util.ArrayList<>(); if (shouldSetDnsConfiguration) { for (org.ovirt.engine.core.common.businessentities.network.NameServer nameServer : getEntity().getNameServers()) { nameServerModels.add(new org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel(nameServer)); } } nameServerModelListModel.setItems(nameServerModels); }
java @java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender));java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesWidget.edit(object.getCustomPropertiesModel()); customPropertiesLabel.setEnabled(object.getCustomPropertiesModel().getIsChangable()); dnsConfigurationTab.setVisible(object.getDnsConfigurationModel().getIsAvailable()); dnsConfigurationWidget.edit(object.getDnsConfigurationModel()); }
private void listenToSetDnsConfigurationCheckboxChanges() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = setDnsConfiguration.getEntityChangedEvent(); entityChangedEvent.clearListeners(); entityChangedEvent.addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); } }); }
public boolean validate() { if (!(this.getSetDnsConfiguration().getEntity())) { setIsValid(true); return true; } boolean isValid = true; for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { if (!(nameServerModel.validate())) { isValid = false; } } setIsValid(isValid); return isValid; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsChangable".equals(args.propertyName)) { boolean value = getIsChangable(); setDnsConfiguration.setIsChangeable(value); nameServerModelListModel.setIsChangeable(value); } }
public org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration flush() {java.lang.Boolean shouldSetDnsConfiguration = this.setDnsConfiguration.getEntity(); if (!shouldSetDnsConfiguration) { return null; } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration();java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = newjava.util.ArrayList<>(); dnsResolverConfiguration.setNameServers(nameServers); for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.nameServerModelListModel.getItems()) { nameServers.add(nameServerModel.flush()); } return dnsResolverConfiguration; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { init(); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getSetDnsConfiguration() { return setDnsConfiguration; }
public boolean validate() { nameServerEntity.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.Ipv4OrIpv6AddressValidation() }); setIsValid(nameServerEntity.getIsValid()); return getIsValid(); }
public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.aliasDisk(), true, "120px"); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.typeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase>(new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.VmTypeCell()) { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } @java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString((vmBase instanceof org.ovirt.engine.core.common.businessentities.VmStatic? org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.vm() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.constants.template())); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageLeaseView.aliasColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmBase>() { @java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase.getName(); } }; }
public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { finaljava.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.stream().filter(( d) ->!(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_DEV_EXCEEDED_LIMIT,java.lang.String.format("$VmName %1$s", vm.getName()),java.lang.String.format("$UnmanagedUsbDevices %1$s", unmanagedControllers)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void setVmLeasesAvailability() { TModel model = getModel(); org.ovirt.engine.core.compat.Version compVer = model.getSelectedCluster().getCompatibilityVersion(); if ((model.getCustomCompatibilityVersion().getSelectedItem())!= null) { compVer = model.getCustomCompatibilityVersion().getSelectedItem(); } vmLeasesSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeasesFeatureSupported(compVer); if (!(vmLeasesSupported)) { model.getLease().setIsChangeable(false, constants.vmLeasesSupported()); } else { model.getLease().setIsChangeable(model.getIsHighlyAvailable().getEntity()); } }
protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsAvailable(false); getModel().getLease().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(ha); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(ha); if (!ha) { getModel().getLease().setSelectedItem(null); } }
org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(diskId, vmId); dve.setReadOnly(true); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(); parameters.setVmId(vmId); parameters.setVmName(vmName); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); parameters.setVmType(vmType); return parameters; }
@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertFalse (listReturned.isEmpty()); }
private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertEquals(2, listReturned.size()); }
@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { return checkStorageDomainStatus(newjava.util.HashSet<org.ovirt.engine.core.common.businessentities.StorageDomainStatus>(java.util.Arrays.asList(statuses))); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getMonitoredOrLockedDomainList(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { return domainsList.stream().filter(( d) -> (StorageConstants.monitoredDomainStatuses.contains(d.getStatus())) || (d.getStatus().isStorageDomainInProcess())).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = newjava.util.ArrayList<>();java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue(listReturned.isEmpty()); }
private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter((d) -> getParameters().getDisks().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }
@org.junit.Test public void testImagesDoesNotExist() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage1 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage();java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesFromParams = newjava.util.ArrayList<>(); diskImagesFromParams.addAll(java.util.Arrays.asList(diskImage1, diskImage2));java.util.Set<org.ovirt.engine.core.compat.Guid> guidsForDiskImages = diskImagesFromParams.stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toSet()); cmd.getParameters().setDisks(guidsForDiskImages); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(guidsForDiskImages); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) {java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = vm.getDiskList().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.DR_SNAPSHOT_NAME_SUFFIX)), false); params.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); params.setDisks(diskIds); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks())!= null) { getDiskImagesForVm().stream().filter(( d) ->!(getParameters().getDisks().contains(d.getId()))).forEach(( d) -> org.ovirt.engine.core.bll.snapshots.imageDao.updateImageVmSnapshotId(d.getImageId(), newActiveSnapshotId)); } }
private boolean isSpecifiedDisksExist(java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>(disks)); if (!(validate(diskImagesValidator.diskImagesNotExist(disks))) { return false; } return true; }
@org.junit.Test public void validProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsOpenstack(), isValid()); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("Logifying that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus);java.util.Map<java.lang.String,java.lang.String> customValues = newjava.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume.getClusterName(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage((server == null? org.ovirt.engine.core.compat.Guid.Empty : server.getClusterId()), null, server, logType,java.util.Collections.emptyMap()); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.compat.Guid brickId, finaljava.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, clusterId, server.getClusterName()); logable.setBrickId(brickId); logable.setBrickPath(brickPath); auditLogDirector.log(logable, logType); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId,java.lang.String clusterName, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType, finaljava.util.Map<java.lang.String,java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, clusterId, clusterName); if (customValues!= null) { for (java.util.Map.Entry<java.lang.String,java.lang.String> entry : customValues.entrySet()) { logable.addCustomValue(entry.getKey(), entry.getValue()); } } auditLogDirector.log(logable, logType); }
privatejava.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }
java privatejava.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo =java.util.Collections.singletonList(lunFromVg);java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb =java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }
@java.lang.Override protected void executeCommand() { finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage());java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
javajavajavajava.util.Map<java.lang.String, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) {java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId,java.util.function.Function.identity())); return lunsFromVgInfo.stream().collect(java.util.stream.Collectors.groupingBy(( lunFromVgInfo) -> { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromVgInfo.getLUNId()); if (lunFromDb == null) { return saveNewLuns; } boolean lunFromDbHasSamePvId =java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDbHasSamePvId) { if ((((lunFromDb.getDeviceSize())!= (lunFromVgInfo.getDeviceSize())) || (!(java.util.Objects.equals(lunFromDb.getDiscardMaxSize(), lunFromVgInfo.getDiscardMaxSize())))) || (!(java.util.Objects.equals(lunFromDb.getDiscardZeroesData(), lunFromVgInfo.getDiscardZeroesData())))) { return updateExistingLuns; } return noOp; } return updateExistingLuns; } })); }
protected void updateLunsInDb(java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach(( entry) -> entry.getKey().accept(entry.getValue())); if (lunsToUpdateInDbMap.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::affectsDiscardFunctionality)) {java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = lunsToUpdateInDbMap.entrySet().stream().filter (( entry) -> entry.getKey().afflesDiscardFunctionality());java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.storage.LUNs,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunToUpdate = lunsToUpdateInDbMap.entrySet().stream().filter((entry) -> entry.getKey().afflesDiscardFunctionality()).map(java.util.Map.Entry::getValue).flatMap(java.util.List::stream).collect(java.util.stream.Collectors.toList()); discardHelper.logIfLunsBreakStorageDomainDiscardFunctionality(lunsToUpdateInDb, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomainId()); } }
@org.junit.Test public void testGetLunsToUpdateInDbLunExistsInDbButNoInVgInfo() { org.ovirt.engine.core.compat.Guid lunFromDbId = org.ovirt.engine.core.compat.Guid.newGuid();java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), lunFromDbId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.removeLuns); assertLunIdInList(lunsToRemoveFromDb, lunFromDbId); }
@java.lang.Override protected void executeCommand() { finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage());java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().anyMatch(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); return null; }); } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
@org.junit.Test public void testGetLunsToRemoveFromDb() { lunFromVg.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); lunFromDb.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); dummyLun.setId(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.compat.Guid.newGuid().toString())));java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo =java.util.Collections.singletonList(lunFromVg);java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb =java.util.Arrays.asList(lunFromDb, dummyLun); assertTrue(isEqualCollection(command.getLunsToRemoveFromDb(lunsFromVgInfo, lunsFromDb),java.util.Collections.singletonList(lunFromDb))); }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> storageToSnapshots = getDomainsToSnapshotsMap(snapshots); return validOrFirstFailure((entry) -> { org.ovirt.engine.core.compat.Guid sdId = entry.getKey(); org.ovirt.engine.core.common.businessentities.SubchainInfo subchain = storageToSnapshots.get(sdId); return getStorageDomainValidator(entry).hasSpaceForMerge(subchain, snapshotActionType); }); }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { if (storageDomain.getStorageType().isCinderDomain()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; }java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForDisks = getRequiredSizeForMerge(subchain, snapshotActionType); return validateRequiredSpace(availableSize, totalSizeForDisks); }
private double getRequiredSizeForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage baseSnapshot = subchain.getBaseImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage topSnapshot = subchain.getTopImage(); if (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk)) { returnjava.lang.Math.min(((baseSnapshot.getActualSizeInBytes()) + (topSnapshot.getActualSizeInBytes())), baseSnapshot.getSize()); } org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.ColdMergeSnapshotSingleDisk))? baseSnapshot.getVolumeType() : topSnapshot.getVolumeType(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(baseSnapshot.getParentId())) { if ((baseSnapshot.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) { if (volumeType == (org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated)) { return 0.0; } returnjava.lang.Math.min(((topSnapshot.getActualSizeInBytes()) / (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)), ((baseSnapshot.getSize()) - (baseSnapshot.getActualSizeInBytes()))); } } returnjava.lang.Math.min((((topSnapshot.getSize()) * (org.ovirt.engine.core.common.constants.StorageConstants.QCOW_OVERHEAD_FACTOR)) - (baseSnapshot.getActualSizeInBytes())), topSnapshot.getActualSizeInBytes()); }
privatejava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> getDomainsToSnapshotsMap(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { return snapshots.stream().collect(java.util.stream.Collectors.toMap(SubchainInfo::getStorageDomainId,java.util.function.Function.identity())); }
protectedjava x.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId())!= null) { setJobLink(action, actionResult); } if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies();java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); items.remove(this); currentModels.setItems(null); currentModels.setItems(items); }
private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity());java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info, ignoring"); } }
private void validateRetrievedMetadataDevices() { if (org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getHasMetadataDevices()) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Cannot determine the domain metadata devices"); } }
private void refreshMetadataDevicesInfo() {java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice();java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage());java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>,java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { updateLunsInDb(lunsToUpdateInDb); refreshLunsConnections(lunsFromVgInfo); cleanupLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; }); } refreshMetadataDevicesInfo(); org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setStorageDomainName(domain.getName()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }
private static org.ovirt.engine.api.model.IpVersion getIpVersion(java.lang.String address) { if (address == null) { throw newjava.lang.IllegalArgumentException(("Unable to figure out ip version for address: " + address)); } return address.contains(":")? org.ovirt.engine.api.model.IpVersion.V4 : org.ovirt.engine.api.model.IpVersion.V6; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.api.model.DnsResolverConfiguration model, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration template) { org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration target = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); if (model.isSetNameServers()) { org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = model.getNameServers(); if (nameServersList.isSetNameServers()) {java.util.List<java.lang.String> nameServers = nameServersList.getNameServers(); target.setNameServers(nameServers.stream().map(org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper::mapNameServer).collect(java.util.stream.Collectors.toList())); } } return target; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity, org.ovirt.engine.api.model.DnsResolverConfiguration template) { if (entity == null) { return null; }java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = entity.getNameServers(); if (nameServers == null) { return null; }java.util.List<java.lang.String> nameServerList = nameServers.stream().map(NameServer::getAddress).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = new org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList(); nameServersList.getNameServers().addAll(nameServerList); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolverConfiguration(); dnsResolverConfiguration.setNameServers(nameServersList); return dnsResolverConfiguration; }
private static org.ovirt.engine.core.common.businessentities.network.NameServer mapNameServer(java.lang.String address) { switch (org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.getIpVersion(address)) { case V4 : return new org.ovirt.engine.core.common.businessentities.network.NameServer.NameServerIpv4(address); case V6 : return new org.ovirt.engine.core.common.businessentities.network.NameServer.NameServerIpv6(address); default : throw newjava.lang.RuntimeException("Coding error, this should be unreachable."); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource sqlParams = createIdParameterMapper(id); sqlParams.addValue("user_id", userId); sqlParams.addValue("is_filtered", isFiltered); return getCallsHandler().executeRead("GetImageUploadsByCommandId", createEntityRowMapper(), sqlParams); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.filteredGet(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().isFiltered())); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id) { return filteredGet(id, null, false); }
org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);
@org.junit.Test public void testDefaultRouteWhenOutOfSync() { iface.setIpv4DefaultRoute(false); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(true)); }
void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; }java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration());java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration());java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean shouldSetDefaultRoute = new org.ovirt.engine.core.bll.network.host.ShouldSetDefaultRouteFlagAndDnsData().test(true, networkAttachment); boolean engineDefineDnsConfiguration = shouldSetDefaultRoute && ((nameServersOfNetworkAttachment!= null) || (nameServersOfNetwork!= null));java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment!= null)? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel value) { return (!(ghostsDisabled)) && (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(value.getEntity())); }
private boolean canVmNumaPinnedToVds(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) {java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; }java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : vNode.getVdsNumaNodeList()) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource>java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) {java.util.List<T> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource>java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host,java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { returnjava.util.Collections.emptyList(); }java.util.List<T> list = newjava.util.ArrayList<>(); synchronized(this) { for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource>java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm,java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { returnjava.util.Collections.emptyList(); }java.util.List<T> list = newjava.util.ArrayList<>(); synchronized(this) { for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } } return list; }
@java.lang.Override public void delay(java.util.List<org.ovirt.engine.core.compat.Guid> vdsIds) { if (vdsIds.isEmpty()) { return; } org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine update the hosts memory and cpu stats"); long maxUpdateElapsed = vdsIds.stream().mapToLong(( vdsId) -> resourceManager.getVdsManager(vdsId).getLastUpdateElapsed()).max().getAsLong(); long maxWaitTime =java.lang.Math.min(java.lang.Math.max(maxUpdateElapsed,java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(org.ovirt.engine.core.bll.VdsRefreshRate))), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis)); long endTime = (java.lang.System.currentTimeMillis()) + maxWaitTime; for (org.ovirt.engine.core.compat.Guid vdsId : vdsIds) { long currentTime =java.lang.System.currentTimeMillis(); if (currentTime >= endTime) { break; } try { getBlockingQueue(vdsId).poll((endTime - currentTime),java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException e) { } } }
@org.junit.Test public void testNoAffinityGroups() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts =java.util.Arrays.asList(host1, host2); assertThat(policyUnit.filter(cluster, hosts, newVm, null, new org.ovirt.engine.core.common.scheduling.PerHostMessages())).containsExactlyElementsOf(hosts); }
private boolean isVmMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) && (!(vm.isHostedEngine())); }
@org.junit.Test public void testFirstVm() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts =java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm));java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }
@org.junit.Test public void testPositiveAffinity() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts =java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host2); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host2); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, true, vm1, vm2, newVm));java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.POSITIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }
@org.junit.Test public void testNoAffinityGroups() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts =java.util.Arrays.asList(host1, host2);java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); }
@org.junit.Test public void testNegativeAffinity() {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts =java.util.Arrays.asList(host1, host2, host3); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host1); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host3); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, true, vm1, vm2, newVm));java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); affinityGroups.clear(); affinityGroups.add(createAffinityGroup(cluster, EntityAffinityRule.NEGATIVE, false, vm1, vm2, newVm)); scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); }
@java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.NetworkFilterParameter parameter) { validateParameters(parameter, "value"); org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter vmNicFilterParameter = map(parameter); vmNicFilterParameter.setVmInterfaceId(nicId); return performCreate(VdcActionType.AddVmNicFilterParameter, new org.ovirt.engine.core.common.action.VmNicFilterParameterParameters(vmId, vmNicFilterParameter), new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParametersResource.NetworkFilterParameterResolver(parameter.getName())); }
@java.lang.Override public org.ovirt.engine.api.resource.NetworkFilterParameterResource getParameterResource(java.lang.String parameterId) { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameterResource(vmId, nicId, parameterId)); }
javajava.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) {java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> groups = newjava.util.ArrayList<>();java.util.Map<java.lang.String,java.lang.Object> response = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getDomain(), dbUser.getNamespace(),java.util.Arrays.asList(dbUser.getExternalId()), true, true);java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords =java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS,java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUser.getDomain(), group.get(GroupRecord.NAMESPACE), group.get(GroupRecord.NAME), group.get(GroupRecord.ID) )); } } return groups; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetAuthzGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId()));java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue();java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id,java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_groups", groupIds).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogableCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); finaljava.util.Map<java.lang.String,java.lang.String> capturedCustomValues = auditLogableCaptor.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }
@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(this, AuditLogType.USER_FINISHED_REMOVE_DISK); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType,java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize",java.lang.String.valueOf(imageSizeInGigabytes)); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(command, auditLogType); }
public boolean discover() { boolean dbUpdated;java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("DB updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Broker returned empty result when talking to broker."); } return dbUpdated; }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { finaljava.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = newjava.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
javajavajava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { final org.ovirt.engine.core.common.action.ManageNetworkClustersParameters parameters = getParameters(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = groupByClusterId(parameters.getAttachments()); finaljava.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = groupByClusterId(parameters.getDetachments()); finaljava.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> updatesByClusterId = groupByClusterId(parameters.getUpdates()); finaljava.util.Set<org.ovirt.engine.core.compat.Guid> clusterIds =java.util.stream.of(attachmentByClusterId, detachmentByClusterId, updatesByClusterId).flatMap(( e) -> e.keySet().stream()).collect(java.util.stream.Collectors.toSet()); return clusterIds.stream().collect(java.util.stream.Collectors.toMap(java.util.function.Function.identity(), ( clusterId) -> new org.ovirt.engine.core.common.action.ManageNetworkClustersParameters(nullToEmptyList(attachmentByClusterId.get(clusterId)), nullToEmptyList(detachmentByClusterId.get(clusterId)), nullToEmptyList(updatesByClusterId.get(clusterId))), nullToEmptyList(clusterIds))); }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); vmUpdateUtils.upgradeRngDevices(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext(), updateParameters); }
private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); return updateVm(updateParams, disableLock); }
private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersionOrigin(); org.ovirt.engine.core.common.businessentities.VmStatic vmFromDb = vmStaticDao.get(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId()); if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.less(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion()))) { return updateVm(vmFromDb, oldClusterVersion, disableLock); } else if ((!(isRestoreMemory())) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vmFromDb); boolean requiresRngUpdate = vmUpdateUtils.upgradeRngDevices(oldClusterVersion, org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCompatibilityVersion(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.cloneContext(), updateParams); boolean requiresGraphicsUpdate = vmUpdateUtils.upgradeGraphicsDevices(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData(), updateParams, oldClusterVersion); if (requiresRngUpdate || requiresGraphicsUpdate) { return updateVm(updateParams, disableLock); } } return true; }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); vmUpdateUtils.upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) {java.util.List<java.lang.String> params = newjava.util.ArrayList<>(); params.add("Update"); params.add("VM"); params.add(parseErrorMessage(result.getValidationMessages()));java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) {java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams())) { org.ovirt.engine.core.common.businessentities.VmPayload payload = new org.ovirt.engine.core.common.businessentities.VmPayload(disk); for (java.util.Map.Entry<java.lang.String,java.lang.String> entry : payload.getFiles().entrySet()) { entry.setValue(newjava.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(entry.getValue()))); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } } }
@org.junit.runners.Parameterized.Parameters public staticjava.lang.Object[][] comparisonParameters() { return newjava.lang.Object[][]{ newjava.lang.Object[]{ null, false }, newjava.lang.Object[]{ "", false }, newjava.lang.Object[]{ "http://", false }, newjava.lang.Object[]{ "www.redhat.com", false }, newjava.lang.Object[]{ "192.168.0.1", false }, newjava.lang.Object[]{ "ftp://www.redhat.com", false }, newjava.lang.Object[]{ "ftp://192.168.0.1", false }, newjava.lang.Object[]{ "http://www.redhat.com:/main", false }, newjava.lang.Object[]{ "http://www.redhat.com:123456/main", false }, newjava.lang.Object[]{ "http://www.redhat.com:9/main", false }, newjava.lang.Object[]{ "http://1.2.3.4:666", true }, newjava.lang.Object[]{ "http://1.2.3.4", true }, newjava.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]", true }, newjava.lang.Object[]{ "http://[1:2:3:4:5:6:7:8]:666", true }, newjava.lang.Object[]{ "http://www.redhat.com", true }, newjava.lang.Object[]{ "http://www.redhat.com/main", true }, newjava.lang.Object[]{ "http://www.redhat.com/main/index.html", true }, newjava.lang.Object[]{ "http://www.redhat.com:80", true }, newjava.lang.Object[]{ "http://www.redhat.com:80/main", true }, newjava.lang.Object[]{ "http://www.redhat.com:80/main/index.html", true } }; }
@org.junit.Test public void testToBigPort() { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority((((org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6_ADDRESS) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.COLON)) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.TO_BIG_PORT))); assertThat(underTest.isValid(), is(false)); }
@org.junit.Test public void validateDiskIsOvfStore() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.OVF_STORE); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }
@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.MEMORY_DUMP_VOLUME); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }
private static boolean isExternalVM(java.lang.String ovfData) { org.ovirt.engine.core.common.businessentities.OriginType origin = org.ovirt.engine.core.utils.OvfUtils.getVmOrigin(ovfData); if (origin == (org.ovirt.engine.core.common.businessentities.OriginType.EXTERNAL)) { return true; } return false; }
public org.ovirt.engine.core.common.businessentities.VDS refreshHost() { refreshHost(cachedVds); return cachedVds; }
private void setQcowCompatForQcowImage() { org.ovirt.engine.core.common.businessentities.storage.Image image = imageDao.get(getDiskImage().getImageId()); if (((getDiskImage().getDiskStorageType()) == (DiskStorageType.IMAGE)) && (getDiskImage().getVolumeFormat().equals(VolumeFormat.COW))) { setQcowCompat(image, getDiskImage().getStoragePoolId(), getDiskImage().getId(), getDiskImage().getImageId(), getStorageDomainId(), null); imageDao.update(image); } }
@java.lang.Override public void endSuccessfully() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setQcowCompatForQcowImage(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network)); injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain!= null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.providerProxyFactory.create(provider); } return null; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic!= null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.providerProxyFactory.create(provider); } return null; }
private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.providerProxyFactory.create(provider); }
public void deallocateIfExternal() { if (((getNetwork())!= null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = providerProxyFactory.create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().setDiscardAfterDelete(false); } }
@java.lang.Override protected void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(org.ovirt.engine.core.common.FeatureSupported.discardAfterDeleteSupported(compatibilityVersion)); } }
@java.lang.Override public void init() { super.init(); updateStorageDomainDiscardAfterDelete(getTargetStoragePool().getCompatibilityVersion()); }
protected abstract void updateStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion);
protected boolean validateAttachedDirectLuns() { if ((org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()) == null) { return true; }java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool();java.util.Collection<java.lang.String> directLunsNotAttachedToVmInPool = org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds().stream().filter(( lunId) ->!(idsOfDirectLunsAttachedToVmsInPool.contains(lunId))).collect(java.util.stream.Collectors.toList()); return (directLunsNotAttachedToVmInPool.isEmpty()) || (failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL,java.lang.String.format("$lunIds %s", directLunsNotAttachedToVmInPool.stream().sorted().collect(java.util.stream.Collectors.joining(","))),java.lang.String.format("$storagePoolId %s", org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()))); }
private void mockDirectLunsAttachedToVmsInPool(java.lang.String... LunsIds) { doReturn(newjava.util.HashSet(java.util.Arrays.asList(LunsIds))).when(command).getIdsOfDirectLunsAttachedToVmsInPool(); }
@org.junit.Test public void testGetLunsToUpdateInDb() { command.getParameters().setDeviceList(java.util.Arrays.asList(lun1, lun2, lun3)); mockDirectLunsAttachedToVmsInPool("lun1", "lun2"); assertEquals(java.util.Arrays.asList(lun1, lun2), command.getLunsToUpdateInDb()); }
protectedjava.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb() {java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool();java.util.List<java.lang.String> lunsIds =java.util.Optional.ofNullable(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getAttachedDirectLunsIds()).map(java.util.ArrayList::new).orElse(null); return org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getDeviceList(lunsIds).stream().filter((lun) -> idsOfDirectLunsAttachedToVmsInPool.contains(lun.getId())).peek((lun) -> lun.setVolumeGroupId("")).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void validateAttachedDirectLunsWithLunsThatAreNotAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun2", "lun3"); assertFalse(command.validateAttachedDirectLuns()); org.ovirt.engine.core.bll.ValidationTestUtils.assertValidationMessages("lun2 is not attached to a vm in the datacenter.", command, EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL); }
publicjava.util.List<java.lang.String> getAttachedDirectLunsIds() { return attachedDirectLunsIds; }
public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachedDirectLunsIds = attachedDirectLunsIds; }
javajava.lang.String ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL();
protectedjava.util.Set<java.lang.String> getIdsOfDirectLunsAttachedToVmsInPool() { if ((idsOfDirectLunsAttachedToVmsInPool) == null) { idsOfDirectLunsAttachedToVmsInPool = diskLunMapDao.getDiskLunMapsForVmsInPool(org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()).stream().map(DiskLunMap::getLunId).collect(java.util.stream.Collectors.toSet()); } return idsOfDirectLunsAttachedToVmsInPool; }
@org.junit.Test public void validateAttachedDirectLunsAllLunsAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun1", "lun2", "lun3"); assertTrue(command.validateAttachedDirectLuns()); }
@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun3.setId("lun3"); }
@java.lang.SuppressWarnings("unchecked") privatejava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo())!= null) { return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { return lunsFromVgInfo; }
@java.lang.Override protected void executeCommand() { lunDao.updateAll(getLunsToUpdateInDb()); org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.setSucceeded(true); }
public static int getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw newjava.lang.RuntimeException((("memory device expected but device " + memoryDevice) + ": type " + (memoryDevice.getType()))); } finaljava.lang.String sizeText = ((java.lang.String) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); returnjava.lang.Integer.parseInt(sizeText); }
private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDevice.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmDevice.getDevice())) { hasCd = true; } else { continue; } break; case INTERFACE : continue; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case HOSTDEV : continue; } vmDevice.setManaged(true); vmDeviceToAdd.add(vmDevice); } if (!hasCd) { addCdDevice(vmBase.getId()); } }
private static boolean removeMalformedMemoryDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { if ((((vmDevice.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) && (VmDeviceType.MEMORY.getName().equals(vmDevice.getDevice()))) && (((vmDevice.getSpecParams().get(VmDeviceCommonUtils.SPEC_PARAM_SIZE)) == null) || ((vmDevice.getSpecParams().get(VmDeviceCommonUtils.SPEC_PARAM_NODE)) == null))) { return false; } return true; }
@java.lang.Override publicjava x.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); runInternalAction(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams(), null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getParameters().isProcessOvfUpdateForStoragePool()) { syncOvfForStoragePool(); } int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); createOvfStoreDisks(getMissingDiskCount()); } org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$" + "mdev_type=^.*$" + "vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$" + "viodiskcache=^(none|writeback|writethrough)$" + "vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$" + "viodiskcache=^(none|writeback|writethrough)$" + "mdev_type=^.*$" + "vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false))*$" + "viodiskcache=^(none|writeback|writethrough)$" + "vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$" + "viodiskcache=^(none|writeback|writethrough)$" + "viodiskcache=^(none|writeback|writethrough)$" + "viodiskcache=^(none|writeback|writethrough)$" + "mdev_type=^.*$" + "vhost=^(([a
public void setSingleSelectionOnly() { singleSelectionOnly = true; }
public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if ((selectionModel) == null) { if (singleSelectionOnly) { selectionModel = new com.google.gwt.view.client.SingleSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } else { selectionModel = new org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } } return selectionModel; }
protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { if (null == (dataProvider)) { dataProvider = new com.google.gwt.view.client.AsyncDataProvider<T>(org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel().getSelectionModel()) { @java.lang.Override protected void onRangeChanged(com.google.gwt.view.client.HasData<T> display) { updateData(); } }; } return dataProvider; }
@java.lang.Override publicjava.util.List<T> getSelectedItems() { com.google.gwt.view.client.SelectionModel<T> selectionModel = org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel(); if (selectionModel instanceof org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel) { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (selectionModel)).getSelectedList(); } else if (selectionModel instanceof com.google.gwt.view.client.SingleSelectionModel) { returnjava.util.Arrays.asList(((com.google.gwt.view.client.SingleSelectionModel<T>) (selectionModel)).getSelectedObject()); } returnjava.util.Collections.EMPTY_LIST; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(java.util.Arrays.asList(((SingleSelectionModel<org.ovirt.engine.core.common.businessentities.Bookmark>) (getModel().getSelectionModel())).getSelectedObject())); }); }
@java.lang.Override publicjava.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectedObject()))); } else { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelectedModel().getSelected
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$;") + "mdev_type=^.*$;hugepages=^(true|false)|([0-9]+)$;hugepagesz=^[0-9]+$" ))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(newjava.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); utils.init(); return utils; }
public void setHeaderTitle(java.lang.String title) { this.title = title; this.myId = (title.replace( "_", "_") + "_"); }
public void setDataToggleInfo(org.ovirt.engine.ui.webadmin.section.main.view.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.
public void addNotificationListWidget(org.ovirt.engine.ui.webadmin.widget.alert.NotificationListWidget widget) { widget.setDataToggleInfo(Toggle.COLLAPSE, org.ovirt.engine.ui.webadmin.widget.alert.EventsListPopover.EVENT_ACCORDION); contentPanel.add(widget.content); }
private boolean checkIfCollapsed() { boolean result = false; if ((titleAnchor)!= null) {java.lang.String styleString = titleAnchor.getStyleName(); if (styleString!= null) {java.lang.String[] styles = styleString.split(" "); for (java.lang.String style : styles) { if (style.equals(PatternflyConstants.COLLAPSED)) { result = true; break; } } } } else { result = startCollapsed; } return result; }
private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); final org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> table = getTable(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((permissionPanelVisible) && (cpuProfile == null)) { tableContainer.clear(); tableContainer.add(getContainer()); permissionPanelVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile!= null)) { tableContainer.clear(); tableContainer.add(getContainer()); tableContainer.add(permissionContainer); permissionPanelVisible = true; } }); }
publicjava.lang.String getSearchString(java.lang.String prefix) {java.lang.String result = null; if (prefix!= null) { result = searchStringMap.get(prefix); searchStringMap.remove(prefix); } return result; }
@java.lang.Override public void setSearchPanel(com.google.gwt.user.client.ui.IsWidget searchPanel) { actionPanel.setSearchPanel(searchPanel); }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter. getView().setDetailPlaceTransitionHandler(this); this.breadCrumbs.setSelectionModel(getTable().getSelectionModel()); }
@org.junit.Test public void testCommandClassExistence() { org.ovirt.engine.core.bll.CommandEnumTestUtils.testCommandsExist(org.ovirt.engine.core.common.action.ActionType.class, (vat) -> org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(vat.name())); }
@org.junit.Test public void testAuditLogTypeValueUniqueness() {java.util.BitSet bitset = newjava.util.BitSet(org.ovirt.engine.core.bll.ActionTypeTest.bitSetSize);java.util.Set<java.lang.Integer> nonUniqueValues = newjava.util.TreeSet<>(); for (org.ovirt.engine.core.common.action.ActionType vat : org.ovirt.engine.core.common.action.ActionType.values()) { if (bitset.get(vat.getValue())) { nonUniqueValues.add(vat.getValue()); } else { bitset.set(vat.getValue()); } } assertTrue("ActionType contains the following non unique values: " + nonUniqueValues, nonUniqueValues.isEmpty()); }
privatejava.util.Map<java.lang.String,java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) {java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.BALLOON).findFirst(); if (!(db.isPresent())) { returnjava.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/memballoon");java.util.Map<java.lang.String,java.lang.Object> result = newjava.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }
privatejava.util.Map<java.lang.String,java.lang.Object> parseWatchdog(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) {java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.WATCHDOG).findFirst(); if (!(db.isPresent())) { returnjava.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/watchdog");java.util.Map<java.lang.String,java.lang.Object> result = newjava.util.HashMap<>(); result.put(VdsProperties.Device, "watchdog"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }
privatejava.util.List<java.util.Map<java.lang.String,java.lang.Object>> parseVideos(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) {java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.VIDEO).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { returnjava.util.Collections.emptyList(); }java.util.List<java.util.Map<java.lang.String,java.lang.Object>> result = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/video")) {java.util.Map<java.lang.String,java.lang.Object> dev = newjava.util.HashMap<>(); dev.put(VdsProperties.Device, "video"); dev.put(VdsProperties.Address, parseAddress(node));java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias);java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }
publicjava.util.Map<java.lang.String,java.lang.Object> convert(org.ovirt.engine.core.compat.Guid vmId,java.lang.String xml) {java.util.Map<java.lang.String,java.lang.Object> result = newjava.util.HashMap<>(); result.put(VdsProperties.vm_guid, vmId); result.put(VdsProperties.Devices, parseDevices(xml, vmDeviceDao.getVmDeviceByVmId(vmId))); return result; }
privatejava.lang.String parseMacAddress(XmlNode node) { XmlNode aliasNode = node.selectSingleNode("mac"); return aliasNode.attributes.get("address").getValue(); }
privatejava.util.List<java.util.Map<java.lang.String,java.lang.Object>> parseInterfaces(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) {java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.INTERFACE).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { returnjava.util.Collections.emptyList(); }java.util.List<java.util.Map<java.lang.String,java.lang.Object>> result = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/interface")) {java.util.Map<java.lang.String,java.lang.Object> dev = newjava.util.HashMap<>(); dev.put(VdsProperties.Device, "interface");java.lang.String mac = parseMacAddress(node); dev.put(VdsProperties.Address, parseAddress(node));java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias);java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }
privatejava.util.List<java.util.Map<java.lang.String,java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) {java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.CHANNEL).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { returnjava.util.Collections.emptyList(); }java.util.List<java.util.Map<java.lang.String,java.lang.Object>> result = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/channel")) {java.util.Map<java.lang.String,java.lang.Object> dev = newjava.util.HashMap<>(); dev.put(VdsProperties.Device, "channel"); dev.put(VdsProperties.Address, parseAddress(node));java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias);java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }
javajavajavajava.util.Map<java.lang.String,java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId,java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; }java.util.Map<java.lang.String,java.lang.Object>[] result = newjava.util.Map[0];java.util.List<java.lang.String> vmIds = vms.stream().map(Guid::toString).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getResourceManager().runVdsCommand(VDSCommandType.ListVmDevices, new org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.Params(vdsId, vms)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String,java.lang.Object>[]) (vdsReturnValue.getReturnValue())); } return result; }
privatejava.util.Map<java.lang.String,java.lang.Object>[] parseDevices(java.lang.String xml,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.utils.ovf.xml.XmlDocument document; try { document = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(xml); } catch (java.lang.Exception e) { return newjava.util.Map[0]; }java.util.List<java.util.Map<java.lang.String,java.lang.Object>> result = newjava.util.ArrayList<>(); result.add(parseBalloon(document, devices)); result.add(parseRng(document, devices)); result.addAll(parseVideos(document, devices)); result.add(parseWatchdog(document, devices)); result.addAll(parseControllers(document, devices)); result.addAll(parseInterfaces(document, devices)); result.addAll(parseChannels(document, devices)); return result.toArray(newjava.util.Map[0]); }
privatejava.util.Map<java.lang.String,java.lang.Object> parseRng(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) {java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.RNG).findFirst(); if (!(db.isPresent())) { returnjava.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/rng");java.util.Map<java.lang.String,java.lang.Object> result = newjava.util.HashMap<>(); result.put(VdsProperties.Device, "rng"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isDown()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); } else { if ((oldVm.getLeaseStorageDomainId())!= null) { runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())); removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); } else { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); return runInternalAction(VdcActionType.HotPlugLease, params).getSucceeded(); } } return true; }
public boolean isFieldUpdatable(java.lang.Enum<?> status,java.lang.String name,java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer!= null) && ((container)!= null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else {java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values!= null)? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(ActionType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Error in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } if (!hotUnplugSucceeded) { auditLog(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
@java.lang.Override public void endWithFailure() { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.OK, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); }
private void addAffinityLabels() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addVm(org.ovirt.engine.core.bll.AddVmCommand.getVm()); labelDao.update(label); } }
private void updateAffinityLabels() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels();java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVdsId()));java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = newjava.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelDao.update(label); }java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = newjava.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); labelDao.update(label); } }
java @java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer)!= null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterVolumesFromDb(); removeGlusterHooksFromDb(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVdsStatisticsFromDb(); removeVdsDynamicFromDb(); removeVdsStaticFromDb(); removeAffinityLabelsFromDb(); return null; }); removeVdsFromCollection(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }
private void addAffinityLabelsToDb() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVds()); labelDao.update(label); } }
private void updateAffinityLabels() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels();java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(getVmId()));java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = newjava.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); }java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = newjava.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createNewLineModel(java.lang.String key) { org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel = super.createNewLineModel(key); keyValueLineModel.getValue().setIsAvailable(false); keyValueLineModel.getValues().setIsAvailable(false); return keyValueLineModel; }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VM>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) {java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds!= null? vmIds : newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.model.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.List<org.ovirt.engine.core.common.businessentities.VDS>>() { @java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) {java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = getAffinityGroup().getVdsIds();java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds!= null? hostIds : newjava.util.ArrayList())); stopProgress(); } }), clusterId); }
void onSave() { if (!(validate())) { return; } if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmEnforcing(getEnforcing().getEntity()); group.setVmAffinityRule(getVmAffinityRule().getSelectedItem()); group.setVmIds(getVmsSelectionModel().getSelectedVmIds()); group.setVdsEnforcing(getHostAffinityEnforcing().getEntity()); group.setVdsAffinityRule(getHostAffinityRule().getSelectedItem()); group.setVdsIds(getHostsSelectionModel().getSelectedHostIds()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result!= null) && ((result.getReturnValue())!= null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }
@java.lang.Override protected void setValueByKey(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel lineModel,java.lang.String key) { }
@java.lang.Override protected void initLineModel(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel,java.lang.String key) { }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { return!(model.isKeyValid(value.getKeys().getSelectedItem())); }
publicjava.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() {java.util.List<org.ovirt.engine.core.compat.Guid> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) {java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allVmNamesMap.get(selectedItem).getId()); } } return list; }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createGhostValue() { return model.createNewLineModel(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms,java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if ((vms == null) || (usedVms == null)) { return; }java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsMap = newjava.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmsMap.put(vm.getName(), vm); vmsMap.put(vm.getId(), vm); }java.util.Set<java.lang.String> usedVmNames = usedVms.stream().map((guid) -> vmsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allVmNamesMap.keySet(), usedVmNames); }
@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }

publicjava.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() {java.util.List<org.ovirt.engine.core.compat.Guid> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) {java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }

public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget, boolean becomingGhost) { if (!(widget.isEnabled())) { return; } super.toggleGhost(value, widget, becomingGhost); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widgets.remove(widget); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget(); keyLineWidget.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); widgets.add(keyLineWidget); return keyLineWidget; }
protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.WidgetUiBinder.uiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { updateKeyTitle(object); object.getKeys().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.this, object); updateKeyTitle(object); } }); driver.edit(object); }

private org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel getModel() { return hostModel; }
public void showActiveLabels() { activeLabelList.addStyleName(Styles.LIST_INLINE); activeLabelDiv.add(activeLabelList); activeLabelList.clear();java.util.List<org.ovirt.engine.core.common.businessentities.Label> labels = getModel().getLabelList().getSelectedItems();java.util.Collections.sort(labels, (l1, l2) -> l1.getName().compareTo(l2.getName())); for (org.ovirt.engine.core.common.businessentities.Label label : labels) { activeLabelList.add(createActiveLabelItem(label)); } }
@java.lang.Override protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget.WidgetUiBinder.uiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts,java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hosts == null) || (usedHosts == null)) { return; } allHostNamesMap = newjava.util.HashMap();java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hostsMap = newjava.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getName(), host); hostsMap.put(host.getId(), host); }java.util.Set<java.lang.String> usedHostNames = usedHosts.stream().map((guid) -> hostsMap.get(guid).getName()).sorted().collect(java.util.stream.Collectors.toSet()); init(allHostNamesMap.keySet(), usedHostNames); }
@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); getClusterVmListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); getClusterServiceModel().setIsAvailable(((cluster!= null) && (cluster.supportsGlusterService()))); getClusterGlusterHookListModel().setIsAvailable(((cluster!= null) && (cluster.supportsGlusterService()))); getAffinityGroupListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); getCpuProfileListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); getAffinityLabelListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( vmList) -> { Set<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityLabel().getVms();java.util.Collections.sort(vmList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getVmsSelectionModel().init(vmList, (vmIds!= null? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(vmIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgress(); }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AsyncQuery(( hostList) -> {java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds!= null? new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>(hostIds) : new org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.ArrayList<>())); stopProgress(); }), clusterId); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) {java.lang.String join = join(getVmNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }
protectedjava.lang.String join(java.util.List<java.lang.String> strings,java.lang.String separator) {java.lang.StringBuilder result = newjava.lang.StringBuilder(); if (strings == null) { return result.toString(); } for (java.lang.String s : strings) { if ((result.length())!= 0) { result.append(separator); } result.append(s); } return result.toString(); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) {java.lang.String join = join(getHostNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel flush() { return driver.flush(); }
protectedjava.util.List<java.lang.String> getVmNames(org.ovirt.engine.core.common.businessentities.Label label) { return newjava.util.ArrayList(label.getVmNames()); }
protectedjava.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return newjava.util.ArrayList(label.getHostNames()); }
private void updateActionAvailability() { getNewCommand().setIsExecutionAllowed(true); boolean hasSelectedItems = ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems())!= null) && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) > 0); getEditCommand().setIsExecutionAllowed((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed(hasSelectedItems); }
protected void addCommands() { org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this); getCommands().add(command); getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSearchCommand().execute(); }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getConfirmWindow())); if ((model.getProgress())!= null) { return; }java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { parameters.add(new org.ovirt.engine.core.common.action.LabelActionParameters(affinityLabel)); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveLabel, parameters, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }
private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getWindow())!= null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels");java.util.ArrayList<java.lang.String> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(command); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
public void activateDetailModel() { getMainModel().addActiveDetailModel(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider.getModel()); }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, boolean stopRefresh) { for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue : activeDetailModels) { if ((oldValue!= null) && stopRefresh) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } } if (newValue!= null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (value!= null) { activeDetailModelChanging(value, true); activeDetailModels.clear(); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL)); } }
public void addActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, false); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_MODEL)); } }
@org.ovirt.api.metamodel.annotations.Injava.lang.Boolean volatile();
public staticjava.lang.String encrypt(java x.servlet.ServletContext ctx,java.lang.String rawText) throwsjava.lang.Exception { org.ovirt.engine.core.sso.utils.SsoLocalConfig config = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(ctx).getSsoLocalConfig(); try (java.io.InputStream in = newjava.io.FileInputStream(config.getPKIEngineCert().getAbsoluteFile())) { return org.ovirt.engine.core.uutils.crypto.EnvelopeEncryptDecrypt.encrypt("AES/OFB/PKCS5Padding", 256,java.security.cert.CertificateFactory.getInstance("X.509").generateCertificate(in), 100, rawText.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }
protectedjava.util.Map<java.lang.String,java.lang.Object> buildResponse(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession,java.lang.String clientId,java.lang.String clientSecret) throwsjava.lang.Exception {java.util.Map<java.lang.String,java.lang.Object> payload = buildResponse(ssoSession); payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId, clientSecret)); return payload; }
public staticjava.lang.String createJWT(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession,java.lang.String clientId,java.lang.String clientSecret) throws com.nimbusds.jose.JOSEException,java.security.NoSuchAlgorithmException { com.nimbusds.jose.JWSSigner signer = new com.nimbusds.jose.crypto.MACSigner(clientSecret); com.nimbusds.jwt.SignedJWT signedJWT = new com.nimbusds.jwt.SignedJWT(new com.nimbusds.jose.JWSHeader(com.nimbusds.jose.JWSAlgorithm.HS256), org.ovirt.engine.core.sso.utils.SsoUtils.createJWTClaimSet(request, ssoSession, clientId)); signedJWT.sign(signer); return signedJWT.serialize(); }
public static void sendJsonData(java x.servlet.http.HttpServletResponse response,java.lang.String jsonPayload) throwsjava.io.IOException { try (java.io.OutputStream os = response.getOutputStream()) { response.setContentType("application/json"); byte[] jsonPayloadBytes = jsonPayload.getBytes(java.nio.charset.StandardCharsets.UTF_8.name()); response.setContentLength(jsonPayloadBytes.length); os.write(jsonPayloadBytes); org.ovirt.engine.core.sso.utils.SsoUtils.log.trace("Sending json data {}", jsonPayload); } }
java @java.lang.Override protected void service(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava x.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.log.debug("AuthorizeServlet QueryString: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request));java.lang.String responseType = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.JSON_RESPONSE_TYPE); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST,java.lang.String.format(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_UNSUPPORTED_PARAMETER_IN_REQUEST, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE)))), responseType, SsoConstants.JSON_RESPONSE_TYPE)); } login(request, response, buildSsoSession(request)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, true); if ((ssoSession.isOpenIdScope()) || (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(org.ovirt.engine.core.sso.utils.SsoUtils.getScopeRequestParameter(request, "") ).contains(SsoConstants.OPENID_SCOPE))) { ssoSession.setRedirectUri(request.getParameter(SsoConstants.HTTP_PARAM_REDIRECT_URI)); } org.ovirt.engine.core.sso.utils.SsoUtils.redirectToErrorPage(request, response, ex); } }
javajavajavajavajavajavajava privatejava.util.Map<java.lang.String,java.lang.Object> buildResponse(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession,java.lang.String clientId,java.lang.String clientSecret) throwsjava.lang.Exception {java.util.Map<java.lang.String,java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(ssoSession.getScope()).contains(SsoConstants.OPENID_SCOPE)) { payload.put("id_token", org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, clientId, clientSecret)); } return payload; }
privatejava.lang.String getTokenFromHeader(java x.servlet.http.HttpServletRequest request) {java.lang.String token = null;java.lang.String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue!= null) && (headerValue.startsWith(org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring("Bearer".length()).trim(); } return token; }
@java.lang.Override protected void service(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava x.servlet.ServletException { try { org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.log.debug("Entered OpenIdUserInfoServlet Query String: {}, Parameters : {}", request.getQueryString(), org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameters(request));java.lang.String token = request.getParameter(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN); if (token == null) { token = getTokenFromHeader(request); } if (token == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERROR_CODE, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_REQUEST); } org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSessionFromRequest(request, token); org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.sendJsonData(response, buildResponse(request, ssoSession)); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, ex); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_ACCESS_DENIED, ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERR_CODE_SERVER_ERROR, ex); } }
privatejava.lang.String buildResponse(java x.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession) throwsjava.lang.Exception { return org.ovirt.engine.core.sso.utils.SsoUtils.createJWT(request, ssoSession, ssoSession.getClientId()).toString(); }
protected org.ovirt.engine.core.sso.utils.SsoSession handleIssueTokenForAuthCode(java x.servlet.http.HttpServletRequest request,java.lang.String clientId,java.lang.String scope) throwsjava.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForAuthCode");java.lang.String authCode = org.ovirt.engine.core.sso.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE, SsoConstants.HTTP_PARAM_AUTHORIZATION_CODE);java.lang.String accessToken = getTokenForAuthCode(authCode); if (org.apache.commons.lang.StringUtils.isEmpty(accessToken)) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_GRANT, org.ovirt.engine.core.sso.utils.SsoConstants.ERR_CODE_INVALID_CODE_MSG); } org.ovirt.engine.core.sso.utils.SsoUtils.validateRequestScope(request, accessToken, scope); org.ovirt.engine.core.sso.utils.SsoSession ssoSession = org.ovirt.engine.core.sso.utils.SsoUtils.getSsoSession(request, clientId, accessToken, true); validateClientAcceptHeader(ssoSession, request); return ssoSession; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { if (org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel.getSelectedObjects().isEmpty()) { this.getModel().setSelectedItem(null); } else { this.getModel().setSelectedItem(null); } }); }
private static void extractInterfaceStatistics(java.util.Map<java.lang.String,java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkInterface<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.rx_total)); stats.setTransmitDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValueWithNullProtection(dict, VdsProperties.tx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.tx_total)); stats.setSampleTime(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignDoubleValue(dict, VdsProperties.sample_time)); if (dict.containsKey(VdsProperties.INTERFACE_SPEED)) { iface.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignIntValue(dict, VdsProperties.INTERFACE_SPEED)); } }
private void writeVmMetadata() { writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); if (vm.isRunOnce()) { writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "destroy_on_reboot"); writer.writeAttributeString("type", "bool"); writer.writeRaw("True"); writer.writeEndElement(); } writer.writeEndElement(); }

@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { this.hasSelectedTags = hasSelectedTags; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestBox suggestBox,java.util.Collection<? extends com.google.gwt.user.client.ui.SuggestOracle.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions = (suggestions!= null) && ((suggestions.size()) > 0); if (!anySuggestions) { hideSuggestions(); return; } if ((suggestionPopup) == null) { suggestionPopup = createPopup(); } if (suggestionPopup.isAttached()) { suggestionPopup.hide(); } if (suggestBox!= null) { suggestionPopup.removeAutoHidePartner(suggestBox.getElement()); suggestionPopup.addAutoHidePartner(suggestBox.getElement()); } suggestionsTable = getSuggestionCellList(((java.util.Collection<org.ovirt.engine.ui.webadmin.widget.autocomplete.SearchSuggestion>) (suggestions)), suggestBox, suggestionPopup); suggestionPopup.setWidget(suggestionsTable); suggestionPopup.showRelativeTo(suggestBox); }
javajava.lang.String[] getSearchObjectFilter() {java.util.List<java.lang.String> filter = newjava.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?> list : commonModel.getItems()) { if ((list!= null) && (!(list.getIsAvailable()))) {java.lang.String[] searchObjects = list.getSearchObjects(); if (searchObjects!= null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } } return filter.toArray(newjava.lang.String[0]); }
private void syncDirectLunsAttachedToVmsInPool(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.SyncDirectLunsParameters parameters = new org.ovirt.engine.core.common.action.SyncDirectLunsParameters(org.ovirt.engine.core.bll.storage.pool.SyncAllUsedLunsCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(VdcActionType.SyncDirectLuns, parameters); }
@java.lang.Override protected boolean validate() { return org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getVm().getStoragePoolId()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData());java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Cannot perform on metadata devices"); } } validateFreeSpace(); }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid storagePoolId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(storageDomainStatic.getId(), storagePoolId, null)).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
private void refreshMetadataDevicesInfoIfNeeded() {java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice();java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId()); if ((!(java.util.Objects.equals(oldVgMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()))) || (!(java.util.Objects.equals(oldFirstMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain();java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())!= null)? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getStoragePoolId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.Set<java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); }java.util.Set<java.lang.String> lunsIdsSet = newjava.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter((lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId,java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId);java.util.Set<java.lang.String> lunIds = newLuns.stream().map(LogicalUnit::getId).collect(java.util.stream.Collectors.toCollection(java.util.HashSet ::new)); params.setLunIds(lunIds); params.setForce(force); return params; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getId().toString()); org.ovirt.engine.core.common.businessentities.OriginType originType = _vmTemplate.getOrigin(); _writer.writeElement(OvfProperties.ORIGIN, (originType == null? "" :java.lang.String.valueOf(originType.getValue()))); _writer.writeElement(OvfProperties.TEMPLATE_DEFAULT_DISPLAY_TYPE,java.lang.String.valueOf(_vmTemplate.getDefaultDisplayType().getValue())); _writer.writeElement(OvfProperties.IS_DISABLED,java.lang.String.valueOf(_vmTemplate.isDisabled())); _writer.writeElement(OvfProperties.TRUSTED_SERVICE,java.lang.String.valueOf(_vmTemplate.isTrustedService())); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, _vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.BASE_TEMPLATE_ID, _vmTemplate.getBaseTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NUMBER,java.lang.String.valueOf(_vmTemplate.getTemplateVersionNumber())); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NAME, _vmTemplate.getTemplateVersionName()); _writer.writeEndElement(); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ((org.ovirt.engine.core.common.businessentities.storage.Disk) (getSelectedItem()));java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())); boolean shouldAllowEdit = true; if (disk!= null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk!= null) && (disks!= null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? getItems() : null), ((getSelectedItems())!= null? getSelectedItems() : null), getChangeQuotaCommand()); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> {java.util.Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts!= null) && (!(oldDefaultHosts.isEmpty())))? oldDefaultHosts :!(hosts.isEmpty())?java.util.Collections.singletonList(hosts.get(0)) :java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); changeDefaultHost(); }
private void updateActionAvailability() {java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems())!= null)? getSelectedItems() : newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed(((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.get(0).getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed(((((item!= null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus())!= (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getScanDisksCommand().setIsExecutionAllowed((((((item!= null) && ((items.size()) == 1)) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed(((((item!= null) && ((items.size()) == 1)) && (item.getStorageDomainType().isDataDomain())) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); }
private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((getSelectedItems())!= null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? getItems() : null), ((getSelectedItems())!= null? getSelectedItems() : null), getChangeQuotaCommand()); }
void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk!= null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems())!= null? getSelectedItems() : null), getChangeQuotaCommand()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetHeader)) { setPanelContent(headerPanel, content); } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainSectionPresenter.TYPE_SetMainContent)) { if (!(placeholderRemoved)) { removeHostPagePlaceholder(); placeholderRemoved = true; } setPanelContent(mainContentPanel, content); } else { super.setInSlot(slot, content); } }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters params = new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null); params.setValidateHostStatus(true); return getBackendCollection(VdcQueryType.GetDeviceList, params); }
private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem[] secondaryItems) { layoutMap.clear(); for (org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem layout : items) { if ((layout.getHref())!= null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getTitle()); details.setIcon(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } for (org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex()); details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle()); details.setSecondaryPriority(subMenu.getPriority()); details.setSecondaryTitle(subMenu.getTitle()); details.setIcon(subMenu.getIcon()); layoutMap.put(subMenu.getHref(), details); } }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, finaljava.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { queryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, queryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase) { syncSearch(vdcQueryType, queryParametersBase, new SetItemsAsyncQuery()); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true, true); return getBackendCollection(QueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }
javajavajavajavajavajavajavajavajavajavajavajava.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.QueryType> vdcQueryTypeList,java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsmanager = org.ovirt.engine.core.vdsbroker.Injector.get(org.ovirt.engine.core.vdsbroker.ResourceManager.class).getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND,java.lang.String.format("Vds with id: %1$s was not found", vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(( ev, sender, args) -> clearSelection()); getModel().getSelectionModel().addSelectionChangeHandler(( event) -> { this.setSelectedItems(getModel().getSelectionModel().getSelectedObjects()); }); }
private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) {java.lang.String deviceName = device.getDevice();java.lang.String type = deviceName.substring(0, deviceName.indexOf('_')); switch (type) { case "pci" : writePciHostDevice(device); break; case "pci_host" : writePciHostDevice(device); break; } }
private void writePciHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { if (device.isIommuPlaceholder()) { return; } writer.writeStartElement("hostdev"); writer.writeAttributeString("managed", "no"); writer.writeAttributeString("mode", "subsystem"); writer.writeAttributeString("type", "pci");java.lang.String[] nameElements = device.getDevice().split("_"); writer.writeStartElement("source"); writer.writeStartElement("address"); writer.writeAttributeString("domain",java.lang.String.format("0x%s", nameElements[1])); writer.writeAttributeString("bus",java.lang.String.format("0x%s", nameElements[2])); writer.writeAttributeString("slot",java.lang.String.format("0x%s", nameElements[3])); writer.writeAttributeString("function",java.lang.String.format("0x%s", nameElements[4])); writer.writeEndElement(); writer.writeEndElement(); writeAddress(device); writer.writeEndElement(); }
private void initStorageDomainDiscardAfterDelete() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete()); } }
protected boolean validateVmNotDuringSnapshot() {java.util.Set<org.ovirt.engine.core.compat.Guid> mergedSnapshotDisks = getSnapshotDisks(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getSnapshotId());java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> vmLockedSnapshots = getAllVmLockedSnapshots(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : vmLockedSnapshots) {java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisks = getSnapshotDisks(snapshot.getId()); if (snapshotDisks.stream().anyMatch(mergedSnapshotDisks::contains)) { return validate(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)); } } return validate(ValidationResult.VALID); }
private static boolean isRestApiScope(java x.servlet.http.HttpServletRequest request) { boolean isRestApiScope; try { isRestApiScope = SsoUtils.getSsoSession(request).isRestApiScope(); } catch (org.ovirt.engine.core.sso.utils.OAuthException ex) { isRestApiScope = false; } return isRestApiScope || (SsoUtils.isRestApiScope(SsoUtils.scopeAsList(SsoUtils.getScopeRequestParameter(request, "")))); }
private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version,java.lang.String propertiesValue,java.util.Map<java.lang.String,java.lang.String> predefinedPropertiesMap,java.util.Map<java.lang.String,java.lang.String> userDefinedPropertiesMap) {java.util.Map<java.lang.String,java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version));java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> propertiesEntries = propertiesMap.entrySet();java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet();java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.get(version).keySet(); for (java.util.Map.Entry<java.lang.String,java.lang.String> propertiesEntry : propertiesEntries) {java.lang.String propertyKey = propertiesEntry.getKey();java.lang.String propertyValue =java.util.Optional.ofNullable(propertiesEntry.getValue()); if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesMap.put(propertyKey, propertyValue); } if (userdefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }
public boolean syntaxErrorInProperties(java.util.Map<java.lang.String,java.lang.String> properties) { boolean error = false; if ((properties!= null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String,java.lang.String> e : properties.entrySet()) {java.lang.String key = e.getKey(); if ((key == null) || (!(key.matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(java.util.Optional.ofNullable(e.getValue()).orElse("").matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.VALUE_REGEX))) { error = true; break; } } } return error; }
javajavajava.lang.String convertProperties(java.util.Map<java.lang.String,java.lang.String> properties) {java.lang.StringBuilder sb = newjava.lang.StringBuilder(); if ((properties!= null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String,java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_VALUE_DELIMETER); sb.append(java.util.Optional.ofNullable(e.getValue()).orElse("")); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } sb.deleteCharAt(((sb.length()) - 1)); } return sb.toString(); }
public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(false).when(command).validateVds(); assertFalse(command.validate()); }
public boolean validatePMAgentPort() {java.lang.Integer port = getParameters().getAgent().getPort();java.lang.String portStr = null; if (port == null) { if (getParameters().getAgent().getOptionsMap().containsKey(PORT)) { portStr = getParameters().getAgent().getOptionsMap().get(PORT); } else { return true; } } portStr = (portStr == null)? port.toString() : portStr; return (portStr.equals("")) || (portStr.matches("\\d+")); }
@java.lang.Override protected void createItems() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = getModel().getSelectedItems(); boolean noLabelsSelected = (selectedLabels == null) || (selectedLabels.isEmpty()); if (noLabelsSelected) { addNoLabelsMessage(); return; }java.util.Collections.sort(selectedLabels, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); for (org.ovirt.engine.core.common.businessentities.Label label : selectedLabels) { final org.ovirt.engine.core.common.businessentities.Label selectedLabel = label; org.ovirt.engine.ui.common.widget.ItemListItem labelListItem = new org.ovirt.engine.ui.common.widget.ItemListItem(); labelListItem.init(selectedLabel.getName()); labelListItem.getDeactivationAnchor().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.getModel().getSelectedItems().remove(selectedLabel); org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.refreshItems(); } }); itemList.add(labelListItem); } itemListPanel.add(itemList); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { this.getModel().getSelectedItems().remove(selectedLabel); this.refreshItems(); }
private void addAffinityLabels() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels();java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); }

@java.lang.Override protected void initTable() { super.initTable(); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.Label>(constants.affinityLabelsSubTabDeleteButton()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) {java.util.Set<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityLabel().getHosts();java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.getHostsSelectionModel().init(hostList, (hostIds!= null? newjava.util.ArrayList(hostIds) : newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }
public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEntitiesNameMap(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> nameMap) { entitiesNameMap.getEntity().clear(); entitiesNameMap.getEntity().putAll(nameMap); entitiesNameMap.getEntityChangedEvent().raise(org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.this, EventArgs.EMPTY); } })); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) {java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityGroup().getVdsIds(); this.getHostsSelectionModel().init(hostList, (hostIds!= null? hostIds : newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { this.stopProgress(); if (((result!= null) && ((result.getReturnValue())!= null)) && (result.getReturnValue().getSucceeded())) { this.cancel(); } }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) {java.util.Set<org.ovirt.engine.core.compat.Guid> vmIds = this.getAffinityLabel().getVms(); this.getVmsSelectionModel().init(vmList, (vmIds!= null? newjava.util.ArrayList(vmIds) : newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); this.stopProgressOnVmsAndHostsInit(); }
private void addAffinityLabels() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels();java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.AuditLog, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider); }
void onSave() { if ((!(validate())) || ((getProgress())!= null)) { return; } org.ovirt.engine.core.common.businessentities.Label label = getAffinityLabel(); label.setName(getName().getEntity()); label.setVms(newjava.util.HashSet(getVmsSelectionModel().getSelectedVmIds())); label.setHosts(newjava.util.HashSet(getHostsSelectionModel().getSelectedHostIds())); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.action.LabelActionParameters(label), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel.this.stopProgress(); if (((result!= null) && ((result.getReturnValue())!= null)) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.configure.labels.model.AffinityLabelModel.this.cancel(); } } }, this); }
@java.lang.Override protected void executeCommand() { imagesHandler.updateAllDiskImagesSnapshotsStatusInTransactionWithCompensation(getMovedDiskIds(), ImageStatus.LOCKED, ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback())!= null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToAnyNonDownVm(false)); }
private void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { whendiskDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(diskValidator).when(command).createDiskValidator(disk); doReturn(true).when(command).setAndValidateDiskProfiles(); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(ActionType.MoveOrCopyDisk).when(command).getActionType(); command.init(); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface!= null) { interfaceName = iface.getName();java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType!= null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.vm.vmStaticDao.incrementDbGeneration(getParameters().getVmId()); org.ovirt.engine.core.bll.network.vm.vmNicDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmNetworkStatisticsDao.remove(getParameters().getInterfaceId()); org.ovirt.engine.core.bll.network.vm.vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); return null; } ) ; }
private void removeNetworks() { finaljava.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { for (final org.ovirt.engine.core.common.businessentities.network.Network net : networks) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.getAllForNetwork(net.getId()); for (org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : vnicProfile) { getCompensationContext().snapshotEntity(vnicProfile); org.ovirt.engine.core.bll.storage.pool.vnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().snapshotEntity(net); org.ovirt.engine.core.bll.storage.pool.networkDao.remove(net.getId()); } getCompensationContext().stateChanged(); return null; }); }
private void unplugFromExternalNetwork() { org.ovirt.engine.core.bll.network.ExternalNetworkManager.getInstance(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) {java x.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxyFactory(); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); }
org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = vdsCommandsHelper.getHostForExecution(storagePoolId,java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Failed to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.bll.network.dc.networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { org.ovirt.engine.core.bll.network.dc.vnicProfileDao.save(org.ovirt.engine.core.bll.network.dc.networkHelper.createVnicProfile(getNetwork())); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getCurrentUser().getId(), getNetwork().getId()); return null; }); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd,java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd!= null) { if (((cmd.getCommandStep())!= null) && ((cmd.getExecutionContext().getStep())!= null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn())!= null) { stepSubjectEntityDao.remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution!= null) { stepSubjectEntityDao.saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback())!= null)); } }
private void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context,java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) {java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = removeNetworkParametersBuilder.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); backend.runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters, context); } }
@java.lang.SuppressWarnings("unchecked") privatejava.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (vdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public void deallocateIfExternal() { if (((getNetwork())!= null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = providerDao.get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", nic.getId().toString()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); auditLogDirector.log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
protected boolean validatePMAgentPort() {java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) {java.util.HashMap<java.lang.String,java.lang.String> optionsMap = getParameters().getAgent().getOptionsMap(); if (optionsMap!= null) {java.lang.String portStr = getParameters().getAgent().getOptionsMap().get(org.ovirt.engine.core.bll.FenceAgentCommandBase.PORT); if (org.apache.commons.lang.StringUtils.isNumeric(portStr)) { port =java.lang.Integer.valueOf(portStr); } else { return false; } } else { return true; } } return (port == null) || (org.ovirt.engine.core.common.utils.ValidationUtils.validatePort(port)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if (!dnsResolverConfigurationSupported) { return; }java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration());java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration());java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment!= null) || (nameServersOfNetwork!= null);java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> expectedNameServers = (nameServersOfNetworkAttachment!= null)? nameServersOfNetworkAttachment : nameServersOfNetwork; result.add(org.ovirt.engine.core.utils.DNS_CONFIGURATION, addressesAsString(nameServersOfHost), (engineDefineDnsConfiguration? addressesAsString(expectedNameServers) : ""), (!(engineDefineDnsConfiguration && (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers)))))); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { finaljava.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = newjava.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId,java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded,java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeRemoved,java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsByLabel,java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.Network>> updatedNetworks);
@java.lang.Override @org.junit.Before public void setUp() throwsjava.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName( "user4@testportal.redhat.com"); }
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain("user2@testportal.redhat.com", "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }
java @java.lang.Override public void doFilter(java x.servlet.ServletRequest request,java x.servlet.ServletResponse response,java x.servlet.FilterChain chain) throwsjava.io.IOException,java x.servlet.ServletException {java x.servlet.http.HttpServletRequest req = ((java x.servlet.http.HttpServletRequest) (request));java x.servlet.http.HttpServletResponse res = ((java x.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked")java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.Constants.REQUEST_SCHEMES_KEY))); if (schemes == null) { schemes =java.util.Collections.emptyList(); }java.util.Set<java.lang.String> allSchemes = newjava.util.HashSet<>(schemes); if ((additionalSchemes)!= null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.Constants.HEADER_WWW_AUTHENTICATE, scheme); } if (req.getContextPath().endsWith("/api")) { req.getRequestDispatcher(java.lang.String.format(ERROR_URL_FORMAT, defaultVersion, req.getAttribute(SessionConstants.SSO_AUTHENTICATION_ERR_MSG))).forward(req, res); } else { res.sendError(HttpServletResponse.SC_UNAUTHORIZED); } } }
@java.lang.Override public void init(java x.servlet.FilterConfig filterConfig) throwsjava x.servlet.ServletException { for (java.lang.String paramName :java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("scheme")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } } defaultVersion = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_API_DEFAULT_VERSION"); }
public static boolean isBackedByHugepages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; }java.lang.String hugePage = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm); if (hugePage == null) { return false; } try {java.lang.Integer.parseInt(hugePage); return true; } catch (java.lang.NumberFormatException e) { return false; } }
public static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static static. static. static. static. static. static. static. static. static. static. static. static. static. static. static. static. static. static
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).get(1024), is(1)); }
@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(0)); }
@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(base).get(1024), is(2)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.disks.DiskListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.storage.Disk>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.ErrataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.DetailTabModelProvider<org.ovirt.engine.ui.uicommonweb.models.EngineErrataListModel, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.Erratum>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.SubTabEngineErrataDetailsPresenter.constants.errataDetailsSubTabLabel(), 1); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumeGeoRepPresenter.constants.volumeGeoRepSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterTemplateListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageRegisterTemplatePresenter.constants.storageTemplateBackupSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.StorageDomainDR, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageDRListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.SubTabStorageDRPresenter.constants.storageDRSubTabLabel(), 12); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterPermissionPresenter.constants.dataCenterPermissionSubTabLabel(), 5); }
javajavajavajavajava.lang.String getPrefixedKey(java.lang.String key) { return ((org.ovirt.engine.ui.common.system.ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX) + "_") + key; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmTemplate>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5); }
privatejava.util.Map<java.lang.Integer,java.lang.Integer> substractMaps(java.util.Map<java.lang.Integer,java.lang.Integer> from,java.util.Map<java.lang.Integer,java.lang.Integer> amount) {java.util.Map<java.lang.Integer,java.lang.Integer> result = newjava.util.HashMap<>(from); for (java.util.Map.Entry<java.lang.Integer,java.lang.Integer> subs : amount.entrySet()) { result.compute(subs.getKey(), (key, val) -> (val == null? 0 : val) - (subs.getValue())); } returnjava.util.Collections.unmodifiableMap(result); }
public staticjava.util.Map<java.lang.Integer,java.lang.Integer> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) {java.util.Map<java.lang.Integer,java.lang.Integer> pageCount = newjava.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { pageCount.compute(resource.getPageSize(), (hpsize, count) -> (count == null? 0 : resource.getCount()) + (resource.getCount())); } returnjava.util.Collections.unmodifiableMap(pageCount); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getHost()) == null? 0 : getHost().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : getPageSize().hashCode()); result = (prime * result) + ((getPageSize()) == 0? 0 : 0; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster,java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm,java.util.Map<java.lang.String,java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return newjava.util.ArrayList(hosts); }java.util.Map<java.lang.Integer,java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePageUtils.getHugePages(vm.getStaticData());java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = newjava.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) {java.util.Map<java.lang.Integer,java.lang.Integer> availablePages = substractMaps(prepareHugePageMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.entrySet().stream().allMatch((pg) -> (availablePages.getOrDefault(pg.getKey(), 0)) >= (pg.getValue())))) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free hugepages for VM {}", host.getId(), vm.getId()); messages.addMessage(host.getId(), EngineMessage.VAR__DETAIL__NOT_ENOUGH_HUGE_PAGES.name()); } else { newHosts.add(host); } } return newHosts; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (java.util.Objects.equals(getHost(), that.getHost())); }
private org.gwtbootstrap3.client.ui.AnchorListItem createSelectionDropDown(com.google.gwt.safehtml.shared.SafeHtml currentName) { org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem dropDown = new org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.OvirtAnchorListItem(); org.gwtbootstrap3.client.ui.Button exchangeButton = new org.gwtbootstrap3.client.ui.Button(); exchangeButton.setIcon(IconType.EXCHANGE); exchangeButton.addStyleName(org.ovirt.engine.ui.common.view.OvirtBreadCrumbsView.QUICK_SWITCH); org.gwtbootstrap3.client.ui.Anchor anchor = dropDown.getAnchor(); anchor.setText(currentName.asString()); anchor.getElement().getStyle().setFontSize(28, Unit.PX); anchor.addClickHandler(( e) -> { if (popover.isVisible()) { popover.hide(); } else { popover.show(); } }); anchor.add(exchangeButton); createPopover(anchor); dropDown.add(anchor); return dropDown; }
public void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name) { currentSelectedItemWidget = createSelectionDropDown(name); }
void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml selectedName);
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getName(T item) {java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.Nameable) { result = ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(result); }
privatejava.util.List<T> getItemsAsList(M searchableListModel) { return newjava.util.ArrayList(searchableListModel.getItems()); }
public void previousEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem()));java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex - 1; if (newIndex < 0) { if ((searchableListModel.getSearchPreviousPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchPreviousPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchPreviousPageCommand()); updateToLastRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }
public void nextEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem()));java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int newIndex = currentIndex + 1; if (newIndex >= (itemsAsList.size())) { if ((searchableListModel.getSearchNextPageCommand().getIsExecutionAllowed()) && (searchableListModel.getSearchNextPageCommand().getIsAvailable())) { searchableListModel.executeCommand(searchableListModel.getSearchNextPageCommand()); updateToFirstRow = true; } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }
@java.lang.Override public void modelSelected(T model) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().hidePopover(); selectionModel.setSelected(model, true); }
private void updateSelectedRows() { if (updateToFirstRow) { updateToFirstRow = false;java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceofjava.util.List) { finaljava.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T firstItem = itemsAsList.get(0); selectionModel.setSelected(firstItem, true); listModelProvider.getModel().setSelectedItem(firstItem); getView().setCurrentSelectedName(getView().getName(firstItem)); }); } } } else if (updateToLastRow) { updateToLastRow = false;java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceofjava.util.List) { finaljava.util.List<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { org.ovirt.engine.ui.common.presenter.T lastItem = itemsAsList.get(((itemsAsList.size()) - 1)); selectionModel.setSelected(lastItem, true); listModelProvider.getModel().setSelectedItem(lastItem); getView().setCurrentSelectedName(getView().getName(lastItem)); }); } } } if (((listModelProvider.getModel().getSelectedItem())!= null) && (showSelectedName)) { org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().setCurrentSelectedName(org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().getName(((T) (listModelProvider.getModel().getSelectedItem())))); } org.ovirt.engine.ui.common.presenter.OvirtBreadCrumbsPresenterWidget.getView().buildCrumbs(listModelProvider.getModel().getTitle(), listModelProvider.getModel().getPlace()); }
@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener((ev, sender, args) -> updateSelectedRows()); listModel.getSelectedItemsChangedEvent().addListener((ev, sender, args) -> updateSelectedRows()); }
private void createPopover(org.gwtbootstrap3.client.ui.Anchor anchor) { popover = new org.ovirt.engine.ui.common.widget.tooltip.OvirtPopover(anchor); popover.setTrigger(Trigger.MANUAL); popover.setPlacement(Placement.BOTTOM); popover.setContainer(anchor); if ((searchBox) == null) { searchBox = createSearchBox(); searchBox.addModelSelectedCallback(selectionCallback); } popover.addContent(searchBox, "searchPanel"); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content!= null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetBreadCrumbs)) { if (content!= null) { breadCrumbsColumn.clear(); breadCrumbsColumn.add(content); } } else { super.setInSlot(slot, content); } }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs)!= null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) =='s') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.view.toggleSearchWidget(); event.cancel(); } } else if ((!(this.breadCrumbs.view.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.view.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs)!= null) { if ((breadCrumbsContainer.getWidgetCount()) == 0) { breadCrumbsContainer.add(breadCrumbs); } } }
public void buildCrumbs(java.lang.String modelTitle,java.lang.String modelHref) { breadCrumbs.clear(); breadCrumbs.add(new org.gwtbootstrap3.client.ui.AnchorListItem(""));java.lang.String primaryLabel = menuLayout.getPrimaryGroupTitle(modelTitle); if (primaryLabel!= null) { breadCrumbs.add(new org.gwtbootstrap3.client.ui.ListItem(primaryLabel)); } org.gwtbootstrap3.client.ui.AnchorListItem mainModelAnchor = new org.gwtbootstrap3.client.ui.AnchorListItem(modelTitle); mainModelAnchor.setHref(("#" + modelHref)); breadCrumbs.add(mainModelAnchor); if ((currentSelectedItemWidget)!= null) { breadCrumbs.add(currentSelectedItemWidget); } }
public boolean hasActionPanelPresenterWidget() { return (getActionPanelPresenterWidget())!= null; }
@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getBreadCrumbs().clearActiveSubTab(); getTable().resetScrollPosition(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setBreadCrumbs(getBreadCrumbs()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel)) { if (content!= null) { searchPanel = content; } else { actionPanel.setSearchPanel(org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget.createDefaultSearchPanel()); } } else if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel)) { if (content!= null) { actionSearchPanel.add(content); this.actionPanel = ((org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget<T, M>) (content)); if ((searchPanel)!= null) { actionPanel.setSearchPanel(((com.gwtplatform.mvp.client.PresenterWidget<?>) (searchPanel))); } addResultPanel(actionPanel); } } else { super.setInSlot(slot, content); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonDefinition = new org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>(pluginActionButtonList); pluginActionButtonDefinition.setEnabled(true); pluginActionButtonDefinition.setWidget(widget); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { actionPanelContainer.add(content); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content!= null) { actionPanelContainer.add(content); } } else { super.setInSlot(slot, content); } }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable())!= null)? getTable().getSelectionModel() : null; if (tableSelectionModel!= null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(( event) -> { updateDetailModelSelection(); })); } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); setInSlot(org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.MainContentPresenter.TYPE_SetMainTabPanelContent)) { container.insert(content, 0); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { if (content!= null) { container.insert(content, 0); } } else { super.setInSlot(slot, content); } }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this);java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString!= null) { applySearchString(searchString); } if (hasSearchPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); } if (hasActionPanelPresenterWidget()) { setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel, actionPanelPresenterWidget); } }
@java.lang.Override protected void initializeButtons() { org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.addPermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getAddCommand(); } }); org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.removePermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getRemoveCommand(); } }); }
@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setWarningLowSpaceIndicator(4); existingDomain.setCriticalSpaceActionBlocker(8); existingDomain.setFirstMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setVgMetadataDevice(FixturesTool.LUN_ID1); existingDomain.setUseForBackup(true); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public void setUp() throwsjava.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainStaticDao(); dynamicDao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-4005-a7ca-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("fDMzhE-wx3s-zo3q-Qcxd-T0li-yoYU-QvVePl"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setWarningLowSpaceIndicator(3); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setFirstMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setVgMetadataDevice(FixturesTool.LUN_ID2); newStaticDomain.setUseForBackup(FixturesTool.USE_FOR_BACKUP_FLAG); }
public void setUseForBackup(java.lang.Boolean useForBackup) { getStorageStaticData().setUseForBackup(useForBackup); }
publicjava.lang.Boolean getUseForBackup() { return getStorageStaticData().getUseForBackup(); }
private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getId()); obj.setStorage(instance.getStorage()); obj.setStorageDomainType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setFirstMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setStorageFormat(instance.getStorageFormat()); obj.setWipeAfterDelete(instance.getWipeAfterDelete()); obj.setDiscardAfterDelete(instance.isDiscardAfterDelete()); obj.setWarningLowSpaceIndicator(instance.getWarningLowSpaceIndicator()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); obj.setUseForBackup(instance.getUseForBackup()); return obj; }
private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals(existingDomain, result); assertEquals("expected committed disk size 8, result.getCommittedDiskSize()); assertEquals("expected actual disk size 4, result.getActualImagesSize()); assertEquals("expected first metadata device", FixturesTool.LUN_ID_OF_DOMAIN_METADATA, result.getFirstMetadataDevice()); assertEquals("expected vg metadata device", FixturesTool.LUN_ID_OF_DOMAIN_VG_METADATA, result.getVgMetadataDevice()); assertEquals("expected shared status", StorageDomainSharedStatus.Active, result.getStorageDomainSharedStatus()); assertEquals("expected backup flag status", FixturesTool.USE_FOR_BACKUP_FLAG, result.getUseForBackup()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorage()).addValue("storage_name", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_comment", domain.getComment()).addValue("storage_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageDomainType()).addValue("storage_domain_format_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_after_delete", domain.getWipeAfterDelete()).addValue("discard_after_delete", domain.isDiscardAfterDelete()).addValue("first_metadata_device", domain.getFirstMetadataDevice()).addValue("vg_metadata_device", domain.getVgMetadataDevice()).addValue("warning_low_space_indicator", domain.getWarningLowSpaceIndicator()).addValue("critical_space_action_blocker", domain.getCriticalSpaceActionBlocker()).addValue("use_for_backup", domain.getUseForBackup()); }
@java.lang.Override public int hashCode() { returnjava.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker, useForBackup); }
public void setUseForBackup(java.lang.Boolean useForBackup) { this.useForBackup = useForBackup; }
publicjava.lang.Boolean getUseForBackup() { return useForBackup; }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return ((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(name, other.name))) && (java.util.Objects.equals(storage, other.storage))) && ((storageFormat) == (other.storageFormat))) && ((storagePoolType) == (other.storagePoolType))) && ((storageType) == (other.storageType))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(wipeAfterDelete, other.wipeAfterDelete))) && ((discardAfterDelete) == (other.discardAfterDelete))) && (java.util.Objects.equals(firstMetadataDevice, other.firstMetadataDevice))) && (java.util.Objects.equals(vgMetadataDevice, other.vgMetadataDevice))) && (java.util.Objects.equals(description, other.description))) && (java.util.Objects.equals(warningLowSpaceIndicator, other.warningLowSpaceIndicator))) && (java.util.Objects.equals(criticalSpaceActionBlocker, other.criticalSpaceActionBlocker)); }
private boolean isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.compat.Guid clusterId,java.lang.String featureName) {java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addtionalFeaturesSupported = clusterFeatureDao.getSupportedFeaturesByClusterId(clusterId); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature : addtionalFeaturesSupported) { if (supportedFeature.getFeature().getName().equalsIgnoreCase(featureName)) { return supportedFeature.isEnabled(); } } return false; }
@java.lang.Override public org.ovirt.engine.api.rsdl.ServiceTreeNode next() { currentPathSegment = pathIterator.next(); if (isID(currentPathSegment, node)) { node = node.getSubService("{id}"); } else if (node.containsSubService(currentPathSegment)) { node = node.getSubService(currentPathSegment); } else { throw newjava.lang.IllegalArgumentException((("Segment '" + (currentPathSegment)) + "' of path does not exist")); } return node; }
public org.ovirt.engine.api.restapi.resource.BaseBackendResource locateResource(java.lang.String href) throwsjava.lang.IllegalAccessException,java.lang.IllegalArgumentException,java.lang.NoSuchMethodException,java.lang.SecurityException,java.lang.reflect.InvocationTargetException { href = removePrefix(href); org.ovirt.engine.api.rsdl.ServiceTreeCrawler crawler = new org.ovirt.engine.api.rsdl.ServiceTreeCrawler(java.util.Arrays.asList(href.split("/"))); org.ovirt.engine.api.restapi.resource.BaseBackendResource resource = org.ovirt.engine.api.restapi.resource.BackendApiResource.getInstance(); org.ovirt.engine.api.rsdl.ServiceTreeNode node = null; while (crawler.hasNext()) { node = crawler.next(); if (node.isCollection()) {java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter()); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource))); } else {java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter(),java.lang.String.class); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource, crawler.getCurrentPathSegment()))); } } return resource; }
org.ovirt.engine.core.vdsbroker.DomainXmlListReturn(org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlList) { { { { { { { { { } } } } } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn getVmLeaseInfo(java.lang.String leaseUUID,java.lang.String sdUUID) {java.util.HashMap<java.lang.String,java.lang.Object> leaseDict = newjava.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.info").withParameter("lease", leaseDict).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlListReturn(response); }
@java.lang.Override publicjava.lang.Object getReturnValue() { return domainXmlListReturn; }
@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.Status getReturnStatus() { return domainXmlListReturn.getStatus(); }
@java.lang.Override protected void executeIrsBrokerCommand() { domainXmlListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getIrsProxy().getVmLeaseInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.proceedProxyReturnValue(); }
public static void cleanupSsoSession(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, org.ovirt.engine.core.sso.utils.SsoSession ssoSession,java.util.Set<java x.servlet.http.HttpSession> associateClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken());java x.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("No existing Session found for token: {}, cannot invalidate session", ssoSession.getAccessToken()); } else { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Session found for token: {}, invalidating session", ssoSession.getAccessToken()); existingSession.invalidate(); } org.ovirt.engine.core.sso.utils.TokenCleanupUtility.invokeAuthnLogout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.notifyClientsOfLogoutEvent(ssoContext, associateClientIds, ssoSession.getAccessToken()); } catch (java.lang.IllegalStateException ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Failed to cleanup SsoSession: {}", ex.getMessage()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.error("Failed to cleanup SsoSession: {}", ex.getMessage()); org.ovirt.engine.core.sso.utils.TokenCleanupUtility.log.debug("Exception", ex); } }
public static void setNetworkVdsmName(org.ovirt.engine.core.common.businessentities.network.Network network) {java.lang.String networkName = network.getName(); org.ovirt.engine.core.compat.Guid networkId = network.getId(); if (((networkName.length()) <= (org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH)) || (networkId == null)) { network.setVdsmName(networkName); } network.setVdsmName(("on" + (networkId.toString().replaceAll("[^a-zA-Z0-9]+", "").substring(0, ((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH) - 2))))); }
publicjava.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("label", getLabel()).append("priority", getPriority()).append("groupTitle", groupTitle).append("groupPriority", groupPriority).toString(); }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTab(com.gwtplatform.mvp.client.TabData tabData,java.lang.String historyToken) { com.gwtplatform.mvp.client.Tab tab = addTabImpl(tabData, historyToken); allTabs.put(tabData, tab); return tab; }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData,java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw newjava.lang.RuntimeException("Non non GroupedTabData"); } updateTab(newTab); if (((getActiveTabHistoryToken())!= null) && (getActiveTabHistoryToken().equals(historyToken))) { setActiveTab(newTab); } return newTab; }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPanelPresenter.getEventBus().addHandler(org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.getType(), ( event) -> { getView().setTabVisible(event.getTabData(), event.isTabVisible()); })); }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData,java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); updateTab(newTab); return newTab; }
@java.lang.Override public void setTabVisible(com.gwtplatform.mvp.client.TabData tabData, boolean visible) { getTabPanel().getTabWidget(tabData).asWidget().setVisible(visible); }
public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(( ev, sender, args) -> {java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity!= null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress())!= null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { if ((getTable())!= null) { getTable().setLoadingState(LoadingState.LOADING); } }); } } else if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.common.presenter.D detailModel = modelProvider.getModel(); org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.fire(this, resolveTabData(), detailModel.getIsAvailable()); } }); }
protected abstract com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData,java.lang.String historyToken);
private void initSelectedSpiceImpl() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } spiceModel.initConsole(); }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("Creating VM {}", createInfo); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vm.getCompatibilityVersion().getValue())))) { org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(createInfo, vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getParameters().isVolatileRun()));java.lang.String libvirtXml = builder.build();java.lang.String prettyLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettify(libvirtXml); if (prettyLibvirtXml!= null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("XML: {}", prettyLibvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getBroker().create(createInfo); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.proceedProxyReturnValue(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds()); }
com.google.gwt.safehtml.shared.SafeHtmlContainerAndLink(java.lang.String cellStyle,java.lang.String cellId,java.lang.String linkId, com.google.gwt.safehtml.shared.SafeHtml text);
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context,java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb,java.lang.String id) { if (value!= null) { com.google.gwt.safehtml.shared.SafeHtml safeValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(value); sb.append(template.containerAndLink(getStyleClass(), getRenderElementId(context), id, safeValue)); } }
org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(( event) -> { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((breadCrumbs)!= null) { if ((event.getTypeInt()) == Event.ONKEYDOWN) { if (((nativeEvent.getCharCode()) =='s') || ((nativeEvent.getKeyCode()) == KeyCodes.KEY_S)) { if ((nativeEvent.getCtrlKey()) && (nativeEvent.getAltKey())) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.toggleSearch(); event.cancel(); } } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.nextEntity(); event.cancel(); } else if ((!(this.breadCrumbs.isSearchVisible())) && ((nativeEvent.getKeyCode()) == KeyCodes.KEY_UP)) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); this.breadCrumbs.previousEntity(); event.cancel(); } } } }); if ((breadCrumbs)!= null) { breadCrumbs.asWidget().getElement().getStyle().setHeight(83, Unit.PX); breadCrumbsContainer.add(breadCrumbs); } }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType,java.lang.Boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if (shouldForceRefresh(forceRefresh)) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }
@java.lang.Override public int compare(java.lang.Comparable a,java.lang.Comparable b) { if (a == null) { return b == null? 0 : nullFirst? -1 : 1; } else if (b == null) { return nullFirst? 1 : -1; } else { return a.compareTo(b); } }
private void updateMoveWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) {java.util.List<java.lang.String> liveMigrateDisks = newjava.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(liveMigrateDisks.stream().collect(java.util.stream.Collectors.joiningStream.Collectors.joiningStream::joiningStream::joiningStream))); } }
java @java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getStyle(); dialogStyle.setWidth(450, Style.Unit.PX); dialogStyle.setHeight(240, Style.Unit.PX); } partialSnapshotWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(model.isShowMemorySnapshotWarning()); if ((model.getOldClusterVersionOfSnapshotWithMemory())!= null) { messageLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); } horizontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.vmDisksLabel(model.getVmDisks().size(), org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getVmDisks())).stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(diskImage.getStoragesNames().stream().collect(java.util.stream.Collectors.joining(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.storage.DiskImagePopupView.class, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.DiskImagePopupView.class))); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) {java.lang.String hostNames = getHostNames(label); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) {java.lang.String vmNames = getVmNames(label); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(object.getVmNames().stream().collect(java.util.stream.Collectors.joining(org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.storage.VmPopupView.class, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.VmPopupView.class))); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) {java.lang.String vmNames = getVmNames(group).stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.toList(), ""))); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) {java.lang.String hostNames = getHostNames(group); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem();java.lang.Boolean useLinkGlusterVolume = getLinkGlusterVolume().getEntity();java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; }java.util.Set<java.lang.String> addressSet = newjava.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((((brick.getNetworkId())!= null) && (!(brick.getNetworkAddress().isEmpty()))? brick.getNetworkAddress() : brick.getServerName())); }java.util.List<java.lang.String> addressList = newjava.util.ArrayList<>(); addressList.addAll(addressSet); if ((addressList.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.constants.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (addressList.stream().collect(java.util.stream.Collectors.joining(", ":))); } getMountOptions().setEntity(mountOptions); }
java privatejava.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) {java.util.List<java.lang.String> bondProperties = newjava.util.ArrayList<>();java.lang.String adPartnerMac =java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac));java.lang.String adAggregatorId =java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) {java.lang.String nicName = nic.getName();java.lang.String nicAggregatorId =java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return bondProperties.stream().collect(java.util.stream.Collectors.joining("\n")); }
@java.lang.Override protectedjava.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(disks.stream().collect(java.util.stream.Collectors.joiningStream.Collectors.toList())); }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage.storage
private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String,java.util.List<java.lang.String>> problematicVmNames) {java.util.List<java.lang.String> missingTemplatesFromVms = problematicVmNames.entrySet().stream().map(( e) -> org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.messages.templatesWithDependentVMs(e.getKey(), e.getValue().stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.toList()))))); setConfirmWindow(null); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentsVMTitle()); confirmModel.setHelpTag(HelpTag.remove_backed_up_template); confirmModel.setHashName("remove_backed_up_template"); confirmModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.theFollowingTemplatesHaveDependentVmsBackupOnExportDomainMsg()); confirmModel.setItems(missingTemplatesFromVms); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("RemoveVmTemplates", this)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.storage.CANCEL_CONFIRMATION_COMMAND, this)); }
public staticjava.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } finaljava.util.List<java.lang.String> labels = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return labels.stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.toList(), " "); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan())!= null) {java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd HH:mm"); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(diskImage.getDiskProfileNames().stream().collect(java.util.stream.Collectors.joining(setQuotaName(diskImage.getQuotaNames())))).collect(java.util.stream.Collectors.joining(setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) {java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object));java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr!= null) { value = quotaNamesArr.stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors
void updateCurrentValue(finaljava.util.List<T> value, boolean fireEvents) { lastValues = value;java.util.List<java.lang.String> renderedValues = newjava.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); }java.lang.String renderedValue = renderedValues.stream().collect(java.util.stream.Collectors.joining(","))); if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(renderedValue)) { renderedValue = NBSP; } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.dom.client.Element) (dropdownButton.getElement().getChild(0))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> org.ovirt.engine.ui.common.widget.editor.listPanel.setSelected(value)); if (fireEvents) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems()); lastValues = null; }); } else { lastValues = null; } }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0;java.util.ArrayList<java.lang.String> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) {java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue();java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size();java.util.List<java.lang.String> diskProfileNames = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) {java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); }java.lang.String diskProfileNamesAsString = diskProfileNames.stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.toList(), ", "))); list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(org.ovirt.engine.core.compat.Regex.isMatch(((java.lang.String) (value)), org.ovirt.engine.ui.uicommonweb.validation.EmailValidation.pattern, RegexOptions.IgnoreCase))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@java.lang.Override protectedjava.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotCopyDisks(disks.stream().collect(java.util.stream.Collectors.joiningStream.Collectors.toList())); }
privatejava.lang.String getOuterClassNames() {java.util.Set<java.lang.String> classNames = newjava.util.LinkedHashSet<>(); classNames.add(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults.TEMPLATE_CLASS_OUTER); classNames.addAll(extraTooltipClassNames); return classNames.stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.joining(java.util.stream.Collectors.joining(
private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) {java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), disksAliases.stream().collect(java.util.stream.Collectors.joining(","))); generalWarningMessage.setVisible(true); } }
private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; }java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(problematicDisksForWarning.stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.joining(java.util.stream
javajavajava.lang.String translateErrorTextSingle(java.lang.String errorMsg,java.lang.Boolean changeIfNotFound) {java.lang.String ret = ""; try { if ((errorMsg!= null) && ((errorMsg.length()) > 0)) {java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); }java.lang.String errorsString = errors.getString(errorMsg); if (errorsString!= null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy;java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret =java.util.Arrays.stream(splitted).collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.
privatejava.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { finaljava.util.List<java.lang.String> list = newjava.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return list.stream().collect(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java.util.stream.Collectors.joiningStream(java
public staticjava.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return names.stream().collect(java.util.stream.Collectors.joining(",")); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged();java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem!= null) {java.util.ArrayList<java.lang.String> items = newjava.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); }java.lang.String searchString = items.stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel.SUFFIX))); if ((getPrefix())!= null) { searchString = searchString.substring(getPrefix().length()); } setSearchString(searchString); } }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers().stream().collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java.util.stream.Collectors.joining(java @java.util.stream.Collectors.joining(java @java @java.lang.Override publicjava.lang.String value) { return value.toString() + " (org.ovirt.engine.
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId!= null; if (shouldSetNewMacPoolOnAllClusters) {java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()) { cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } } }
booleanMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMigMig
private org.ovirt.engine.core.bll.ValidationResult canMigrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid targetMacPoolId,java.util.List<java.lang.String> macsToMigrate) {java.util.Objects.requireNonNull(targetMacPoolId);java.util.Objects.requireNonNull(macsToMigrate); org.ovirt.engine.core.bll.network.macpool.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId); if (targetPool.isDuplicateMacAddressesAllowed()) { return ValidationResult.VALID; }java.util.Map<java.lang.String,java.lang.Long> occurrenceCount = macsToMigrate.stream().collect(java.util.stream.Collectors.groupingBy(java.util.function.Function.identity(),java.util.stream.Collectors.counting()));java.util.List<java.lang.String> problematicMacs = macsToMigrate.stream().distinct().filter(( mac) -> (targetPool.isMacInUse(mac)) || ((occurrenceCount.get(mac)) > 1)).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES;java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, problematicMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(engineMessage, replacements).when((!(problematicMacs.isEmpty())))? ValidationResult.VALID : ValidationResult.VALID; }
@org.junit.Test public void canMigrateMacsToAnotherMacPoolWhenThereAreThereWontBeDuplicates() { when(vmNicDao.getAllMacsByClusterId(cluster.getId())).thenReturn(macsToMigrate); assertThat(underTest.canMigrateMacsToAnotherMacPool(cluster, targetMacPoolId), isValid()); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = getNewMacPoolId(); if (shouldSetNewMacPoolOnAllClusters(newMacPoolId)) {java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); cluster.setMacPoolId(newMacPoolId); clusterDao.update(cluster); } } }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) {java.util.Objects.requireNonNull(sourceCluster);java.util.Objects.requireNonNull(targetMacPoolId);java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId =java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId =java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged =!(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) {java.util.List<java.lang.String> macsToMigrate = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
@org.junit.Test public void testGetMacsFromAllClusters() {java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters =java.util.Arrays.asList(createClusterAndMockMacs(sourceMacPoolId,java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId,java.util.Collections.singletonList("mac2")), createClusterAndMockMacs(sourceMacPoolId,java.util.Collections.singletonList("mac1")), createClusterAndMockMacs(targetMacPoolId,java.util.Collections.singletonList("mac2"))); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES;java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage,java.util.Collections.singleton("mac1")); assertThat(underTest.canMigrateMacsToAnotherMacPool(clusters, targetMacPoolId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, replacements)); }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = getNetwork().getSelectedItem(); getNetwork().setItems(networks); updateNetworks(networks); if (oldSelectedNetwork!= null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter(( network) ->java.util.Objects.equals(network.getId(), oldSelectedNetwork.getId())).findFirst().get(); if (!(getNetwork().getSelectedItem().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } stopProgress(); })); }
protected void createAdditionalInfoPanel() { additionalInfoPanel.add(createDetailAdditionalInfo()); additionalInfoPanel.add(createStatisticsAdditionalInfo()); }
@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem original = ((org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem) (originalViewItem)); setVlanExpanded(original.getVlanState()); setStatisticsExpanded(original.getStatisticsState()); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { descriptionHeaderPanel.getElement().setInnerHTML(header); descriptionHeaderPanel.add(createLinkStatusPanel(isInterfaceUp())); createAdditionalInfoPanel(); return bodyPanel; }
@java.lang.Override protected void hideAllDetails() { detailExpand.toggleExpanded(false); statisticsExpand.toggleExpanded(false); }
public boolean getStatisticsState() { return statisticsExpand.isActive(); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { com.google.gwt.user.client.ui.IsWidget result = super.createBodyPanel(header, entity); statusPanel.add(getInterfaceNamesPanel(entity.getInterfaces())); return result; }
private com.google.gwt.user.client.ui.IsWidget createStatisticsAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); statisticsExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.statistics(), null); getClickHandlerRegistrations().add(statisticsExpand.addClickHandler(this)); panel.add(statisticsExpand); return panel; }
java privatejava.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) {java.util.List<java.lang.String> bondProperties = newjava.util.ArrayList<>();java.lang.String adPartnerMac =java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondAdPartnerMac(adPartnerMac));java.lang.String adAggregatorId =java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondAdAggregatorId(adAggregatorId)); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface nic : lineModel.getInterfaces()) {java.lang.String nicName = nic.getName();java.lang.String nicAggregatorId =java.util.Objects.toString(nic.getInterface().getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondSlaveAdAggregatorId(nicName, nicAggregatorId)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }
private boolean isAdPartnerMacValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) {java.lang.String partnerMac = bond.getAdPartnerMac(); boolean isAdPartnerMacEmpty = ((partnerMac == null) || (partnerMac.isEmpty())) || (partnerMac.equals(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.INVALID_AD_PARTNER_MAC)); boolean isIfcUp = InterfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); boolean isAdPartnerSupportedForCluster = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.AdPartnerMacSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartnerMacEmpty) || (!isIfcUp)) || (!isBond4)) || (!isAdPartnerSupportedForCluster); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = getEntity().getInterface().getStatistics().getStatus(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltipMessage(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.templates.italicWordWrapMaxWidthWithBoldTitle(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.bondProperties(), bondPropertiesMessage); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip iconTooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(new org.ovirt.engine.ui.common.widget.uicommon.network.BondedNetworkIcon(getEntity())); iconTooltip.setHtml(bondMessage); iconPanel.add(iconTooltip); return iconPanel; }
protected org.ovirt.engine.ui.uicompat.Size calculateColSize(int itemCount) { if ((itemCount % 4) == 3) { return org.ovirt.engine.ui.uicompat.Size.MD_2; } return org.ovirt.engine.ui.uicompat.Size.MD_2; }
void initTable() { pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.setupHostNetworksInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSetupNetworksCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.saveNetConfigInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSaveNetworkConfigCommand(); } })); pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.tab.host.SubTabHostInterfaceView.constants.syncAllHostNetworks()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSyncAllHostNetworksCommand(); } })); }
java @java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { descriptionHeaderPanel.getElement().setInnerHTML(header); statusPanel.add(createLinkStatusPanel((networkInterface!= null? networkInterface.isLinked() : false))); statusPanel.add(createCardPluggedStatusPanel((networkInterface!= null? networkInterface.isPlugged() : false))); createAdditionalInfoPanel(); return bodyPanel; }
if ((getModel().getItems()) instanceofjava.util.List) { clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.clear(); int i = 0;java.util.List<org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T>> newCurrentState = newjava.util.ArrayList<>(); for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> newItem = creator.createListViewItem(item); handlerRegistrations.add(newItem.addClickHandler(this)); if (i < (currentState.size())) { restoreState(currentState.get(i), newItem); if (i == (selectedIndex)) { newItem.addStyleName(Styles.ACTIVE); } } newCurrentState.add(newItem); add(newItem.asListGroupItem()); i++; } currentState.clear(); currentState = newCurrentState; if ((org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.getWidgetCount()) == 0) { org.gwtbootstrap3.client.ui.ListGroupItem noItems = new org.gwtbootstrap3.client.ui.ListGroupItem(); noItems.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); noItems.setText(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.constants.noItemsToDisplay()); add(noItems); } restoreSelection(selectedIndex); }
public void setStatisticsExpanded(boolean value) { statisticsExpand.toggleExpanded(value); toggleExpanded(); }
private boolean isInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails) { boolean managed = false; boolean sync = false; if (networkImplementationDetails!= null) { managed = networkImplementationDetails.isManaged(); sync = networkImplementationDetails.isInSync(); } return managed && (!sync); }
public boolean isActive() { return active; }
protected com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }
private com.google.gwt.user.client.ui.IsWidget createDetailAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_VIEW_ADDITIONAL_INFO_ITEM); detailExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListViewItem(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListViewItem.constants.details(), null); getClickHandlerRegistrations().add(detailExpand.addClickHandler(this)); panel.add(detailExpand); return panel; }
private void setIcon(java.lang.String iconCss) { if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(iconCss))) { org.gwtbootstrap3.client.ui.html.Span iconPanel = new org.gwtbootstrap3.client.ui.html.Span(); iconPanel.addStyleName(getBaseStyle(iconCss)); iconPanel.addStyleName(iconCss); add(iconPanel); } }
public void setVlanExpanded(boolean value) { detailExpand.toggleExpanded(value); toggleExpanded(); }
private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }
private com.google.gwt.user.client.ui.IsWidget getInterfaceNamesPanel(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface> bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel interfaceNamesPanel = new com.google.gwt.user.client.ui.FlowPanel(); interfaceNamesPanel.addStyleName(PatternflyConstants.PF_LIST_VIEW_DESCRIPTION); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface : bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel hostInterfacePanel = new com.google.gwt.user.client.ui.FlowPanel(); hostInterfacePanel.getElement().setInnerSafeHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(hostInterface.getName())); hostInterfacePanel.add(createLinkStatusPanel(((hostInterface.getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP)))); interfaceNamesPanel.add(hostInterfacePanel); } return interfaceNamesPanel; }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan())!= null) {java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-dd HH:mm"); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(safeJoin(diskImage.getDiskProfileNames())); setQuotaName(safeJoin(diskImage.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override publicjava.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> getWindowProperties() {java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.Model> map = super.getWindowProperties(); map.put(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WINDOW, getDiskWindow()); return map; }
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) {java.lang.String propName = args.propertyName; if ((Model.PROP_WINDOW.equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }
@java.lang.Override public void setWindowProperty(java.lang.String propName, org.ovirt.engine.ui.uicommonweb.models.Model value) { if (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WINDOW.equals(propName)) { setDiskWindow(value); } else { super.setWindowProperty(propName, value); } }
public void addDialogModelListener(final M model) { init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) {java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }
@java.lang.Override protected void onReveal() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = getModel().getDiskViewType().getEntityChangedEvent(); if (!(entityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { entityChangedEvent.addListener(getView().getDiskTypeChangedEventListener()); } org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> diskContentTypeEntityChangedEvent = getModel().getDiskContentType().getEntityChangedEvent(); if (!(diskContentTypeEntityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { diskContentTypeEntityChangedEvent.addListener(getView().getDiskContentTypeChangedEventListener()); } super.onReveal(); getView().handleQuotaColumnVisibility(); }
void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioGroup.setClickHandler(clickHandler); disksContentTypeRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup(); disksContentTypeRadioGroup.setClickHandler((event) -> { if (((com.google.gwt.user.client.ui.RadioButton) (event.getSource())).getValue()) { getMainModel().getDiskContentType().setEntity(disksContentTypeRadioGroup.getDiskContentType()); } }); com.google.gwt.user.client.ui.HorizontalPanel overheadPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); overheadPanel.add(disksViewRadioGroup); overheadPanel.add(disksContentTypeRadioGroup); getTable().setTableOverhead( overheadPanel); }
public void setClickHandler(com.google.gwt.event.dom.client.ClickHandler clickHandler) { for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.addClickHandler(clickHandler); } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = newjava.util.LinkedHashMap(); com.google.gwt.user.client.ui.RadioButton allButton = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { com.google.gwt.user.client.ui.RadioButton button = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(button, contentType); } com.google.gwt.user.client.ui.FlowPanel buttonsPanel = new com.google.gwt.user.client.ui.FlowPanel(); buttonsPanel.getElement().getStyle().setProperty("marginLeft", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.getElement().getStyle().setMarginRight(20, Style.Unit.PX); buttonsPanel.add(button); } setDiskContentType(null); localize(); return buttonsPanel; }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ((org.ovirt.engine.core.common.businessentities.storage.Disk) (getSelectedItem()));java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())); boolean shouldAllowEdit = true; if (disk!= null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk!= null) && (disks!= null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getCancelUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getPauseUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isResumeAllowed(disks)); getDownloadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel.isDownloadAllowed(disks)); }
java @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getMoveCommand())) { move(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getScanAlignmentCommand())) { scanAlignment(); } else if (command == (getExportCommand())) { export(); } else if ((RemoveDiskModel.CANCEL_REMOVE.equals(command.getName())) || ("Cancel".equals(command.getName()))) { cancel(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if (RemoveDiskModel.ON_REMOVE.equals(command.getName())) { onRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command == (getUploadCommand())) { upload(); } else if (command == (getCancelUploadCommand())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { onCancelUpload(); } else if (command == (getPauseUploadCommand())) { pauseUpload(); } else if (command == (getResumeUploadCommand())) { resumeUpload(); } else if (command == (getDownloadCommand())) { download(); } }
private void download() { if (((getSelectedItem()) == null) || (!((getSelectedItem()) instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage))) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); model.start(); }
@java.lang.Override publicjava x.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); parameters.setForce(isForce()); return performAction(ActionType.RemoveProvider, parameters); }
javajavajavajavajava.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) {java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(FixturesTool.GLUSTER_BRICK_UUID1); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(FixturesTool.GLUSTER_BRICK_UUID1); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
private void onRemove(boolean force) {java.util.List<org.ovirt.engine.core.common.action.ActionParametersBase> parameterList = newjava.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { org.ovirt.engine.core.common.action.ProviderParameters providerParameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); providerParameters.setForce(force); parameterList.add(providerParameters); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, (result) -> sourceListModel.getSearchCommand().execute()); cancel(); }
private void updateActionAvailability() {java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems();java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar!= null)? tempVar : newjava.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getForceRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); getForceRemoveCommand().setIsAvailable(isSelectedProvidersOfType(ProviderType.OPENSTACK_VOLUME)); }
private boolean isSelectedProvidersOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems())!= null) && (getSelectedItems().stream().allMatch((provider) -> (provider.getType()) == providerType)); }
java @java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { removeVnicProfiles(); removeFromClusters(); setVdsmNamesInVdsInterfaces(); getCompensationContext().snapshotEntity(getNetwork()); networkDao.remove(getNetwork().getId()); getCompensationContext().stateChanged(); return null; }); if (getNetwork().isExternal()) { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromNetworkProvider()) { removeExternalNetwork(); } } if (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); }
private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network,java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) {java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = newjava.util.LinkedList<>(); interfaces.stream().filter(( iface) ->java.util.Objects.equals(iface.getNetworkName(), network.getName())).forEach(( iface) -> { iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); }); interfaceDao.massUpdateInterfacesForVds(interfacesToUpdate); }
public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.compat.Guid clusterId) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByClusterId(clusterId)); }
public void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByDataCenterId(network.getDataCenterId())); }
privatejava.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsOnlyOnStorageDomain() {java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVmsRelatedToSD = vmDao.getAllForStorageDomain(getStorageDomainId());java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisksOnMultipleStorageDomain = vmDao.getAllVMsWithDisksOnOtherStorageDomain(getStorageDomainId()); allVmsRelatedToSD.removeAll(vmsWithDisksOnMultipleStorageDomain); return allVmsRelatedToSD; }
javajava privatejava.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { finaljava.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = newjava.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } if ((((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) || ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (host.isInFenceFlow())) { host.setStatus(VDSStatus.NonResponsive); nonResponsiveHosts.add(host.getId()); } } return nonResponsiveHosts; }
public void setInFenceFlow(boolean isInFenceFlow) { this.isInFenceFlow = isInFenceFlow; }
public int hashCode() { returnjava.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration); }
public boolean isInFenceFlow() { return isInFenceFlow; }
private void setInFenceFlow(org.ovirt.engine.core.compat.Guid hostId, boolean isInFenceFlow) { org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic = vdsDynamicDao.get(hostId); vdsDynamic.setInFenceFlow(isInFenceFlow); vdsDynamicDao.update(vdsDynamic); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog)); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
public static org.ovirt.engine.core.common.network.FirewallType getDefaultFirewallType(org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { return clusterCompatibilityVersion.less(Version.v4_2)? FirewallType.IPTABLES : FirewallType.FIREWALLD; }
public static org.ovirt.engine.core.common.network.FirewallType valueOf(int value) { return org.ovirt.engine.core.common.network.FirewallType.map.get(value); }
@org.ovirt.api.metamodel.annotations.Link types.DiskSnapshot diskSnapshot();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(imageTransfer().diskSnapshot().id()); }
protected boolean checkDisksNotInBackupStorage() { for (org.ovirt.engine.core.bll.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get(((org.ovirt.engine.core.bll.DiskImage) (disk)).getStorageIds().get(0)); if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values().stream().anyMatch(destDomain.isBackup())) { return false; } } } return true; }
protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateSpaceThresholds(); updateStorageDomainBackup(); }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.bll.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = ((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return ((((((((((((((org.ovirt.engine.core.common.businessentities.AuditLog.auditLogId) == (other.auditLogId)) && (java.util.Objects.equals(logTime, other.logTime))) && ((logType) == (other.logType))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && ((severity) == (other.severity))) && (java.util.Objects.equals(userId, other.userId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(quotaId, other.quotaId))) && (java.util.Objects.equals(vmId, other.vmId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && ((processed) == (other.processed))) && (java.util.Objects.equals(correlationId, other.correlationId))) && (java.util.Objects.equals(jobId, other.jobId))) && (java.util.Objects.equals(origin, other.origin))) && ((customId) == (other.customId))) && ((customEventId) == (other.customEventId))) && ((eventFloodInSec) == (other.eventFloodInSec))) && (java.util.Objects.equals(customData, other.customData))) && ((external) == (other.external))) && ((deleted) == (other.deleted))) && (java.util.Objects.equals(callStack, other.callStack)); }
@java.lang.Override public org.ovirt.engine.api.resource.HostNicNeighborResource getNeighborResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendHostNicNeighborServiceResource(guid, parent.getHostId())); }
@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); sessionDataContainer.setUser(session, user); }
org.junit.Test public void testBlockUseHostCpuWithPPCArch() { whencpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); setupCanAddPpcTest(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).getImagesToCheckDestinationStorageDomains(); initPpcCluster(); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(true); cmd.getParameters().getVm().setMigrationSupport(MigrationSupport.PINNED_TO_HOST); cmd.getParameters().getVm().setClusterId(cluster.getId()); cmd.getParameters().getVm().setVmOs(OsType.Other.ordinal()); cmd.init();java.util.Map<java.lang.String,java.lang.String> migrationMap = newjava.util.HashMap<java.lang.String,java.lang.String>() { { put("undefined", "true"); put("x86", "true"); put("ppc", "true"); } }; mcr.mockConfigValue(ConfigValues.IsMigrationSupported, cmd.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.USE_HOST_CPU_REQUESTED_ON_UNSUPPORTED_ARCH); }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 127); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.SupportedClusterLevels, newjava.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(2, 2), new org.ovirt.engine.core.compat.Version(3, 0)))); mcr.mockConfigValue(ConfigValues.ValidNumOfMonitors,java.util.Arrays.asList("1", "2", "4")); }
@java.lang.Override public void setUp() throwsjava.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.ConsoleToggleFullScreenKeys, "shift+f11"); mcr.mockConfigValue(ConfigValues.ConsoleReleaseCursorKeys, "shift+f12"); mcr.mockConfigValue(ConfigValues.RemapCtrlAltDelDefault, true); mcr.mockConfigValue(ConfigValues.FullScreenWebadminDefault, false); mcr.mockConfigValue(ConfigValues.EnableSpiceRootCertificateValidation, true); }
@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockSameNameQuery(true); mockVmValidator(); command.initEffectiveCompatibilityVersion();java.util.Map<java.lang.String,java.lang.String> migrationMap = newjava.util.HashMap<java.lang.String,java.lang.String>() { { put("undefined", "true"); put("x86", "true"); put("ppc", "true"); } }; org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.IsMigrationSupported, command.getEffectiveCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfThreadsPerCpu, command.getEffectiveCompatibilityVersion(), 8); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfVmSockets, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM32BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 20480); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 4194304); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.VMPpc64BitMaxMemorySizeInMB, command.getEffectiveCompatibilityVersion(), 1048576); assertTrue("Validation should have passed.", command.validate()); }
@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName("Conroe Family"); cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getClusterId()); cluster.setStoragePoolId(vm.getStoragePoolId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); org.ovirt.engine.core.bll.AddVmTemplateCommandTest.mcr.mockConfigValue(ConfigValues.VmPriorityMaxValue, 100); cmd.init(); }
@java.lang.Override public void setUp() throwsjava.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.OvirtInitialSupportedIsoVersion, "5.8"); mcr.mockConfigValue(ConfigValues.OvirtIsoPrefix, "rhevh"); mcr.mockConfigValue(ConfigValues.OvirtNodeOS, "^ovirt.*$"); mcr.mockConfigValue(ConfigValues.DataDir, "/usr/share/ovirt-engine"); mcr.mockConfigValue(ConfigValues.oVirtISOsRepositoryPath, "/usr/share/rhev-hypervisor"); }
privatejava.lang.String renderPortMirroring(boolean portMirroring) { if (portMirroring) { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.yes(); } else { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.no(); } }
@java.lang.Override public void setEnabled(boolean enabled) { this.enabled = enabled; nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNicTypeList(getVm().getOsId(), getClusterCompatibilityVersion(), new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { setSupportedVnicTypes(returnValue); postNicInit(); })); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface); networkFilterParameterWidget.edit(iface.getNetworkFilterParameterListModel()); networkFilterParameterWidget.setEnabled(iface.isNetworkFilterParameterWidgetVisible()); networkFilterParameterWidget.setVisible(iface.isNetworkFilterParameterWidgetVisible()); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(( ev, sender, args) -> { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } }); }
protected void postOnSave() { stopProgress(); if (saveSuceeded) { cancel(); } }
protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress())!= null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setVnicProfileId(profile.getId()); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(getActionType(), createVdcActionParameters(nic), ( result) -> { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); if ((returnValue!= null) && (returnValue.getSucceeded())) {java.lang.Object actionReturnValue = returnValue.getActionReturnValue(); saveSuceeded = true; if ((actionReturnValue!= null) && (actionReturnValue instanceof org.ovirt.engine.core.compat.Guid)) { saveNicFilterParameters(((org.ovirt.engine.core.compat.Guid) (actionReturnValue))); } else { postOnSave(); } } }, this); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetVisible(true); super.init(); }
private void postNicInit() { getName().setEntity(getNic().getName()); initMAC(); initLinked(); initNetworkFilterParameters(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue!= null) { getNetworkFilterParameterListModel().setItems(returnValue); } })); initProfiles(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }
public org.ovirt.engine.core.common.businessentities.network.VmNicFilterParameter flush() { getEntity().setName(name.getEntity()); getEntity().setValue(value.getEntity()); return getEntity(); }
javajava protectedjava.util.Map<java.lang.String,java.lang.String> createPortAllocationRuntimeProperties(com.woorea.openstack.quantum.model.Port port) {java.util.Map<java.lang.String,java.lang.String> runtimeProperties = newjava.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId());java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups())!= null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); }java.lang.String pluginType = getProvider().getAdditionalProperties().getPluginType(); if (pluginType == null) { pluginType = ""; } runtimeProperties.put("plugin_type", pluginType); return runtimeProperties; }
@java.lang.Override publicjava x.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterWithFeatureDisabled(this, clusterId, guid); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performAction(ActionType.UpdateCluster, param); }
@java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.ClusterFeature feature) { validateParameters(feature); org.ovirt.engine.core.common.businessentities.AdditionalFeature featureEntity = map(feature, null); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterEntity(this, clusterId); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature = new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature(); supportedFeature.setFeature(featureEntity); supportedFeature.setEnabled(true); supportedFeature.setClusterId(clusterId); cluster.getAddtionalFeaturesSupported().add(supportedFeature); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performCreate(ActionType.UpdateCluster, param, new org.ovirt.engine.api.restapi.resource.BackendClusterEnabledFeaturesResource.ClusterFeatureIdResolver(clusterId, featureEntity.getId())); }
@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures();java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures!= null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }
public static org.ovirt.engine.core.common.businessentities.Cluster getClusterEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.getEntity(org.ovirt.engine.core.common.businessentities.Cluster.class, QueryType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), null, true); return cluster; }
public static org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature getEnabledFeature(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid id) {java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = resource.getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature = addlFeatures.stream().filter(( f) -> (f.getFeature().getId().equals(id)) && (f.isEnabled())).findFirst().orElse(null); return feature; }
public staticjava.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> getClusterFeatures(org.ovirt.engine.api.restapi.resource.BackendResource resource,java.lang.String version) {java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> addlFeatures = newjava.util.HashSet<>(); addlFeatures = resource.getEntity(java.util.Set.class, QueryType.GetClusterFeaturesByVersionAndCategory, new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionAndCategoryParameters(new org.ovirt.engine.core.compat.Version(version), resource.getCurrent().getApplicationMode()), ("features for version:" + version)); return addlFeatures; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageFileType.class, to = org.ovirt.engine.api.model.ImageFileType.class) public static org.ovirt.engine.api.model.ImageFileType map(org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, org.ovirt.engine.api.model.ImageFileType template) { switch (imageFileType) { case Unknown : return org.ovirt.engine.api.model.ImageFileType.UNKNOWN; case ISO : return org.ovirt.engine.api.model.ImageFileType.ISO; case Floppy : return org.ovirt.engine.api.model.ImageFileType.FLOPPY; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; case All : return org.ovirt.engine.api.model.ImageFileType.ALL; default : return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template!= null)? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); if ((entity.getSize())!= null) { model.setSize(entity.getSize().intValue()); } if ((entity.getFileType())!= null) { model.setFileType(org.ovirt.engine.api.restapi.types.ImageMapper.map(entity.getFileType(), null)); } return model; }
java @java.lang.Override protected boolean validateImageTransfer() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomainDao.getForStoragePool(diskImage.getStorageIds().get(org.ovirt.engine.core.compat.Guid.Empty))); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.isDomainExistAndActive())); }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }
@java.lang.Override public void init() { super.init(); setImageId(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); setImageGroupId(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()); }
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error("image transfer status entity corrupt or missing from database for image transfer command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId())!= null) { setImageId(entity.getDiskId()); } long ts = (java.lang.System.currentTimeMillis()) / 1000; if (pauseTransferIfNecessary(entity, ts)) { return; } executeStateHandler(entity, ts, childCmdId); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() {java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = newjava.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getSharedLocks() {java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> locks = newjava.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_DISK_IS_LOCKED)); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getVmsListForDisk(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), true); vms.forEach((vm) -> locks.put(vm.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED))); } return locks; }
@java.lang.Override publicjava x.ws.rs.core.Response addForSnapshot(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.TransferDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getDiskSnapshot().getId())); return performCreate(imageTransfer, params); }
@java.lang.Override publicjava x.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Malformed id detected while processing request for path: {0}", request.getMethod(), uriInfo.getPath()); org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Exception", exception); final org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Failed"); fault.setDetail(exception.getCause().getMessage()); returnjava x.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build(); }
private void disableAnyUsb(org.ovirt.engine.core.common.businessentities.VmBase oldVm, org.ovirt.engine.core.common.businessentities.VmBase newVm) { finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers; if ((((((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) && ((org.ovirt.engine.core.common.businessentities.VmType.HighPerformance) == (oldVm.getVmType()))) && ((usbControllers = getUsbControllers(newVm.getId()))!= null)) && ((usbControllers.size()) == 1)) && (UsbControllerModel.NONE.libvirtName.equals(getUsbControllerModelName(usbControllers.get(0))))) { return; } if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE) == (oldVm.getUsbPolicy())) { disableSpiceUsb(newVm.getId()); } else if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getUsbPolicy())) { disableNormalUsb(newVm.getId()); } addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), newVm.getId()), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB, createUsbControllerSpecParams(UsbControllerModel.NONE.libvirtName, 0), true, false); }
public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() {java.util.Map<java.lang.String,java.lang.Object> specParams = newjava.util.HashMap<>(); specParams.put("action", action.name()); specParams.put("model", model.name()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG.getName(), "", specParams, true, true, false, "", null, null, null); }
public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Desktop))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); if (vmType == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) { getModel().getIsHeadlessModeEnabled().setEntity(true); getModel().getIsConsoleDeviceEnabled().setEntity(true); getModel().getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED); getModel().getWatchdogModel().setSelectedItem(null); getModel().getWatchdogAction().setSelectedItem(getModel().getWatchdogAction().getItems().iterator().next()); getModel().getIsHighlyAvailable().setEntity(false); } }
private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress())!= null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, newjava.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(storageDomain.getId()) })), (result) -> { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }, model); }
@org.junit.Test public void testRemoveWithDestroy() throwsjava.lang.Exception { setUpGetEntityExpectations();java x.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters.class, newjava.lang.String[]{ "StorageDomainId", "VdsId" }, newjava.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true, false);java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY,java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }
java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool())!= null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.StorageType.GLANCE))) { addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_MANAGE_STORAGE_DOMAIN); } return returnValue; }
java @java.lang.Override publicjava x.ws.rs.core.Response remove() {java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Host parameter is missing"); throw newjava x.ws.rs.WebApplicationException(java x.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true, false); if (destroy) { org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
protected boolean isDetachAllowed() { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); }java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = storageDomainDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePool().getId()); if ((storageDomains.size()) > 1 && (isMaster())) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }
private void detachStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { log.info("StorageDomain '{}' is already attached to a different storage pool, clean the storage domain metadata.", storageDomainId); org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters params = new org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters(storageDomainId, org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getVds().getId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); if (ret.getSucceeded()) { log.info("Cleaned metadata for storage domain '{}'.", storageDomainId); } else { log.warn("Failed to clean metadata for storage domain '{}'.", storageDomainId); } }
private void cleanDirtyMetaDataIfNeeded() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Maintenance)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { detachStorageDomain(storageDomainId); } } } }
@java.lang.Override publicjava x.ws.rs.core.Response remove() { boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true, false); if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else {java x.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(newjava x.ws.rs.WebApplicationException(java x.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(org.ovirt.engine.api.model.Fault.build())); } }
public void setWidgetColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((sizeContainer)!= null) { sizeContainer.addStyleName(size.getCssName()); } else { sizeContainer.removeStyleName(widgetColSize.getCssName()); sizeContainer.addStyleName(size.getCssName()); } widgetColSize = size; }
public void setLabelColSize(org.gwtbootstrap3.client.ui.constants.ColumnSize size) { if ((labelColSize) == null) { getFormLabel().setAddStyleName(size.getCssName()); } else { getFormLabel().removeStyleName(labelColSize.getCssName()); getFormLabel().setAddStyleNames(size.getCssName()); } labelColSize = size; }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(storageDomain().id()), mandatory(storageDomain().name())); optional(storageDomain().force()); }
java x.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); executor.scheduleWithFixedDelay(this, updateQuotaCache(), 1, quotaCacheIntervalInMinutes,java.util.concurrent.TimeUnit.MINUTES); }
public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Load Balancer timer entered.");java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance());java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult =java.util.Optional.empty(); if (policyUnit.getPolicyUnit().isEnabled()) {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.get().getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Scheduling scheduling to enable vds load balancer"); executor.scheduleWithFixedDelay(performLoadBalancing, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsLoadBalancingIntervalInMinutes),java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }
private void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.containsKey(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.remove(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); }
public void scheduleJobs() { int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(executor.scheduleWithFixedDelay(this ::refresh, refreshRate, refreshRate,java.util.concurrent.TimeUnit.MILLISECONDS)); vmsRefresher = getRefresherFactory().create(this); vmsRefresher.startMonitoring(); hostRefresher = new org.ovirt.engine.core.vdsbroker.HostConnectionRefresher(this, resourceManager); hostRefresher.start(); }
public void refresh() { log.debug("Refreshing Rules Enforcement Manager interval reached."); finaljava.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate!= null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates) { migrateVM(vm); } }
private void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("BackupCheck started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("BackupCheck completed."); } finally { lock.unlock(); } } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); when(arem.getExecutor()).thenReturn(java.util.concurrent.Executors.newScheduledThreadPool(1)); arem.wakeup(); }
java x.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName());java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); executor.scheduleWithFixedDelay(() -> pmHealthCheck(), pmHealthCheckInterval, pmHealthCheckInterval,java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void pmHealthCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("pm Management Health Check started.");java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host); } } org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("pm Management Health Check completed."); } finally { lock.unlock(); } } }
private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) {java.util.concurrent.ScheduledFuture job = schedulerService.schedule(this ::updateVmVersion, 0,java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), job); } }
public void triggerPoolMonitoringJob() { try { poolMonitoringJob.cancel(); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } poolMonitoringJob = schedulerService.scheduleWithFixedDelay(this::managePrestartedVmsInAllVmPools, 0, vmPoolMonitorIntervalInMinutes,java.util.concurrent.TimeUnit.MINUTES); }
java x.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificationValidityCheckTimeInHours); final int HOURS_TO_MINUTES = 60; long intervalInMinutes =java.lang.Math.round((interval * HOURS_TO_MINUTES)); executor.scheduleWithFixedDelay(checkCertificationValidity(), 10, intervalInMinutes,java.util.concurrent.TimeUnit.MINUTES); }
public void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICACert()), AuditLogType.ENGINE_CA_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CA_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null))) ^ (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE_ALERT, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXPIRE, null)))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().stream().filter((host) -> ((host.getStatus()) == VDSStatus.Up) || ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this::checkHostCertificateValidity); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Failed to check certification validity: {}", e.getMessage()); org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Exception", e); } }
java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Construct DWH Heart Beat"); heartBeatVar = new org.ovirt.engine.core.common.businessentities.DwhHistoryTimekeeping(); heartBeatVar.setVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); executor.scheduleWithFixedDelay(this, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.DwhHeartBeatInterval),java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("DWH Heart Beat initialized"); }
public synchronized void fetchIsoDomains() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList();java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = newjava.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(() -> { updateCachedIsoFileListFromVdsm(repoImage); return null; }); } else { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.debug(("The refresh process for '{}' file type in storage domain id '{}' was not performed " + " since refresh time out did not passed yet.", repoImage.getFileType(), repoImage.getRepoDomainId()); } } org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(newjava.util.ArrayList(problematicRepoFileList)); }
java x.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int HOURS_TO_MINUTES = 60; long rateInMinutes =java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); scheduledExecutor.scheduleWithFixedDelay(new org.ovirt.engine.core.common.scheduling.ScheduledTask() { @java.lang.Override public void run() { availableUpdates =java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.util.Arrays.asList(java x.Arrays.asList(java x.util.Arrays.asList(java x.Arrays.asList(java x.util.Arrays.asList(java x.Arrays.asList(java x.asList(java x.util.Arrays.asList(java x.asList(java x.asList(java x.asList(java x.
java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("IsoDomainListSynchronizer initializing {}", getClass().getSimpleName()); isoDomainRefreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoRepoDomainRefreshTime)) * (org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.MIN_TO_MILLISECONDS); executor.scheduleWithFixedDelay(fetchIsoDomains, 300000, isoDomainRefreshRate,java.util.concurrent.TimeUnit.MILLISECONDS); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("IsoDomainListSynchronizer initialized {}", getClass().getSimpleName()); }
private void scheduleJobs(long regularInterval, long initialInterval) { getExecutor().scheduleWithFixedDelay(refresh, initialInterval, regularInterval,java.util.concurrent.TimeUnit.MINUTES); }
java x.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Before initializing {}", getClass().getSimpleName());java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (backupCheckPeriodInHours > 0) { executor.scheduleWithFixedDelay(this.backupCheck, backupCheckPeriodInHours, backupCheckPeriodInHours,java.util.concurrent.TimeUnit.HOURS); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("After initializing {}", getClass().getSimpleName()); } }
public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug("Refreshing Quota Cache..."); long timeStart =java.lang.System.currentTimeMillis();java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; }java.util.HashMap<org.ovirt.engine.core.compat.Guid,java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = newjava.util.HashMap<>();java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = newjava.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), newjava.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd =java.lang.System.currentTimeMillis(); log.info("Quota Cache updated. ({} msec) (timeEnd - timeStart)); }
public void availableUpdates() { hostDao.getAll().stream().filter(( h) -> h.getStatus().isEligibleForCheckUpdates()).forEach(this::submitCheckUpdatesForHost); }
java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("Before initializing {}", getClass().getSimpleName()); executor.scheduleWithFixedDelay(this, 0, 7,java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityChecker.log.info("After initializing {}", getClass().getSimpleName()); }
public void triggerNow() { if ((updateTimerJob)!= null) { try { updateTimerJob.cancel(); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } } updateTimerJob = schedulerService.scheduleWithFixedDelay(this::ovfUpdate, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.OvfUpdateIntervalInMinutes),java.util.concurrent.TimeUnit.MINUTES); }
public void onTimer() {java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.naturalOrder()); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().stream().filter(( storagePool) -> (version.compareTo(storagePool.getCompatibilityVersion())) > 0).forEach(( storagePool) -> logAlert(version, storagePool)); } }
@java.lang.Override publicjava.util.Date getNextRunTime(java x.enterprise.concurrent.LastExecution lastExecution,java.util.Date date) {java.util.Date nextExecutionDate = generator.next(newjava.util.Date()); return nextExecutionDate; }
java x.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Before initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes);java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); executor.scheduleWithFixedDelay(() -> cleanCompletedJob(), cleanupFrequency, cleanupFrequency,java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("After initializing {}", getClass().getSimpleName()); }
private void managePrestartedVmsInAllVmPools() { try { vmPoolDao.getAll().stream().filter(( pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.error("Error managing prestarted VMs in all VM pools: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Exception", t); } }
public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Running Heart Beat - Start"); heartBeatVar.setDateTime(newjava.util.Date()); dwhHistoryTimekeepingDao.save(heartBeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Running Heart Beat - End"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Error updating DWH Heart Beat: {}", ex.getMessage()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } }
java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Before initializing {}", getClass().getSimpleName());java.util.Calendar calendar = newjava.util.GregorianCalendar();java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime());java.lang.String cronExpression =java.lang.String.format("scheduling %d %d * *?", calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Waiting for command entity cleanup manager to run at: {}", cronExpression); executor.schedule(() -> doCleanup(), new org.ovirt.engine.core.common.utils.EngineCronTrigger(cronExpression)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("TaskHandler initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.executor.scheduleWithFixedDelay(this, pollingRate, pollingRate,java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("TaskHandler initializing {}", getClass().getSimpleName()); }
public void ovfUpdate() { try {java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.error("Error updating ovf data: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); org.ovirt.engine.core.bll.storage.ovfstore.OvfDataUpdater.log.debug("Exception", t); } }
private void doCleanup() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Cleaning out command entities"); org.ovirt.engine.core.compat.DateTime latestTimeToKeep = org.ovirt.engine.core.compat.DateTime.getNow().addDays(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.CommandEntityAgingThreshold)) * (-1))); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Cleaning out command entities"); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.error("Cleaning out command entities failed with exception", e); } }
public void cleanCompletedJob() {java.util.Date succeededJobsDeleteTime = newjava.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededJobTime,java.util.concurrent.TimeUnit.MINUTES))));java.util.Date failedJobsDeleteTime = newjava.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime,java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobsDeleteTime, failedJobsDeleteTime); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error("Failed to delete completed jobs: {}", e.getMessage()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", e); } }
java x.annotation.PostConstruct private void init() { autoStartVmsToRestart = newjava.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); executor.scheduleWithFixedDelay(this, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds,java.util.concurrent.TimeUnit.SECONDS); }
org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughtworks.qdox.model.JavaClass Class, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName( Class, method); if ((org.ovirt.api.metamodel.analyzer.ModelAnalyzer.GET_METHOD_NAME.equals(method.getName())) || (org.ovirt.api.metamodel.analyzer.ModelAnalyzer.LIST_METHOD_NAME.equals(method.getName()))) { addFollowParameter(method); } analyzeAnnotations( Class, method); analyzeDocumentation( Class, method); Class.getMethods().forEach((x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); createSignatures( Class, service, method); return method; }
private void registerIfaceInMacPool(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reassignMac) { if (reassignMac) { iface.setMacAddress(macPool.allocateNewMac()); } else { if (!(macPool.addMac(iface.getMacAddress()))) { auditLogMacInUse(iface); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_ADDRESS_IS_IN_USE); } } }
@org.junit.Test public void add() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false, times(0)); }
@org.junit.Test public void addWithExistingMacAddressSucceed() { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(); runAddAndVerify(iface, true, times(1)); }
@org.junit.Test public void removeAll() {java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces =java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.removeAllAndReleaseMacAddresses(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface); } }
org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macsToAllocate(macPool.getId())); return macPoolUsingRanges; }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) {java x.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES);java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), reassignMac); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }
private void allocateMacsMissingInMacPool(org.ovirt.engine.core.bll.network.macpool.MacPool macPool,java.util.Map<java.lang.String,java.lang.Long> preexistingMacsUsageFrequency,java.util.Map<java.lang.String,java.lang.Long> macsFromRequestUsageFrequency) {java.util.List<java.lang.String> macsToAcquire = newjava.util.LinkedList<>(); for (java.util.Map.Entry<java.lang.String,java.lang.Long> entry : macsFromRequestUsageFrequency.entrySet()) {java.lang.String mac = entry.getKey();java.lang.Long targetUsage = entry.getValue();java.lang.Long currentUsage = preexistingMacsUsageFrequency.get(mac); long macToAcquire = (currentUsage == null)? targetUsage : targetUsage - currentUsage;java.util.stream.LongStream.range(0, macToAcquire).forEach(( e) -> macsToAcquire.add(mac)); } macPool.addMacs(macsToAcquire); }
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verification.VerificationMode addMacVerification) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(anyInt(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
java x.interceptor.AroundInvoke publicjava x.interceptor.AroundInvoke publicjava.lang.Object manageTransaction(java x.interceptor.InvocationContext ctx) throwsjava.lang.Exception { long start =java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } catch (java.lang.Exception e) { throw e; } finally { org.ovirt.engine.core.common.di.interceptor.LoggingInterceptor.logger.debug("Method {}, params: {}, elapsed: {}ms", ctx.getMethod().getName(), ctx.getParameters(), ((java.lang.System.currentTimeMillis()) - start)); } }
@org.ovirt.engine.core.common.di.interceptor.Loggable @java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }
@org.ovirt.engine.core.common.di.interceptor.Loggable @java.lang.Override public org.ovirt.engine.core.common.action.ActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType); if (returnValue!= null) { return returnValue; } return runActionImpl(actionType, parameters, false, null); }
private void changeScsiDeviceToVirtioScsi(java.util.Map<java.lang.String,java.lang.Object> vmStruct) { @java.lang.SuppressWarnings("unchecked")java.util.Map<java.lang.String,java.lang.Object>[] devices = ((java.util.Map<java.lang.String,java.lang.Object>[]) (vmStruct.get(VdsProperties.Devices)));java.util.Arrays.stream(devices).filter(( device) -> VdsProperties.Controller.equals(device.get(VdsProperties.Type))).filter(( device) -> VdsProperties.Scsi.equals(device.get(VdsProperties.Device))).filter(( device) -> VdsProperties.VirtioScsi.equals(device.get(VdsProperties.Model))).forEach(( device) -> { device.put(VdsProperties.Device, VdsProperties.VirtioScsi); device.remove(VdsProperties.Model); }); }
protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override publicjava.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(newjava.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
private void resizeToFullHeight() { scrollPanel.setHeight(((calculateTotalAvailableSpace()) + (Unit.PX.getType()))); }
private void resizeGridToFullHeight() { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int contentHeight = this.getTableBodyElement().getOffsetHeight(); if (contentHeight == 0) { contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.NO_ITEMS_HEIGHT; } else { contentHeight += getGridHeaderHeight(); } if (isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } contentHeight += 3; int maxGridHeight = windowHeight - top; maxGridHeight -= org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT; if ((top > 0) && (top < windowHeight)) { super.setHeight(((java.lang.Math.min(maxGridHeight, contentHeight)) + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public static int determineScrollbarThickness() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.getElement().getStyle().setWidth(100, Unit.PX); panel.getElement().getStyle().setHeight(100, Unit.PX); panel.getElement().getStyle().setOverflow(Overflow.SCROLL); com.google.gwt.dom.client.Document.get().getBody().appendChild(panel.getElement()); int scrollbarHeight = (panel.getOffsetHeight()) - (panel.getElement().getClientHeight()); com.google.gwt.dom.client.Document.get().getBody().removeChild(panel.getElement()); return scrollbarHeight; }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override publicjava.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(newjava.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
protected static com.google.gwt.user.client.ui.Widget createDefaultLoadingIndicator(org.ovirt.engine.ui.common.widget.table.Resources resources) { com.google.gwt.resources.client.ImageResource loadingImg = resources.dataGridLoading(); if (loadingImg == null) { return null; } com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(loadingImg); image.getElement().getStyle().setMarginTop(30.0, Unit.PX); return image; }
public void switchTab(org.gwtbootstrap3.client.ui.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (navTabs.getWidgetCount()); i++) { org.gwtbootstrap3.client.ui.TabListItem tabListItem = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); if (tabItem.getText().equals(tabListItem.getText())) { tabListItem.showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); tabContent.remove(tabPane); tabContent.insert(tabPane, i); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.getWidget(0).setHeight(height); tabPane.setActive(true); activeTab = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); found = true; } else { org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(i))); tabContent.remove(tabPane); tabContent.insert(tabPane, i); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).remove(tabHeaderContainer); tabPane.setActive(false); } } if ((!found) && ((navTabs.getWidgetCount()) > 0)) { ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(0))).showTab(); org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.gwtbootstrap3.client.ui.TabPane) (tabContent.getWidget(0))); ((com.google.gwt.user.client.ui.FlowPanel) (tabPane.getWidget(0))).insert(tabHeaderContainer, 0); tabPane.setActive(true); } }
private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getDescription(); } }; networksTable.addColumn(descriptionColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.description(), "60%"); }
public void enableColumnResizing() { if (isTableHeaderVisible()) { table.enableColumnResizing(); } }
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) {java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.DataGrid.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomainDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.currentQuota(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.quotaDisk(), width); listHeader.setRowData(newjava.util.ArrayList()); listHeaderPanel.setWidget(listHeader); }
private staticjava.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) {java.util.ArrayList<org.ovirt.engine.api.model.BaseResource> ret = newjava.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.restapi.util.LinkHelper.getRelevantMethods(obj.getClass())) {java.lang.Object inline = null; try { inline = method.invoke(obj); } catch (java.lang.Exception e) { } if (inline!= null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { ret.add(((org.ovirt.engine.api.model.BaseResource) (inline))); } else if (inline instanceof org.ovirt.engine.api.model.BaseResources) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResources) (inline));java.lang.reflect.Method getter = org.ovirt.engine.api.utils.EntityHelper.getCollectionGetter(entities); try {java.util.List<org.ovirt.engine.api.model.BaseResource> entitiesList = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter.invoke(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) { ret.add(entity); } } catch (java.lang.Exception e) { } } else { ret.addAll(org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(inline)); } } } return ret; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name,java.lang.String version) {java.util.Map<java.lang.String,java.lang.Object> values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(name.toString()); if ((values!= null) && (values.containsKey(version))) { return ((T) (values.get(version))); } throw newjava.lang.IllegalArgumentException(((name.toString()) + ": has no value for version: " + version)); }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllFromDisksIncludingSnapshotsByDiskId(org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered()); if (((disks.size()) == 1) && ((disks.get(0)) instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)) { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().setReturnValue(disks.get(0)); return; }java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = newjava.util.ArrayList<>(); disks.stream().filter(( disk) ->!(disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)).map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).forEach(( disk) -> { if (disk.getActive()) { disk.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(disk)); activeDisk = disk; activeDisk.getSnapshots().addAll(snapshots); } else { if ((activeDisk)!= null) { activeDisk.getSnapshots().add(disk); } else { snapshots.add(disk); } } }); org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().setReturnValue(activeDisk); }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query,java.lang.Object failure) throwsjava.lang.Exception { setUpEntityQueryExpectations(1, failure); }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query) throwsjava.lang.Exception { setUpEntityQueryExpectations(1); }
protected void setUpEntityQueryExpectations(int times,java.lang.Object failure) throwsjava.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(QueryType.GetAllDisks, org.ovirt.engine.core.common.queries.QueryParametersBase.class, newjava.lang.String[]{ }, newjava.lang.Object[]{ }, getEntityList(), failure); } }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> getEntityList() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities = newjava.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entities.add(getEntity(i)); } return entities; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(imagesHandler.fillSnapshotsToDiskImages(diskImages)); } }
@java.lang.Override public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(QueryType.GetAllDisks, new org.ovirt.engine.core.common.queries.QueryParametersBase())); }
@java.lang.Override public void onBind() { super.onBind(); registerHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.ViewDef) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverlayPresenterWidget.getView())).getCloseButton().addClickHandler((e) -> org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent.fire(this, new org.ovirt.engine.ui.webadmin.section.main.presenter.RevealOverlayContentEvent(null)))); }
private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); log.info("MasterDomain: domain id:'{}' Master domain status:'{}'", masterDomain!= null? masterDomain.getId() : null), (masterDomain!= null? masterDomain.getStatus() : null)); if ((masterDomain!= null) && ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) { resetSPM(); } }
public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear();java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.getVdcOptionDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if (((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.containsKey(option.getOptionName()))) || (!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()).containsKey(option.getVersion())))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.isReloadable(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Error refreshing field '{}': does not exist in class {}.", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }
privatejava.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) {java.util.function.Predicate<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = (o) -> { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (parsed!= null) { org.ovirt.engine.core.common.config.OptionBehaviourAttribute behaviour = parsed.getOptionBehaviour(); if (behaviour == null) { return false; } return (behaviour.behaviour()) == (ValueDependent); } return false; };java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.negate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(isDependent).collect(java.util.stream.Collectors.toList())); return optionsList; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { addCustomValue("SourceIP", (org.apache.commons.lang.StringUtils.isEmpty(sourceIp)? UNKNOWN : sourceIp)); return org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT : org.ovirt.engine.core.common.AuditLogType.USER_VDC_LOGOUT_FAILED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(false); } else { sourceIp = sessionDataContainer.getSourceIp(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); sessionDataContainer.setSessionValid(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId(), false); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }
public int getTotalNumberOfMacs() { return totalNumberOfMacs; }
public int getTotalNumberOfMacs() { int count = 0; for (org.ovirt.engine.core.bll.network.macpool.Range range : ranges) { count += range.getTotalNumberOfMacs(); } return count; }
private void updateBackup() { if (((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) { isBackup().setIsAvailable(false); isBackup().setEntity(false); return; } boolean backupSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.BackupSupported, getDataCenter().getSelectedItem().getCompatibilityVersion().toString()))); isBackup().setIsAvailable(backupSupported); if (isBackup().getIsAvailable()) { if (isNewStorage()) { isBackup().setEntity(false); } else { isBackup().setEntity(getStorage().isBackup()); } } }
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); storageDomainStatic.setBackup(model.isBackup().getEntity()); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> isBackup() { return backup; }
private void writeMemoryBacking() { if (!(org.ovirt.engine.core.common.utils.HugePageUtils.isBackedByHugepages(vm.getStaticData()))) { return; } writer.writeStartElement("memoryBacking"); writer.writeStartElement("hugepages"); writer.writeStartElement("page"); int hugepageSize =java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePageUtils.getHugePageSize(vm.getStaticData()));java.util.List<java.lang.Integer> hugepageSizes = hostStatisticsSupplier.get().getHugePages().stream().map(HugePage::getSizeKB).collect(java.util.stream.Collectors.toList()); if (!(hugepageSizes.contains(hugepageSizes))) { switch (vm.getClusterArch().getFamily()) { case x86 : hugepageSize = 2048; break; case ppc : hugepageSize = 16384; break; } } writer.writeAttributeString("size",java.lang.String.valueOf(hugepageSize)); writer.writeEndElement(); writer.writeEndElement(); writer.writeEndElement(); }
publicjava.util.concurrent.Future<org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse> call(org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req, org.ovirt.vdsm.jsonrpc.client.BrokerCommandCallback callback) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call(req, executorService, callback); this.tracker.registerCall(req, call); retryCall(req, call); try { this.getClient().sendMessage(jsonToByteArray(req.toJson())); } finally { retryCall(req, call); } return call; }
public void setExecutorService(java.util.concurrent.ExecutorService executorService) { this.executorService = executorService; }
public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.tracker.processIssue(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.tracker.removeCall(response.getId()); if (call == null) { this.log.error("Not able to update response for {}", response.getId()); return; } call.addResponse(response); if (((call.getCallback())!= null) && ((call.getExecutor())!= null)) { call.getExecutor().submit(() -> call.getCallback().onResponse(java.util.Collections.emptyMap())); } }
void onFailure(java.lang.Throwable t);
java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("TaskHandler initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); repeatEndMethodsOnFailMaxRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.RepeatEndMethodsOnFailMaxRetries); initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", newjava.lang.Class[]{ }, newjava.lang.Object[]{ }, pollingRate, pollingRate,java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("TaskHandler initializing {}", getClass().getSimpleName()); }
org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID); provider.setUrl(java.lang.String.format("https://%s/", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_IP)); when(providerDao.get(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); when(providerDao.getAllByTypes(ProviderType.EXTERNAL_NETWORK)).thenReturn(java.util.Arrays.asList(provider)); when(providerProxyFactory.create(provider)).thenReturn(networkProviderProxy); when(networkDao.getAllForCluster(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.CLUSTER_ID)).thenReturn(java.util.Arrays.asList(createNetwork())); }
public boolean isGraphicsAndDisplaySupported(int osId,java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType,java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = vmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
public boolean isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion,java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name()); } return result; }
javajava publicjava.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) {java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = newjava.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").getValue().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } return disksIds; }
public boolean isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType,java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isOsTypeSupported(osId, architectureType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE.toString()); } return result; }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator())!= null)? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getLoadingIndicator())!= null)? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
private void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - top) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.determBrowserHeightAdjustment(height); if (org.ovirt.engine.ui.common.widget.table.ActionCellTable.isHorizontalScrollbarVisible()) { contentHeight += scrollbarThickness; } if (contentHeight > maxGridHeight) { contentHeight = maxGridHeight; } if (contentHeight > 0) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator())!= null)? LOADING_HEIGHT : NO_ITEMS_HEIGHT; if (rowCount > 0) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
public static boolean isHighPerformanceTypeSupported(org.ovirt.engine.core.compat.Version version) { returnjava.lang.Boolean.parseBoolean(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.isHighPerformanceTypeSupported, version.getValue())); }
@org.junit.Test public void testGetAllClustersByDefaultNetworkProviderId() { assertThat(dao.getAllClustersByDefaultNetworkProviderId(FixturesTool.DEFAULT_NETWORK_PROVIDER_ID).size(), is(3)); }
public void setExpires(long expires) { this.expires = expires; }
public long getExpires() { return expires; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn getImageTicket(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder(Host.get_image_ticket).withParameter("uuid", ticketId).build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey( "ticketInfo"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn(response); }
private boolean isReduceVolumeSupported() { return org.ovirt.engine.core.common.FeatureSupported.isReduceVolumeSupported(org.ovirt.engine.core.bll.ReduceImageCommand.getStoragePool().getCompatibilityVersion()); }
@java.lang.Override public void cleaningCompensationDataAfterSuccess() { macPool.freeMacs(macsToReleaseOnCommit); log.debug(("Cleaning successfully executed, releasing macs: " + (macsToReleaseOnCommit))); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macPool.freeMacs(macs); log.debug("In non-compensation state, immediately releasing macs {}", macs); }
@org.junit.Test public void testReactionToDuplicatesWhenDuplicatesDuringStartup() throwsjava.lang.Exception { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = createMacPoolDisallowingDuplicates(); macPoolUsingRanges.initialize(true,java.util.Arrays.asList(org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRangesTest.MAC_ADDRESS)); verify(auditLogDirector).log(any(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl.class), eq(AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING), anyString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Snapshot s1, org.ovirt.engine.core.common.businessentities.Snapshot s2) { if (((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return -1; } if (((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return 1; } return s2.getCreationDate().compareTo(s1.getCreationDate()); }
@java.lang.Override public void setItems(java.util.Collection value) {java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>();java.util.Collections.sort(snapshots, comparator);java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if (((snapshot.getType())!= (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((getInType(SnapshotType.PREVIEW, snapshots)) == null)) { sortedSnapshots.add(snapshot); } } if ((getInPreview(sortedSnapshots))!= null) { updatePreviewedDiskSnapshots(sortedSnapshots); } else { updateItems(sortedSnapshots); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.api.model.VmType type) { switch (type) { case DESKTOP : return org.ovirt.engine.api.model.VmType.DESKTOP; case SERVER : return org.ovirt.engine.api.model.VmType.SERVER; default : throw newjava.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")) ; } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; default : throw newjava.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType type, org.ovirt.engine.api.model.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.SERVER; case HighPerformance : return org.ovirt.engine.api.model.VmType.HIGH_PERFORMANCE; default : return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.api.model.VmType type, org.ovirt.engine.core.common.businessentities.VmType incoming) { switch (type) { case DESKTOP : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case SERVER : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; case HIGH_PERFORMANCE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.VmType; default : return null; } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.HighPerformance)) && (!(org.ovirt.engine.core.common.FeatureSupported.isHighPerformanceTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORMANCE_IS_NOT_SUPPORTED,java.lang.String.format("$VmType %s", org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon())!= null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()))))) { return false; } if ((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getNumOfIoThreads()) > 1) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NUM_OF_IO_THREADS_CANNOT_EXCEED_ONE_VALUE); } return true; }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds().isPmEnabled()) {java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } if (((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }
@java.lang.Override protected void executeCommand() { createSnapshots(); }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmWithWait() { org.ovirt.engine.core.utils.lock.EngineLock liveStorageMigrationEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock(); liveStorageMigrationEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.LIVE_STORAGE_MIGRATION, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED))); lockManager.acquireLockWait(liveStorageMigrationEngineLock); return liveStorageMigrationEngineLock; }
@java.lang.Override publicjava x.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.compat.Guid imageId = getDiskImageId(disk.getImageId()); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk); org.ovirt.engine.core.common.action.MoveDiskParameters params = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); params.setImageGroupID(asGuid(disk.getId())); return doAction(ActionType.MoveDisks, params, action); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() {java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = newjava.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }
@org.junit.Test public void testMoveById() throwsjava.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, newjava.lang.String[]{ "Id" }, newjava.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDiskParameters.class, newjava.lang.String[]{ }, newjava.lang.Object[]{ }, true, true, null, null, true)); verifyActionResponse(resource.move(setUpParams(false)), ("disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageId());java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(diskImage.getImage().getDiskId()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValues.add(org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.cloneContextAndDetachFromParent())); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValues.add(org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getContext(), engineLock)); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.setSucceeded(true); }
protected org.ovirt.engine.core.common.action.ActionType getMoveActionType(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElement) { if (diskVmElement.isEmpty()) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } org.ovirt.engine.core.common.businessentities.VM vm = vmDao.get(diskVmElement.get(0).getVmId()); if ((vm.isDown()) || (!(diskVmElement.get(0).isPlugged()))) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } return org.ovirt.engine.core.common.action.ActionType.LiveMigrateDisk; }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID()); }
@java.lang.Override publicjava.lang.String toString() {java.util.StringJoiner info = newjava.util.StringJoiner(", ",java.lang.String.format("Thread pool: %s", poolName), ""); threadStateMap.entrySet().stream().forEach((entry) -> info.add(java.lang.String.format("%s threads in state %s", entry.getValue(), entry.getKey().name()))); return info.toString(); }
private void processThread(java.lang.management.ThreadInfo[] threadInfo) {java.util.Arrays.asList(threadInfo).stream().forEach(( tInfo) -> processThread(tInfo)); }
private void processThread(java.lang.management.ThreadInfo threadInfo) { if (threadInfo.getThreadName().startsWith("EE")) {java.lang.String[] threadName = threadInfo.getThreadName().split("-"); if ((threadName.length) > 2) { threadPoolInfoMap.putIfAbsent(threadName[2], new org.ovirt.engine.core.bll.utils.ThreadPoolInfo(threadName[2])); threadPoolInfoMap.get(threadName[2]).processThreadInfo(threadInfo); } } }
@java x.annotation.PostConstruct public void init() { try { threadMXBean =java.lang.management.ManagementFactory.getThreadMXBean(); } catch (java.lang.Exception e) { throw newjava.lang.IllegalStateException(("Problem getting ThreadMXBean:" + e)); } org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Initializing Thread Monitoring Service"); executor.scheduleWithFixedDelay(this::monitorEngineThreadPools, 0, org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThreadPoolMonitoringIntervalInMinutes),java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Thread Monitoring Service initialized"); }
private void monitorEngineThreadPools() { try { threadPoolInfoMap.clear();java.util.Arrays.asList(threadMXBean.getAllThreadIds()).stream().forEach(( threadId) -> processThread(threadMXBean.getThreadInfo(threadId)));java.util.StringJoiner info = newjava.util.StringJoiner("\n", "ThreadPools Info\n", ""); threadPoolInfoMap.entrySet().stream().forEach(( entry) -> info.add(entry.getValue().toString())); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info(info.toString()); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Exception", ex); } }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix("ovirt", "http://www.ovirt.org/ovf"); _writer.writeNamespace("ovirt", "http://www.ovirt.org/ovf"); }
@java.lang.Override public org.ovirt.engine.api.model.SystemOption get() { try { org.ovirt.engine.core.common.config.ConfigValues config = org.ovirt.engine.core.common.config.ConfigValues.valueOf(id); org.ovirt.engine.core.common.queries.GetSystemOptionParameters parameters = new org.ovirt.engine.core.common.queries.GetSystemOptionParameters(config);java.lang.String version = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, "version"); if ((version!= null) && (!(version.isEmpty()))) { parameters.setOptionVersion(version); } org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery(QueryType.GetSystemOption, parameters); if ((result.getReturnValue()) == null) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } return org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(org.ovirt.engine.api.restapi.types.SystemOptionsMapper.map(result.getReturnValue(), id)); } catch (java.lang.IllegalArgumentException ex) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(8835L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHostTooSmallButLowOverhead() { vds.setMemFree(8835L); doReturn(org.ovirt.engine.core.bll.VmOverheadCalculator.getEnsuredOverhead(any())).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Before public void prepare() { vds = basicHost(); vm = basicVm(); doReturn(65).when(vmOverheadCalculator).getEnsuredOverhead(any()); doReturn(0).when(vmOverheadCalculator).getPossibleOverhead(any()); when(vmOverheadCalculator.getTotalRequiredMemoryInMb(vm)).thenCallRealMethod(); when(vmOverheadCalculator.getOverheadMb(vm)).thenCallRealMethod(); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setPhysicalMemMb(15000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void testBalanceCpuLoad() throwsjava.lang.Exception {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpu_load.csv", cache); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster();java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512");java.util.ArrayList<java.lang.String> messages = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, newjava.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertNotNull(result.getSecond()); assertEquals(result.getFirst().size(), 1); assertEquals(result.getFirst().get(0), org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit.HOST_DESTINATION); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); doReturn(-1200).when(vmOverheadCalculator).getEnsuredOverhead(any(org.ovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovovo.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o.o
@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooBigButLowOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); doReturn(0).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree())!= null) { double vmMemRequired = (vm.getVmMemSizeMb()) + (vmOverheadCalculator.getEnsuredOverhead(vm)); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("Host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, vmOverheadCalculator.getEnsuredOverhead(vm)); if ((curVds.getSwapFree())!= null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("VmMemRequired <=??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }
public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = vmOverheadCalculator.getTotalRequiredMemoryInMb(vm); double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("Host '{}'; max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, vmMemRequired, vmOverheadCalculator.getOverheadMb(vm)); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("VmMemRequired <=??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfPending() { boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsBecauseOfGuestOverhead() { doReturn(256).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void testBalanceCpuAndMemoryLoad() throwsjava.lang.Exception {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_load.csv", cache); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster();java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512");java.util.ArrayList<java.lang.String> messages = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, newjava.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
@org.junit.Test public void validateVmMemoryCantRunOnVdsHighOverhead() { doReturn(org.ovirt.engine.core.bll.test.VmMemoryValidatorTest.MAX_MEMORY_FOR_HIGH_OVERHEAD).when(vmOverheadCalculator).getEnsuredOverhead(any()); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsBecauseOfLowGuestOverhead() { doReturn(org.ovirt.engine.core.bll.VmOverheadCalculatorTest
@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBig() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = slaValidator.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
public void setVmOverheadCalculator(org.ovirt.engine.core.bll.utils.VmOverheadCalculator vmOverheadCalculator) { this.vmOverheadCalculator = vmOverheadCalculator; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getCluster(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationHostList(), newjava.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this, slaValidator), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn!= null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn!= null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement = slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
org.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.ov.
@org.junit.Test public void testBalanceNoLoad() throwsjava.lang.Exception {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_no_load.csv", cache); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster();java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128");java.util.ArrayList<java.lang.String> messages = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, newjava.util.ArrayList(parameters), messages); assert result == null; }
@org.junit.Test public void testBalanceCpuAndMemLoad() throwsjava.lang.Exception {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_cpumem_load.csv", cache); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster();java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128");java.util.ArrayList<java.lang.String> messages = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, newjava.util.ArrayList(parameters), messages); assert result == null; }
@org.junit.Test public void testBalanceMediumLoad() throwsjava.lang.Exception {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts_medium_load.csv", cache); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_saving_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster();java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "768"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "128");java.util.ArrayList<java.lang.String> messages = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList(), anyMap()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, newjava.util.ArrayList(parameters), messages); assert result == null; }
protected int calcEvenDistributionScore(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1;java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores!= null) && ((vds.getUsageCpuPercent())!= null)) { score =java.lang.Math.min((((int) (java.lang.Math.round(calcDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); } score -= (vds.getMaxSchedulingMemory()) / 100; return score; }
@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throwsjava.lang.Exception {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_hosts_cpumem_medium_load.csv", cache); finaljava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster();java.util.Map<java.lang.String,java.lang.String> parameters = newjava.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "900"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName(), "512");java.util.ArrayList<java.lang.String> messages = newjava.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, newjava.util.ArrayList(hosts.values()), parameters, messages); assert result == null; }
public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVcpusCount(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.refreshCommitedMemory(cachedVds, vmDao.getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); } }
public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> lastVmsList) { this.lastVmsList = lastVmsList; }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format(vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }
public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host,java.util.Collection<org.ovirt.engine.core.common.businessentities.VM> vms, org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { boolean memoryUpdated = false; int memCommited = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm!= null) && ((vm.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { final org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId()); memCommited += resourceManager.computeCommitedMemoryInMb(vm); vmsCoresCount += vmManager.getNumOfCpus(); } } if (memCommited!= (host.getMemCommited())) { host.setMemCommited(memCommited); memoryUpdated = true; } if (vmsCoresCount!= (host.getVmsCoresCount())) { host.setVmsCoresCount(vmsCoresCount); memoryUpdated = true; } return memoryUpdated; }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> dbVms) { for (org.ovirt.engine.core.common.businessentities.VM dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (vmStats.getReturnValue())))); } else { if (dbVm!= null) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher.log.error("Failed to fetch VM '{}' stats. status remain unchanged ({})", dbVm.getId(), dbVm.getStatus()); } } } }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.VM> getLastVmsList() { return lastVmsList; }
@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVdsDao()).thenReturn(vdsDao); when(dbFacade.getVmDao()).thenReturn(vmDao); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds.getId()); vmsListFetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher(vdsManager, dbFacade, resourceManager); }
private boolean statusChanged(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return (((dbVm == null) || ((dbVm.getDynamicData()) == null)) || ((dbVm.getStatus())!= (vdsmVm.getStatus())); }
@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); org.ovirt.engine.core.common.businessentities.VM oldVm = ((data.dbVm()) == null)? null : new org.ovirt.engine.core.common.businessentities.VM(data.dbVm().getStaticData(), data.dbVm().getDynamicData(), data.dbVm().getStatisticsData()); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.dbVm())!= null)); assumeTrue(((data.vdsmVm())!= null)); assumeTrue(((oldVm.getStatus())!= (data.vdsmVm().getVmDynamic().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertSame(vmsListFetcher.getChangedVms().get(0).getFirst(), data.dbVm().getDynamicData()); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM dbVm = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm())!= null)); assumeTrue(((data.dbVm())!= null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0)); }
private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> vdsmVms) { vdsManager.setLastVmsList(vdsmVms.values().stream().map(VdsmVm::getVmDynamic).filter(( dynamicData) -> dbVms.containsKey(dynamicData.getId())). map(this::mergeDbAndMonitoring).collect(java.util.stream.Collectors.toList())); }
publicjava.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm>> getChangedVms() { return changedVms.stream().map((r) -> new org.ovirt.engine.core.vdsbroker.monitoring.Pair<>(r.getFirst().getDynamicData(), r.getSecond())).collect(java.util.stream.Collectors.toList()); }
protected void onFetchVms() { dbVms = getVmDao().getAllRunningForVds(vdsManager.getVdsId()).stream().collect(java.util.stream.Collectors.toMap(VM::getId,java.util.function.Function.identity())); changedVms = newjava.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); saveLastVmsList(vdsmVms); }
public org.ovirt.engine.core.dao.VmDao getVmDao() { return dbFacade.getVmDao(); }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVm())); if ((data.dbVm())!= null) { when(vmDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm())); } if ((data.vdsmVm())!= null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);
private boolean needToReinstallVds() { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getVdsStaticData(); org.ovirt.engine.core.common.businessentities.VdsStatic oldVdsStatic = oldHost.getStaticData(); return ((vdsStatic.isVdsNeedsReinstall()) && (!(oldVdsStatic.isPmKdumpDetection())))) || (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmdline(), oldVdsStatic.getCurrentKernelCmdline()))); }
private void updateHosts() { for (org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic : vdsStaticDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId())) { vdsStaticDao.updateVdsNeedsReinstall(vdsStatic.getId(), true); } }
protected void markVdsReinstalled() { vdsStaticDao.updateVdsNeedsReinstall(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData().getId(), false); }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }
@java.lang.Override public void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall) { getCallsHandler().executeModification("UpdateVdsNeedsReinstall", getCustomMapSqlParameterSource().addValue("vds_id", vdsStaticId).addValue("vds_needs_reinstall", vdsNeedsReinstall)); }
public boolean isVdsNeedsReinstall() { return vdsNeedsReinstall; }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { this.vdsNeedsReinstall = vdsNeedsReinstall; }
private void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualQuantity = selectSingleNode(node, "rasd:VirtualQuantity", _xmlNS); if (virtualQuantity!= null) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(virtualQuantity.innerText)); vmBase.setCpuPerSocket(1); vmBase.setThreadsPerCpu(1); } else { vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", _xmlNS).innerText)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_per_cpu", 1)); } }
java @java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB,java.lang.String.valueOf(getUnpluggedDeviceSize())); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMemSizeMb()) - (getUnpluggedDeviceSize())) >= (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMemoryDeviceToUnplug(), true, org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMinAllocatedMem())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getMinAllocatedMem())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }
public staticjava.util.Map<java.lang.String,java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias) {java.util.Map<java.lang.String,java.lang.Object> data = newjava.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memGuaranteedSize", minAllocatedMem); data.put("memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }
@org.ovirt.api.metamodel.annotations.Link types.HostExternalNetworkProvider[] externalNetworkProviders();
@org.ovirt.api.metamodel.annotations.Link types.OpenStackNetworkProvider defaultNetworkProvider();
org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(cluster().name()); or(mandatory(cluster().dataCenter().id()), mandatory(cluster().dataCenter().name())); optional(cluster().version().major()); optional(cluster().version().minor()); optional(cluster().cpu().type()); optional(cluster().ballooningEnabled()); optional(cluster().comment()); optional(cluster().cpu().architecture()); optional(cluster().description()); optional(cluster().display().proxy()); optional(cluster().errorHandling().onError()); optional(cluster().fencingPolicy().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().enabled()); optional(cluster().fencingPolicy().skipIfConnectivityBroken().threshold()); optional(cluster().fencingPolicy().skipIfSdActive().enabled()); optional(cluster().glusterService()); optional(cluster().haReservation()); optional(cluster().ksm().enabled()); optional(cluster().ksm().mergeAcrossNodes()); optional(cluster().maintenanceReasonRequired()); optional(cluster().memoryPolicy().overCommit().percent()); optional(cluster().memoryPolicy().transparentHugePages().enabled()); optional(cluster().threadsAsCores()); optional(cluster().trustedService()); optional(cluster().tunnelMigration()); optional(cluster().virtService()); or(optional(cluster().managementNetwork().id()), optional(cluster().managementNetwork().name())); or(optional(cluster().schedulingPolicy().id()), optional(cluster().schedulingPolicy().name())); }
@java.lang.Override public org.ovirt.engine.api.resource.HostExternalNetworkProvidersResource getExternalNetworkProvidersResource() { return null; }
protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) {java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size())!= (parameters.getChildCommands().size())) { for (org.ovirt.engine.core.compat.Guid id : childCommandIds) { if (!(parameters.getChildCommands().containsValue(id))) { parameters.getChildCommands().put(parameters.getCommandStep(), id); } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId()));java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info("All images were successfully removed"); persistCommand(org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getParentCommand()); } else { log.error("The following images were not removed: {}", failedGuids); } setCommandStatus(CommandStatus.SUCCEEDED); org.ovirt.engine.core.bll.DestroyImageCheckCommand.setSucceeded(true); }
protected void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("Exception"))) { log.error("Exception '{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); } }
protected void logTimeoutException(java.util.concurrent.TimeoutException e, org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { logException(ex); log.error("Timeout waiting for VDSM response: {}", e.getMessage()); log.debug("Exception", e); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("mdev_types", org.apache.commons.lang.StringUtils.join(entity.getMdevTypes(), ",")).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@java x.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MIN_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_QUEUE_SIZE"))); }
protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId);java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if (((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && (!(imagesInDbMap.containsKey(fromConfigImg.getImageId())))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug("Image '{}' of Disk '{}' cannot be found in database. This image will be returned as ILLEGAL from the query", fromConfigImg.getImageId(), fromConfigImg.getId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(imageInDb.getImageStatus()); } } }
private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) {java.util.List<java.lang.String> failedDisks = newjava.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve, disk.getPlugged()); org.ovirt.engine.core.common.action.ActionReturnValue returnVal = runInternalAction(ActionType.AttachDiskToVm, params, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.cloneContextAndDetachFromParent()); if (!(returnVal.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } } if (!(failedDisks.isEmpty()))) { this.addCustomValue("DiskAliases", org.apache.commons.lang.StringUtils.join(failedDisks, ",")); return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_DISKS_FAILED; } return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_EXECUTED_SUCCESSFULLY; }
privatejava.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = null; if (diskAttachments.isSetDiskAttachments()) { diskToImageIds = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( d) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(d, null)))).collect(java.util.stream.Collectors.toMap(BaseDisk::getId, DiskImage::getImageId)); } return diskToImageIds; }
privatejava.lang.String maskPassword(java.lang.String queryString) { return queryString.replaceAll("password=[^&]+", "password=****"); }
types.ResumeBehavior resumeBehavior();
private void onUpgrade() { if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId(), getLatch().getEntity().booleanValue()); invokeHostUpgrade(params); }
java @java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((new org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor().runCommand(command).getAnsibleReturnCode())!= (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}'.", host.getName()); throw newjava.lang.RuntimeException("Failed to update host '{}'."); } } catch (java.lang.InterruptedException |java.io.IOException ex) { throw newjava.lang.RuntimeException(ex); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(configuration()); }
@org.ovirt.api.metamodel.annotations.In services.RegistrationConfiguration registrationConfiguration();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); optional(configuration()); }
protected boolean validateNetworkProviderConfiguration(org.ovirt.engine.core.compat.Guid providerId,java.lang.String networkMappings) { if (providerId == null) { return true; } else { org.ovirt.engine.core.common.businessentities.Provider provider = providerDao.get(providerId); if (provider == null) { return false; } if (!(((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) || ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.EXTERNAL_NETWORK)))) { return false; } if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) && (!(validateOpenstackNetworkProviderProperties(providerId, networkMappings)))) { return false; } return true; } }
private boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.compat.Guid providerId,java.lang.String networkMappings) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(providerDao.get(providerId)); return (((validate(validator.providerIsSet())) && (validate(validator.providerTypeIsOpenstack()))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.messagingBrokerProvided())); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getTxTotal())!= null? totalRenderer.render(hostInterface.getTxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getRxTotal())!= null? totalRenderer.render(hostInterface.getRxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.constants.notAvailableLabel(); }
@java.lang.Override publicjava x.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } if ((action.isReboot())!= null) { params.setReboot(action.isReboot()); } return doAction(ActionType.UpgradeHost, params, action); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf).getFirst(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.exportimport.ConvertVmCommand.log.debug(("Failed to parse a given ovf configuration: " + ovf), e); auditLog(this, AuditLogType.IMPORTEXPORT_INVALID_OVF); throw new org.ovirt.engine.core.common.errors.EngineException(); } }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM);java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()); vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("Failed to parse a given ovf configuration: " + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString((("Failed to parse a given ovf configuration: " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug((("Failed to parse a given ovf configuration: " + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString((("Failed to parse a given ovf configuration: " + (e.getMessage())))); } } }
public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData> readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplate(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return new org.ovirt.engine.core.common.utils.Pair(template, fullEntityOvfData); }
publicjava.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { returnjava.util.Optional.empty(); } try { returnjava.util.Optional.of(ovfHelper.readVmFromOvf(snapshot.getVmConfiguration())); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw newjava.lang.RuntimeException(e); } }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE);java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData())); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug((("Failed to parse a given ovf configuration: " + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString((("Failed to parse a given ovf configuration: " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protectedjava.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) {java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = newjava.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf);java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisks = newjava.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }
private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("Failed to parse a given ovf configuration: {}", e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLowest().greater(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD,java.lang.String.format("$ClusterCompatibilityVersion %s", (originalClusterVersion!= null? originalClusterVersion : "N/A"))); } return true; }
@java.lang.Override protectedjava.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) {java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = newjava.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
private void removeDiskImages() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(newjava.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); }java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { if (!(org.apache.commons.lang.StringUtils.isEmpty(memoryVolumes))) {java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = createMemoryDisk(guids.get(2), guids.get(3)); images.add(memoryDisk); org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(guids.get(4), guids.get(5)); images.add(metadataDisk); } } removeVmImages(images); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); disk.setId(diskId); disk.setImageId(imageId); disk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); disk.setStorageIds(newjava.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); disk.setWipeAfterDelete(false); disk.setActive(true); return disk; }
public void setRoleMap(java.util.Map<java.lang.String,java.lang.Object> roleMap);
publicjava.util.Map<java.lang.String,java.lang.Object> getAffinityGroupMap();
publicjava.util.Map<java.lang.String,java.lang.Object> getRoleMap();
publicjava.util.Map<java.lang.String,java.lang.Object> getAffinityLabelMap();
java @java.lang.Override publicjava x.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters();java.util.Map<java.lang.String,java.util.Map> registrationMap = getRegistrationMappings(action); params.setClusterMap(registrationMap.get(ExternalRegistrationConfigurationMapper.CLUSTER_KEY)); params.setDomainMap(registrationMap.get(ExternalRegistrationConfigurationMapper.DOMAIN_KEY)); params.setRoleMap(registrationMap.get(ExternalRegistrationConfigurationMapper.ROLE_KEY)); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
public void setAffinityLabelMap(java.util.Map<java.lang.String,java.lang.Object> affinityLabelMap);
publicjava.util.Map<java.lang.String,java.lang.Object> getDomainMap() { return domainMap; }
@java.lang.Override public void setAffinityGroupMap(java.util.Map<java.lang.String,java.lang.Object> affinityGroupMap) { this.affinityGroupMap = affinityGroupMap; }
public void setDomainMap(java.util.Map<java.lang.String,java.lang.Object> domainMap);
public void setClusterMap(java.util.Map<java.lang.String,java.lang.Object> clusterMap) { this.clusterMap = clusterMap; }
@java.lang.Override publicjava.util.Map<java.lang.String,java.lang.Object> getAffinityLabelMap() { return affinityLabelMap; }
publicjava.util.Map<java.lang.String,java.lang.Object> getClusterMap() { return clusterMap; }
@java.lang.Override publicjava.util.Map<java.lang.String,java.lang.Object> getAffinityGroupMap() { return null; }
public void setDomainMap(java.util.Map<java.lang.String,java.lang.Object> domainMap) { this.domainMap = domainMap; }
@java.lang.Override public void setAffinityLabelMap(java.util.Map<java.lang.String,java.lang.Object> affinityLabelMap) { this.affinityLabelMap = affinityLabelMap; }
publicjava.util.Map<java.lang.String,java.lang.Object> getDomainMap();
public void setAffinityGroupMap(java.util.Map<java.lang.String,java.lang.Object> affinityGroupMap);
publicjava.util.Map<java.lang.String,java.lang.Object> getExternalLunMap();
public void setClusterMap(java.util.Map<java.lang.String,java.lang.Object> clusterMap);
public void setExternalLunMap(java.util.Map<java.lang.String,java.lang.Object> externalLunMap);
publicjava.util.Map<java.lang.String,java.lang.Object> getClusterMap();
private void mapCluster(java.lang.String clusterName) { if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap())!= null) {java.lang.String clusterDest = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterMap().get(clusterName); org.ovirt.engine.core.common.businessentities.Cluster cluster; if (clusterDest!= null) { cluster = clusterDao.getByName(clusterDest); } else { cluster = clusterDao.getByName(clusterName); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setClusterId(cluster.getId()); } }
privatejava.lang.String generateMetaDataFile(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds) {java.util.Map<java.lang.String,java.lang.Object> data = newjava.util.HashMap<>(); addStorageDomainStatus(data); addVmsStatus(vmAndTemplatesIds, data); return buildJson(data, true); }
java @java.lang.Override publicjava x.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); validateClusterMappings(action); validateRoleMappings(action); validateDomainMappings(action); validateAffinityGroupMappings(action); validateAffinityLabelMappings(action); validateLunMappings(action); org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }
private void validateRoleMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetRoleMappings())) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRegistrationRoleMappings().forEach(this::validateRoleMapping); } }
private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRoleMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Role name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Role name is missing from destination."); } }
private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetDomainMappings())) && (action.getRegistrationConfiguration().getDomainMappings().isSetRegistrationDomainMappings())) { action.getRegistrationConfiguration().getDomainMappings().getRegistrationDomainMappings().forEach(this::validateDomainMapping); } }
private void validateAffinityGroupMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityGroupMappings())) && (action.getRegistrationConfiguration().getAffinityGroupMappings().isSetRegistrationAffinityGroupMappings())) { action.getRegistrationConfiguration().getAffinityGroupMappings().getRegistrationAffinityGroupMappings().forEach(this::validateAffinityGroupMapping); } }
private void validateLunMapping(org.ovirt.engine.api.model.RegistrationLunMapping mapping) { if (!(mapping.isSetFrom())) { badRequest("Lun name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Lun name is missing from destination."); } }
private void validateAffinityLabelMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityLabelMappings())) && (action.getRegistrationConfiguration().getAffinityLabelMappings().isSetRegistrationAffinityLabelMappings())) { action.getRegistrationConfiguration().getAffinityLabelMappings().getRegistrationAffinityLabelMappings().forEach(this::validateAffinityLabelMapping); } }
private void validateClusterMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetClusterMappings())) && (action.getRegistrationConfiguration().getClusterMappings().isSetRegistrationClusterMappings())) { action.getRegistrationConfiguration().getClusterMappings().getRegistrationClusterMappings().forEach(this::validateClusterMapping); } }
private void validateLunMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetLunMappings())) && (action.getRegistrationConfiguration().getLunMappings().isSetRegistrationLunMappings())) { action.getRegistrationConfiguration().getLunMappings().getRegistrationLunMappings().forEach(this::validateLunMapping); } }
private void writeCpuTune() { writer.writeStartElement("cpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpucpu
java @java.lang.Override public void search() { if ((getEntity())!= null) { boolean getRunningVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.runningOnHost)); boolean getPinnedVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.pinnedToHost)); new org.ovirt.engine.ui.uicommonweb.models.hosts.HostVmListModel.SearchQuery(getRunningVms, getPinnedVms, new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery()).execute(); } else { setItems(newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null);java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = currentProxies.getItemsAsList(); currentModels.remove(this); currentProxies.setItems(java.util.Collections.emptyList()); currentProxies.setItems(currentModels); }
public static org.ovirt.engine.core.common.businessentities.storage.DiskContentType forStorageValue(int value) { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); }
@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d!= (DiskContentType.LEGACY)) { assertEquals(4, d.getStorageValue().length()); } } }
com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = newjava.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (contentType!= (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.LEGACY)) { org.gwtbootstrap3.client.ui.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.BUTTON_GROUP_NAME); buttonToType.put(button, contentType); } } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.BUTTONS); buttonToType.entrySet().forEach(( e) -> { buttonGroup.add(e.getKey()); e.getKey().addClickHandler((event) -> fireChangeHandlers(e.getValue())); }); setDiskContentType(null); localize(); buttonGroup.addStyleName("disk-type-buttons-group"); return buttonGroup; }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds,java.util.Map<java.lang.String,java.lang.Object> data) {java.util.Map<java.lang.String,java.lang.Object> vmsStatus = newjava.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic!= null) && ((vmDynamic.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OvfInfoFileConstants.AddVmStatus - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OvfInfoFileConstants.AddVmStatus - Skip entity id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
@java.lang.Override protected void executeQueryCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM);java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm();java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageOvfExtraData = storageOvfExtraDataDao.get(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), vm.getId()); if (!(storageOvfExtraData.isEmpty())) { vm.setStatus(org.ovirt.engine.core.common.businessentities.VMStatus.valueOf(storageOvfExtraData.get(0).getEntityValue())); } vm.setClusterCompatibilityVersion(ovf.getLowestCompVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug((("Failed to parse a given ovf configuration: " + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString((("Failed to parse a given ovf configuration: " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
private static void initStorageOvfExtraData(org.ovirt.engine.core.compat.Guid storageDomainId,java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData,java.util.Map.Entry<java.lang.String,java.nio.ByteBuffer> fileEntry) {java.util.Map<java.lang.String,java.lang.Object> diskDescriptionMap = newjava.util.HashMap<>(); org.ovirt.engine.core.utils.OvfUtils.log.info("Start to analyze metadata File '{}'.", fileEntry.getKey());java.lang.String storageMetaData = newjava.lang.String(fileEntry.getValue().array()); try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(storageMetaData); } catch (java.io.IOException e) { org.ovirt.engine.core.utils.OvfUtils.log.error("Failed to convert storage ovf extra data from json to map: '{}'.", storageMetaData); e.printStackTrace(); return; } org.ovirt.engine.core.utils.OvfUtils.fetchStorageStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.fetchVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadata File '{}'.", fileEntry.getKey()); }
private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> ovfStoreDiskImages = getAllOVFDisks(storageDomainId, getStoragePool().getId()); registerAllOvfDisks(ovfStoreDiskImages, storageDomainId);java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entitiesFromStorageOvfDisk = getEntitiesFromStorageOvfDisk(storageDomainId, getStoragePool().getId()); for (java.lang.Object ovf : entitiesFromStorageOvfDisk) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.log.info("Ovf data of entity id '{}' and entity name '{}'", ovfEntityData.getEntityId(), ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); initStorageOvfExtraDataToDB(storageDomainId); return null; }); } } }
private void removeEntitiesFromStorageDomain(finaljava.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, finaljava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if (((!(vmsForStorageDomain.isEmpty())) || (!(vmTemplatesForStorageDomain.isEmpty()))) || (!(disksForStorageDomain.isEmpty()))) { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForStorageDomain) { removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), vm.getCompatibilityVersion(), storageDomainId, null, null)); } for (org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplatesForStorageDomain) { removeEntityLeftOver(vmTemplate.getId(), vmTemplate.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vmTemplate.getId(), vmTemplate.getName(), VmEntityType.TEMPLATE, vmTemplate.getClusterArch(), clusterDao.get(vmTemplate.getClusterId()).getCompatibilityVersion(), storageDomainId, null, null)); } storageDomainDao.removeEntitesFromStorageDomain(storageDomainId); } storageOvfExtraDataDao.remove(storageDomainId); return null; }); }
protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = newjava.util.ArrayList(); storageOvfExtraData = newjava.util.ArrayList(); }
private static void fetchStorageStatus(org.ovirt.engine.core.compat.Guid storageDomainId,java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData,java.util.Map<java.lang.String,java.lang.Object> diskDescriptionMap) { org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus storageStatus = ((org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus) (diskDescriptionMap.get(OvfInfoFileConstants.DomainStatus))); org.ovirt.engine.core.utils.OvfUtils.log.debug("Storage domain status '{}' fetched from metadata json file for storage id '{}'.", storageStatus, storageDomainId); if (storageStatus!= null) { storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.Storage, storageDomainId, storageStatus.name())); } }
private static void fetchVmsStatus(org.ovirt.engine.core.compat.Guid storageDomainId,java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData,java.util.Map<java.lang.String,java.lang.Object> diskDescriptionMap) {java.util.Map<java.lang.String,java.lang.String> vmsStatus = ((java.util.Map<java.lang.String,java.lang.String>) (diskDescriptionMap.get(OvfInfoFileConstants.VmStatus))); if (vmsStatus == null) { org.ovirt.engine.core.utils.OvfUtils.log.error("VMs status could not be fetched from metadata json file for storage id '{}'.", storageDomainId); } else { for (java.lang.String vmId : vmsStatus.keySet()) { org.ovirt.engine.core.utils.OvfUtils.log.debug("VM '{}' fetched from metadata json file with status '{}' for storage domain id '{}.", vmId, vmsStatus.get(vmId), storageDomainId); storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.VM, storageDomainId, vmsStatus.get(vmId))); } } }
private void updateCurrentConfiguration(org.ovirt.engine.core.common.businessentities.UpdatedMemory updatedMemory) { final org.ovirt.engine.core.common.businessentities.VmStatic updatedVmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStaticData()); updatedVmStatic.setMemSizeMb(updatedMemory.getMemoryMb()); updatedVmStatic.setMinAllocatedMem(updatedMemory.getMinMemoryMb()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmManager().update(updatedVmStatic); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext());java.util.HashSet<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (!(proccessedDomains.isEmpty())) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } if (!(replaceBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (existingBrick == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.setBrickDirectory(replaceBrickModel.getBrickDirectory().getEntity()); replaceBrickModel.startProgress(); org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters parameter = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrick); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, (result) -> { org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (result.getState())); localModel.stopProgress(); setWindow(null); }, replaceBrickModel); }
private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { commandCoordinatorUtil.executeAsyncCommand(ActionType.UpgradeHostInternal, createUpgradeParameters(parameters), command.cloneContextAndDetachFromParent()); }
private void synchronizeSelection() { if (isSingleSelectionOnly()) { setSelectedItem(selectionModel.asSingleSelectionModel().getSelectedObject()); } else {java.util.List<T> selectedItems = selectionModel.asMultiSelectionModel().getSelectedList(); setSelectedItems(selectedItems); if ((selectedItems.size()) == 1) { setSelectedItem(selectedItems.get(0)); } } }
public void setSelectionModel(org.ovirt.engine.ui.uicommonweb.models.OvirtSelectionModel<T> selectionModel) { this.selectionModel = selectionModel; if (!(selectionModel.isSingleSelectionOnly())) { selectionModel.asMultiSelectionModel().setDataDisplay(this); selectionModel.asMultiSelectionModel().setMultiSelectEnabled(true); } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.gwtbootstrap3.client.ui.ListGroupItem) { org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> clickedItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListViewItem<T> item : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickedItem!= null) { if (!(event.isControlKeyDown())) { selectionModel.clear(); selectionModel.setSelected(clickedItem.getEntity(), true); } else if (event.isControlKeyDown()) { selectionModel.setSelected(clickedItem.getEntity(), (!(selectionModel.isSelected(clickedItem.getEntity())))); } } } }
private void processSelectionChanged() {java.util.List<T> selectedItems = getSelectedItems(); selectedIndexes.clear(); model.getItems().forEach((item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } }); updateInfoPanel(); }
public void setModel(M model) { this.model = model; getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> { if ((selectionChangedHandler)!= null) { selectionChangedHandler.removeHandler(); } getModel().getSelectionModel().clear();java.util.List<org.ovirt.engine.ui.common.widget.listgroup.T> items = getModel().getItemsAsList(); selectedIndexes.forEach(( selectedIndex) -> { if ((selectedIndex > (-1)) && (selectedIndex < (items.size()))) { getModel().getSelectionModel().setSelected(items.get(selectedIndex), true); } }); updateInfoPanel(); selectionChangedHandler = selectionModel.addSelectionChangeHandler((e) -> processSelectionChanged()); }); }
@java.lang.Override protectedjava.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protectedjava.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
public void addMainContentView(java.lang.String label,java.lang.String historyToken,java.lang.String contentUrl, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); }
@java.lang.Deprecated public void addMainTab(java.lang.String label,java.lang.String historyToken,java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue(), options.getIsDefaultPlace().booleanValue()); }
@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { final com.google.gwtplatform.mvp.shared.proxy.PlaceRequest fragmentRequest = getPlaceFromFragment(); if (fragmentRequest!= null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> revealPlace(fragmentRequest)); } else { revealPlace(getDefaultMainSectionPlace()); } }
publicjava.lang.Boolean getIsDefaultPlace() { return getValueAsBoolean("isDefaultPlace", false); }
private boolean isColdReboot() { boolean coldReboot = ((org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce()) && (!(org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun()))) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); log.info("VM '{}' is performing {} reboot; run once: '{}', running as volatile: '{}', has next run configuration: '{}'", org.ovirt.engine.core.bll.RebootVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isVolatileRun(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); return coldReboot; }
privatejava.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = dbFacade.getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime())!= null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model,java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent,java.lang.String... subCollectionMembersToExclude) { if ((model.isSetQuota()) && (model.getQuota().isSetId())) { org.ovirt.engine.core.common.businessentities.Quota quota = getEntity(org.ovirt.engine.core.common.businessentities.Quota.class, QueryType.GetQuotaByQuotaId, new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(model.getQuota().getId())), "quota"); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(quota.getStoragePoolId().toString()); } org.ovirt.engine.api.model.Disk disk = super.addLinks(model, suggestedParent, subCollectionMembersToExclude); if (disk.isSetStorageDomains()) { disk.getStorageDomains().getStorageDomains().forEach(( storageDomain) -> org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }
protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { org.ovirt.engine.api.model.Disk model = populate(map(disk), disk); if ((model.isSetQuota()) && (disk instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(image.getStoragePoolId().toString()); } collection.getDisks().add(addLinks(model)); } return collection; }
private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + shift; int nextRow = (shiftSelectedRow > 0)? shiftSelectedRow % (dataDisplay.getRowCount()) : shiftSelectedRow + (dataDisplay.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift > 0? shift + 1 : shift - 1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }
public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsedAsVdsmName() {java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> conflictingNetworks = getDbFacade().getNetworkDao().getAllForDataCenter(network.getDataCenterId()).stream().filter(( net) ->!(net.getId().equals(network.getId()))).filter(( net) -> net.getVdsmName().equals(network.getName())).collect(java.util.stream.Collectors.toList()); if (conflictingNetworks.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; }java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictingNetworks", conflictingNetworks); nameReplacements.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME, nameReplacements); }
@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_INTERFACE_NAME)); }
@java.lang.Override protectedjava.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.TransferDiskImageProgressColumn.color.asCode(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext());java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains!= null)) && (proccessedDomains.contains(storageDomainId))) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("Ovf update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) {java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || ((domain.getStatus())!= (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) { continue; }java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount);java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfInfos = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfInfos.size()) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { if ((storageDomainOvfInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfoStatus.OUTDATED)) { proccessedDomains.add(storageDomainOvfInfo.getStorageDomainId()); break; } } } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.api.model.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior.LEAVE_PAUSED; case LEAVE_PAUSED : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior.KILL; case KILL : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.ResumeBehavior.KILL; default : throw newjava.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case AUTO_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.AUTO_RESUME; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.LEAVE_PAUSED; case KILL : return org.ovirt.engine.api.model.ResumeBehavior.KILL; default : throw newjava.lang.IllegalArgumentException((("Unknown resume behavior \"" + resumeBehavior) + "\"")); } }
private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty())? org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_MEMORY_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_MB,java.lang.String.valueOf(originalMemoryMb)); addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_NEW_MEMORY_MB,java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); finaljava.lang.String unplugOptions = vmMemoryDevices.stream().filter(VmDeviceCommonUtils::isMemoryDeviceHotUnpluggable).map(( device) -> org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device).get()).map(( deviceSize) ->java.lang.String.format("%dMB (%dMB)", deviceSize, memoryAfterHotUnplug(originalMemoryMb, deviceSize))).collect(java.util.stream.Collectors.joining(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_MEMORY_HOT_UNPLUG_OPTIONS, unplugOptions); } auditLogDirector.log(this, message); }
public static boolean isMemoryDeviceHotUnpluggable(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw newjava.lang.RuntimeException((("Memory device expected but device " + memoryDevice) + " obtained."); } return (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()) && (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_NODE).isPresent()); }
private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final org.ovirt.engine.core.common.businessentities.VM vmFromDb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); finaljava.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceType.MEMORY); final org.ovirt.engine.core.common.businessentities.VmDevice memoryDeviceToUnplug = computeMemoryDeviceToHotUnplug(vmMemoryDevices); final int oldMemoryMb = vmFromDb.getMemSizeMb(); final int oldMinMemoryMb = vmFromDb.getMinAllocatedMem(); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMinAllocatedMem(oldMinMemoryMb); return; } final org.ovirt.engine.core.common.action.ActionReturnValue hotUnplugReturnValue = runInternalAction(ActionType.HotUnplugMemoryWithoutVmUpdate, new org.ovirt.engine.core.common.action.HotUnplugMemoryWithoutVmUpdateParameters(memoryDeviceToUnplug.getId(), newVm.getMinAllocatedMem()), org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(vmFromDb.isHostedEngine())) { final int memoryDeviceSizeMb = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(memoryDeviceToUnplug).get(); final int memoryAfterHotUnplugMb = oldMemoryMb - memoryDeviceSizeMb; newVmStatic.setMemSizeMb((hotUnplugReturnValue.getSucceeded()? memoryAfterHotUnplugMb : oldMemoryMb)); newVmStatic.setMinAllocatedMem((hotUnplugReturnValue.getSucceeded()? newVm.getMinAllocatedMem() : oldMinMemoryMb)); } }
@java.lang.Override public void runForS390() { diskIndex = 0; }
@java.lang.Override public void runForS390() { hasMaximum = (org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCW_DISKS) == (countDisks(DiskInterface.VirtIO)); }
void runForSS();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; }
@java.lang.Override public <T extends org.ovirt.engine.core.utils.archstrategy.ArchCommand> T run(T c) { c.runForS390(); return c; }
@java.lang.Override publicjava.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null? "" :java.lang.String.join(object.getMdevTypes().stream().sorted().collect(java.util.stream.Collectors.toList())); }
public staticjava.lang.Double percent2bits(java.lang.Integer speedValueInMegaBits,java.lang.Double rxTxValueInPrecent) { if ((speedValueInMegaBits == null) || (rxTxValueInPrecent == null)) { return 0.0; } return (speedValueInMegaBits * rxTxValueInPrecent) / 100; }
@org.junit.Test public void testDefaultRouteWhenOutOfSyncOnOlderCluster() { cluster.setCompatibilityVersion(Version.v4_1); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(false)); }
public static boolean defaultRouteSupported(org.ovirt.engine.core.compat.Version version) { return Version.v4_2.lessOrEquals(version); }
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { org.ovirt.engine.core.compat.Version clusterVersion = clusterNetworkModel.getCluster().getCompatibilityVersion(); boolean defaultRouteSupported = Version.v4_2.lessOrEquals(clusterVersion); return (defaultRouteSupported && (clusterNetworkModel.isAttached())) && (!(clusterNetworkModel.isExternal()))) && (((!(isMultipleSelectionAllowed())) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.getOriginalNetworkCluster().isDefaultRoute()))); }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if ((getClass())!= (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return ((((((((org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.commandId.equals(other.commandId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.phase.equals(other.phase))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.type.equals(other.type))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.lastUpdated.equals(other.lastUpdated))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.message.equals(other.message))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId)) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vds
private void pollDownloadStatus(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue!= null) && (returnValue.getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal())!= null) && (imageTransfer.getBytesTotal().equals(imageTransfer.getBytesSent()))) && (!(imageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updates.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(updates); runInternalAction(ActionType.TransferImageStatus, parameters); } } } }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if ((getClass())!= (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.commandId.equals(other.commandId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.phase.equals(other.phase))) && ((type) == (other.type))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.active.equals(other.active))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.lastUpdated.equals(other.lastUpdated))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdsId.equals(other.vdsId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vdiskId.equals(other.diskId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.vagedTicketId.equals(other.vagedTicketId))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.proxyUri.equals(other.proxyUri))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.bytesSent.equals(other.bytesSent))) && (org.ovirt.engine.core.common.businessentities.storage.ImageTransferCommand.bytesTotal.equals(other.bytesTotal)); }
private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Refreshing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.info("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isExtendTicketFailed()) { updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(false); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(true); } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } resetPeriodicPauseLogTime(0); }
public boolean isExtendTicketFailed() { return extendTicketFailed; }
public void setExtendTicketFailed(boolean extendTicketFailed) { this.extendTicketFailed = extendTicketFailed; }
private static org.ovirt.engine.core.common.utils.Pair noneAndNone() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit();java.lang.String expectedOutput = "{}"; return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private void storeNetwork() throwsjava.io.UnsupportedEncodingException { if (sourceProtocol.equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA)) { networkData = new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInitToOpenStackMetadata(vmInit); } else { storeNetworkAsEni(sourceProtocol); } }
private static org.ovirt.engine.core.common.utils.Pair dhcpIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest));java.lang.String expectedOutput = "{\n" + ((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp6\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair staticIPv6() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); underTest.setIpv6Prefix(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_PREFIX); underTest.setIpv6Gateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_GATEWAY); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest));java.lang.String expectedOutput = "{\n" + ((((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\",\n") + " \"netmask\": 666,\n") + " \"gateway\": \"ipv6 gateway\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(expectedOutput, vmInit); }
private static org.ovirt.engine.core.common.utils.Pair staticIPv6AddressOnly() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setIpv6BootProtocol(Ipv6BootProtocol.STATIC_IP); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV6_ADDRESS); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest));java.lang.String expectedOutput = "{\n" + (((((((((((((("("("("("LinkedNetworks: [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv6\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv6 address\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
@org.junit.Test public void test() throwsjava.io.IOException { org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler underTest = new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler(vmInit, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA); finaljava.util.Map<java.lang.String, byte[]> actual = underTest.getFileData();java.util.Map<java.lang.String,java.lang.Object> actualNetworkData = parseResult(actual);java.util.Map<java.lang.String,java.lang.Object> expectedNetworkData = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(expected); assertEquals(expectedNetworkData, actualNetworkData); }
private static org.ovirt.engine.core.common.utils.Pair dhcpIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.DHCP); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest));java.lang.String expectedOutput = "{\n" + ((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"dhcp4\",\n") + " \"link\": \"iface name\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair staticIPv4() { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IFACE_NAME); underTest.setBootProtocol(Ipv4BootProtocol.STATIC_IP); underTest.setIp(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_ADDRESS); underTest.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_NETMASK); underTest.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataProtocolTest.IPV4_GATEWAY); org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setNetworks(java.util.Arrays.asList(underTest));java.lang.String expectedOutput = "{\n" + ((((((((((((((((" \"links\": [\n" + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"vif\",\n") + " \"name\": \"iface name\"\n") + " }\n") + " ],\n") + " \"networks\": [\n") + " {\n") + " \"id\": \"iface name\",\n") + " \"type\": \"ipv4\",\n") + " \"link\": \"iface name\",\n") + " \"ip_address\": \"ipv4 address\",\n") + " \"netmask\": \"ipv4 netmask\",\n") + " \"gateway\": \"ipv4 gateway\"\n") + " }\n") + " ]\n") + "}"; return new org.ovirt.engine.core.common.utils.Pair(expectedOutput, vmInit); }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search1 search2"); vmInit.setDnsServers("nameserver1 nameserver2 nameserver3");java.lang.String expectedOutput = "{\n" + (((((((((((((((("("("("services\": [\n" + " {\n" + " \"address\": \"nameserver1\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n" + " \"address\": \"nameserver2\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"nameserver3\",\n") + " \"type\": \"dns-nameserver\"\n") + " },\n") + " {\n") + " \"address\": \"search1\",\n") + " \"type\": \"dns-search\"\n") + " },\n") + " {\n") + " \"address\": \"search2\",\n") + " \"type\": \"dns-search\"\n") + " }\n") + " ]\n") + "}"); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
protected void addUserDomainToVm() { mapDbUsers().forEach((dbUser) -> { org.ovirt.engine.core.bll.VmDbUserHandler.addUserDomainToVm(dbUser); }); }
protected void readUserDomainsSection(@java.lang.SuppressWarnings("unused") org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNode userDomainsSection = org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(section); org.ovirt.engine.core.utils.ovf.xml.XmlNode domainSection = org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(userDomainsSection); org.ovirt.engine.core.utils.ovf.xml.XmlNode domainSection2 = org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection); org.ovirt.engine.core.utils.ovf.xml.XmlNode domainSection3 = org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection3, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(domainSection4, org.ovirt.engine.core.utils.ovf.xml.XmlUtils.createXmlNode(
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> mapDbUsers() {java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = newjava.util.ArrayList<>();java.util.Map<java.lang.String,java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers().forEach((dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap!= null) {java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); } } }); return dbUsers; }
public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return (((((super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(lunDisks, other.lunDisks))) && (java.util.Objects.equals(interfaces, other.interfaces))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusterName, other.clusterName))) && (java.util.Objects.equals(affinityGroups, other.affinityGroups)) && (java.util.Objects.equals(dbUsers, other.dbUsers)); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); result = (prime * result) + ((org.ovirt.engine.core.common.businessentities.VmBase) (getVmBase())); return result; }
@java.lang.Override protected void executeCommand() { affinityGroupDao.update(getParameters().getAffinityGroup()); vmStaticDao.incrementDbGenerationForVms(getAffinityGroup().getVmIds()); setSucceeded(true); }
@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels().forEach(( affinityLabel) -> { affinityLabel.getVms().add(getParameters().getVm().getId()); labelDao.update(affinityLabel); }); }
@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumeReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, ( val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (list!= null) { org.ovirt.engine.core.utils.ovf.xml.XmlNode node = getNode(list, "xsi:type", "ovf:OperatingSystemSection_Type"); if (node!= null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getVmBase().getOsId()))) || ((fullEntityOvfData.getVmBase().getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsi:type", "ovf:VirtualHardwareSection_Type"); if (node!= null) { readHardwareSection(node); } node = getNode(list, "xsi:type", "ovf:SnapshotsSection_Type"); if (node!= null) { readSnapshotsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityGroupsSection_Type"); if (node!= null) { readAffinityGroupsSection(node); } node = getNode(list, "xsi:type", "ovf:AffinityLabelSection_Type"); if (node!= null) { readAffinityLabelsSection(node); } node = getNode(list, "xsi:type", "ovf:UserDomainsSection_Type"); if (node!= null) { readUserDomainsSection(node); } } readGeneralData(virtualSystem); }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); vmStaticDao.incrementDbGenerationForVms(newjava.util.ArrayList(getParameters().getLabel().getVms())); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }
@java.lang.Override protectedjava.util.List<org.ovirt.engine.core.common.businessentities.Label> mapAffinityLabels() {java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = newjava.util.ArrayList<>();java.util.Map<java.lang.String,java.lang.String> affinityLabelMap = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabelMap(); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getAffinityLabels().forEach(( affinityLabel) -> { org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = labelDao.getByName(affinityLabel); if (affinityLabelMap!= null) {java.lang.String destName = affinityLabelMap.get(affinityLabel); if (destName!= null) { org.ovirt.engine.core.common.businessentities.Label destAffinityLabel = labelDao.getByName(destName); addBusinessEntityToList(affinityLabels, destAffinityLabel, originalAffinityLabel); } else { addBusinessEntityToList(affinityLabels, originalAffinityLabel, null); } } else { addBusinessEntityToList(affinityLabels, originalAffinityLabel, null); } }); return affinityLabels; }
@java.lang.Override protected void mapDbUsers() {java.util.Map<java.lang.String,java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.getParameters().getDbUsers().forEach(( dbUser) -> { org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap!= null) {java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (destDomain!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), destDomain); if (destDbUser!= null) { addPermissionsForUser(destDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser!= null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser!= null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } else { org.ovirt.engine.core.common.businessentities.aaa.DbUser newDbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); newDbUser.setLoginName(dbUser.getLoginName()); newDbUser.setDomain(dbUser.getDomain()); dbUserDao.save(newDbUser); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateFromConfigurationCommand.log.debug("User {}@{} does not exist, creating it...", newDbUser.getLoginName(), newDbUser.getDomain()); } }); }
private void writeAffinityLabels() {java.util.List<java.lang.String> affinityLabelsNames = fullEntityOvfData.getAffinityLabels(); if ((affinityLabelsNames == null) || (affinityLabelsNames.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:AffinityLabelsSection_Type"); affinityLabelsNames.forEach((labelName) -> { _writer.writeStartElement(OvfProperties.AFFINITY_GROUP); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "name", labelName); _writer.writeEndElement(); }); _writer.writeEndElement(); }
public void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enableElements); selectDestinationHostEditor.setEnabled(enableElements); hostsListEditor.setEnabled(enableElements); }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.VDS> canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm,java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList,java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList,java.util.List<java.lang.String> messages) {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklistedHosts(vdsList, vdsBlackList); vdsList = keepOnlyWhitelistedHosts(vdsList, vdsWhiteList); refreshCachedPendingValues(vdsList); org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId());java.util.Map<java.lang.String,java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return vdsList!= null? vdsList :java.util.Collections.emptyList(); }
void localize() { selectHostAutomaticallyEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectHostAutomaticallyLabel()); selectDestinationHostEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectDestinationHostLabel()); hostsListEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupHostsListLabel()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopup()); message1.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateHostDisabledVMsInServerClusters()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateSomeVmsAlreadyRunningOnHost()); message3.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHost()); message4.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHeHost()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); enableSelectionElements(object.getEnableSelectionElements()); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); enableSelectionElements(object.getEnableSelectionElements()); } }); }
private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getNoSelAvailable()); message4.setVisible(object.getNoHeSelAvailable()); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid runOnVds, boolean allRunOnSameVds, boolean hostedEngineOnlyMigration) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(runOnVds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } if (hostedEngineOnlyMigration) {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> nonHeHosts = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.isHostedEngineDeployed())) { nonHeHosts.add(host); } } hosts.removeAll(nonHeHosts); } }
@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetSearchPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.TYPE_SetBreadCrumbs, breadCrumbsPresenterWidget); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getView().resizeToFullHeight(); }
@java.lang.Override protected boolean validate() { boolean returnValue = (((super.validate()) && (validate(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.createStoragePoolValidator().existsAndUp()))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }
public static boolean isVmLeaseBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return!(java.util.Objects.equals(source.getLeaseStorageDomainId(), destination.getLeaseStorageDomainId())); }
private void setAuthenticatedUser(org.ovirt.engine.api.model.Api api) { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.QueryParametersBase()); org.ovirt.engine.core.common.businessentities.aaa.DbUser authenticatedUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (returnValue.getReturnValue())); org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User(); user.setId(authenticatedUser.getId().toString()); org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(user); api.setAuthenticatedUser(user); }
@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if (host == null) { return failValidation(EngineMessage.VDS_INVALID_SERVER_ID); } if (host.isPmEnabled()) {java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(dataCenter().id()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.vvVersionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.versionLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }
public boolean isHotUnplugMemory() { return hotUnplugMemory; }
public void setHotUnplugMemory(boolean hotUnplugMemory) { this.hotUnplugMemory = hotUnplugMemory; }
void localize() { }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(path()); or(mandatory(host().id()), mandatory(host().name())); }
@org.ovirt.api.metamodel.annotations.Injava.lang.String path();
org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(network().comment()); optional(network().description()); optional(network().display()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().name()); optional(network().stp()); optional(network().vlan().id()); }
org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(network().id()), mandatory(network().name())); optional(network().comment()); optional(network().description()); optional(network().ip().address()); optional(network().ip().gateway()); optional(network().ip().netmask()); optional(network().mtu()); optional(network().profileRequired()); optional(network().stp()); optional(network().vlan().id()); optional(network().usages()[COLLECTION]); optional(network().externalProvider().id()); optional(network().physicalNetworkProvider().id()); }
@org.ovirt.api.metamodel.annotations.Link types.Network physicalNetworkProvider();
public void setClientIp(java.lang.String clientIp) { this.clientIp = clientIp; }
java @java.lang.Override protected void service(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava x.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Calling SsoLoginServlet");java.lang.String scope =java.lang.String.format("ovirt-app-portal ovirt-ext=auth:sequence-priority=%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPropertyName));java.lang.String redirectUri =java.lang.String.format("%s://%s:%s%s", request.getScheme(), org.ovirt.engine.core.aaa.filters.FiltersHelper.getRedirectUriServerName(request.getServerName()), request.getServerPort(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_ID")).addParameter("response_type", "code").addParameter("app_url", request.getParameter("app_url")).addParameter("engine_url", org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("redirect_uri", redirectUri).addParameter("scope", scope); if (org.apache.commons.lang.StringUtils.isNotEmpty(request.getParameter("sso_token"))) { urlBuilder.addParameter("sso_token", request.getParameter("sso_token")); }java.lang.String url = urlBuilder.build(); org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("Redirecting to '{}'", url); response.sendRedirect(url); }
private staticjava.lang.String mapPluginType(java.lang.String entity, org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { if ((type == (org.ovirt.engine.api.model.OpenStackNetworkProviderType.EXTERNAL)) || (OpenstackNetworkPluginType.OPEN_VSWITCH.name().equalsIgnoreCase(entity))) { return entity; } throw newjava.lang.IllegalArgumentException((("Invalid network plugin type \"" + entity) + "\"")); }
@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(OpenstackNetworkPluginType.OPEN_VSWITCH.toString()); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.model.MessageBrokerType.class)); return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture map(org.ovirt.engine.core.common.businessentities.ArchitectureType model,java.lang.String template) { if (model!= null) { switch (model) { case undefined : return org.ovirt.engine.api.model.Architecture.UNDEFINED; case x86_64 : return org.ovirt.engine.api.model.Architecture.X86_64; case ppc64 : return org.ovirt.engine.api.model.Architecture.PPC64; case s390 : return org.ovirt.engine.api.model.Architecture.S390; default : return null; } } return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model!= null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; case S390 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.s390; default : return null; } } return null; }
@java.lang.Override protected void onHide() { getTable().hideContextMenu(); breadCrumbsPresenterWidget.rebuildBreadCrumbs(); }
protected void popuplateSwappedList() {java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey!= null) {java.lang.String swappedColumns = clientStorage.getLocalItem(swappedColumnKey); if (swappedColumns!= null) {java.lang.String[] split = swappedColumns.split(","); for (int i = 0; i < (split.length); i++) {java.lang.String[] tupel = split[i].split("="); if ((tupel.length) == 2) { realToSwappedIndexes.put(java.lang.Integer.valueOf(tupel[1]),java.lang.Integer.valueOf(tupel[0])); maxSwappedIndex =java.lang.Math.max(maxSwappedIndex,java.lang.Integer.valueOf(tupel[0])); } } } } }
javajava.lang.String parseVolumeIdFromPath(java.lang.String path) { if (org.apache.commons.lang.StringUtils.isEmpty(path)) { return ""; } int slashIndex = path.lastIndexOf("/"); if (slashIndex == (-1)) { return ""; } return path.substring((slashIndex + 1)); }
private boolean isDomainXmlEnabledForVds() { return ((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vmDao.get(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVmId()).getCompatibilityVersion().toString()))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.ImageTransfer model = (template!= null)? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId())!= null) { model.setId(entity.getId().toString()); } if ((entity.getVdsId())!= null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId())!= null) { model.setImage(new org.ovirt.engine.api.model.Image()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri())!= null) && ((entity.getImagedTicketId())!= null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket())!= null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase())!= null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapPhase(entity.getPhase())); } if ((entity.getActive())!= null) { model.setActive(entity.getActive()); } if ((entity.getType())!= null) { model.setDirection(org.ovirt.engine.api.restapi.types.ImageTransferMapper.mapType(entity.getType())); } return model; }
private static org.ovirt.engine.api.model.ImageTransferDirection mapType(org.ovirt.engine.core.common.businessentities.storage.TransferType type) { switch (type) { case Download : return org.ovirt.engine.api.model.ImageTransferDirection.DOWNLOAD; case Upload : return org.ovirt.engine.api.model.ImageTransferDirection.UPLOAD; default : return null; } }
private void storeSwappedIndexMap() {java.lang.String value = ""; int i = 0; for (java.util.Map.Entry<java.lang.Integer,java.lang.Integer> entry : realToSwappedIndexes.entrySet()) { if (i > 0) { value += ","; } i++; value += ((entry.getValue()) + "=") + (entry.getKey()); } if (!("".equals(value))) {java.lang.String swappedColumnKey = getSwappedColumnListKey(); if (swappedColumnKey!= null) { clientStorage.setLocalItem(swappedColumnKey, value); } } }
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter())!= null) && ((getDataCenter().getItems())!= null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor!= null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); getNetworkProviderModel().setDefaultProviderById(cluster.getDefaultNetworkProviderId()); }
public void setDefaultProviderById(org.ovirt.engine.core.compat.Guid defaultProviderId) { org.ovirt.engine.core.common.businessentities.Provider updatedDefaultProvider = getNetworkProviders().getItems().stream().filter(( provider) -> provider!= null).filter(( provider) -> provider.getId().equals(defaultProviderId)).findFirst().orElse(null); if (((defaultProvider) == null) || (defaultProvider.equals(getNetworkProviders().getSelectedItem()))) { getNetworkProviders().setSelectedItem(updatedDefaultProvider); defaultProvider = updatedDefaultProvider; } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(registrationConfiguration()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(template().name()); or(optional(storageDomain().id()), optional(storageDomain().name())); optional(vm().diskAttachments()[COLLECTION].id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(storageDomain().name()); optional(vm().diskAttachments()[COLLECTION].disk().format()); optional(vm().diskAttachments()[COLLECTION].id()); optional(vm().diskAttachments()[COLLECTION].disk().sparse()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(clone()); optional(exclusive()); optional(template().name()); optional(registrationConfiguration()); }
org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) {java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(newjava.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch((d) -> d.isWipeAfterDelete())); return memoryDisk; }
org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) {java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(2), guids.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), guids.get(3)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(2)); memoryDisk.setImageId(guids.get(3)); memoryDisk.setStorageIds(newjava.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch((d) -> d.isWipeAfterDelete())); return memoryDisk; }
org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch(( d) -> d.isWipeAfterDelete()); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
java privatejava.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) {java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = newjava.util.ArrayList<>(); if (getItems())!= null) { if (isGrouppedByTarget()) {java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { aggregateAddedLuns(item.getLuns(), selectedLuns, includedLuns, luns); } } else {java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); aggregateAddedLuns(items, selectedLuns, includedLuns, luns); } } return luns; }
org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) {java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(newjava.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }
private void onMaintenance() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow()));java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(confirmModel.getForce().getEntity()); if ((item.getStoragePoolId())!= null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
@java.lang.Override publicjava x.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { boolean forceMaintenance = ((action.isForce()) == null)? false : action.isForce(); return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, forceMaintenance), action); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId()))!= (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
java @java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId()))!= (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } else if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().isForceMaintenance()) { executeDeactivateCommand(); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } }
private void onMaintenance() {java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> list = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(false); if ((item.getStoragePoolId())!= null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, ( result) -> { confirmationModel.stopProgress(); setWindow(null); }, null); }
java @java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.UNASSIGNED : org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.UNASSIGNED; } }
private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { periodicPauseLog(context.entity, context.iterationTimestamp); if ((context.entity.getImagedTicketId())!= null) { extendTicketIfNecessary(context); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion()))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithImageTicket(context.entity); if ((upToDateImageTransfer.getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateTransferStatusWithImageTicket(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer oldImageTransfer) { org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(oldImageTransfer.getVdsId(), oldImageTransfer.getImagedTicketId())).getReturnValue())); if ((!(java.util.Objects.equals(oldImageTransfer.getActive(), ticketInfo.isActive()))) || (!(java.util.Objects.equals(oldImageTransfer.getBytesSent(), ticketInfo.getTransferred())))) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updatesFromTicket = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); updatesFromTicket.setBytesSent(ticketInfo.getTransferred()); updatesFromTicket.setActive(ticketInfo.isActive()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to update transfer status."); return oldImageTransfer; } return returnValue.getActionReturnValue(); } return oldImageTransfer; }
.lang.StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString

public org.ovirt.engine.core.bll.ValidationResult providerIsNoDefaultProvider() {java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllClustersByDefaultNetworkProviderId(provider.getId()); return clusters.isEmpty()? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(getProviderUsedInClusterValidationMessage(clusters.size()), org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("CLUSTER_NAMES", clusters)); }
private org.ovirt.engine.api.model.IscsiDetails mapLogicalUnitToIscsiDetails(org.ovirt.engine.api.model.LogicalUnit logicalUnit) { org.ovirt.engine.api.model.IscsiDetails iscsiDetails = new org.ovirt.engine.api.model.IscsiDetails(); iscsiDetails.setAddress(logicalUnit.getAddress()); iscsiDetails.setPort(logicalUnit.getPort()); iscsiDetails.setTarget(logicalUnit.getTarget()); return iscsiDetails; }
privatejava x.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if (imageTransfer.isSetHost()) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskForVolumeInfo(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return diskImageDao.getAncestor(disk.getImageId()); }
@java.lang.Override protected void executeCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDisks(); if ((disks!= null) && (!(disks.isEmpty()))) { org.ovirt.engine.core.bll.storage.DiskImage diskImage = getDisks().get(0); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(diskImage.getDiskId()); diskImage.setDiskName(diskImage.getDiskName()); diskImage.setDiskType(diskImage.getDiskType()); diskImage.setDiskId(
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb,java.lang.String id) { int additionalAvailableSizeSize = value.getAdditionalAvailableSize();java.lang.String additionalAvailableSizeSizeString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.additionalAvailableSizeInGB(additionalAvailableSizeSize); boolean isGrayedOut = value.getIsGrayedOut();java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (additionalAvailableSizeSize == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, additionalAvailableSizeSizeString); } else { input = templates.toggledUp(inputId, additionalAvailableSizeSizeString); } sb.append(templates.span(id, input)); }
javajava.lang.String addOrExtendSanStorage();
@java.lang.Override protected void executeCommand() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.ActionType actionType = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValue = runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getLock())); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValue = runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock)); } handleChildReturnValue(); org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.setSucceeded(true); }
@java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(cluster.getExternalNetworkProviders()); return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
javajavajavajava @java.lang.Override publicjava x.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderConfigurationIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(host.getExternalNetworkProviderConfigurations()); org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.isOverrideIptables()); } addParams.setHostedEngineDeployConfiguration(org.ovirt.engine.api.restapi.resource.HostResourceParametersUtil.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(host, addParams))); return performCreate(ActionType.AddVds, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.equals(entity.getClusterId()))) { performAction(ActionType.ChangeVDSCluster, new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(clusterId, guid)); entity = getEntity(hostResolver, true); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, ActionType.UpdateVds, new org.ovirt.engine.api.restapi.resource.BackendHostResource.UpdateParametersProvider()); return host; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter(this); externalProviderIdCompleter.complete(incoming.getExternalNetworkProviders()); return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, new UpdateParametersProvider()); }
@java.lang.Override publicjava x.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { validateParameters(action, "host.id|name", "path"); org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.VM); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setPath(action.getPath()); return doAction(ActionType.ExportOva, params, action); }
protected void exportOva() { org.ovirt.engine.core.bll.OvaOvaHandler.exportOva(this, this.ovirt.engine.core.bll.OvaOvaOvaHandler.getOva()); }
@java.lang.Override protected void exportOva() { super.exportOva(); org.ovirt.engine.core.common.businessentities.VM selectedEntity = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (selectedEntity == null) { return; } if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow())!= null) { return; } org.ovirt.engine.core.common.action.ExportOvaParameters parameters = new org.ovirt.engine.core.common.action.ExportOvaParameters(); parameters.setEntityType(VmEntityType.VM); parameters.setEntityId(selectedEntity.getId()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ExportOva, parameters); }
public boolean isUsingDistinct(java.lang.String obj) { if ((org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj))!= null) { return org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj).distinct; } return false; }
@org.ovirt.engine.ui.common.Source("images/prepare_to_maintenance.png") com.google.gwt.resources.client.ImageResource prepareToMaintenance();
public boolean isFieldUpdatable(java.lang.Enum<?> status,java.lang.String name,java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer!= null) && ((container)!= null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else {java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values!= null)? values.contains(name) : false; if ((returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
public boolean createOvfStoreDisks(int missingDiskCount) { boolean AllOvfStoreDisksCreated = true; for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.CreateOvfVolumeForStorageDomain, parameters, org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); if (!(returnValue.getSucceeded())) { AllOvfStoreDisksCreated = false; } } return AllOvfStoreDisksCreated; }
java @java.lang.Override publicjava x.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, clusterId, getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }
java @java.lang.Override publicjava x.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
public void updateVDSInterfaceList(java.util.Collection<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> pairCollection,java.lang.Runnable callback) {java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.stream().map((pair) -> pair.getSecond()).collect(java.util.stream.Collectors.toList()); updateVDSInterfaceList(vdsList, callback); }
public void updateVDSInterfaceList(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList,java.lang.Runnable callback) {java.util.List<org.ovirt.engine.core.common.queries.QueryType> types = newjava.util.ArrayList<>();java.util.List<org.ovirt.engine.core.common.queries.QueryParametersBase> ids = newjava.util.ArrayList<>(); if (!(vdsList.isEmpty())) { vdsList.stream().forEach((vds) -> { types.add(QueryType.GetVdsInterfacesByVdsId); ids.add(new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId())); }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleQueries(types, ids, ( result) -> {java.util.List<org.ovirt.engine.core.common.queries.QueryReturnValue> values = result.getReturnValues(); for (int i = 0; i < (vdsList.size()); i++) { org.ovirt.engine.core.common.queries.QueryReturnValue interfaceQueryValue = values.get(i); if ((interfaceQueryValue.getReturnValue())!= null) { vdsList.get(i).getInterfaces().addAll(interfaceQueryValue.getReturnValue()); callback.run(); } } }); } else { callback.run(); } }
javajavajava.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId,java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { returnjava.util.Optional.empty(); } return diskIds.stream().map(( diskId) -> new org.ovirt.engine.core.bll.hostedengine.Pair<>(diskId, ((List<org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId, diskId)).getReturnValue())))).flatMap(( diskToVolumes) -> diskToVolumes.getSecond().stream().map(( volumeId) -> getImageInfo(spId, sdId, diskToVolumes.getFirst(), volumeId))).filter(java.util.Objects::nonNull).map(( diskImageCall) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskImageCall.getReturnValue()))).filter(java.util.Objects::nonNull).filter(this::isHostedEngineConfigVolume).findAny(); }
private boolean isHostedEngineConfigVolume(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { finaljava.lang.String strConfigImageId = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.HostedEngineConfigurationVolumeGuid); final org.ovirt.engine.core.compat.Guid configImageId = (strConfigImageId.isEmpty())? null : org.ovirt.engine.core.compat.Guid.createGuidFromString(strConfigImageId); if (configImageId!= null) { return diskImage.getImageId().equals(configImageId); } return org.ovirt.engine.core.bll.hostedengine.HostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(diskImage.getDescription()); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(newjava.util.ArrayList()); vmStatic.setInterfaces(newjava.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, false); saveDiskVmElements(vm); }
java @java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages =!(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false, getImages().stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toList())); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }
public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration())!= null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images!= null) { vmUpdatedFromConfiguration &= updateImagesByConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vm.setImages(newjava.util.ArrayList(images)); } vm.setAppList(snapshot.getAppList()); vmDynamicDao.update(vm.getDynamicData()); synchronizeDisksFromSnapshot(vm.getId(), snapshot.getId(), activeSnapshotId, vm.getImages(), vm.getName()); if (vmUpdatedFromConfiguration) { vmStaticDao.update(vm.getStaticData()); boolean macsInSnapshotAreExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); synchronizeNics(vm, compensationContext, user, vmInterfaceManager, macsInSnapshotAreExpectedToBeAlreadyAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (deviceCanBeRemoved(vmDevice)) { vmDeviceDao.remove(vmDevice.getId()); } } vmDeviceUtils.addImportedDevices(vm.getStaticData(), false, withMemory); } }
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addVmExternalLuns(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity(), false); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; });
public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, boolean withMemory) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); }java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = newjava.util.ArrayList<>();java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate = newjava.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate, diskIdsToImport); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedOtherDevices(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.updateAll(vmDevicesToUpdate); }
private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase,java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); if ((diskIdsToImport!= null) && (!(diskIdsToImport.contains(deviceId)))) { continue; } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmBase, vmDevice, deviceId, vmDevicesToUpdate); } }
java @java.lang.Override publicjava x.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalRegistrationConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); params.setExternalVnicProfileMappings(org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper.mapFromModel(action.getVnicProfileMappings())); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
void init() { leftBound.setEntity((macRange.getMacFrom()) == null? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null? "" : macRange.getMacTo())); recalculateMacsCount(); leftBound.getEntityChangedEvent().addListener((ev, sender, args) -> onMacRangeChange()); rightBound.getEntityChangedEvent().addListener((ev, sender, args) -> onMacRangeChange()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); }
private static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createAuditLogableForHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); logable.setVdsId(vds.getId()); logable.setVdsName(vds.getName()); return logable; }
private static void createAuditLog(java.util.List<java.lang.String> guids, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.businessentities.VDS vds) { if (guids.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.createAuditLogableForHost(vds); logable.addCustomValue("MpathGuids", guids.stream().sorted().collect(java.util.stream.Collectors.joining(", "))); org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.auditLogDirector.log(logable, type); }
private void processHeartbeat() { int incoming = (this.policy.getIncomingHeartbeat()) / 2; if (((!(this.isInInit())) && (getHeartbeatTime()) > incoming)) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("Host was no massege from " + (getHostname())) + " for " + incoming) + " milliseconds")); this.half = false; } if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("Heartbeat exceeded for " + (getHostname())) + " last message was " + (getHeartbeatTime())) + " milliseconds ago.") this.disconnect(" exceeded")); } }
private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isIncomingHeartbeat())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info((((("Heartbeat exceeded for " + (getHostname())) + " last response was " + (getHeartbeatTime())) + " milliseconds ago.")); this.disconnect("Heartbeat exceeded"); } }
@java.lang.Override protected void executeCommand() {java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDisks();java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.String> diskIdToPath = prepareImages(disks); fillDiskApparentSize(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm.getStaticData(), true); vmDeviceUtils.setVmDevices(vm.getStaticData()); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(newjava.util.ArrayList(disks)); fullEntityOvfData.setInterfaces(vm.getInterfaces());java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getCompatibilityVersion()); log.debug("Export OVF: {}", ovf); boolean succeeded = runAnsiblePackOvaPlaybook(vm.getName(), ovf, disks, diskIdToPath); org.ovirt.engine.core.bll.CreateOvaCommand.setSucceeded(succeeded); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "id",java.lang.Integer.toString(mapOsId(vmBase.getOsId()))); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeElement("Info", "Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
privatejava.lang.String runAnsibleQueryOvaInfoPlaybook() { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(vdsStaticDao.get(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getVdsId()).getHostName()).variables(new org.ovirt.engine.core.common.utils.Pair("ovirt_query_ova_path", org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getPath())).enableLogging(false).playbook(AnsibleConstants.QUERY_OVA_PLAYBOOK); boolean succeeded = false; org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue ansibleReturnValue = null; try { ansibleReturnValue = ansibleExecutor.runCommand(command); succeeded = (ansibleReturnValue.getAnsibleReturnCode()) == (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK); } catch (java.io.IOException |java.lang.InterruptedException e) { log.debug("Failed to query OVA info", e); return null; } if (!succeeded) { log.error("Failed to query OVA info. Error: {}", command.logFile()); return null; } return ansibleReturnValue.getStdout(); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOva(java.lang.String ovf) { if (ovf == null) { return null; } try { return ovfHelper.readVmFromOva(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + ovf), e); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); return null; } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VM vm = getOvaInfoUsingAnsible(); setReturnValue(vm); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getReturnValue().setSucceeded(((vm!= null) && (vm.getVmId().equals(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getVmId())))); }
privatejava.lang.String parseOvfFromStdout(java.lang.String stdout) { if (stdout == null) { return null; }java.util.regex.Matcher m = org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVF_PATTERN.matcher(stdout); if ((m.matches()) && ((m.groupCount()) > 0)) {java.lang.String ovf = m.group(1); ovf = ovf.replaceAll("\\\\\"", "\""); log.info(ovf); return ovf; } log.error("Failed to parse OVF from:\n{}", stdout); return null; }
private void setCookie(finaljava x.servlet.http.HttpServletRequest request, finaljava x.servlet.http.HttpServletResponse response, finaljava x.servlet.http.Cookie cookie) {java x.servlet.http.Cookie cookie = newjava x.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure(org.ovirt.engine.core.utils.servlet.LocaleFilter.HTTPS_SCHEME); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java x.servlet.http.HttpServletResponse.MAX_AGE); cookie.setHttpOnly(true); response.addCookie(cookie); }
javajavajavajava.lang.String authenticateUser(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response, org.ovirt.engine.core.sso.utils.Credentials userCredentials) throwsjava x.servlet.ServletException, org.ovirt.engine.core.sso.utils.AuthenticationException { if ((userCredentials == null) || (!(org.ovirt.engine.core.sso.utils.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java x.servlet.http.Cookie) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Authenticating user using credentials");java x.servlet.http.Cookie cookie = newjava x.servlet.http.Cookie("profile", userCredentials.getProfile()); cookie.setSecure(request.getScheme()); response.addCookie(cookie); org.ovirt.engine.core.sso.utils.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECT_TO_MODULE_URI); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.error("Server Error: {}", ex.getMessage()); org.ovirt.engine.core.sso.servlets.InteractiveAuthServlet.log.debug("Exception", ex); throw newjava.lang.RuntimeException(ex.getMessage(), ex); } }
private void setLangPageShown(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response, boolean value) {java x.servlet.http.Cookie cookie = newjava x.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN,java x.servlet.http.Cookie.HTTP_SCHEME.equals(request.getScheme()))?java x.servlet.http.Cookie.HTTP_SCHEME :java x.servlet.http.Cookie.HTTP_SCHEME.equals(request.getScheme()); cookie.setPath(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }
@org.junit.Test public void networkNameNotTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn("vdsm-name"); when(network.getId()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }
public org.ovirt.engine.core.common.utils.ansible.AnsibleReturnValue runCommand(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>... envVars) throwsjava.io.IOException,java.lang.InterruptedException { return runCommand(command, org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.ANSIBLE_PLAYBOOK_TIMEOUT, envVars); }
java @java.lang.Override publicjava x.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getAddress()); cnx.setIqn(iscsiDetails.getTarget()); cnx.setStorageType(StorageType.ISCSI); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPort().toString()); } else { cnx.setPort(org.ovirt.engine.api.restapi.resource.BackendHostResource.DEFAULT_ISCSI_PORT); } if (iscsiDetails.isSetPortal()) { cnx.setPortal(iscsiDetails.getPortal().toString()); } if (iscsiDetails.isSetUsername()) { cnx.setUserName(iscsiDetails.getUsername()); } if (iscsiDetails.isSetPassword()) { cnx.setPassword(iscsiDetails.getPassword()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionParms = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionParms, action); }
private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { log.error("Handling failed transfer. {}", getTransferDescription()); stopImageTransferSession(context.entity); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload)? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); setAuditLogTypeFromPhase(ImageTransferPhase.FINISHED_FAILURE); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookAdd(java.lang.String url,java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookAdd").build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }

@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getBroker().glusterWebhookAdd(org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.getParameters().getWebhookUrl(), null); org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebhookVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookDelete(java.lang.String url) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookDelete").build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookSync() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookSync").build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookUpdate(java.lang.String url,java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").build();java.util.Map<java.lang.String,java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }

@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportValidator importValidator = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToDestinationDomainMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), failedDisksToImportForAuditLog)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVm().getImages()); } return true; }
types.VnicProfileMapping[] vnicProfileMappings();
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("vdsm_name", network.getVdsmName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getProviderId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId())).addValue("provider_physical_network_id", network.getProviderPhysicalNetworkId()).addValue("qos_id", network.getQosId()).addValue("label", network.getLabel()).addValue("dns_resolver_configuration_id", getDnsResolverConfigurationId(network)); }
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().isSetProviderPhysicalNetworkId()) { loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork()); } org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().setLabel(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; }); }
private void loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.Network physicalProviderNetwork = networkDao.get(network.getProviderPhysicalNetworkId()); network.setVlanId(physicalProviderNetwork.getVlanId()); network.setLabel(physicalProviderNetwork.getVdsmName()); }
privatejava.lang.String getAlertTooltipText(org.ovirt.engine.core.common.businessentities.VDS vds) { return "TODO meaningful alert tooltip"; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.equals(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatus())); case 1 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getAlertTooltipText(vds)); } } return null; }
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler((event) -> applySort(event, sortedModel)); }
@org.junit.Test public void passDiscardNotSupported() { testDiscardFieldParsing(Version.v4_0, null); }
@org.junit.Test public void discardFieldIsParsed() { testDiscardFieldParsing(Version.v4_1, 1024L); }
@org.junit.Test public void sparsifyNotSupportedWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_WHEN_WAD_IS_ENABLED)); }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?,? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); org.ovirt.engine.ui.uicommonweb.models.MainModelSelectionChangeEvent.fire(((com.google.gwt.event.shared.HasHandlers) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getEventBus())), listModel); } } }
private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter<?,?,?,?> currentPlacePresenter) {java.lang.String searchString = bookmark.getValue(); if (searchString!= null) {java.lang.String[] split = searchString.split(":");java.lang.String result = null; if ((split.length) > 0) {java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); } if ((currentPlacePresenter!= null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }
privatejava.lang.String getFragmentFromSearchString(java.lang.String searchString) {java.lang.String[] split = searchString.split(":");java.lang.String result = null; if ((split.length) > 0) {java.lang.String defaultSearchString = split[0]; result = SearchStringMapping.searchToPlaceMap.get(defaultSearchString); if (((split.length) > 1) && (result!= null)) { result += ";search=";java.lang.String searchQuery = split[1].trim(); com.gwtplatform.common.client.ClientUrlUtils urlUtils = new com.gwtplatform.common.client.ClientUrlUtils(); searchQuery = urlUtils.encodeQueryString(searchQuery); searchQuery = searchQuery.replaceAll("%3D", "\\\\2"); result += searchQuery; } } return result; }
java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb,java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize();java.lang.String availableSizeToAddString = org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut();java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!isGrayedOut) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.uiConstants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.cannotExtendSanStorage(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledUp(inputId, availableSizeToAddString); } sb.append(templates.span(id, input)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) || (!(validateDiscardAfterDeleteLegal(storageDomainValidator))) || (!(validateDiskOnBackupDomain(storageDomainValidator))) { return false; }java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("discardAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); props.remove("backup"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean validateDiskOnBackupDomain() { return validate(new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getStoragePoolId(),java.util.stream.Stream.concat(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getDiskMap().values().stream().filter(DisksFilter.ONLY_IMAGES).map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).flatMap(( vmDisk) -> vmDisk.getStorageIds().stream()),java.util.stream.Stream.of(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getLeaseStorageDomainId()).filter(java.util.Objects::nonNull)).collect(java.util.stream.Collectors.toSet())).allDomainsNotBackupDomains()); }


@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.CellTemplate.class);java.lang.String color = ""; if (object!= null) { if (!(object.getIsIncluded())) { color = "gray"; } else if (object.getIsSelected()) { color = "midnightblue"; } else if ((!(object.getIsAccessible())) && (!(object.getIsGrayedOut()))) { color = "orange"; } else { color = "black"; } } return template.input(getRawValue(object), ("color:" + color), com.google.gwt.user.client.DOM.createUniqueId()); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table,java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn addOrExtendColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn () { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; addOrExtendColumn.makeSortable(); table.addColumn(addOrExtendColumn, headerString, "95px"); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table,java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }
java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(( ev, sender, args) -> {java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.edit(object); targetsToLunTab.addClickHandler(( event) -> { iscsiLunToTargetView.disableItemsUpdate(); object.setIsGrouppedByTarget(true); }); lunToTargetsTab.addClickHandler(( event) -> { iscsiTargetToLunView.disableItemsUpdate(); object.setIsGrouppedByTarget(false); }); dialogTabPanel.switchTab((object.getIsGrouppedByTarget()? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); if (!(object.getContainer().isNewStorage())) { if ((object.getContainer().getStorage().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance)) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiRemoveLUNsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiActionsLabel()); } else if ((object.getContainer().getStorage().getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiActionsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiLUNsLabel()); } } }
privatejava.net.HttpURLConnection getProxyConnection(java.lang.String url) { org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder builder;java.net.HttpURLConnection connection; try { builder = new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder().setURL(url); builder.setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStore().getAbsolutePath()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setHttpsProtocol(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ExternalCommunicationProtocol)); connection = builder.create(); connection.setDoOutput(true); return connection; } catch (java.lang.Exception ex) { throw newjava.lang.RuntimeException(java.lang.String.format("Failed to communicate with ovirt-imageio-proxy: %s", ex.getMessage())); } }
privatejava.util.Map<java.lang.String,java.lang.Object> createDiskUuidsMap(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) {java.util.Map<java.lang.String,java.lang.Object> diskUuids = newjava.util.HashMap<>(); diskUuids.put("poolID", diskImage.getStoragePoolId()); diskUuids.put("domainID", diskImage.getStorageIds().get(0)); diskUuids.put("imageID", diskImage.getId()); diskUuids.put("volumeID", diskImage.getImageId()); return diskUuids; }
java @java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)) || (ValidationUtils.GUID.matches(cdImagePath))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { org.ovirt.engine.core.compat.Guid validGuid = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS validVds = new org.ovirt.engine.core.common.businessentities.VDS(); validVds.setId(validGuid); if (expectedError == (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED)) { validVds.setClusterCompatibilityVersion(Version.v4_1); } else { validVds.setClusterCompatibilityVersion(Version.v4_2); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface eth0 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); eth0.setName(vdsInterfacesNames[0]); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface eth1 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); eth1.setName(vdsInterfacesNames[1]); when(getQueryParameters().getId()).thenReturn(validGuid); when(vdsDao.get(eq(validGuid))).thenReturn(validVds); when(interfaceDao.getAllInterfacesForVds(eq(validGuid))).thenReturn(java.util.Arrays.asList(eth0, eth1)); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValue.setSucceeded(true); returnValue.setReturnValue(creatLldpInfoMap((expectedError!= (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.LLDP_ENABLE)))); when(vdsBrokerFrontendMocked.runVdsCommand(VDSType.GetMultipleTlvsByHostId, any(org.ovirt.engine.core.bll.network.host.GetMultipleTlvs
privatejava.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> createEmptyResponse() {java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = interfaceDao.getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId());java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> result = newjava.util.HashMap<>(); if ((ifaces!= null) && (!(ifaces.isEmpty()))) { ifaces.forEach((iface) -> result.put(iface.getName(), null)); } return result; }
@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand();java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertTrue(checkEmptyValuesForIfaces(returnValue)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId(); org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(vdsId); if ((vds!= null) && (org.ovirt.engine.core.common.FeatureSupported.isLlldpInformationSupported(vds.getClusterCompatibilityVersion())) {java.lang.String[] names = newjava.lang.String[0]; org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters lldpVDSCommandParameters = new org.ovirt.engine.core.common.vdscommands.GetLldpVDSCommandParameters(vdsId, names); org.ovirt.engine.core.common.vdscommands.VDSReturnValue command = runVdsCommand(VDSCommandType.GetLldp, lldpVDSCommandParameters); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(command.getReturnValue()); } else { org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(createEmptyResponse()); } }
private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue())!= null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret == true? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); addGlusterWebhook(vds); return ret; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Loging that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, newjava.util.HashMap<java.lang.String,java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); put("source", "cli"); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getGeoRepSession(org.ovirt.engine.core.compat.Guid masterVolumeId,java.lang.String slaveHostName,java.lang.String slaveVolumeName) { return getCallsHandler().executeRead("GetGlusterGeoRepSessionBySlaveHostAndVolume", org.ovirt.engine.core.dao.gluster.GlusterGeoRepDaoImpl.georepSessionRowMapper, getCustomMapSqlParameterSource().addValue("master_volume_id", masterVolumeId).addValue("slave_host_name", slaveHostName).addValue("slave_volume_name", slaveVolumeName)); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { logUtil.logAuditMessage(vol.getClusterId(), vol, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, newjava.util.HashMap<java.lang.String,java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); put("source", "gluster event"); } }); }
public boolean isDummyProvider() { return ((type) == (ProviderType.EXTERNAL_NETWORK)) && (((url) == null) || (url.isEmpty())); }
public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when(((cluster.supportsVirtService())) && ((cluster.getCpuName())!= null)); }
java @java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLOAD); updateOvfStoreContent(); setSucceeded(failedOvfDisks.isEmpty()); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); org.ovirt.engine.core.bll.storage.ovfstore.ProcessOvfUpdateForStorageDomainCommand.setSucceeded(createOvfStoreDisks(getMissingDiskCount())); } }
protected abstract void selectPhysicalDatacentreNetwork();
private void onPhysicalRadioButtonChange(java.lang.Object sender) { if (sender == (getPhysicalNetworkDatacentreRB())) { getNeutronPhysicalNetwork().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(true); getPhysicalNetworkDatacentre().setEntity(true); } else if (sender == (getPhysicalNetworkCustomRB())) { getNeutronPhysicalNetwork().setIsChangeable(true); getDatacentrePhysicalNetwork().setIsChangeable(false); getPhysicalNetworkDatacentre().setEntity(false); } else if (sender == (getPhysicalNetworkDatacentre())) { boolean datacentre = getPhysicalNetworkDatacentre().getEntity(); getPhysicalNetworkCustomRB().setEntity((!datacentre), false); getPhysicalNetworkDatacentreRB().setEntity(datacentre, false); } }
public void setPhysicalNetworkDatacentre(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentre) { this.physicalNetworkDatacentre = physicalNetworkDatacentre; }
private boolean isPhysicalNetworkAvailable() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); return network!= null; }
@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); externalLabel.setVisible(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly)); }
@java.lang.Override protected void selectPhysicalDatacentreNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); if (network == null) { return; }java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworkDao().getAllForNetwork(network.getId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.getId().equals(network.getId())) { return; } } }
public void setPhysicalNetworkCustomRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkCustomRB) { this.physicalNetworkCustomRB = physicalNetworkCustomRB; }
@java.lang.Override protected void selectPhysicalDatacentreNetwork() { getDatacentrePhysicalNetwork().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(getDatacentrePhysicalNetwork().getItems())); }
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExternal().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetwork() { return physicalNetwork; }
@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (getExternal().getEntity()) { getHasVLanTag().setIsChangeable(false); getVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNeutronPhysicalNetwork().setIsChangeable(false); } }
public void setPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetwork) { this.physicalNetwork = physicalNetwork; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkCustomRB() { return physicalNetworkCustomRB; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkDatacentreRB() { return physicalNetworkDatacentreRB; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setStp(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity());java.lang.String label = getNetworkLabel().getSelectedItem(); if ((getExternal().getEntity()) && (getPhysicalNetwork().getEntity())) { label = (!(getPhysicalNetworkDatacentre().getEntity()))? getNeutronPhysicalNetwork().getEntity() : null; } network.setLabel(((label == null) || (!(label.isEmpty()))? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setDnsResolverConfiguration(getDnsConfigurationModel().flush()); network.setVlanId(null); if (getHasVLanTag().getEntity()) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().getItems()) { profileModel.flush(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos().getSelectedItem(); network.setQosId((qos == (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.EMPTY_HOST_NETWORK_QOS)? null : qos.getId())); } }
protected void onExportChanged() { boolean externalNetwork = getExternal().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable(externalNetwork); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); getPhysicalNetwork().setIsChangeable(externalNetwork); getPhysicalNetworkCustomRB().setIsChangeable(externalNetwork); getPhysicalNetworkDatacentreRB().setIsChangeable(externalNetwork); updateMtuSelectorsChangeability(); }
private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getExternalProviders().setIsAvailable(false); getNeutronPhysicalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getExternalProviders().setIsAvailable(false); } }
private void initPhysicalNetworkList() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(getSelectedDc().getId()), new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.QueryReturnValue result) {java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = result.getReturnValue(); getDatacentrePhysicalNetwork().setItems(networks); selectPhysicalDatacentreNetwork(); } })); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getDatacentrePhysicalNetwork() { return datacentrePhysicalNetwork; }
public void setPhysicalNetworkDatacentreRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentreRB) { this.physicalNetworkDatacentreRB = physicalNetworkDatacentreRB; }
public void setDatacentrePhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> datacentrePhysicalNetwork) { this.datacentrePhysicalNetwork = datacentrePhysicalNetwork; }
void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId())!= null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); getExternal().setEntity(getNetwork().isExternal()); getExternal().setIsChangeable(false); getExternalProviders().setIsChangeable(false); getPhysicalNetwork().setEntity(isConnectedToPhysicalNetwork()); getPhysicalNetwork().setIsChangeable(false); if (isConnectedToPhysicalNetwork()) { getPhysicalNetworkDatacentre().setEntity(false); } getPhysicalNetworkDatacentreRB().setIsChangeable(false); getPhysicalNetworkCustomRB().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(false); if ((getNetwork().isExternal()) && (isConnectedToPhysicalNetwork())) { getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }

private void setQuotaStorage(org.ovirt.engine.core.common.businessentities.Quota quota) { if (quota.isEmptyStorageQuota()) { quota.setGlobalQuotaStorage(new org.ovirt.engine.core.common.businessentities.QuotaStorage(org.ovirt.engine.core.compat.Guid.newGuid(), quota.getId(), null, (-1L), 0.0)); return; } if ((quota.getGlobalQuotaStorage())!= null) { quota.getGlobalQuotaStorage().setQuotaId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } if ((quota.getQuotaStorages())!= null) { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaStorage.setQuotaId(quota.getId()); quotaStorage.setQuotaStorageId(org.ovirt.engine.core.compat.Guid.newGuid()); } } }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize())!= 0) && (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()) == (upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.api.model.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; case OVF_STORE : return org.ovirt.engine.api.model.org.ovirt.engine.core.common.businessentities.storage.DiskContentType; default : throw newjava.lang.IllegalArgumentException((("Unknown disk content type \"" + contentType) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType) { switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType.DATA; case ISO : return org.ovirt.engine.api.model.DiskContentType.ISO; case MEMORY_DUMP_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME; case MEMORY_METADATA_VOLUME : return org.ovirt.engine.api.model.DiskContentType.MEMORY_METADATA_VOLUME; case OVF_STORE : return org.ovirt.engine.api.model.DiskContentType.OVF_STORE; default : return null; } }
protected void updateExternalVnicProfilesPerTargetCluster() { finaljava.util.Map<org.ovirt.engine.core.common.businessentities.Cluster,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = newjava.util.HashMap<>(); getEntities().getItems().stream().forEach((importTemplateData) -> updateExternalVnicProfilesPerTargetCluster(importTemplateData.getEntity(), importTemplateData.getInterfaces(), importTemplateData.getCluster().getSelectedItem(), result)); setExternalVnicProfilesPerTargetCluster(result); }
protected void updateExternalVnicProfilesPerTargetCluster() { finaljava.util.Map<org.ovirt.engine.core.common.businessentities.Cluster,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = newjava.util.HashMap<>(); getEntities().getItems().stream().forEach((registerVmData) -> updateExternalVnicProfilesPerTargetCluster(registerVmData.getEntity(), registerVmData.getInterfaces(), registerVmData.getCluster().getSelectedItem(), result)); setExternalVnicProfilesPerTargetCluster(result); }
protectedjava.util.Map<org.ovirt.engine.core.common.businessentities.Cluster,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.Cluster cluster,java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result) { finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = newjava.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = newjava.util.HashSet(); } finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(interfaces, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); return result; }
publicjava.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> cloneExternalVnicProfiles(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((externalVnicProfilesPerTargetCluster.get(cluster)) == null) { return newjava.util.ArrayList<>(); } finaljava.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = newjava.util.ArrayList(externalVnicProfilesPerTargetCluster.get(cluster).size()); externalVnicProfilesPerTargetCluster.get(cluster).stream().forEach((vnicProfileMappingEntity) -> result.add(vnicProfileMappingEntity.getExternalVnicProfileMapping())); return result; }
privatejava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> getNewVnicProfileMappings(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces,java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings) { finaljava.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> result = newjava.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : interfaces) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity mapping = previousClusterVnicProfileMappings.stream().filter((java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> x) -> x.equals(newMapping)).findFirst().orElse(newMapping); result.add(mapping); } return result; }
protected void addVnicProfileMappingCommand() { final org.ovirt.engine.ui.uicommonweb.UICommand vnicProfileMappingCommand = createVnicProfileMappingCommand(); org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands().add(vnicProfileMappingCommand); }
java @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } if ((command == (getVnicProfileMappingCommand())) && ((org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getWindow()) == null)) { updateExternalVnicProfilesPerTargetCluster(); vnicProfileMappingModel = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingModel(this, externalVnicProfilesPerTargetCluster); vnicProfileMappingModel.initialize(); setWindow(vnicProfileMappingModel); } }
protected abstract void updateExternalVnicProfilesPerTargetCluster();
public org.ovirt.engine.core.common.action.VdcActionParametersBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBaseBase
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.DefaultCompensationContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandId(commandId); defaultContext.setCommandType(getActionType()); defaultContext.setBusinessEntitySnapshotDao(businessEntitySnapshotDao); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }
java @java.lang.Override publicjava.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("get_all_commands", ( rs, rowNum) -> { org.apache.commons.collections.keyvalue.DefaultKeyValue result = new org.apache.commons.collections.keyvalue.DefaultKeyValue(); result.setKey(getGuidDefaultEmpty(rs, "command_id")); result.setValue(org.ovirt.engine.core.common.action.ActionType.valueOf(rs.getString("command_type"))); return result; }, parameterSource); }
java @java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType().name()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType(ActionType.UpdateVds); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntitySnapshot("something"); snapshot.setSnapshotClass("someClass"); dao.save(snapshot);java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshotsFromDb); assertEquals(1, snapshotsFromDb.size()); assertEquals(snapshot, snapshotsFromDb.get(0)); }
boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }
public void compensate() {java.util.List<org.apache.commons.collections.KeyValue> commandSnapshots = businessEntitySnapshotDao.getAllCommands(); for (org.apache.commons.collections.KeyValue commandSnapshot : commandSnapshots) { try { compensate(((org.ovirt.engine.core.compat.Guid) (commandSnapshot.getKey()))); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Failed to run compensation on startup for Command '{}', Command Id '{}': {}", commandSnapshot.getValue(), commandSnapshot.getKey(), e.getMessage()); org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Exception", e); } org.ovirt.engine.core.bll.OnStartupCompensation.log.info("Running compensation on startup for Command '{}', Command Id '{}'", commandSnapshot.getValue(), commandSnapshot.getKey()); } }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot result = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); result.setId(getGuidDefaultEmpty(rs, "id")); result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); result.setCommandType(org.ovirt.engine.core.common.action.ActionType.valueOf(rs.getString("command_type"))); result.setEntityId(rs.getString("entity_id")); result.setEntityType(rs.getString("entity_type")); result.setEntitySnapshot(rs.getString("entity_snapshot")); result.setSnapshotClass(rs.getString("snapshot_class")); result.setSnapshotType(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot.SnapshotType.values()[rs.getInt("snapshot_type")]); result.setInsertionOrder(rs.getInt("insertion_order")); return result; }, parameterSource); }
private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery(( result) -> {java.util.List<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.List) (result)); providers.add(0, getNoDefaultNetworkProvider()); getDefaultNetworkProvider().setItems(providers); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Provider defaultNetworkProvider = providers.stream().filter(( provider) ->java.util.Objects.equals(provider.getId(), cluster.getDefaultNetworkProviderId())).findFirst().orElse(null); getDefaultNetworkProvider().setSelectedItem(defaultNetworkProvider); } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }
public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems())!= null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().stream().filter((candidate) ->java.util.Objects.equals(candidate.getId(), providerId)).findFirst().orElse(null); getNetworkProviders().setSelectedItem(provider); } }
protected boolean canDiskBeMoved() { return validate(createDiskValidator(getImage()).diskCanBeCopied(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage().getQcowCompat())); }
@java.lang.Override protected boolean validate() { return (((((((((super.validate() && (canDiskBeMoved()))) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationAllowedOnDiskContentType())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (validateVmSnapshotStatus())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateQuota())) && (validatePassDiscardSupportedForDestinationStorageDomain()); }
public org.ovirt.engine.core.bll.ValidationResult diskCanBeCopied(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.common.businessentities.storage.QcowCompat compat) { if (QcowCompat.QCOW2_V2.equals(compat)) { if (!(Guid.Empty.equals(diskImage.getParentId()))) { org.ovirt.engine.core.common.businessentities.storage.Image parent = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().get(diskImage.getParentId()); if ((parent.getSize()) < (diskImage.getSize())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_MOVE_DISK); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
java @java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEPLOY_LOG_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbook(AnsibleConstants.HOST_UPGRADE_PLAYBOOK); if ((ansibleExecutor.runCommand(command, org.ovirt.engine.core.bll.host.HostUpgradeManager.UPDATE_PACKAGES_TIMEOUT).getAnsibleReturnCode())!= (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK)) {java.lang.String error =java.lang.String.format("Failed to update host '%1$s'.", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw newjava.lang.RuntimeException(error); } } catch (java.lang.InterruptedException |java.io.IOException ex) { throw newjava.lang.RuntimeException(ex); } }
@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImageInfo(); if ((diskImage!= null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize())!= (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); completeImageData(diskImage); updateAuditLog(AuditLogType.USER_EXTEND_DISK_SIZE_SUCCESS, diskImage.getSizeInGigabytes()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }
protected void addDbUsers() { dbUsers = newjava.util.ArrayList<org.ovirt.engine.core.common.businessentities.DbUser>(); }
void addPermissions(org.ovirt.engine.core.bll.storage.ovfstore.DrMappingHelper.PermissionsParamObject permissionsParams,java.util.List<java.lang.String> missingRoles,java.util.List<org.ovirt.engine.core.common.businessentities.Permission> permissionsToAdd) {java.util.Map<java.lang.String,java.util.Set<java.lang.String>> userToRoles = permissionsParams.userToRoles; userToRoles.getOrDefault(permissionsParams.dbUser.getLoginName(),java.util.Collections.emptySet()).forEach(( roleName) -> { org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (permissionsParams.roleMap!= null) { org.ovirt.engine.core.common.businessentities.Role destRoleName = ((org.ovirt.engine.core.common.businessentities.Role) (permissionsParams.roleMap.get(roleName))); if (destRoleName!= null) { org.ovirt.engine.core.common.businessentities.Role destRole = roleDao.getByName(destRoleName.getName()); permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), destRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } else if (originalRole!= null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } } else if (originalRole!= null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.entityId, permissionsParams.objectType); } if (permission!= null) { permissionsToAdd.add(permission); } else { missingRoles.add(roleName); } }); }
protected void addDbUsers() { drMappingHelper.mapDbUsers(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getVmId(), VdcObjectType.VM, org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getRoleMap()); }
java @java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToAffinityGroups(); addVmToAffinityLabels(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData().getVmInit()); discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmId()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } registerHeOvfUpdate(); executeVmCommand(); }
private void registerHeOvfUpdate() { if (!(shouldUpdateHostedEngineOvf())) { return; } if (!(org.ovirt.engine.core.bll.VmCommand.getVm().isHostedEngine())) { return; } org.ovirt.engine.core.bll.VmCommand.registerRollbackHandler(new org.ovirt.engine.core.utils.transaction.TransactionCompletionListener() { @java.lang.Override public void onSuccess() { ovfDataUpdater.triggerNow(); } @java.lang.Override public void onRollback() { } }); }
java privatejava.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration) { if (dnsResolverConfiguration == null) { returnjava.util.Collections.EMPTY_LIST; }java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = dnsResolverConfiguration.getNameServers(); if ((nameServers == null) || (nameServers.isEmpty())) { returnjava.util.Collections.EMPTY_LIST; } return nameServers; }
private void dataCenter_SelectedItemChanged() { if ((getCurrentStorageItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); sanStorageModel.updateRemovableLuns(getDataCenter().getSelectedItem().getCompatibilityVersion()); sanStorageModel.getRequireTableRefresh().setEntity(null); sanStorageModel.getRequireTableRefresh().setEntity(true); } updateItemsAvailability(); behavior.updateDataCenterAlert(); }
public void updateRemovableLuns(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { setReduceDeviceSupported(((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.ReduceDeviceFromStorageDomain, dcCompatibilityVersion.toString())))); int numOfIncludedLuns = getIncludedLuns().size();java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels = getLuns(false, true); lunModels.forEach((lunModel) -> lunModel.setIsLunRemovable(((isReduceDeviceSupported()) && ((numOfIncludedLuns!= 1) && (!(getMetadataDevices().contains(lunModel.getLunId()))))))); }
@org.junit.Test public void testReadBooleanList() {java.util.List<java.lang.Boolean> expected =java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader( "<values><value>true</value><value>false</value></values>" );java.util.List<java.lang.Boolean> booleans = reader.readBooleans(); assertEquals(expected, booleans); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(("<values>true</value><value>false</value></values>")); reader.readBooleans(); assertEquals(java x.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("values", reader.getLocalName()); }
@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader( "<values><value>1</value><value>2</value></values>" ); reader.readStrings(); assertEquals(java x.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("values", reader.getLocalName()); }
javajavajavajavajava.util.List<java.lang.String> readStrings() {java.util.List<java.lang.String> values = newjava.util.ArrayList<>();java.lang.String startingLocalName = reader.getLocalName();java.lang.String currentLocalName = startingLocalName; while (forward()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { skip(); } else { values.add(readString()); } } return values; }
@org.junit.Test public void testReadStringList() {java.util.List<java.lang.String> expected =java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader( "<values><value>1</value><value>2</value></values>");java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }
private staticjava.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapVnicProfilesMapping(org.ovirt.engine.api.model.RegistrationVnicProfileMappings model) {java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> result = newjava.util.ArrayList(model.getRegistrationVnicProfileMappings().size()); model.getRegistrationVnicProfileMappings().forEach(( regMapping) -> { result.add(new org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping(regMapping.getFrom().getNetwork().getName(), regMapping.getFrom().getName(), ((regMapping.getTo())!= null? new org.ovirt.engine.core.compat.Guid(regMapping.getTo().getId()) : null))); }); return result; }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource bs, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); bs.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { bs.validateParameters(mapping, "from"); if ((mapping.getFrom().getName()) == null) { bs.validateParameters(mapping, "from.name"); } bs.validateParameters(mapping, "from.network"); if ((mapping.getFrom().getNetwork().getName()) == null) { bs.validateParameters(mapping, "from.network.name"); } if ("".equalsIgnoreCase(mapping.getFrom().getName())) { mapping.getFrom().setName(null); } if ("".equalsIgnoreCase(mapping.getFrom().getNetwork().getName())) { mapping.getFrom().getNetwork().setName(null); } if ((mapping.isSetTo()) && (mapping.getTo().isSetId())) { asGuid(mapping.getTo().getId()); } } }
public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { br.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfileMapping mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { if ((mapping.getSourceNetworkName()) == null) { br.validateParameters(mapping, "sourceNetworkName"); } if ((mapping.getSourceNetworkProfileName()) == null) { br.validateParameters(mapping, "sourceNetworkProfileName"); } if ("".equalsIgnoreCase(mapping.getSourceNetworkName())) { mapping.setSourceNetworkName(null); } if ("".equalsIgnoreCase(mapping.getSourceNetworkProfileName())) { mapping.setSourceNetworkProfileName(null); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } } } }
privatejava.lang.String formatKernelFeatures(java.util.Map<java.lang.String,java.lang.Object> kernelFeatures) { if (kernelFeatures == null) { return null; } final int vdsmNotAvailable = -1; finaljava.lang.String concatenatedPairs = kernelFeatures.entrySet().stream().filter(( pair) -> ((pair.getValue()) instanceofjava.lang.String) || (((pair.getValue()) instanceofjava.lang.Integer) && (!(java.util.Objects.equals(vdsmNotAvailable, pair.getValue()))))).map(( pair) ->java.lang.String.format("%s: %s", pair.getKey(), pair.getValue())).collect(java.util.stream.Collectors.joining(", ")); if (concatenatedPairs.isEmpty()) { return org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel.constants.notAvailableLabel(); } return concatenatedPairs; }
protectedjava.lang.String getBookContentPath(java.lang.String bookPath,java.lang.String contentPath,java.util.Locale locale) { return (((("/" + (locale.toString())) + "/") + bookPath) + "/html/") + contentPath; }
publicjava.lang.String getDocsSectionTemplate(java.util.Locale locale) {java.lang.String result = ""; try {java.lang.String docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, locale);java.io.File file = newjava.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } if ((result.isEmpty()) && (!(DEFAULT_US_LOCALE.equals(locale)))) { docsSectionTemplatePath = getDocsSectionTemplatePath(filePath, DEFAULT_US_LOCALE); file = newjava.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } if (result.isEmpty()) { docsSectionTemplatePath = getDocsSectionFallbackTemplatePath(filePath); file = newjava.io.File(docsSectionTemplatePath); if (((file.exists()) && (file.isFile())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } } catch (java.io.IOException ioe) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Exception loading docs template", ioe); } if (result.isEmpty()) { org.ovirt.engine.core.branding.BrandingTheme.log.warn("code or installation problem -- could not load documentation section for any locale or fallback"); } return result; }
protectedjava.lang.String getBookPdfPath(java.lang.String bookPath,java.util.Locale locale) { return ((((("/" + (locale.toString())) + "/") + bookPath) + "/") + bookPath) + ".pdf"; }
protectedjava.io.File getBookContentFile(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response,java.lang.String bookPath,java.lang.String contentPath,java.util.Locale locale) {java.io.File file = null; file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, locale), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { if (!(DEFAULT_US_LOCALE.equals(locale))) { file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, DEFAULT_US_LOCALE), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { file = null; } } } return file; }
@java.lang.Override protected void doGet(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) throwsjava.io.IOException,java x.servlet.ServletException {java.lang.String url = request.getPathInfo();java.util.Locale locale = getLocaleFromRequest(request);java.io.File file = null;java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlIndexPattern.matcher(url); if (m.matches()) {java.lang.String bookPath = m.group(1); file = getBookIndexFile(request, response, bookPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) {java.lang.String bookPath = m.group(1);java.lang.String contentPath = m.group(2); file = getBookContentFile(request, response, bookPath, contentPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookPdfPattern.matcher(url); if (m.matches()) {java.lang.String bookPath = m.group(1); file = getBookPdfFile(request, response, bookPath, locale); } } } if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile(request, response, file, type); } }
protectedjava.lang.String getBookIndexPath(java.lang.String bookPath,java.util.Locale locale) { return ((("/" + (locale.toString())) + "/") + bookPath) + "/html/index.html"; }
@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.POLL2)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2,java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(2,java.util.concurrent.TimeUnit.SECONDS); } }
private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isConfirmConnectivitySupportedByVdsm(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion()))? CONFIRM_CONNECTIVITY : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId(), pt), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion()); while (!(setupNetworksTask.isDone())) { poller.poll(); } } return setupNetworksTask; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.PollTechnique pt = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion()))? POLL2 : POLL; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(host.getId(), pt)); final long startTime =java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Host managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String,java.lang.Object> map, org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId);java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); diskDevName = ((diskDevName == null) || ((diskDevName.length()) < 3))? "" : diskDevName.substring(0, 2); switch (diskDevName) { case "sd" : dve.setDiskInterface(DiskInterface.VirtIO_SCSI); break; case "hd" : dve.setDiskInterface(DiskInterface.IDE); break; case "vd" : default : dve.setDiskInterface(DiskInterface.VirtIO); break; } return dve; }
publicjava.lang.String generateEngineXml(org.ovirt.engine.core.common.businessentities.VM vm,java.lang.String cpuId,java.lang.String emulatedMachine) { vm.setCpuName(cpuId); vm.setEmulatedMachine(emulatedMachine); return new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(vm, vmInfoBuildUtils).buildCreateVm(); }
private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getId(), image.getImageId()); return imageInfoFromVdsm.getApparentSizeInBytes(); } else { if ((TransferImageCommand.getParameters().getTransferSize())!= 0) { return TransferImageCommand.getParameters().getTransferSize(); } else { boolean isOnBlock = TransferImageCommand.getDiskImage().getStorageTypes().get(0).isBlockDomain(); return isOnBlock? TransferImageCommand.getDiskImage().getActualSizeInBytes() : TransferImageCommand.getDiskImage().getSize(); } } }
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceUtils.addCdDevice(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); } } }
public org.ovirt.engine.core.bll.ValidationResult providerTypeIsNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK).when((!(isNetworking(provider.getType())))); }
@org.junit.Test public void openstackIsValidNetworkProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsNetwork(), isValid()); }
@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK)); }
javajava.lang.String ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK();
@java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getExclusiveLocks() { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution()) { return null; } return networkLocking.getNetworkProviderLock(getProviderId()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters parameters = new org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters(getProvider().getName(), getNetwork(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().getDataCenterId(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.InternalImportExternalNetwork, parameters); if (!(returnValue.getSucceeded())) { propagateFailure(runInternalAction(ActionType.InternalImportExternalNetwork, parameters)); return; } org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true); }
public void setFragmentParameters(java.util.Map<java.lang.String,java.lang.String> params, boolean newItem) { currentEntityParams.clear(); currentEntityParams.putAll(params);java.util.Set<org.ovirt.engine.ui.common.presenter.FragmentParams> paramNames = newjava.util.HashSet<>(); paramNames.addAll(org.ovirt.engine.ui.common.presenter.FragmentParams.getParams(currentEntityParams.keySet())); com.gwtplatform.mvp.shared.proxy.PlaceRequest request = new com.gwtplatform.mvp.shared.proxy.PlaceRequest.Builder().nameToken(getCurrentPlaceRequest().getNameToken()).with(currentEntityParams).build(); if (newItem) { com.google.gwt.user.client.History.newItem(buildHistoryToken(request), false); } else { com.google.gwt.user.client.History.replaceItem(buildHistoryToken(request), false); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { if (!(event.getValue().contains(WebAdminApplicationPlaces.SUB_TAB_PREFIX))) { currentEntityParams.clear(); } super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(() -> { com.google.gwt.dom.client.Node favicon = com.google.gwt.user.client.DOM.getElementById("id-link-favicon"); if (favicon!= null) { com.google.gwt.dom.client.Node parent = favicon.getParentNode(); favicon.removeFromParent(); parent.appendChild(favicon); } }); } }
protectedjava.util.Map<java.lang.String,java.lang.String> getFragmentParamsFromEntity(T item) {java.util.Map<java.lang.String,java.lang.String> result = newjava.util.HashMap<>(); result.put(FragmentParams.NAME.getName(), ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); return result; }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?,? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel<?>> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { placeManager.setFragmentParameters(getFragmentParams(searchString), false); listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } } }
privatejava.util.Map<java.lang.String,java.lang.String> getFragmentParams(java.lang.String searchString) {java.util.Map<java.lang.String,java.lang.String> result = newjava.util.HashMap<>(); if (searchString.startsWith(modelProvider.getModel().getDefaultSearchString())) { searchString = searchString.substring(modelProvider.getModel().getDefaultSearchString().length()); } result.put(FragmentParams.SEARCH.getName(), searchString); return result; }
private static boolean canExecute(org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus<?,?> entity,java.lang.Class type, org.ovirt.engine.core.common.action.ActionType action) {java.util.Set<org.ovirt.engine.core.common.action.ActionType> actions = org.ovirt.engine.core.common.ActionUtils._matrix.get(type).get(entity.getStatus()); if ((actions!= null) && (actions.contains(action))) { return false; } return true; }
@org.ovirt.engine.ui.uicompat.DefaultOnRollback() { super.onRollback(); }
public void onSuccess() { }
@org.ovirt.api.metamodel.annotations.Injava.lang.Boolean restoreLease();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(snapshot().id()); optional(restoreMemory()); optional(restoreLease()); optional(disks()[COLLECTION].id()); optional(disks()[COLLECTION].imageId()); optional(disks()[COLLECTION].snapshot().id()); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { initChildHierarchy(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext!= null) { contextsCache.get().put(cmdEntity.getId(), cmdContext); } }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((((cmdEntity!= null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }
public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().remove(commandId); contextsCache.get().remove(commandId); updateCmdHierarchy(commandId); }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get(cmdId); }
javajava publicjava.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) {java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((!onlyWithCallbackEnabled) || (commandsCache.get().get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }
publicjava.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get(cmdId); }
public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().updateCommandExecuted(commandId); }
publicjava.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.get(entityId); }
public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().updateCallbackNotified(commandId); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get(cmdEntity.getId()); if (existingCmdEntity!= null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.get().put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((commandsCache.get(cmdEntity.getParentCommandId()))!= null)) && (commandsCache.get(cmdEntity.getParentCommandId()).isCallbackEnabled()))) { buildCmdHierarchy(cmdEntity); if (!(cmdEntity.isCallbackNotified())) { addToCallbackMap(cmdEntity); } } }
public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get(commandId), retrieveCommandContext(commandId)); }
public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.get().persistCommandAssociatedEntities(cmdAssociatedEntities); }
public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get(cmdId); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId,java.util.Map<java.lang.String,java.io.Serializable> data) { commandsCache.get().updateCommandData(commandId, data); }
public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId)? null : commandsCache.get(commandId); }
javajavajavajavajava publicjava.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) {java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = newjava.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if (((cmdEntity!= null) && ((cmdEntity.getEngineSessionSeqId())!= (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_SEQ_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
public void handleUnmanagedCommands() {java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll();java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId())!= null).map((java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter(( x) -> (x.getVdsmTaskId())!= null).map((java.util.stream.Collectors.toSet())); getCommands(false).stream().filter((java.util.List::streamEntry) ->!(x.isCallbackEnabled())).filter((java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTask::AsyncTaskStatus.class).isSet(java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTaskStatus.class).isSet(java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTaskStatus.class))))).filter((java.util.List::streamEntry) ->!(asyncTaskManagerManagedCommands.contains(x.getId()))).forEach((java.util.List::streamEntry) -> commandsCache.get().updateCommandStatus(x.getId(), CommandStatus.ENDED_WITH_FAILURE)); getCommands(false).stream().filter((java.util.List::streamEntry) ->!(x.isCallbackEnabled()).filter((java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTaskStatus.class).isSet(java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTaskStatus.class)).isSet(java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTaskStatus.class)).isSet(java.util.List::streamEntry.comparing(org.ovirt.engine.core.common.businessentities.AsyncTaskStatus.class)).isSet(java.util.List::streamEntry.
public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { commandsCache.get().removeAllCommandsBeforeDate(cutoff); synchronized(LOCK) { childHierarchyInitialized = false; } }
public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get(commandId); if (cmdEntity!= null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }
public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.get().updateCommandStatus(commandId, status); }
privatejava.lang.String renderGibibyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB))? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gibibytes((sizeInGB >= 1?java.lang.String.valueOf(sizeInGB) : 1))); }
boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll();java.lang.StringBuilder lunsUsedBySDs = newjava.lang.StringBuilder();java.lang.StringBuilder lunsUsedByDisks = newjava.lang.StringBuilder(); lunsFromDb.stream().filter((lun) -> lunIds.contains(lun.getLUNId())).forEach(( lun) -> { if ((lun.getStorageDomainId())!= null) { addFormattedLunId(lunsUsedBySDs, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs::getStorageDomainName); } if ((lun.getDiskId())!= null) { addFormattedLunId(lunsUsedByDisks, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs::getDiskAlias); } }); if (lunsUsedBySDs.length())!= 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); } if ((lunsUsedByDisks.length())!= 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedByDisks.toString()); } return ( (lunsUsedBySDs.length())!= 0 ) || ( (lunsUsedByDisks.length())!= 0); }
protected void addFormattedLunId(java.lang.StringBuilder sb, org.ovirt.engine.core.common.businessentities.storage.LUNs lun,java.util.function.Function<org.ovirt.engine.core.common.businessentities.storage.LUNs,java.lang.String> nameGetter) { if ((sb.length())!= 0) { sb.append(", "); } sb.append(java.lang.String.format("%2$s", lun.getLUNId(), nameGetter.apply(lun))); }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); }
java @java.lang.Override protected boolean validate() { boolean validate = (super.validate()) && (validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getStorageDomain()).isNotBackupDomain())); if (!validate) { auditLogDirector.log(this, AuditLogType.USER_MOVED_DISK_FINISHED_FAILURE); return false; } if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }
@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(srcStorageId); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmShareableDisk() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String,java.lang.Object> response) { try { continueRefreshVdsStats(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getBroker().getHardwareInfo(new GetHardwareInfoVDSCommandCallback()); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new GetStatsVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new GetCapabilitiesVDSCommandCallback()); }
@java.lang.SuppressWarnings("incomplete-switch") private void executeNextOperation() { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CONVERT : convert(); break; } }
protected void convert() { org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.freeLock(); runInternalAction(ActionType.ConvertVm, buildConvertVmParameters()); }
@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin())!= (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.freeLock(); runInternalAction(ActionType.ConvertOva, buildConvertOvaParameters()); } else { runInternalAction(ActionType.ExtractOva, buildExtractOvaParameters()); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { switch (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { case CREATE_DISKS : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().setPhase(Phase.CONVERT); break; case CONVERT : return false; default : } org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.persistCommandIfNeeded(); executeNextOperation(); return true; }
protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { image.setDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.renameDiskAlias(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin(), image.getDiskAlias())); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); diskParameters.setShouldRemainIllegalOnFailedExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); diskParameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); return diskParameters; }
protected org.ovirt.engine.core.bll.context.CommandContext createConversionStepContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.bll.context.CommandContext commandCtx = null; try {java.util.Map<java.lang.String,java.lang.String> values =java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName()); org.ovirt.engine.core.common.job.Step removeVmStep = executionHandler.addSubStep(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, values)); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(removeVmStep); ctx.setMonitored(true); commandCtx = org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContext().withoutCompensationContext().withExecutionContext(ctx).withoutLock(); } catch (java.lang.RuntimeException e) { log.error("Failed to create command context of converting VM '{}': {}", org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmName(), e.getMessage()); log.debug("Exception", e); } return commandCtx; }
@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return ((logicalNetworkModel.getNetwork().getCluster())!= null) && (logicalNetworkModel.getNetwork().getCluster().isRequired()); }
javajava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesByGuid = newjava.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())!= null) { for (org.ovirt.engine.core.compat.Guid guid : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = diskImageDao.getSnapshotById(guid); imagesByGuid.add(image); } imagesToPreview = imagesByGuid; } else { imagesToPreview = diskImageDao.getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); }java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@java.lang.Override publicjava x.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) {java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = newjava.util.HashSet<>();java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getParent().mapDisks(action.getDisks()); if (disks!= null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } tryBackParams.setDisks(disksGuid); }java x.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory,java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if (model!= null) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, disks), (result) -> { if (model!= null) { model.stopProgress(); } if (result.getReturnValue().getSucceeded()) { cancel(); } }); }
private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory =java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity());java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks();java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, memory, diskImages); }
private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false;java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = newjava.util.ArrayList<>();java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = newjava.util.HashSet<>(); if (snapshotModel.isShowPartialSnapshotWarning()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); diskImages = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); break; case excludeActiveDisks : break; case openCustomPreviewDialog : setWindow(null); getCustomPreviewCommand().execute(); return; } } if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, diskImages); }
javajava.lang.Override publicjava x.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) {java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = newjava.util.HashSet<>();java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = collection.mapDisks(action.getDisks()); if (disks!= null) { disksGuid = disks.stream().map(DiskImage::getImageId).collect(java.util.stream.Collectors.toSet()); } tryBackParams.setDisks(disksGuid); } tryBackParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID);java x.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT); restoreParams.setCorrelationId(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID);java x.ws.rs.core.Response response2 = doAction(ActionType.RestoreAllSnapshots, restoreParams, action); if ((response2.getStatus())!= (Response.Status.OK.getStatusCode())) { return response2; } } return response; }
private boolean updateLeaseInfo(org.ovirt.engine.core.compat.Guid snapshotLeaseDomainId) { if (snapshotLeaseDomainId == null) { vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), null); return true; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null; try { retVal = runVdsCommand(VDSCommandType.GetVmLeaseInfo, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getStoragePoolId(), snapshotLeaseDomainId, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in getting lease info for VM {}, message: {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); } if ((retVal == null) || (!(retVal.getSucceeded()))) { log.error("Failed to get info on the lease of VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId()); return false; } vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String,java.lang.String>) (retVal.getReturnValue()))); return true; }
private boolean isRemoveLeaseNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) { return (((srcLeaseDomainId!= null) && (dstLeaseDomainId!= null)) && (!(srcLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId == null) && (dstLeaseDomainId!= null)); } else if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT)) { return (((srcLeaseDomainId!= null) && (dstLeaseDomainId!= null)) && (!(srcLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId!= null) && (dstLeaseDomainId == null)); } return false; }
private boolean isLeaseInfoUpdateNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { return ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) && (!((srcLeaseDomainId == null) && (dstLeaseDomainId == null))); }
private org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction determineLeaseAction(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((srcLeaseDomainId!= null) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData().getLeaseInfo())!= null)) { if (dstLeaseDomainId!= null) { return srcLeaseDomainId.equals(dstLeaseDomainId)? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE; } } return dstLeaseDomainId!= null? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.DO_NOTHING; }
private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO)); }
public static org.ovirt.engine.core.compat.Guid fetchLeaseDomainId(java.lang.String ovfData) { int beginIndexOfEntityLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID); if (beginIndexOfEntityLeaseDomainId!= (-1)) { int endOfIndexOfEntityLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.END_ENTITY_LEASE_DOMAIN_ID, beginIndexOfEntityLeaseDomainId); return org.ovirt.engine.core.compat.Guid.createGuidFromString(ovfData.substring((beginIndexOfEntityLeaseDomainId + (org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID.length())), endOfIndexOfEntityLeaseDomainId)); } return null; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } else { if (!(getImage().getStorageIds().contains(sourceDomainId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); } } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS,java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return true; }
@org.junit.Test public void validateSourceDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); disk.setStorageIds(newjava.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.compat.Guid.newGuid()))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); }
.lang.StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString
.lang.StringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString
@org.junit.Test public void validateDestinationDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); disk.getStorageIds().add(destStorageId); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); command.getParameters().setStorageDomainId(destStorageId); command.setStorageDomainId(destStorageId); command.getStorageDomain().setId(destStorageId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); }
java @java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); updateExternalNics(); } finally { super.runningSucceded(); } }
public staticjava.lang.String crypt(java.lang.String password) { byte[] r = new byte[org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt = new char[r.length]; org.ovirt.engine.core.uutils.crypto.CryptMD5.secureRandom.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, newjava.lang.String(salt)); }
public double getActualDiskSize() { if ((cachedActualSize) == 0.0) { cachedActualSize = getDiskImageMap().values().stream().mapToDouble(DiskImage::getActualSize).sum(); } return cachedActualSize; }
private void processUnmanagedVm() { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vdsmVm.getVmDynamic(); if ((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { destroyVm(); return; } unmanagedVm = true; vmDynamic.setRunOnVds(vdsManager.getVdsId()); saveDynamic(vmDynamic); }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { if ((phase == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM)) && ((pausedBySystemReason)!= null)) { auditLog(this, pausedBySystemReason); } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn("ImageTransferPaused due to no updates in {} seconds.", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT; updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }
private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Renewing transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TICKET_RENEW_FAILURE; updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(true); } } } else { log.debug("Not yet renewing transfer ticket for {}", getTransferDescription()); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || ((context.entity.getImagedTicketId()) == null)) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.entity.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation) (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(context.entity.getVdsId(), context.entity.getImagedTicketId())).getReturnValue())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm", context.entity.getImagedTicketId(), e); pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_MISSING_TICKET; updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
org.ovirt.engine.core.common.action.TransferDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.TransferDiskImageParameters parameters = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); parameters.setTransferType(TransferType.Download); parameters.setImageGroupID(diskImage.getId());java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW))? ".qcow2" : ".raw"; parameters.setDownloadFilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); parameters.setKeepaliveInterval(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDownloadImageUiInactivityTimeoutInSeconds()); return parameters; }
private boolean stopTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) {java.lang.String action = "paused"; org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM; if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { action = "canceled"; phase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.CANCELLED; } log.warn("Transfer was {} due to no updates in {} seconds.", action, (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(phase); return true; } return false; }
@java.lang.Override protected boolean validate() { final boolean result = validateImpl(); if (((!result) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.isInternalExecution()))) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.getParameters().isRerun()))) { logValidationFailed(); } return result; }
private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().isRestoreLease()) && (((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO)))); }
@java.lang.Override publicjava x.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetRestoreLease()) { tryBackParams.setRestoreLease(action.isRestoreLease()); }java x.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; }
private boolean isSortedAndMaxResults() {java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); return (((searchConstraint!= null) && (!(searchConstraint.isEmpty()))) && (searchConstraint.toLowerCase().contains("sortby name asc"))) && (max!= 0); }
@java.lang.Override protectedjava.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { int maxResults = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getMaxResults(); int pageNum = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getPageNum(); int offset = pageNum - (1 * maxResults); int limit = offset + maxResults; return vmDao.getAllSortedAndFiltered(org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getUserID(), offset, limit); }
@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered()) { if (isSortedAndMaxResults()) { return getVmsFilteredAndSorted(); } else { return mapCollection(getBackendCollection(QueryType.GetAllVms, new org.ovirt.engine.core.common.queries.QueryParametersBase(), SearchType.VM), true); } } else { return mapCollection(getBackendCollection(SearchType.VM), false); } }
private org.ovirt.engine.api.model.Vms getVmsFilteredAndSorted() { int max = org.ovirt.engine.api.restapi.util.ParametersHelper.getIntegerParameter(httpHeaders, uriInfo, "max", (-1), (-1)); org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters params = new org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters(max);java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType);java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.parsePageNum(searchConstraint); params.setPageNum((pageNum == null? -1 : pageNum)); return mapCollection(getBackendCollection(QueryType.GetAllVmsFilteredAndSorted, params), true); }
public staticjava.lang.Integer parsePageNum(java.lang.String searchStr) { if ((searchStr.toLowerCase().indexOf("page ")) == (-1)) { return null; } else { int pos = (searchStr.toLowerCase().indexOf("page ")) + 5;java.lang.StringBuilder pageNumberStr = newjava.lang.StringBuilder(); char c = searchStr.charAt(pos); while ((java.lang.Character.isDigit(c)) && (pos < (searchStr.length()))) { pageNumberStr.append(c); pos += 1; if (pos < (searchStr.length())) { c = searchStr.charAt(pos); } } int pageNum = ((pageNumberStr.length()) == 0)? 1 :java.lang.Integer.valueOf(pageNumberStr.toString()); return pageNum; } }
public static long greatestCommonDivisor(long a, long b) { while (b!= 0) { long c = a % b; a = c; } return a; }
public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when(((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.isVnicAttachedToExternalNetwork()))); }
@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(networkHelper.addVnicProfile(any(), anyBoolean())).thenReturn(returnValue); when(networkHelper.attachNetworkToClusters(eq(NETWORK_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any())).thenReturn(queryReturnValue); }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(networkHelper).addVnicProfile(any(), anyBoolean()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters)? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }
public org.ovirt.engine.core.common.action.ActionReturnValue addVnicProfile(org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, boolean publicUse) { org.ovirt.engine.core.common.action.AddVnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); parameters.setPublicUse(publicUse); return backend.runInternalAction(ActionType.AddVnicProfile, parameters); }
public static boolean isMemoryDisksOnDifferentDomainsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.IsMemorySnapshotSupported, version); }
publicjava.util.Map<java.lang.String,java.lang.String> build() { if (((((poolId) == null) || ((domainId) == null)) || ((imageGroupId) == null)) || ((volumeId) == null)) { throw newjava.lang.IllegalArgumentException("One or more of the PDIV IDs is null"); }java.util.Map<java.lang.String,java.lang.String> pdivMap = newjava.util.HashMap<>(); pdivMap.put("poolID", poolId.toString()); pdivMap.put("domainID", domainId.toString()); pdivMap.put("imageID", imageGroupId.toString()); pdivMap.put("volumeID", volumeId.toString()); return pdivMap; }
private boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && ((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion()))) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) && (!(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume())); }
private void handleRefreshCapabilitiesResponse(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps) { try { invokeGetHardwareInfo(vds, caps); processRefreshCapabilitiesResponse(newjava.util.concurrent.atomic.AtomicBoolean(), vds, vds.clone(), caps); } finally { if (vds!= null) { updateDynamicData(vds.getDynamicData()); updateNumaData(vds); monitoringStrategy.processHardwareCapabilities(vds); resourceManager.getEventListener().handleVdsVersion(vds.getId()); } } }
public void refreshHostSync(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = resourceManager.runVdsCommand(VDSCommandType.GetCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(vds)); handleRefreshCapabilitiesResponse(vds, caps); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String,java.lang.Object> response) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue caps = ((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result"))); handleRefreshCapabilitiesResponse(vds, caps); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String,java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(isVdsUpOrGoingToMaintenance); } catch (java.lang.Throwable t) { onFailure(t); } }
public void setSourceProfileName(java.lang.String name) { source.setName(name); }
public boolean isSameSourceProfile(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic) { return (java.util.Objects.equals(getSourceNetworkName(), vnic.getNetworkName())) && (java.util.Objects.equals(getSourceProfileName(), vnic.getVnicProfileName())); }
publicjava.lang.String getSourceProfileName() { return sourceProfileName; }
@org.junit.Test public void testFindMappingEntry() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME); finaljava.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, externalVnicProfileMappings); assertThat(actual.get(), sameInstance(externalVnicProfileMapping1)); }
public void setSourceNetworkName(java.lang.String name) { if ((source.getCustomProperties()) == null) {java.util.Map<java.lang.String,java.lang.String> props = newjava.util.HashMap<>(1); source.setCustomProperties(props); } source.getCustomProperties().put("networkName", name); }
@org.junit.Test public void testFindMappingEntryNotFound() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(("not" + (org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME))); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE2_NAME);java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic, externalVnicProfileMappings); assertThat(actual, is(java.util.Optional.empty())); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); br.validateParameters(mappings, "registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateSourceVnicProfile(br, mapping); org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateTargetVnicProfile(mapping); } }
@org.junit.Test public void testFindMappingEntryEmptyInput() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME); finaljava.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic,java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.empty())); }
public org.ovirt.engine.core.compat.Guid getTargetProfileId() { return targetProfileId; }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(null); vnic.setVnicProfileName(null); finaljava.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic,java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(emptySourceMapping)); }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME);java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(vnic,java.util.Collections.singletonList(emptySourceMapping)); assertFalse(actual.isPresent()); }
private void updateVnicFromMapping(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping mapping) { if ((mapping.getTargetProfileId())!= null) { updateVnicUsingProfileId(vnic, mapping.getTargetProfileId()); } else { updateVnicSetNoProfile(vnic); } }
publicjava.lang.String getSourceNetworkName() { return (source.getCustomProperties())!= null? source.getCustomProperties().get("networkName") : null; }
public void setTargetProfileId(org.ovirt.engine.core.compat.Guid vnicProfileId) { target.setId(vnicProfileId); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev,java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && ((((sender == (getKernelCmdlineBlacklistNouveau)) || (sender == (getKernelCmdlineIommu())))) || (sender == (getKernelCmdlineKvmNested()))) || (sender == (getKernelCmdlineUnsafeInterrupts()))) || (sender == (getKernelCmdlinePciRealloc())))) { if (isKernelCmdlineParsable()) { updateKernelCmdlineAccordingToCheckboxes(); } } }
public void setRefreshRefresh(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> refreshRefresh) { this.refreshRefresh = refreshRefresh; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.CacheDevicePathType> getCacheDevicePathTypeList() { return cacheDevicePathTypeList; }
public void setDiskCacheSize(java.lang.String diskCacheSize) { this.diskCacheSize = diskCacheSize; }
@java.lang.Override protected void executeCommand() { try { runAnsibleLvmCachePlaybook(); } catch (java.io.IOException |java.lang.InterruptedException e) { e.printStackTrace(); } }
@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.emptyList(), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdd, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10"))); when(cmd.getParameters()).thenReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.emptyList(), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdd, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.singletonList(getStorageDevice("sda"))), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.singletonList(getStorageDevice("sda"))), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.singletonList(getStorageDevice("sda"))), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.singletonList(getStorageDevice("sda"))), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType
public org.ovirt.engine.core.common.businessentities.DiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDiskDisk
publicjava.lang.String getRefreshInterval() { return refreshInterval; }
public void setDevicePathTypeList(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.CacheDevicePathType> devicePathTypeList) { this.devicePathTypeList = devicePathTypeList; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getQuota() { return quota; }
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); cacheDevicePathEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheDevicePathType>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheModeType>()); }
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Arrays.asList(storageDevice1, storageDevice2)), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdb, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10").when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sda"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null,java.util.Collections.singletonList(storageDevice)), org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sda, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")); when(cmd.getParameters()).thenReturn(storageDevice); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
public void setDevicePath(org.ovirt.engine.core.common.businessentities.DevicePathType devicePath) { this.devicePath = devicePath; }
@org.junit.Test public void testExecuteQueryCommand() { org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters params = getQueryParameters(); when(params.getDiskId()).thenReturn(diskId); when(params.getImageId()).thenReturn(imageId); when(diskImageDao.getDiskImageByDiskAndImageIds(diskId, imageId)).thenReturn(diskImage); org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery<org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters> query = getQuery(); query.executeQueryCommand(); org.ovirt.engine.core.common.businessentities.storage.DiskImage returnDiskImage = query.getQueryReturnValue().getReturnValue(); assertTrue(returnDiskImage.equals(diskImage)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByDiskAndImageIds(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_id", diskId).addValue("image_id", imageId); return getCallsHandler().executeRead("GetDiskImageByDiskAndImageIds", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getQueryReturnValue().setReturnValue(diskImageDao.getDiskImageByDiskAndImageIds(org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getParameters().getImageId())); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_NOT_SUPPORTED_FOR_VOLUME_TYPE); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask())!= null) && (((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED)) || (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)) && ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED))))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if ((getParameters().getExistingBrick()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
private org.ovirt.engine.core.common.businessentities.Cluster getCluster() { org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setId(clusterId); cluster.setVirtService(false); cluster.setGlusterService(true); return cluster; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { glusterBrickDao.resetBrick(getParameters().getExistingBrick()); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_RESET_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }
@org.junit.Before public void prepareMocks() { doReturn(getVds(VDSStatus.Up)).when(cmd).getUpServer(); doReturn(getDistributedVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getDistributedVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getReplicatedVolume(volumeId3, 2)).when(volumeDao).getById(volumeId3); doReturn(getReplicatedVolume(volumeId4, 4)).when(volumeDao).getById(volumeId4); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(cmd).getCluster(); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickStart(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickCommitForce(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("OpenStack response error code: {}", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("RuntimeException: {}", ((e.getCause()) == null? null : e.getCause().getMessage())); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(org.ovirt.engine.core.compat.Guid.newGuid()); parent.setSize(500); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId());java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = newjava.util.ArrayList<>(2); diskImages.add(parent); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(validator.childDiskWasExtended(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_MOVE_DISK_SNAPSHOTS)); }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).childDiskWasExtended(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
java @java.lang.Override public void addMenuItem(int index,java.lang.String label,java.lang.String href,java.lang.String primaryMenuId,java.lang.String iconCssName) { if (primaryMenuId!= null) { addSecondaryMenuItem(index, label, href, primaryMenuId); } else { org.gwtbootstrap3.client.ui.ListGroupItem newMenuItem = new org.gwtbootstrap3.client.ui.ListGroupItem(); org.gwtbootstrap3.client.ui.Anchor menuAnchor = new org.gwtbootstrap3.client.ui.Anchor(hashifyString(href)); if (index < 0) { index = 0; } org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); if (iconCssName!= null) { iconSpan.addStyleName(org.ovirt.engine.ui.webadmin.section.main.view.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.popup.
publicjava.util.List<java.lang.String> getPrimaryMenuIds() { return primaryMenuIds; }
private void addSecondaryMenuItem(int index,java.lang.String label,java.lang.String href,java.lang.String primaryMenuId) { int primaryMenuIndex = primaryMenuIds.indexOf(primaryMenuId); if ((primaryMenuIndex > (-1)) && (primaryMenuIndex < (menuListGroup.getWidgetCount()))) { org.gwtbootstrap3.client.ui.ListGroupItem primaryMenuItem = ((org.gwtbootstrap3.client.ui.ListGroupItem) (menuListGroup.getWidget(primaryMenuIndex))); com.google.gwt.user.client.ui.FlowPanel secondaryMenuFlowPanel = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(2); if (widget instanceof com.google.gwt.user.client.ui.FlowPanel) { secondaryMenuFlowPanel = ((com.google.gwt.user.client.ui.FlowPanel) (widget)); } } else { secondaryMenuFlowPanel = createSecondaryMenuHeader(primaryMenuItem); primaryMenuItem.addStyleName(PatternflyStyles.SECONDARY_NAV_ITEM); for (int i = 0; i < (primaryMenuItem.getWidgetCount()); i++) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(i); if ((widget.asWidget()) instanceof org.gwtbootstrap3.client.ui.Anchor) { org.gwtbootstrap3.client.ui.Anchor labelAnchor = ((org.gwtbootstrap3.client.ui.Anchor) (widget.asWidget())); labelAnchor.setHref(org.ovirt.engine.ui.webadmin.section.main.view.MenuView.JAVASCRIPT); } } } if (secondaryMenuFlowPanel!= null) { if ((index >= 0) && (index < (secondaryMenuFlowPanel.getWidgetCount()))) { secondaryMenuFlowPanel.insert(createSecondaryMenuItem(label, href), (index + 1)); } else { secondaryMenuFlowPanel.add(createSecondaryMenuItem(label, href)); } } primaryMenuItem.add(secondaryMenuFlowPanel); } }
void addMenuItem(int index,java.lang.String label,java.lang.String href,java.lang.String primaryMenuId,java.lang.String iconCssName);
public void addContentView(java.lang.String label,java.lang.String historyToken,java.lang.String contentUrl,java.lang.String primaryMenuId,java.lang.String iconCssName, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken, primaryMenuId, iconCssName); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); placeManager.setDefaultPlace(historyToken); }
javajava.util.List<java.lang.String> getPrimaryMenuIds();
public void addSecondaryMenu(java.lang.String label,java.lang.String historyToken,java.lang.String contentUrl,java.lang.String primaryMenuId, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, primaryMenuId, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
public void addPrimaryMenu(java.lang.String label,java.lang.String historyToken,java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addTab(label, historyToken, contentUrl, null, options.getIcon(), options.getPriority().intValue(), options.getDefaultPlace().booleanValue()); }
publicjava.lang.String[] listPrimaryMenuIds() {java.util.List<java.lang.String> ids = menuPresenterWidget.getPrimaryMenuIds(); return ids.toArray(newjava.lang.String[ids.size()]); }
publicjava.util.List<java.lang.String> getPrimaryMenuIds() { return getView().getPrimaryMenuIds(); }
public void addMenuItem(int index,java.lang.String label,java.lang.String historyToken,java.lang.String primaryMenuId,java.lang.String iconCssName) { getView().addMenuItem(index, label, historyToken, primaryMenuId, iconCssName); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); return null; }); }
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { removeNameServersByDnsResolverConfigurationId(id); super.remove(id); return null; }); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { entity.setId(org.ovirt.engine.core.compat.Guid.newGuid()); super.save(entity); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); return null; }); }
@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", lun.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "disk_storage_type", lun.getDiskStorageType().name()); }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "version", org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdcVersion)); }
protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeEndDocument(); }
protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }
@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", "out"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":VirtualSystem_Type")); }
@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", image.getImageId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "size",java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "description", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "disk_storage_type", image.getDiskStorageType().name()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "cinder_volume_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "required", "false"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", ((OVF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info", "Operating System"); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
@java.lang.Override protected void writeHeaderWithEnvelope() { _writer.setPrefix(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); }
private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++; }java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> res = _images.subList(i, ((_images.size()) - 1)); if ((res.size()) > 0) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "parentRef", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "parentRef", ""); } } }
java @java.lang.Override protectedjava.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String,java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { returnjava.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { if ((getImage().getContentType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.ISO)) {java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = vmStaticDao.getAllIdsWithSpecificIsoAttached(getImage().getId()); if (!(vmIds.isEmpty())) { return vmIds.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } else {java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId(); if (!(vmsForDisk.isEmpty())) { return vmsForDisk.stream().collect(java.util.stream.Collectors.toMap(( p) -> p.getFirst().getId().toString(), ( p) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getDiskIsBeingMigratedMessage()))); } } } return null; }
public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyNonDownVm() {java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_LIST, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getQueryReturnValue().setReturnValue(dbUserDao.getAnyUserById(org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getParameters().getId())); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters());java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue();java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getUserID(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid currentUserId,java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_id", currentUserId).addValue("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
javajavajavajavajavajavajavajavajavajavajavajavajavajava.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid currentUserId,java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered);
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port!= null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override publicjava.util.Map<java.lang.String,java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic);java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile);java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); }java.util.Map<java.lang.String,java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppApiScope(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getParameters().getSessionId()); } if (validatePermissions()) { if (validateInputs()) { long start =java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false);java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException)? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((vdcExc.getErrorCode())!= null) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString( (vdcExc.isUseRootCause()? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getMessage())); } log.error("Query '{}' failed: {}", getClass().getSimpleName(), (vdcExc.isUseRootCause()? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getMessage())); log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Query '{}' failed: {}", getClass().getSimpleName(), ex.getMessage()); log.error("Exception", ex); } } finally { log.debug("Query execution took {} ms", org.ovirt.engine.core.bll.QueriesCommandBase.getCommandName(), ((java.lang.System.currentTimeMillis()) - start)); } } else { log.error("Invalid permissions to query"); } } else { log.error("Invalid inputs due to insufficient permissions"); } }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnetEntity(subnet, externalNetwork); try { getClient().subnets().create(subnetForCreate).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void removeSubnet(java.lang.String id) { try { getClient().subnets().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override publicjava.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); try { com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute(); return createdNetwork.getId(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("OpenStack response error code: {}", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
private void removeMemoryFromActiveSnapshot() { if (!(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().containsMemory()))) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.getNumOfSnapshotsByDisks(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot())) == 0) { removeMemoryDisks(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot()); } }
java privatejava.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return activeSnapshot.containsMemory()?java.util.Collections.singleton(activeSnapshot) :java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVmId()).stream().filter(( s) -> s.containsMemory())).collect(java.util.stream.Collectors.toList()); } }
private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dumpImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskId()))); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, dumpImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage confImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getMetadataDiskId()))); vdcRetValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParameters(containerID, confImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); } }
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getMacPool()), targetSnapshot.containsMemory()); snapshotDao.remove(targetSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }
@java.lang.Override public int getNumOfSnapshotsByDisks(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("memory_disk_ids",java.util.Arrays.asList(snapshot.getMemoryDiskId(), snapshot.getMetadataDiskId())); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.newInstance(java.lang.Integer.class), parameterSource); }
java @java.lang.Override protected void executeCommand() { if (isMemoryRemovable()) { org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDumpDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMemoryDiskId()); removeMemoryDumpDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDumpDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMetadataDiskId()); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }
private void removeDiskImages() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.exportimport.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.exportimport.ONLY_ACTIVE); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(newjava.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); shouldWipe |= image.isWipeAfterDelete(); }java.util.List<org.ovirt.engine.core.compat.Guid> allMemoryDisks = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryDiskIdsFromSnapshots(getVm().getSnapshots()); for (org.ovirt.engine.core.compat.Guid memoryDiskId : allMemoryDisks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(memoryDiskId, shouldWipe); images.add(metadataDisk); } removeVmImages(images); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template!= null)? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription())!= null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate())!= null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus())!= null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType())!= null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if (entity.containsMemory()) { model.setPersistMemorystate(true); } return model; }
private void writeSnapshotsSection() {java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeStartElement("Snapshot"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", snapshot.getId().toString()); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (snapshot.containsMemory()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDump = memoryDisks.get(snapshot.getMemoryDiskId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryConf = memoryDisks.get(snapshot.getMetadataDiskId());java.lang.String memoryVolume =java.lang.String.format("%1$s,%2$s,%3$s,%4$s,%5$s,%6$s", memoryDump.getStorageIds().get(0), memoryDump.getStoragePoolId(), memoryDump.getId(), memoryDump.getImageId(), memoryConf.getId(), memoryConf.getImageId()); _writer.writeElement("Memory", memoryVolume); } if ((snapshot.getAppList())!= null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getVmConfiguration())!= null) { _writer.writeElement("VmConfiguration", org.apache.commons.codec.binary.Base64.encodeBase64String(snapshot.getVmConfiguration().getBytes())); } _writer.writeEndElement(); } _writer.writeEndElement(); }
@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage);java.util.List<org.ovirt.engine.core.compat.Guid> imagesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetImagesList, new org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters(storage.getId(), storage.getStoragePoolId())).getReturnValue()));java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.compat.Guid>> lebil = newjava.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid image : imagesList) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(storage.getStoragePoolId(), storage.getId(), image);java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters).getReturnValue())); lebil.put(image, volumesList); } org.ovirt.engine.core.bll.exportimport.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMemoryDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMemoryDiskId()); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMemoryDisk(vm, sd.getStorageType(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMemoryDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); memoryDisk.setStorageIds(newjava.util.ArrayList(java.util.Collections.singletonList(sd.getId()) )); memoryDisk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private org.ovirt.engine.core.compat.Guid getMemoryDiskImageId(org.ovirt.engine.core.compat.Guid imageGroupId) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParametersParameters getVolumesParameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStorageDomainId(), imageGroupId);java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters).getReturnValue())); return volumesList.get( 0); }
private void addMemoryImages() { org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getSnapshots().stream().filter(( snapshot) -> snapshot.containsMemory()).forEach(( snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }); }
org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMetadataDiskId()); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMetadataDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId())); memoryDisk.setStorageIds(java.util.Collections.singletonList(sd.getId())); memoryDisk.setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId())); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
public staticjava.util.List<org.ovirt.engine.core.compat.Guid> getMemoryDiskIdsFromSnapshots(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) {java.util.List<org.ovirt.engine.core.compat.Guid> memoryDiskIds = newjava.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { if (snapshot.containsMemory()) { memoryDiskIds.add(snapshot.getMemoryDiskId()); memoryDiskIds.add(snapshot.getMetadataDiskId()); } } return memoryDiskIds; }
protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RunVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null); }
public int hashCode() { returnjava.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, inFenceFlow, kernelFeatures); }
int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice,java.lang.Integer> vmDeviceUnitMap, boolean reserveFirstTwoLuns, boolean reserveForScsiCd) { int cdPayloadUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int cdUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex("scsi"); int unit = (reserveFirstTwoLuns)? reserveForScsiCd? (java.lang.Math.max(cdPayloadUnitIndex, cdUnitIndex)) + 1 : 2 : 0; if (vmDeviceUnitMap == null) { return unit; } while (((reserveForScsiCd && (unit == cdPayloadUnitIndex)) || (reserveForScsiCd && (unit == cdUnitIndex))) || (vmDeviceUnitMap.containsValue(unit)))) { unit++; } return unit; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return ((((java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && ((network.getName()) == (newNetwork.getName()))) && ((network.getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy()))? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.hasRequiredSwitchType()) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfileRequired(false); if (attachToAllClusters) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId));java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = queryReturnValue.getReturnValue();java.util.List<org.ovirt.engine.core.compat.Guid> clusterIds = clusters.stream().map(Cluster::getId).collect(java.util.stream.Collectors.toList()); params.setNetworkClusterList(networkHelper.createNetworkClusters(clusterIds)); } return runInternalAction(ActionType.AddNetwork, params); }
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDS)) { if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getParameters().getInitialStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getHighlyAvailableIsConfigured()) { haMaintenanceFailed =!(hostedEngineHelper.updateHaLocalMaintenanceMode(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds(), false)); } setVdsStatus(VDSStatus.Initializing); } } }
public static boolean isStatusOk(java.util.Map<java.lang.String,java.lang.Object> response) { if ((response.get("error"))!= null) {java.lang.String errorCode = ((response.get("error_code")) == null)? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_code")));java.lang.String errorDescription = ((response.get("error_description")) == null)? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_description"))); throw newjava.lang.RuntimeException(java.lang.String.format("Failed to get status code %s, description %s", errorCode, errorDescription)); } return true; }
private void createVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = networkHelper.createVnicProfile(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); if (org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().isExternal()) { vnicProfile.setNetworkFilterId(null); } vnicProfileDao.save(vnicProfile); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { networkDao.save(getNetwork()); if ((getNetwork().isVmNetwork()) && (getParameters().isVnicProfileRequired())) { createVnicProfile(); } org.ovirt.engine.core.bll.network.dc.networkHelper.addPermissionsOnNetwork(getUserId(), getNetwork().getId()); return null; } ); runClusterAttachment(); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.ActionReturnValue addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
void initialize(boolean engineStartup,java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Starting MAC pool: {}", this); this.macsStorage = createMacsStorage(this.rangesBoundaries); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug("Starting MAC pool: {} with macs: {}", this, macsForMacPool);java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) {java.lang.String auditLogMessage = "MACs violates duplicity restriction, and was pushed into MAC pool without respect to it: " + notAddedMacs; auditLogDirector.log(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(), AuditLogType.MAC_ADDRESS_VIOLATES_NO_DUPLICATES_SETTING, auditLogMessage); forceAddMacs(notAddedMacs); } else { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_POOL_INITIALIZATION_FAILED, org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.UNABLE_TO_INITIALIZE_MAC_POOL_DUE_TO_EXISTING_DUPLICATES); } } org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Finished initializing {}. Available MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return ((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity()))); }
@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.utils.transaction.TransactionRollbackListener) (() -> org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(((TransactionMethod<java.lang.Void>) (() -> { org.ovirt.engine.core.bll.macPoolPerCluster.createPool(oldMacPool); return null; }))); macPoolDao.update(getMacPoolEntity()); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
public void testCreateMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { macPoolFactory.createMacPool(macPool, false); }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); return createParams; }
public org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage getCreateSnapshotStage() { return createSnapshotStage; }
public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage createSnapshotStage) { this.createSnapshotStage = createSnapshotStage; }
@java.lang.Override public void init() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist()); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId())); setSnapshotName(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm())!= null? org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm().getStoragePoolId() : null)); liveSnapshotSucceeded = false; }
public void onSave() { if (((getProgress())!= null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm();java.util.ArrayList<org.ovirt.engine.core.common.action.ActionParametersBase> params = newjava.util.ArrayList<>();java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems())!= null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().stream().map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters param = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.CreateSnapshotForVm, params, ( result) -> { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); }, this); }
private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters parameters = new org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeParameters(); parameters.setDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); parameters.setDiskToImageIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds()); parameters.setNewActiveSnapshotId(newActiveSnapshotId); parameters.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); parameters.setDiskIds(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds()); parameters.setVmId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotVolume, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getContext(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getLock())); }
protectedjava x.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemorystate()) { snapshotParams.setSaveMemory(snapshot.isPersistMemorystate()); } if (snapshot.isSetDiskAttachments()) {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds.keySet()); snapshotParams.setDiskToImageIds(diskToImageIds); } return performCreate(ActionType.CreateSnapshotForVm, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }
privatejava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesForVm() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getVmId());java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = newjava.util.ArrayList(getDiskImages(disks)); allDisks.addAll(imagesHandler.getCinderLeafImages(disks)); return allDisks; }
private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Creating stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotForVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(actionReturnValue.getSucceeded())) { if (areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); } }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(newActiveSnapshotId); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }
private void handleVdsLiveSnapshotFailure(org.ovirt.engine.core.common.errors.EngineException e) { handleVmFailure(e, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, ("Could not perform live snapshot due to error, VM will still be configured to the new created" + " snapshot: {}")); }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.ActionReturnValue retVal = runInternalAction(ActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); return createParams; }
@java.lang.Override protected void endVmCommand() { incrementVmGeneration(); thawVm(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.endActionOnDisks(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.setSucceeded(((taskGroupSucceeded) && ((!(liveSnapshotRequired)) || (liveSnapshotSucceeded)))); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getReturnValue().setEndActionTryAgain(false); }
protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIds()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm().stream().filter(( d) -> getParameters().getDiskIds().contains(d.getId())).collect(java.util.stream.Collectors.toList()); } } return cachedSelectedActiveDisks; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()) == (Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { boolean wipeAfterDelete = getDisksList().stream().anyMatch(DiskImage::isWipeAfterDelete); return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private org.ovirt.engine.core.common.businessentities.Snapshot addSnapshotToDB(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder) { cachedSelectedActiveDisks = null; return org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getSnapshotsManager().addSnapshot(snapshotId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), Snapshot.SnapshotStatus.LOCKED, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), true, memoryImageBuilder.getVolumeStringRepresentation(), null, getDisksList(), null, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getCompensationContext()); }
javajava.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLikedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId);
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLikedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId) { return getCallsHandler().executeReadList("GetAllNetworksByProviderPhysicalNetworkId", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", physicalNetworkId)); }
public org.ovirt.engine.core.bll.ValidationResult notLinkedToExternalNetwork() {java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> linkedExternalNetworks = getNetworkDao().getAllExternalNetworksLikedToPhysicalNetwork(network.getId());java.lang.String linkedExternalNetworkNames = linkedExternalNetworks.stream().map(Network::getName).collect(java.util.stream.Collectors.joining(",")); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_PHYSICAL_NETWORK_LINKED_TO_EXTERNAL_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkValidator.NETWORK_LIST_REPLACEMENT, linkedExternalNetworkNames)).when((!(linkedExternalNetworks.isEmpty()))); }
@org.junit.Test public void defaultProperties() { try {java.lang.String basedir =java.lang.System.getProperty("basedir"); assumeNotNull("The test case is run via Maven. Please set the basedir system property", org.ovirt.engine.core.utils.osinfo.OsinfoPropertiesParser.parse(java.nio.file.Paths.get(basedir, "../../../../packaging/conf/osinfo-defaults.properties").toString())); } catch (java.lang.Exception e) { fail(("Osinfo properties file will fail to load with a broken osinfo properties file. " + ("Could not fix the properties file or osinfo.jj grammar under org.ovirt.engine.core.utils.osinfo. + thrown: " + e)); } }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch("search2"); vmInit.setDnsServers("nameserver2 nameserver3");java.lang.String expectedOutput = "{\n
javajavajavajavajava privatejava.util.List<java.util.Map<java.lang.String,java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) {java.util.List<java.util.Map<java.lang.String,java.lang.Object>> services = newjava.util.LinkedList<>(); if (hasDnsServers(vmInit)) { for (java.lang.String dnsServer : vmInit.getDnsServers()) {java.util.Map<java.lang.String,java.lang.Object> service = newjava.util.HashMap<>(); service.put("type", "dns"); service.put("address", dnsServer); services.add(service); } } return services; }
private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit,java.util.Map<java.lang.String,java.lang.Object> network) { if (network == null) { return; } if (hasDnsServers(vmInit)) { network.put("dns_nameservers",java.util.Arrays.asList(vmInit.getDnsServers().split(" "))); } if (hasDnsSearch(vmInit)) { network.put("dns_search",java.util.Arrays.asList(vmInit.getDnsSearch().split(" "))); } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed,java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildExecutingCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildExecutingCommand) (command)); if ((!anyFailed) || (serialChildExecutingCommand.ignoreChildCommandFailure())) { try { boolean endCommand =!(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.error("Command '{}' id: '{}' failed when attempting to perform the next operation, marking as FAILED '{}'", command.getActionType(), cmdId, childCmdIds, command.getCommandStatus(), e); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutingCommand.handleFailure(); } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Command '{}' id: '{}' execution didn complete, not proceeding to perform the next operation", command.getActionType(), cmdId); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
publicjava.lang.Long getFree() { return free; }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(directory()); optional(filename()); or(mandatory(host().id()), mandatory(host().name())); }
public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrickBrick
public void setConfirmedFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return freeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getConfirmedFreeSize() { return freeSize; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
java @java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isReplicatedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); disperseCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); redundancyCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType());java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = newjava.util.ArrayList(java.util.Arrays.<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>>asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity, volumeConfirmedFreeCapacity)); volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }
public void update(org.ovirt.engine.core.compat.Guid vdsId,java.util.Map<java.lang.String,java.lang.Object> values) { int entryCount = (values!= null)? values.size() : 0;java.lang.String[] pluginTypes = newjava.lang.String[entryCount];java.lang.String[] bindingIds = newjava.lang.String[entryCount]; if (values!= null) { int i = 0; for (java.util.Map.Entry<java.lang.String,java.lang.Object> pair : values.entrySet()) { pluginTypes[i] = pair.getKey(); bindingIds[i] = ((java.lang.String) (pair.getValue())); } } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_types", pluginTypes).addValue("provider_binding_host_ids", bindingIds); getCallsHandler().executeModification("UpdateHostProviderBinding", parameterSource); }
publicjava.lang.String get(org.ovirt.engine.core.compat.Guid vdsId,java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBinding", org.ovirt.engine.core.dao.provider.HostProviderBindingDaoImpl.rowMapper, parameterSource); }
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host,java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics,java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredData) { vdsDynamicDao.updateDnsResolverConfiguration(host.getId(), host.getReportedDnsResolverConfiguration()); hostProviderBindingDaoImpl.update(host.getId(), host.getOpenstackBindingHostIds()); final org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersister networkInterfacesPersister = new org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkInterfacesPersisterImpl(interfaceDao, host.getInterfaces(), dbNics, userConfiguredData.getUserOverriddenNicValuesByNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }
@java.lang.Override publicjava.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) {java.lang.Integer confirmedAvailableSize = object.getConfirmedAvailableDiskSize(); return confirmedAvailableSize == null? null :java.lang.Long.valueOf(confirmedAvailableSize); }
javajava.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> getAuthSeq(org.ovirt.engine.core.sso.utils.SsoSession ssoSession) {java.lang.String scopes = ssoSession.getScope();java.lang.String appAuthSeq = ssoContext.getSsoLocalConfig().getProperty("SSO_AUTH_LOGIN_SEQUENCE");java.lang.String authSeq = null; if (!(scopes.contains("ovirt-ext=auth:sequence-priority="))) { authSeq = "~"; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scopes)) { if (scope.startsWith("ovirt-ext=auth:sequence-priority=")) {java.lang.String[] tokens = scope.trim().split("=", 3); authSeq = tokens[2]; } } }java.util.List<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqList = org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (char c : appAuthSeq.toCharArray()) { if (!(authSeqList.contains(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))))) { authSeqList.add(org.ovirt.engine.core.sso.utils.InteractiveAuth.valueOf(("" + c))); } } authSeqList.retainAll(org.ovirt.engine.core.sso.servlets.OAuthAuthorizeServlet.getAuthListForSeq(appAuthSeq)); }java.util.Collections.reverse(authSeqList);java.util.Stack<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqStack = newjava.util.Stack<>(); authSeqStack.addAll(authSeqList); return authSeqStack; }
private void deScheduleTimeout(org.ovirt.engine.core.compat.Guid poolId) {java.util.concurrent.ScheduledFuture<?> scheduledTask = nonOperationalPools.get(poolId); if (scheduledTask!= null) { synchronized(scheduledTask) { scheduledTask.cancel(true); nonOperationalPools.put(poolId, null); } } }
public void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((nonOperationalPools.containsKey(poolId)) && (status!= (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { deScheduleTimeout(poolId); nonOperationalPools.remove(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { nonOperationalPools.put(poolId, scheduleTimeout(poolId)); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setTotalMigrationTime(newjava.util.Date()); if (((unplugPassthroughNics()) && (connectLunDisks(getDestinationVdsId()))) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
private void handleAuditLog(java x.servlet.http.HttpServletRequest request,java x.servlet.http.HttpServletResponse response) { try {java.lang.String clientSecret = request.getParameter("clientSecret");java.lang.String engineClientSecret = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_SECRET"); if (org.ovirt.engine.core.uutils.crypto.EnvelopePBE.check(clientSecret, engineClientSecret)) {java.lang.String loginErrMsg = request.getParameter("loginErrMsg");java.lang.String userName = request.getParameter("userName"); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); event.addCustomValue("LoginErrMsg", loginErrMsg); event.setUserName(userName); auditLogDirector.log(event, AuditLogType.USER_LOGIN_FAILED_WITH_MSG); } } catch (java.lang.Exception ex) { response.setStatus(java.net.HttpURLConnection.HTTP_INTERNAL_ERROR); } finally { response.setStatus(java.net.HttpURLConnection.HTTP_OK); } }
publicjava.lang.String getUsernameWithProfile() {java.lang.String user =java.lang.String.format("%s@%s", org.apache.commons.lang.StringUtils.defaultIfEmpty(username, ""), org.apache.commons.lang.StringUtils.defaultIfEmpty(profile, "")); return "@".equals(user)? "N/A" : user; }
public static void notifyClientOfAuditLogEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext,java.lang.String clientId,java.lang.String userName,java.lang.String loginErrMsg) throwsjava.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId);java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.http.client.methods.HttpPost request = org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url);java.util.List<org.apache.http.message.BasicNameValuePair> form = newjava.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "auditLog")); form.add(new org.apache.http.message.BasicNameValuePair("userName", userName)); form.add(new org.apache.http.message.BasicNameValuePair("loginErrMsg", loginErrMsg)); form.add(new org.apache.http.message.BasicNameValuePair("clientSecret", clientInfo.getClientSecret())); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form,java.nio.charset.StandardCharsets.UTF_8)); org.ovirt.engine.core.sso.utils.SsoUtils.execute(request, ssoContext, clientId); } }
privatejava.util.Optional<java.lang.String> checkExternalNetworkConnection(org.ovirt.engine.core.common.businessentities.network.Network network,java.util.List<java.lang.String> hostNetworks) { if (!(network.getProvidedBy().isSetPhysicalNetworkId())) { returnjava.util.Optional.empty(); } org.ovirt.engine.core.common.businessentities.network.Network physicalNetwork = networkDao.get(network.getProvidedBy().getPhysicalNetworkId()); returnjava.util.Optional.ofNullable((hostNetworks.contains(physicalNetwork.getName())? null : physicalNetwork.getName())); }
protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); getHostAffinityRule().setIsValid((((getHostAffinityRule().getSelectedItem()) == (org.ovirt.engine.core.common.scheduling.EntityAffinityRule.DISABLED)) || (!(getHostsSelectionModel().getSelectedHostIds().isEmpty())))); return (getName().getIsValid()) && (getDescription().getIsValid()); }
javajavajava.nio.file.Path createInventoryFile(org.ovirt.engine.core.common.utils.ansible.AnsibleCommandBuilder command) throwsjava.io.IOException {java.nio.file.Path inventoryFile = null; if ((command.inventoryFile()) == null) { org.ovirt.engine.core.common.utils.ansible.AnsibleExecutor.log.debug("Creating hosts: {}", command.hostnames()); inventoryFile =java.nio.file.Files.createTempFile("ansible-inventory", "");java.lang.StringBuilder sb = newjava.lang.StringBuilder(); sb.append("[all]"); sb.append(java.lang.System.lineSeparator()); sb.append(org.apache.commons.lang.StringUtils.join(command.hostnames(),java.lang.System.lineSeparator())); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append(" /dev/null");java.nio.file.Files.write(inventoryFile, sb.toString().getBytes()); command.inventoryFile(inventoryFile); } return inventoryFile; }
public org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData readVmTemplateFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplateFromOva(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData.getDiskImages()) { template.getDiskTemplateMap().put(disk.getId(), disk); } return fullEntityOvfData; }
public void importTemplateFromOva(java.lang.String ovfstring, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.utils.ovf.OvfReader ovf = null; try { ovf = new org.ovirt.engine.core.utils.ovf.OvfTemplateReader(new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfstring), fullEntityOvfData, osRepository); ovf.build(); initIcons(fullEntityOvfData.getVmBase()); } catch (java.lang.Exception ex) {java.lang.String message = generateOvfReaderErrorMessage(ovf, ex); logOvfLoadError(message, ovfstring); throw new org.ovirt.engine.core.utils.ovf.OvfReaderException(message); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.html.Span iconSpan = new org.gwtbootstrap3.client.ui.html.Span(); iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.EYE.getCssName()); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCK.getCssName()); } else { iconSpan.addStyleName(IconType.MICROCHIP.getCssName()); } iconSpan.addStyleName(PatternflyConstants.PF_LIST_VIEW_ICON_SM); iconPanel.add(iconSpan); return iconPanel; }
protected void removeVmImages() { commandCoordinatorUtil.executeAsyncCommand(ActionType.RemoveAllVmImages, withRootCommandInfo(buildRemoveAllVmImagesParameters()), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent()); }
private org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters buildRemoveAllVmImagesParameters() { org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId(), diskDao.getAllForVm(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()).stream().map(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class::cast).collect(java.util.stream.Collectors.toList())); params.setParentCommand(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getActionType()); params.setEntityInfo(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().getEntityInfo()); params.setParentParameters(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters()); return params; }
@org.junit.Test public void testGetSoundDevice() throwsjava.lang.Exception { assertEquals(org.ovirt.engine.core.utils.OsRepositoryImplTest.SOUND_DEVICE, OsRepositoryImpl.INSTANCE.getSoundDevice(777, null)); }
public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase,java.util.function.Supplier<org.ovirt.engine.core.common.businessentities.Cluster> clusterSupplier) { org.ovirt.engine.core.common.businessentities.ChipsetType chipset = org.ovirt.engine.core.bll.utils.EmulatedMachineUtils.getEffectiveChipset(vmBase, clusterSupplier); if (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) { return addSoundDevice(vmBase.getId(), vmBase.getOsId(), org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(((org.ovirt.engine.core.common.businessentities.VmBase) (null)), clusterSupplier), chipset); } return addSoundDevice(vmBase.getId(), vmBase.getOsId(), clusterUtils.getCompatibilityVersion(vmBase), chipset); }
@java.lang.Override publicjava x.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityType(VmEntityType.TEMPLATE); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setDirectory(action.getDirectory()); params.setName(action.getFilename()); return doAction(ActionType.ExportOva, params, action); }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster,java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm,java.util.Map<java.lang.String,java.lang.String> parameters) {java.util.Map<org.ovirt.engine.core.compat.Guid,java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); int currentHostScore = hostViolations.getOrDefault(currentHostId, org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE);java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> retList = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int score = hostViolations.getOrDefault(host.getId(), org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); if ((score >= currentHostScore) && (!(host.getId().equals(currentHostId))) { score += 1; } retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override publicjava.util.Map<java.lang.String,java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic);java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile);java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Port portForCreate = createNewPortForAllocate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged = (!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostChanged, securityGroups, hostId, nic); }java.util.Map<java.lang.String,java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(host.getId(), port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
javajavajavajava.util.Map<java.lang.String,java.lang.String> createPortAllocationRuntimeProperties(org.ovirt.engine.core.compat.Guid vdsId, com.woorea.openstack.quantum.model.Port port) {java.util.Map<java.lang.String,java.lang.String> runtimeProperties = newjava.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId());java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups())!= null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); }java.lang.String pluginType = org.apache.commons.lang.StringUtils.defaultString(getProvider().getAdditionalProperties().getPluginType()); runtimeProperties.put("plugin_type", pluginType);java.lang.String bindingId = hostProviderBindingDao.get(vdsId, pluginType); if (bindingId!= null) { runtimeProperties.put("binding:host_id", bindingId); } return runtimeProperties; }
@java.lang.Override publicjava.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster,java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm,java.util.Map<java.lang.String,java.lang.String> parameters) { long lowMemoryLimit = (parameters.containsKey(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName()))?java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName())) : 0L; long highMemoryLimit = (parameters.containsKey(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName()))?java.lang.Long.parseLong(parameters.get(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName())) :java.lang.Long.MAX_VALUE; float maxMemory = getMaxMemoryOfVdsInCluster(hosts);java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid,java.lang.Integer>> scores = newjava.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { scores.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), calcHostScore(vds.getMaxSchedulingMemory(), maxMemory, lowMemoryLimit, highMemoryLimit))); } return scores; }
private int calcHostScore(float hostSchedulingMem, float maxMemory, float lowMemoryLimit, float highMemoryLimit) { if (hostSchedulingMem > highMemoryLimit) { float memOverLimit = hostSchedulingMem - highMemoryLimit; hostSchedulingMem =java.lang.Math.max(0, (lowMemoryLimit - memOverLimit)); } return ((int) ((hostSchedulingMem / maxMemory) * (MaxSchedulerWeight) - 1)) + 1; }
publicjava x.ws.rs.core.Response importVmTemplateFromConfiguration(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.api.model.Initialization initialization = template.getInitialization(); org.ovirt.engine.api.model.Configuration config = initialization.getConfiguration(); org.ovirt.engine.core.common.businessentities.VmTemplate templateConfiguration = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, QueryType.GetVmTemplateFromConfiguration, new org.ovirt.engine.core.common.queries.GetVmFromConfigurationQueryParameters(org.ovirt.engine.api.restapi.types.VmMapper.map(config.getType(), null), config.getData().trim()), ""); org.ovirt.engine.api.restapi.types.TemplateMapper.map(template, templateConfiguration); org.ovirt.engine.core.compat.Guid clusterId = (namedCluster(template))? getClusterId(template) : asGuid(template.getCluster().getId()); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters parameters = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); parameters.setVmTemplate(templateConfiguration); parameters.setClusterId(clusterId); if (initialization.isSetRegenerateIds()) { parameters.setImportAsNewEntity(initialization.isRegenerateIds()); } return performCreate(ActionType.ImportVmTemplateFromConfiguration, parameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class)); }
private static int setNetworkBootOrder(org.ovirt.engine.core.common.businessentities.VM vm,java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(vm, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices))) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }
private static int setDiskBootOrder(org.ovirt.engine.core.common.businessentities.VM vm,java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) {java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = newjava.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id!= null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getDiskVmElement(vm, device.getDeviceId()); if ((dve!= null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType,java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, boolean sendNetworkEventOnFailure) { if (connections == null) { return true; } org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), storageType, connections); parameters.setSendNetworkEventOnFailure(sendNetworkEventOnFailure);java.util.Map<java.lang.String,java.lang.String> retValues = ((java.util.Map<java.lang.String,java.lang.String>) (runVdsCommand(VDSCommandType.ConnectStorageServer, parameters).getReturnValue())); return storageHelperDirector.getItem(storageType).isConnectSucceeded(retValues, connections); }
private boolean connectFileStorageServers(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType,java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) {java.util.Map<org.ovirt.engine.core.common.businessentities.StorageDomainType,java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connByType = connections.stream().collect(java.util.stream.Collectors.groupingBy(( c) -> storageDomainDao.getAllByConnectionId(org.ovirt.engine.core.compat.Guid.createGuidFromString(c.getId())).get(0).getStorageDomainType())); boolean connectSucceeded = connectStorageServer(storageType, connByType.get(StorageDomainType.Data), true); try { connectStorageServer(storageType, connByType.get(StorageDomainType.ISO), false); connectStorageServer(storageType, connByType.get(StorageDomainType.ImportExport), false); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.info("Ignoring failed connection to domain of type ISO/Import-Export.", e); } return connectSucceeded; }
protected void executeVdsCommandWithNetworkEvent(boolean sendNetworkEvent) { try { executeVdsBrokerCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); updateNetworkException(ex, ex.getMessage()); if (sendNetworkEvent) { networkError.fire(ex); } throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.TransportRunTimeException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException networkException = createNetworkException(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if (sendNetworkEvent) { networkError.fire(networkException); } throw networkException; } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if ((getAndSetVdsStatic()) == null) { log.error("Failed in '{}' method, for vds id: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getParameters().getVdsId(), e.getMessage()); } else { log.error("Failed in '{}' method, for vds: '{}'; host: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), getAndSetVdsStatic().getName(), getAndSetVdsStatic().getHostName(), e.getMessage()); } throw e; } }
@org.junit.Test public void testExtractIpv4AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(com.google.common.collect.ImmutableMap.of(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR, "")), nullValue()); }
@org.junit.Test public void testExtractIpv4SubnetEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractSubnet(com.google.common.collect.ImmutableMap.of(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK, "")), nullValue()); }
@org.junit.Test public void testExtractIpv4GatewayEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractGateway(com.google.common.collect.ImmutableMap.of(VdsProperties.GLOBAL_GATEWAY, "")), nullValue()); }
private staticjava.lang.String extractIPV6gateway(java.util.Map<java.lang.String,java.lang.Object> effectiveProperties) {java.lang.String gateway = ((java.lang.String) (effectiveProperties.get(VdsProperties.IPV6_GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway)? null : gateway; }
staticjava.lang.String extractGateway(java.util.Map<java.lang.String,java.lang.Object> properties) {java.lang.String gateway = ((java.lang.String) (properties.get(VdsProperties.GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway)? null : gateway; }
javajavajava.lang.String extractSubnet(java.util.Map<java.lang.String,java.lang.Object> properties) {java.lang.String netmask = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK)); return org.apache.commons.lang.StringUtils.isEmpty(netmask)? null : netmask; }
@org.junit.Test public void testExtractIpv6AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address(""), nullValue()); }
javajavajava.lang.String extractAddress(java.util.Map<java.lang.String,java.lang.Object> properties) {java.lang.String address = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDR)); return org.apache.commons.lang.StringUtils.isEmpty(address)? null : address; }
@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothBlank() { initIpv4ConfigurationStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); ipv4Address.setGateway(null); iface.setIpv4Gateway(null); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
private boolean shouldAbortOnClientInactivityTimeout(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts,java.lang.Integer idleTimeFromTicket) { int inactivityTimeout = getTransferImageClientInactivityTimeoutInSeconds(); boolean timeoutExceeded = (idleTimeFromTicket!= null)? idleTimeFromTicket > inactivityTimeout : ts > (((entity.getLastUpdated().getTime()) / 1000) + inactivityTimeout); return (((inactivityTimeout > 0) && timeoutExceeded) && (entity.getPhase().canBePaused())) && (!(entity.getActive())); }
public static void toStringBuilder(java.util.Map<java.lang.String,?> map,java.lang.StringBuilder builder) { if (map == null) { builder.append("{}"); return; }java.util.Iterator<? extendsjava.util.Map.Entry<java.lang.String,?>> iterator = map.entrySet().iterator(); while (iterator.hasNext()) {java.util.Map.Entry<java.lang.String,?> entry = iterator.next(); builder.append(java.lang.String.format("%1$s=", entry.getKey())); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(entry.getValue(), builder); if (iterator.hasNext()) { builder.append(", "); } } builder.append("}"); }
@java.lang.Override publicjava.lang.String toString() { returnjava.lang.String.format("%s, private SPM Id = %s, private SPM Version = %s, private SPM Status = %s", super.toString(), privateSpmId, privateSpmVersion, privateSpmStatus); }
public static void toStringBuilder(java.lang.Object object,java.lang.StringBuilder builder) { if (object == null) { return; } if (object instanceofjava.lang.Object[]) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Object[]) (object)), builder); } else if (object instanceofjava.util.Map) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.util.Map<java.lang.String,java.lang.Object>) (object)), builder); } else if ((!(object instanceofjava.lang.String)) && (object instanceofjava.lang.Iterable)) { org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(((java.lang.Iterable) (object)), builder); } else { builder.append(object.toString()); } }
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return ( rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("phase"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setActive(rs.getBoolean("active")); entity.setLastUpdated(newjava.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "vds_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setImagedTicketId(getGuid(rs, "imaged_ticket_id")); entity.setProxyUri(rs.getString("proxy_uri")); entity.setDaemonUri(rs.getString("daemon_uri")); entity.setSignedTicket(rs.getString("signed_ticket")); entity.setBytesSent(rs.getLong("bytes_sent")); entity.setBytesTotal(rs.getLong("bytes_total")); return entity; }; }
java privatejava x.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } if (imageTransfer.isSetClientInactivityTimeout()) { params.setClientInactivityTimeout(imageTransfer.getClientInactivityTimeout()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
java @java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setBiosType(BiosType.SEA_BIOS); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolverConfiguration) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolverConfiguration.getId()) == null) { reportedDnsResolverConfiguration.setId(vdsId); dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } else { dnsResolverConfigurationDao.update(reportedDnsResolverConfiguration); } } }
protectedjava.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { returnjava.util.stream.IntStream.range(0, NAMES.length).filter(( x) ->!notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity,java.util.ArrayList::new)); }
protectedjava.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { returnjava.util.stream.filter(java.util.stream.isNotEmpty(NAMES)).collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity,java.util.ArrayList::new)); }
protectedjava.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate,java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { returnjava.util.stream.filter(java.util.stream.isNotEmpty(NAMES)).collect(java.util.stream.Collectors.toMap(this::getEntity(),java.util.ArrayList::new)); }
public void createVolumeSnapshot() { if ((getWindow())!= null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel.createVolumeSnapshotModel(this); setWindow(snapshotModel); snapshotModel.startProgress(); snapshotModel.getClusterName().setEntity(volumeEntity.getClusterName()); snapshotModel.getVolumeName().setEntity(volumeEntity.getName()); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onCreateSnapshot", this); snapshotModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this); snapshotModel.getCommands().add(cancelCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIsGlusterVolumeSnapshotCliScheduleEnabled(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(( isCliScheduleEnabled) -> { snapshotModel.getDisableCliSchedule().setEntity(isCliScheduleEnabled); snapshotModel.stopProgress(); }), volumeEntity.getClusterId()); }
public static org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel createVolumeSnapshotModel(org.ovirt.engine.ui.uicommonweb.ICommandTarget commandTarget) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel(true, true); snapshotModel.setHelpTag(HelpTag.new_volume_snapshot); snapshotModel.setHashName("new_volume_snapshot"); snapshotModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createScheduleVolumeSnapshotTitle()); return snapshotModel; }
public boolean isDefaultMtu() { return (mtu) == 0; }
protected int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) {java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores == null) || ((vds.getUsageCpuPercent()) == null)) { return (MaxSchedulerWeight) - 1; } int score = ((int) (java.lang.Math.round(calcHostLoadPerCore(vds, vm, effectiveCpuCores)))) + 1; returnjava.lang.Math.min(score, ((MaxSchedulerWeight) - 1)); }
public static int getMtuActualValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return (network.getMtu()) == 0? org.ovirt.engine.core.utils.NetworkUtils.getDefaultMtu() : network.getMtu(); }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) {java.lang.Object result = returnValue.getReturnValue();java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms; if (result instanceof org.ovirt.engine.core.common.businessentities.VM) { vms =java.util.Collections.singletonList(((org.ovirt.engine.core.common.businessentities.VM) (result))); } else {java.util.Map<org.ovirt.engine.core.common.businessentities.VM,java.lang.String> vmToOva = ((java.util.Map<org.ovirt.engine.core.common.businessentities.VM,java.lang.String>) (result)); vms = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(vmToOva.keySet()); vmNameToOva = vmToOva.keySet().stream().collect(java.util.stream.Collectors.toMap(org.ovirt.engine.core.common.businessentities.VM::getName, (vm) -> vmToOva.get(vm))); } updateVms(vms); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
@java.lang.Override protected void executeQueryCommand() {java.lang.String stdout = runAnsibleQueryOvaInfoPlaybook(); stdout = stdout.trim();java.lang.Object result = (stdout.startsWith("{")? parseOvfs(stdout) : parseOvf(stdout)); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded((result!= null)); }
privatejava.util.Map<org.ovirt.engine.core.common.businessentities.VM,java.lang.String> parseOvfs(java.lang.String stdout) { stdout = stdout.substring(1, ((stdout.length()) - 1)); returnjava.util.Arrays.stream(stdout.split("::")).map(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVA_TO_OVF_PATTERN::matcher).filter(java.util.regex.Matcher::matches).collect(java.util.stream.Collectors.toMap((m) -> parseOvf(m.group(2)), (m) -> m.group(1))); }
publicjava.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmUsingMac(org.ovirt.engine.core.compat.Guid macPoolId,java.lang.String mac) {java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).filter(( vm) ->!(vm.isStateless())).collect(java.util.stream.Collectors.toMap(VM::getId,java.util.function.Function.identity()));java.util.Optional<org.ovirt.engine.core.compat.Guid> vmUsingMacId = getVmIdUsingMac(vmsById.keySet().stream().flatMap(( vmId) -> getVmInterfaces(vmId).stream()), mac); return vmUsingMacId.map(vmsById::get); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress)); if (illegalDuplicateMacUsage) {java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> optionalVm = macsUsedAcrossWholeSystem.getVmUsingMac(macPool.getId(), macAddress); if (!(optionalVm.isPresent())) { optionalVm = macsUsedAcrossWholeSystem.getSnapshotUsingMac(macPool.getId(), macAddress); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_MAC_IN_USE, macAddress), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_IN_USE_BY, (optionalVm.isPresent()? optionalVm.get().getName() : ""))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
javajava.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) {java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId);java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(idsOfAllClustersHavingMacPool).collect(java.util.stream.Collectors.toMap(VM::getId,java.util.function.Function.identity()));java.util.stream.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = getAllStatelessVms(vmsById.values()).map(VM::getId);java.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningStatelessVMs.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get);java.util.Map<org.ovirt.engine.core.compat.Guid,java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshottedInterfacesByVmId = statelessSnapshotsOfRunningVMs.collect(java.util.stream.Collectors.toMap(VM::getId, VM::getInterfaces));java.util.List<java.lang.String> macsToBeAllocated = vmsById.keySet().stream().flatMap((vmId) -> calculateAllMacsUsedInVmAndItsSnapshot(getVmInterfaces(vmId), snapshottedInterfacesByVmId.get(vmId) )).collect(java.util.stream.Collectors.toList()); return macsToBeAllocated; }
privatejava.util.stream.Stream<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersId) { return clustersId.stream().flatMap(( clusterId) -> vmDao.getAllForCluster(clusterId).stream()); }
publicjava.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId,java.lang.String mac) {java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toList());java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(VM::getId).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toMap(VM::getId,java.util.function.Function.identity()));java.util.Optional<org.ovirt.engine.core.compat.Guid> snapshotUsingMacId = getVmIdUsingMac(snapshotsById.values().stream().flatMap((vm) -> vm.getInterfaces().stream()), mac); return snapshotUsingMacId.map(snapshotsById::get); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); if (new org.ovirt.engine.core.bll.network.VmInterfaceManager().tooManyPluggedInterfaceWithSameMac(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_MAC_IN_USE, nic.getMacAddress()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_IN_USE_BY, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected com.google.gwt.user.client.ui.IsWidget createMacColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml mac = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macVmGuestAgent()), mac, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(mac); return tooltip; }
protected com.google.gwt.user.client.ui.IsWidget createIpv6Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement();java.util.StringJoiner ipv6AddressJoiner = newjava.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv6Addresses())!= null) { ipv6AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); }java.lang.String ipv6Address = ipv6AddressJoiner.toString(); if (ipv6Address.isEmpty()) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv6 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv6Address); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv6VmGuestAgent()), ipv6, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.Tooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.Tooltip(org.ovirt.engine.ui.common.widget.tooltip.TooltipType.B
protected com.google.gwt.user.client.ui.IsWidget createIpv4Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_4); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement();java.util.StringJoiner ipv4AddressJoiner = newjava.util.StringJoiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER); if ((guestAgentInterface.getIpv4Addresses())!= null) { ipv4AddressJoiner.add(java.lang.String.join(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); }java.lang.String ipv4Address = ipv4AddressJoiner.toString(); if (ipv4Address.isEmpty()) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv4 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(ipv4Address); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.ipv4VmGuestAgent()), ipv4, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.Tooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.Tooltip(org.ovirt.engine.ui.common.widget.tooltip.TooltipType.B
private void applyVmInterfaceSpecificStyles() { mainInfoPanel.getElement().getStyle().setPaddingBottom(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,java.java.PX);java.getStyles().setWidth(java.setWidth(java.getSize());
protected com.google.gwt.user.client.ui.IsWidget createNetworkNameColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwtbootstrap3.client.ui.Column(org.gwtbootstrap3.client.ui.constants.ColumnSize.SM_3); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.Document.get().createDLElement(); com.google.gwt.safehtml.shared.SafeHtml name = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName())!= null? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.unAvailablePropertyLabel())); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), name, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(name); return tooltip; }
private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear();java.util.Collections.sort(nics);java.util.List<org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup> groups = newjava.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { groups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkGroup(nic, eventBus, style)); } nicList.addAll(groups, (!(rendered))); nicGroups = groups; }
org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item);java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation,java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (finaljava.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation,java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { finaljava.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "There is a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }
@org.junit.jupiter.api.Test public void testAdd() { try {java x.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-000000000011", "nics");java x.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("Wrong correct usage, see: http:", fault.getDetail()); } catch (java.lang.ClassNotFoundException |java.io.IOException e) { fail(); } }
@org.junit.jupiter.api.Test public void testUpdateWithNonGuidId() { try {java x.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics", "116");java x.ws.rs.core.Request request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("Wrong correct usage, see: http: fault.getDetail()); } catch (java.lang.ClassNotFoundException |java.io.IOException e) { fail(); } }
@org.junit.jupiter.api.Test public void testAction() { try {java x.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-000000000011", "freezefilesystems");java x.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("Wrong correct usage, see: http: fault.getDetail()); } catch (java.lang.ClassNotFoundException |java.io.IOException e) { fail(); } }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration() { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetVmConfigurationBySnapshot, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId())); return queryReturnValue.getSucceeded()? queryReturnValue.getReturnValue() : null; }
@java.lang.Override protectedjava.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() {java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_SNAPABLE, org.ovirt.engine.core.bll.storage.disk.ONLY_ACTIVE); disksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.ONLY_PLUGGED)); return disksFromDb; }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(( returnValue) -> { if (returnValue.getSucceeded()) {java.util.Map<org.ovirt.engine.core.common.businessentities.VM,java.lang.String> vmToOva = returnValue.getReturnValue(); vmNameToOva = vmToOva.entrySet().stream().collect(org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap(( e) -> e.getKey().getName(),java.util.Map.Entry::getValue)); updateVms(vmToOva.keySet()); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }
private void updateVmDynamicData() { if ((vdsmVm.getVmDynamic().getGuestAgentNicsHash())!= (dbVm.getGuestAgentNicsHash())) { vmGuestAgentNics = vdsmVm.getVmGuestAgentInterfaces(); dbVm.setIp(extractVmIpsFromGuestAgentInterfaces(vmGuestAgentNics)); }java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.UNCHANGEABLE_FIELDS_BY_VDSM); if ((vdsmVm.getVmDynamic().getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_FIELD_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(vdsmVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamic(dbVm); } }
java privatejava.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { nics = removeLoopbacks(nics); return nics; }
private void filterIpv6Addresses(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface nic) { nic.setIpv6Addresses(nic.getIpv6Addresses().stream().map(this::stripIpv6ZoneIndex).filter(ValidationUtils::isValidIpv6).collect(java.util.stream.Collectors.toList())); }
protected void destroyVm() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue actionReturnValue = runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVdsId())); if (((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())!= null)) { runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())); } setActionReturnValue(actionReturnValue); }
private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button, int order) { button.setText(buttonDef.getText());java.lang.String buttonId = buttonDef.getUniqueId(); if (buttonId!= null) { button.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebab); if (order < (actionFormGroup.getWidgetCount())) {java.util.List<com.google.gwt.user.client.ui.Widget> currentButtons = newjava.util.ArrayList<>(); for (int i = 0; i < (actionFormGroup.getWidgetCount()); i++) { currentButtons.add(actionFormGroup.getWidget(i)); } actionFormGroup.clear(); currentButtons.add(order, button.asWidget()); currentButtons.forEach((existingButton) -> actionFormGroup.add(existingButton)); actionFormGroup.add(actionKebab); } else { actionFormGroup.add(button); actionFormGroup.add(actionKebab); } actionItemMap.put(buttonDef, button); }
org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef,java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.gwtbootstrap3.client.ui.constants.IconType) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, ((org.gwtbootstrap3.client.ui.constants.IconType) (buttonDef.getIcon()))); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton); return dropdownActionButton; }
java @java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText());java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId!= null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem, order); return menuItem; }
public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, newActionButton, order); return newActionButton; }
public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton, int order) { if (order > (kebabMenu.getWidgetCount())) { kebabMenu.add(actionButton); } else { kebabMenu.insert(actionButton.asWidget(), order); } }
org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order);
public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.entity.EntityType subTabEntityType,java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) {java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken!= null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef,java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton); return dropdownActionButton; }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef,java.lang.Integer.MAX_VALUE); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget())!= null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { int order = 0; if ((buttonDef.getPriority()) > 0) { order = ((int) (buttonDef.getPriority())); } getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef)), order); } } }
publicjava.lang.Double getPriority() { return getValueAsDouble("priority",java.lang.Double.MAX_VALUE); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainWithDetailsPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef)), ((int) (buttonDef.getPriority()))); } } }
org.ovirt.engine.core.core.common.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities.businessentities
public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType,java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) {java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken!= null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface.getPriority()); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebab.addMenuItem(actionButton,java.lang.Integer.MAX_VALUE); notificationKebab.setVisible(((notificationKebab.getWidgetCount()) > 0)); }
public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { addMenuListItem(menuItemDef,java.lang.Integer.MAX_VALUE); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order);
@org.junit.Before public void setUp() throws org.ovirt.engine.core.common.utils.InitializationException { vm = createVm(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm); mockVmPropertiesUtils(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }
public void setLabel(java.lang.String label) { this.label = label; }
java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); finaljava.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive); setVdsStatus(VDSStatus.NonResponsive); updateHostInFenceFlow(vdsId, true); } }
private void alertActionSkippedAlreadyInStatus(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceActionType, org.ovirt.engine.core.common.businessentities.pm.PowerStatus powerStatus) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); auditLogable.addCustomValue("HostName", fencedHost.getName()); auditLogable.addCustomValue("AgentStatus", powerStatus.name()); auditLogable.addCustomValue("Operation", fenceActionType.getValue()); auditLogDirector.log(auditLogable, AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS); }
org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction,java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentsIterator iterator = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) {java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents = iterator.next(); if (fenceAction!= (org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STATUS)) { result = createFenceActionExecutor(agents).fence(FenceActionType.STATUS); if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.ERROR)) && (iterator.hasNext())) { continue; } if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) && ((result.getPowerStatus()) == (getRequestedPowerStatus(fenceAction)))) { alertActionSkippedAlreadyInStatus(fenceAction, getRequestedPowerStatus(fenceAction)); return result; } } result = createFenceActionExecutor(agents).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }
public staticjava.util.Map<java.lang.String,java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) {java.util.Map<java.lang.String,java.lang.Long> ioTuneMap = newjava.util.LinkedHashMap<>(); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.ReadIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxReadIops())); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxThroughput())); ioTuneMap.put(VdsProperties.TotalIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxIops())); ioTuneMap.put(VdsProperties.WriteBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.WriteIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertIops(storageQos.getMaxWriteIops())); return ioTuneMap; }
javajavajava.lang.String ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS();
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS); } return true; }
publicjava.lang.Boolean call() throwsjava.lang.Exception { _deploy.getParser().cliEnvironmentSet(VdsmEnv.ENGINE_HOST_CLUSTER_VERSION, clusterVersion.getValue()); return true; }
public boolean isSearchUsingTags() { return ((origText.contains("tag")) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_POOL_OBJ_NAME))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_DOMAIN_OBJ_NAME)); }
javajava.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver);java.lang.String cpuName = (cpuFlagsManager!= null)? cpuFlagsManager.getCpuNameByCpuId(name) : null; if (org.apache.commons.lang.StringUtils.isNotEmpty(cpuName)) { return cpuName; } return cpuFlagsManager!= null? cpuFlagsManager.getCpuNameByCpuId((name + ",+spec-ctrl")) : null; }
javajavajavajava privatejava.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough()? org.ovirt.engine.core.vdsbroker.vdsbroker.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : org.ovirt.engine.core.vdsbroker.vdsbroker.Collections.emptyMap()));java.lang.String libvirtXml = builder.buildHotplugNic();java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml!= null) { log.info("Hot-set: {}", prettyLibvirtXml); } return libvirtXml; }
@org.junit.Test public void searchUsingTags() {java.lang.String[] searchTexts = newjava.lang.String[]{ type=user and vm.id=12345678-1234-1234-1234-123456789012 type=user and tag = foo tag=foo }; for (java.lang.String searchText : searchTexts) { assertTrue(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
@org.junit.Test public void searchNotUsingTags() {java.lang.String[] searchTexts = newjava.lang.String[]{ "Users:", "type=user type=group", "Hosts:", "Vms:", "Datacenters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
java.lang.Integer deserializeValue(java.util.Map<java.lang.String,java.lang.Object> entry,java.lang.String curveKey, long conversionRate) {java.util.Map<java.lang.String,java.lang.Long> parameters = ((java.util.Map<java.lang.String,java.lang.Long>) (entry.get(curveKey))); if (parameters == null) { return null; }java.lang.Long average = parameters.get(VdsProperties.HOST_QOS_AVERAGE); if (average instanceofjava.lang.Long) { average = ((java.lang.Long) (average)) / conversionRate; } return average == null? null : ((int) (average / conversionRate)); }
publicjava.lang.String buildHotplugDisk() { writer.writeStartDocument(false); writer.writeStartElement("hotplug"); writer.writeStartElement("devices"); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = disk.getDiskVmElementForVm(vm.getId());java.lang.String dev = vmInfoBuildUtils.makeDiskName(dve.getDiskInterface().getName(), 0); writeDisk(device, disk, dve, dev, 0); writer.writeEndElement(); writer.writeStartElement("metadata"); writer.setPrefix(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeEndElement(); writer.writeEndElement(); return writer.getStringXML(); }

public void toggleView() { if (isDefault) { setText(secondText); setIcon(secondIcon); } else { setText(defaultText); setIcon(defaultIcon); } isDefault =!(isDefault); }
@java.lang.Override public void setIcon(org.gwtbootstrap3.client.ui.constants.IconType icon) { if (icon!= null) { super.setIcon(icon); } }
public abstract void handleOnClick(com.google.gwt.event.dom.client.ClickEvent event, boolean isDefault);
private int getWarningLowConfirmedSpaceIndicatorValue() { if (isNewStorage()) { return ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.WarningLowSpaceIndicator))); } return getStorage().getStorageStaticData().getWarningLowConfirmedSpaceIndicator(); }
@java.lang.Override protectedjava.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils,java.util.Collections.emptyMap());java.lang.String libvirtXml = builder.buildHotunplugNic();java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml!= null) { log.info("NIC hot-unplug: {}", prettyLibvirtXml); } return libvirtXml; }
java @java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters()); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(DRStep.REMOVE_TMP_SNAPSHOTS); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.GlusterStorageGeoRepSyncInternal, parameters); if (!(vdcRetValue.getSucceeded())) { endWithFailure(); } org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TMP_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.getParameters().setNextStep(null); org.ovirt.engine.core.bll.storage.dr.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; } return true; }
