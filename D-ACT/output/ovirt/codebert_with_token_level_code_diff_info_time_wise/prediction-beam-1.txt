@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); org.ovirt.engine.core.common.businessentities.VmTemplate entity = loadEntity(); org.ovirt.engine.api.restapi.resource.utils.GraphicsConsoleResourceHelper.list(this, guid).entrySet().forValue(org.ovirt.engine.api.restapi.types.VmMapper.map(org.ovirt.engine.api.restapi.types.VmMapper.map(org.ovirt.engine.api.types.VmMapper.map(graphicsInfo, null), entity))); return consoles; }
@java.lang.Override protected void reassignNewMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnicWithInvalidMacs = new java.util.ArrayList<>(); vnics.stream().filter(vnic.getMacAddress()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vnic) { vnics.add(vnic.getMacAddress()); } }
@java.lang.Override protected void init() { macPool = org.ovirt.engine.core.bll.exportimportVmFromConfigurationCommand.getMacPool(); org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration!= null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVm())!= null)) { org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }
private boolean foundBadMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> badMacPredicate) { return vnics.stream().map(vnics.getMacAddress().getMacAddress().contains(vnics.getMacAddress())); }
private boolean validateMacs(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().isReassignOrAssignMacs())) { return true; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); if (vmNics == null) { return failDuplicateMacs(vnics); } if (!(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVmNetworkInterface().isEmpty())) { return false; } final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = vm.getInterfaces(); if (vmNics!= null) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vm : nics) { if (!(nic.isEmpty())) { result.add(vnics); } } if (!(vnics.isEmpty())) { return false; } } if (!(vnics.isEmpty())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NIC_NOT_EXIST); } }
private boolean reportDuplicateMacs(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics) { if ((!(macPool.isDuplicateMacAddressesAllowed())) && (foundBadMacs(vnics, macPool::isMacInUse))) { return failValidation(EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } return true; }
@java.lang.Override public void removeAllForVms(java.util.Collection<org.ovirt.engine.core.compat.Guid> vmIds) { getCallsHandler().executeModification("DeleteVmGuestAgentInterfacesByVmIds", getCustomMapSqlParameterSource().addValue("vm_id", createIdParameterSource().addValue("vm_id", createArrayList("vm_id", vmId)); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = org.ovirt.engine.core.bll.GetAllVmsQuery.getDbFacade().getVmDao().getAll(org.ovirt.engine.core.bll.GetAllVmsQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(vm); org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); } org.ovirt.engine.core.bll.GetAllVmsQuery.getQueryReturnValue().setReturnValue(vmsList); }
public boolean isCpuHotplugSupported(int osId);
public boolean isCpuHotplugSupported(int osId);
public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction(org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task) { org.ovirt.engine.core.common.businessentities.AsyncTask dbAsyncTask = task.getParameters().getDbAsyncTask(); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = dbAsyncTask.getActionParameters(); org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandHelper.buildCommand(actionType, parameters, coco.getCommandContext()); return new org.ovirt.engine.core.bll.tasks.DecoratedCommand(command).endAction(); }
private static org.ovirt.engine.core.common.businessentities.UsbPolicy getUsbPolicyAccordingToUsbType(org.ovirt.engine.api.model.UsbPolicy usbType) { switch (usbType) { case Native : return org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE; default : return null; } }
private void initUsbPolicy() { java.lang.Integer osType = getOSType().getSelectedItem(); org.ovirt.engine.core.common.businessentities.DisplayType displayType = getDisplayType().getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.GraphicsTypes graphicsTypes = getGraphicsType().getSelectedItem(); if (((osType == null) || (displayType == null)) || (graphicsTypes == null)) { return; } getUsbPolicy().setIsChangeable(true); org.ovirt.engine.core.common.businessentities.UsbPolicy prevSelectedUsbPolicy = getUsbPolicy().getSelectedItem(); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLinuxOsType(osType)) { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } else { getUsbPolicy().setItems(java.util.Arrays.asList(UsbPolicy.DISABLED, UsbPolicy.ENABLED_NATIVE)); } if (!(graphicsTypes.getBackingGraphicsTypes().contains(GraphicsType.SPICE))) { getUsbPolicy().setIsChangeable(false); } if (getBehavior().basedOnCustomInstanceType()) { getUsbPolicy().setIsChangeable(false); } } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { driver.edit(fenceAgentModel); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel fenceAgentModel) { driver.edit(fenceAgentModel); driver.edit(fenceAgentModel); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors!= null) && ((errors.size()) == rowCount) : ")"; for (int i = 0; i < rowCount; ++i) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element!= null : "The same size as well"; java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(error); } else { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(error); if (!valid) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(error); } else { element.removeClassName(style.invalidRow()); } } }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { super.onBrowserEvent(context, parent, getTooltip()); super.onBrowserEvent(context, value, event, valueUpdater); }
public com.google.gwt.safehtml.shared.SafeHtml getTooltip() { return tooltip; }
public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip, org.ovirt.engine.ui.common.utils.ElementUtils.setTooltip(e, tooltip, org.ovirt.engine.ui.common.utils.ElementTooltip placement) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip, org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(null)); }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { java.util.Set<java.lang.String> set = new java.util.HashSet(super.getConsumedEvents()); set.add(BrowserEvents.CHANGE); set.add(BrowserEvents.KEYDOWN); set.add(BrowserEvents.MOUSEMOVE); return set; }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = object.getKeys().getSelectedItem(); if (selectedKey!= null) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(keyField.getElement(), com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(selectedKey)); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip, org.ovirt.engine.ui.common.utils.Pair<java.lang.String, java.lang.String> tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(getElement(), tooltip); }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltip(getElement(), tooltip); }
public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element elem, final T object, com.google.gwt.dom.client.NativeEvent event) { final int index = context.getIndex(); com.google.gwt.cell.client.ValueUpdater<C> valueUpdater = ((org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getFieldUpdater()) == null)? null : new com.google.gwt.cell.client.ValueUpdater<C>() { @java.lang.Override public void update(C value) { getFieldUpdater().update(index, object, value); } }; getCell().onBrowserEvent(context, elem, org.ovirt.engine.ui.common.widget.table.column.AbstractColumn.getValue(object), event, valueUpdater); }
protected com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.webadmin.widget.table.Element parent) { return null; }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { com.google.gwt.safehtml.shared.SafeHtml tooltip = getTooltip(value); if (tooltip == null) { tooltip = getTooltip(value, parent); } org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(parent, tooltip); super.onBrowserEvent(context, parent, value, event, valueUpdater); }
public void setText(com.google.gwt.safehtml.shared.SafeHtml text) { setText(text.asString()); }
@java.lang.Override public void execute() { applyTooltip(); }
private void applyTooltip() { if (((getWidget())!= null) && ((tooltip)!= null)) { java.lang.String template = org.ovirt.engine.ui.common.utils.ElementTooltipUtils.getTooltipTemplate(extraTooltipClassNames.trim()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltip(getWidget().getElement(), tooltip, placement, template); } }
private static void destroyTooltip(com.google.gwt.dom.client.Element e) { if ((getWindow())!= null) { throw new java.lang.RuntimeException(("Exception: " + (e.getName()))); } }
@java.lang.Override public java.util.Set<java.lang.String> getConsumedEvents() { return new java.util.HashSet(super.getConsumedEvents()); }
public void setPlacement(org.ovirt.engine.ui.common.widget.table.Placement placement) { this.placement = placement; }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectHorizontalOverflow(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(alertPanel.getElement(), org.ovirt.engine.ui.common.utils.ElementUtils.fromString(alertPanel.getElement())); } }
private void updateBadge() { guide.setVisible(((count)!= 1)); }
public void setHtml(com.google.gwt.safehtml.shared.SafeHtml html) { assert html!= null : "Tooltip HTML content tooltip content cannot be null"; if (((tooltip) == null) || (!(tooltip.asString().equals(html.asString())))) { tooltip = html; applyTooltip(); } }
public void setMaxWidth(org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Width width) { tooltipClassNames = com.google.gwt.safehtml.shared.SafeHtmlUtils.getTooltipText((" + (width.getClassName())) + (width.getClassName()); }
private static void createTooltip(com.google.gwt.dom.client.Element e, java.lang.String placement, java.lang.String template);
@java.lang.Override public void setWidget(com.google.gwt.user.client.ui.Widget w) { super.setWidget(w); if ((w!= null) && (w == (getWidget()))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { applyTooltip(); } }); } }
public static void setTooltipOnElement(com.google.gwt.dom.client.Element e, com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.utils.ElementTooltipUtils.setTooltipOnElement(e, tooltip,TooltipConfig.PLACEMENT); }
public static java.lang.String getTooltipTemplate(java.lang.String extraTooltipClassNames) { java.lang.String innerClassNames = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE_CLASS_OUTER; if (org.ovirt.engine.ui.common.widget.tooltip.StringUtils.isNotEmpty(extraTooltipClassNames)) { innerClassNames = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE; template = template.replace("{0}", OuterTooltipConfig.TEMPLATE_BRICK); template = template.replace("{1}",TooltipConfig.TEMPLATE_INNER); template.replace("{2}",TooltipConfig.TEMPLATE_CLASS_INNER); template.setTemplate(template.getName()); template.replace("{2}", org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.TEMPLATE_CLASS_INNER); return template; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CUSTOM_EMPLATE); _writer.writeRaw(emulatedMachine); _writer.writeEndElement(); _writer.writeEndElement(OvfProperties.CUSTOM_CPU_NAME); _writer.writeRaw(cpuId); _writer.writeRaw(OvfProperties.CUSTOM_CPU_NAME); _writer.writeEndElement(); }
@org.junit.Test public void cpuNameIsNull() { cpuId = null; assertThatThrewBy(vm, imageId)).isInstanceOf(java.lang.NullPointerException.class).hasMessageContain("cpuId"); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.FencingPolicy.class, to = org.ovirt.engine.api.model.FencingPolicy.class) public static org.ovirt.engine.api.model.FencingPolicy map(org.ovirt.engine.api.model.FencingPolicy model, org.ovirt.engine.core.common.businessentities.FencingPolicy template) { org.ovirt.engine.core.common.businessentities.FencingPolicy entity = (template!= null)? template : new org.ovirt.engine.core.common.businessentities.FencingPolicy(); entity.setFencingEnabled(model.isEnabled()); if (model.isSetSkipFencingEnabled()) { entity.setSkipFencingIfSDActive(model.getSkipIfSdActive().isEnabled()); } if (model.isSetSkipFencingIfSDActive()) { entity.setSkipFencingIfConnectivityBroken(model.getSkipIfConnectivityBroken().isEnabled()); } if (model.isSetSkipFencingIfConnectivityBroken()) { entity.setHostsWithBrokenConnectivityThreshold(50); } else { entity.setHostsWithBrokenConnectivityThreshold(50); } if (model.isSetSkipFencingIfConnectivityBrokenConnectivityBroken()) { entity.setSkipFencingIfGlusterBonds(model.getSkipIfConnectivityBroken().isEnabled()); } if (model.isSetSkipFencingIfGlusterBondsUp()) { entity.setSkipFencingIfGlusterQuotaIfGlusterQuotaBricksUp(model.getSkipFencingBroken().isEnabled()); } if (model.isSetSkipFencingIfGlusterBondsUp()) { entity.setSkipFencingIfGlusterQuotaIfGlusterQuotaNotMetadata(model.getSkipFencingPolicy().isEnabled()); } return entity; }
@java.lang.Override protected boolean validate() { setStoragePoolId(getVm().getStoragePoolId()); if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskParameters parameters : org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getReturnValue().setValid((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (performStorageDomainsChecks(parameters))) && (performStorageDomainsChecks(parameters))) && (performStorageDomainsChecks(parameters))) && (performStorageDomainsChecks(parameters))) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return validateCreateAllSnapshotsFromVmCommand(); }
private void initSpyCommand() { doReturn(true).when(command).validateSpaceRequirements(); doReturn(true).when(command).checkImagesStatus(); doReturn(true).when(command).setAndValidateDiskProfiles(); }
@java.lang.Override protected void executeCommand() { runVdsCommand(VDSCommandType.SparsifyImage, new org.ovirt.engine.core.common.vdscommands.SparsifyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.spy.SparsifyImageVDSCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.storage.disk.spy.SpyDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.SpyImageCommand.getDiskImage().getId())); }
@java.lang.Override protected void executeVdsBrokerCommand() { java.util.Map<java.lang.String, java.lang.Object> volumeAddress = new java.util.HashMap<>(); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getStorageId()); volumeAddress.put("sd_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getImageId()); volumeAddress.put("vol_id", org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.getParameters().getVolumeId()); org.ovirt.engine.core.vdsbroker.vdsbroker.SparsifyImageVDSCommand.proceedProxyReturnValue(); }
private boolean selectProxyHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> activeHosts = org.ovirt.engine.core.bll.storage.disk.spy.SparsifyImageCommand.getVdsDao().getAllForStoragePoolAndStatus(org.ovirt.engine.core.bll.storage.disk.spy.SparsifyImageCommand.getDiskImage().getStoragePoolId(), VDSStatus.Up); if (activeHosts.isEmpty()) { return false; } org.ovirt.engine.core.common.businessentities.VDS activeHost = activeHosts.get(0); setVds(activeHost); return true; }
protected org.ovirt.engine.core.common.businessentities.storage.Disk getDisk() { if ((disk) == null) { disk = org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getDiskDao().get(org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getParameters().getImageId()); } return disk; }
@java.lang.Override protected void init() { setImageId(getDiskId()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permsList = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.utils.PermissionSubject> perms = org.ovirt.engine.core.bll.utils.PermissionSubjectUtils.getInstance().getPermissionSubject(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SPARSIFY_DISK); if (perms!= null) { permsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(disk.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.SParameters.SParameters.SParameters.SPY_DISK)); } return perms; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(java.lang.String volumeName, java.util.Map<java.lang.String, java.lang.Object> volumeAddress);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(java.lang.String volumeName, java.util.Map<java.lang.String, java.lang.Object> volumeName) { throw new java.lang.RuntimeException("Unsupported in order", volumeName); }
@java.lang.Override protected boolean validate() { if (((org.ovirt.engine.core.bll.storage.disk.SparsifyImageCommand.getVds()) == null) && (!(selectProxyHost()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_inplace").withParameter("job_id", jobId).withParameter("vol_addr", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { log.info("Command::endImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
public boolean isDownloading() { return (getExporting())!= (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity.GET_CLUSTER_ID); }
public void setIsDownloading(boolean isDownloading) { this.isDownloading = isDownloading; }
@org.junit.Test public void testUploadIsDefaultStorageType() { assertEquals(org.ovirt.engine.core.bll.storage.StorageHandler.getExportType(), org.ovirt.engine.core.bll.storage.StorageHandler.getStorageType(), transferImage.IMAGE); }
protected java.lang.String getTransferDescription() { return java.lang.String.format("%s'%s' (id '%s' (id '%s' (id '%s' (%s')), getImageType(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageAlias(), getImageIdNullSafe()); }
@org.junit.Test public void testFailOnDownloadWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); junit.framework.Assert.assertFalse(transferImageCommand.validate()); assertThat(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(imageId))) { return validateCreateImage(); } else { if (!(org.ovirt.engine.core.bll.storage.disk.image.ImageCommand.getParameters().isDownloading())) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ImageTransfer imageTransfer) { org.ovirt.engine.core.common.action.ImportDiskImageParameters params = new org.ovirt.engine.core.common.action.TransferDiskImageParameters(); params.setImageId(imageTransfer.getDirection()); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getImage().getId())); params.setKeepalance(false); return performCreate(VdcActionType.ExportDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageDisksByImageId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@org.junit.Test public void testFailsDownloadExecutionWithoutImage() { transferImageCommand.getParameters().setIsDownloading(true); transferImageCommand.executeCommand(); junit.framework.Assert.assertFalse(transferImageCommand.getReturnValue().getValidationMessages(), contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD.name())); }
@java.lang.Override protected void executeCommand() { log.info("Import ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageStorageDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); } else { handleImageIsReadyForTransfer(false); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> getOvfEntityList(org.ovirt.engine.core.common.businessentities.VmEntityType vmEntityType) { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getUnregisteredEntitiesByEntityType(org.ovirt.engine.core.bll.storage.domain.GetUnregisteredEntitiesQuery.getParameters().getId(), vmEntityType); return entityList; }
private static org.ovirt.vdsm.jsonrpc.client.JsonRpcClient createClient(java.lang.String hostname, int port, org.ovirt.vdsm.jsonrpc.client.internal.Client connectionPolicy, org.ovirt.vdsm.jsonrpc.client.internal.Client policyPolicy, boolean isSecure, org.ovirt.vdsm.jsonrpc.client.reactors.ReactorType type, java.lang.String protocol, int parallelism) { org.ovirt.vdsm.jsonrpc.client.reactors.ManagerProvider provider = null; if (isSecure) { provider = new org.ovirt.engine.core.vdsbroker.jsonrpc.EngineManagerProvider(protocol); } try { final org.ovirt.vdsm.jsonrpc.client.reactors.Reactor reactor = org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getReactor(provider, type); return org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.getJsonClient(reactor, hostname, connectionPolicy, clientPolicy, clientPolicy, clientPolicy, clientPolicy, clientPolicy, clientPolicy, subscriber); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.error("Exception occured during building ssl context or obtaining selector", org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.log.debug("Exception", e); throw new java.lang.IllegalStateException(e); } }
private boolean executeSshReboot(java.lang.String version) { try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream(); final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream(); sshClient.setVds(org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshHostRebootCommand, version), null, cmdOut, cmdOut, cmdErr); return true; } catch (java.lang.Exception ex) { log.error("Error reboot command failed on host {} {}", org.ovirt.engine.core.bll.SshHostRebootCommand.getVds().getHostName(), ex.getMessage(), ex.getMessage(), cmdOut, cmdOut, cmdErr); log.debug("Exception", ex); } return false; }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream(); final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream(); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.authenticate(); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("Error power down command failed on host '{}' {} {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), ex.getMessage(), cmdOut, cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("Error while host '{}' {}", ex.getMessage(), ex.getMessage(), ex.getMessage(), ex.getMessage(), ex.getMessage(), ex.getMessage()); log.debug("Exception", e); } return ret; }
private void cloneStructureNotCollapse() { org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureCommand p = new org.ovirt.engine.core.common.action.CloneImageGroupVolumesStructureParams(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getDestinationFormat(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getActionType(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesStructure, org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesStructure, org.ovirt.engine.core.bll.storage.disk.ImageGroupWithDataCommand.getActionType()); p.setEndProcedure(false); }
private void prepareParameters() { java.util.Map<java.lang.Object, java.lang.Object> weight = new java.util.HashMap(); org.ovirt.engine.core.common.businessentities.storage.ImageGroup new java.util.HashMap<java.lang.Object, java.lang.Object>(); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().setOperationsWeight(boxes); int createWeight = (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) / 10; if (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getJobWeight()) { org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().setJobWeight(createTaskId(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupWithDataCommand.getParameters().getJobWeight()) - createWeight)); } else { parameters.put(CopyStage.DATA_COPY, ((org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getJobWeight()) - createWeight)); } }
public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job!= null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}', '{}': {}", step.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.ExecutionMethod.ExecutionMethod.AsStep)) && (contextStep!= null)) { step = addSubSteps().remove(step); step = addSubSteps().remove(step); step = null; } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setImageIds(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImageIds(images)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setOperationsWeight(images); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().setOperationsWeight(images.stream().collect(java.util.stream.Collectors.toMap(java.util.stream.Collectors.toMap(DiskImage::getImageId, (x) -> calculateImageWeight(totalSize, x)))); persistCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getParentCommand(), ((getCallback())!= null)); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.setSucceeded(true); }
private void copyVolumeData(org.ovirt.engine.core.compat.Guid image) { org.ovirt.engine.core.common.action.CopyDiskParameters parameters = new org.ovirt.engine.core.common.action.CopyDiskParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getStoragePoolId(), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getSrcDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), buildImageLocationInfo(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getDestDomain(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getImageGroupID(), image), false); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getActionType()); parameters.setJobWeight(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getOperationsWeight().get(image)); runInternalActionWithTasksContext(VdcActionType.CopyImageGroupVolumesData, parameters); }
public org.ovirt.engine.core.common.job.Step addTaskStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.util.Collection<org.ovirt.engine.core.common.job.Step> stepSubjectEntities) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isTasksMonitored()) { org.ovirt.engine.core.common.job.Step parentTaskStep = context.getParentTasksStep(); if (parentTaskStep!= null) { step = addSubStep(parentTaskStep, stepName, description, stepSubjectEntities, true); } } return step; }
private org.ovirt.engine.core.common.job.Step addSubStep(org.ovirt.engine.core.common.job.Step parentStep, org.ovirt.engine.core.common.job.StepEnum stepName, java.util.Collection<org.ovirt.engine.core.common.job.Step> stepSubjectEntities, java.util.Collection<org.ovirt.engine.core.common.job.StepSubjectEntity> stepSubjectEntities, boolean hasProgress) { org.ovirt.engine.core.common.job.Step step = null; if (parentStep!= null) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } step = parentStep.addStep(stepName, description); if (hasProgress) { step.setProgress(0); } try { jobRepository.saveStep(step, stepSubjectEntities); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}', '{}': {}", stepName.name(), parentStep.getId(), e.getMessage()); log.debug("Exception", e); parentStep.getSteps().remove(step); step = null; } } return step; }
private int calculateImageWeight(double totalSize, org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { double weight = (totalSize == 0)? 1 : (totalSize.size()) / totalSize; return java.lang.Long.valueOf(java.lang.Math.round((weight * (org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupVolumesDataCommand.getParameters().getJobWeight()))).intValue(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo()) instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.common.VdcObjectType.Disk, ((org.ovirt.engine.core.common.VdcObjectType) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())).getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getJobWeight())); } return null; }
public org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { org.ovirt.engine.core.common.job.Step taskStep = org.ovirt.engine.core.bll.job.ExecutionHandler.getInstance().addTaskStep(command.getExecutionContext(), org.ovirt.engine.core.common.job.StepEnum.getStepNameByTaskType(asyncTaskCreationInfo.getTaskType()), description, command.getCommandStepSubjectEntities()); command.getExecutionContext().setStepId(taskStep.getId()); }
private void handleCommandStepAndEntities() { if ((getCommandStep())!= null) { org.ovirt.engine.core.common.job.Step taskStep = executionHandler.addTaskStep(getExecutionContext(), null, getCommandStepSubjectEntities()); if (taskStep!= null) { getExecutionContext().setStep(taskStep); persistCommandIfNeeded(); } } }
public java.util.Map<?,?, org.ovirt.engine.core.common.utils.Pair<?, java.lang.Integer> getOperationsWeight() { return operationsWeight; }
public void setOperationsWeight(java.util.Map<java.lang.Object, java.lang.Integer> operationsWeight) { this.operationsWeight = operationsWeight; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.StepSubjectEntity> getCommandStepSubjectEntities() { if ((org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight())!= null) { return java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getJobWeight().intValue())); } return null; }
private org.ovirt.engine.core.common.businessentities.aaa.DbUser buildUser(T params, java.lang.String authzName) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = dbUserDao.getByExternalId(authzName, params.getPrincipalId()); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(dbUser); user.setId((dbUser == null? org.ovirt.engine.core.compat.Guid.newGuid() : dbUser.getId())); user.setExternalId(params.getId()); user.setDomain(params.getPrincipalId()); user.setDomain(params.getEmail()); user.setEmail(params.getEmail()); user.setLoginName(params.getLogin()); user.setLoginName(params.getLogin()); user.setLoginName(params.getLoginName()); java.util.List<org.ovirt.engine.core.compat.Guid> groupIds = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupRecordId : groupRecordIds) { org.ovirt.engine.core.bll.aaa.CreateUserSessionCommand.flatGroups(((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (params.getGroupIds())), groupRecordIds); for (java.lang.String groupRecord : groupRecordIds) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup dbGroup = dbGroupDao.getByExternalId(authzName, groupId); if (dbUser == null) { groupIds.add(user); } } else if (!(dbUser.equals(user))) { dbUser.setIds(user); } else if (!(dbUser
java.lang.String areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg();
@java.lang.Override public org.ovirt.engine.core.common.utils.HostUpgradeManager getVdsInstallManager() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = backendInternal.runInternalQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.IdQueryParameters(host.getId())); java.util.List<org.ovirt.engine.core.compat.RpmVersion> isos = returnValue.getReturnValue(); boolean updateAvailable = org.ovirt.engine.core.common.utils.RpmVersionUtils.isUpdateAvailable(isos, host.getHostOs()); org.ovirt.engine.core.common.utils.HostUpgradeManager.setUpdatesAvailable(updateAvailable); if (updateAvailable) { org.ovirt.engine.core.common.utils.HostUpgradeManager.setVds(host); auditLogDirector.log(auditLog, AuditLogType.OVIRT_NODE_UPDATES_ARE_AVAILABLE); } return hostUpgradeManagerResult; }
org.ovirt.engine.core.common.utils.HostUpgradeManager getUpgradeManager().isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host);
private void onUpgrade() { if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.action.HostUpgradeCheckParameters params = new org.ovirt.engine.core.common.action.hostdeploy.HostUpgradeCheckParameters(host.getId()); invokeCheckForHostUpgrade(params); }
public org.ovirt.engine.core.common.utils.HostUpgradeManager getHostUpgradeManager() { return create(host.getVdsType()).isUpdateAvailable(host); }
private org.ovirt.engine.core.compat.Guid findChildCommandId(org.ovirt.engine.core.common.action.VdcActionType commandType, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { for (org.ovirt.engine.core.compat.Guid cmdId : childCmdIds) { org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(cmdId); if ((commandEntity.getCommandType()) == commandType) { return cmdId; } } return null; }
@java.lang.Override public void initialize() { setTitle(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeModel.constants.upgradeHostTitle()); setHelpTag(HelpTag.upgrade_host); setHashName(HelpTag.upgrade_host); setMessage(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.constants.areYouSureYouWantToCheckForUpgradeTheFollowingHostMsg()); org.ovirt.engine.ui.uicommonweb.UICommand upgradeCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.hosts.HostUpgradeCheckConfirmationModel.ON_CHECK_UPGRADE, this); upgradeCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); upgradeCommand.setIsDefault(true); getCommands().add(upgradeCommand); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDS vds = vdsDao.get(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getVdsId()); org.ovirt.engine.core.common.utils.HostUpgradeManager.getVdsDynamicData().setUpdateAvailable(vds.getVdsId()); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("UpgradePackages", org.apache.commons.lang.StringUtils.join(hostUpgradeManagerResult.getAvailablePackages(), ", org.apache.commons.lang.StringUtils.join(hostUpgradeManagerResult.getAvailablePackages(), ", ")); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.addCustomValue("Message", message); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getReturnValue().setActionReturnValue(hostUpgradeManagerResult.isUpdatesAvailable()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckInternalCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FAILED : org.ovirt.engine.core.common.AuditLogType.HOST_AVAILABLE_UPDATES_FAILED; }
@java.lang.Override public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return availableUpdatesFinder.isUpdateAvailable(host); }
@java.lang.Override protected void executeCommand() { java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> upgradeCheckCmd = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.HostUpgrade, createUpgradeCheckParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.cloneContext()); if (!(org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getParameters().isRunAsync())) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; try { result = upgradeCheckCmd.get(); org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.getReturnValue().setActionReturnValue(result.getActionReturnValue()); if (!(result.getSucceeded())) { propagateFailure(result); return; } } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); return; } } org.ovirt.engine.core.bll.hostdeploy.HostUpgradeCheckCommand.setSucceeded(true); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("{ id=").append(getLUNId()).append(", physicalVolumeId=").append(getPhysicalVolumeId()).append(", volumeGroupId=").append(getVolumeId()).append(", volumeGroupId=").append(getSerial()).append(", vendorId=").append(getLunMapping()).append(", vendorId=").append(getLunConnections()).append(", deviceSize=").append(getDeviceSize()).append(", deviceSize=").append(getPvSize()).append(", pathsDictionary=").append(getPathsDictionary()).append(", pathsDictionary=").append(getPathsDictionary()).append(", pathsDictionary=").append(getPathsDictionary()).append(", pathsDictionary=").append(getPathsDictionary()).append(", pathsDictionary=").append(getStatus()).append(", status=").append(getStatus()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append(", diskAlias=").append(getDiskAlias()).append("}"); return builder.toString(); }
public java.lang.Boolean isDiscerErrataData() { return staticData.getDiscerZerZer(); }
public void setSupportsDiscret(boolean supportsDiscorted) { this.supportsDiscorted = supportsDiscret; }
public boolean isSupportsDiscorted() { return supportsDiscorted; }
public java.lang.Long getDiscuteMaxBytes() { return discardMaxBytes; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other._lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((pvSize) == (other.deviceSize))) && ((pvSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && ((pvSize) == (other.pvdsType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsDictionary, other.pathsCapacity))) && (java.util.Objects.equals(pathsDictionary, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.pathsCapacity))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(status, other.volumeId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(status, other.status))) && (status))) && (java.util.Objects.equals(status, other.status)))
public void setDiscerZerErrataData(java.lang.Boolean discardZeroesData) { staticData.setDiscerZerCode(discoon); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createAllMapSqlParameterSource(lun_id, lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("vendor_id", lun.getVendorId()).addValue("device_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("device_size", lun.getDeviceSize()).addValue("discards_bytes", lun.getDeviceSize()).addValue("discards_bytes", lun.isDiscroe_bytes()).addValue("discards_data_data_size()).addValue("cannot delete_zeroes_data_data", lun.getDiskSize()).addValue("isDiscoredZeros_data", lun.isDiscroe_seroesData()); }
public java.lang.Boolean isSupportsDiscovered() { return staticData.isSuppressDiscovered(); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return createIdParameterMapper(lun.getId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("lun_mapping", lun.getLunMapping()).addValue("vendor_id", lun.getVendorId()).addValue("device_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("discards_bytes", lun.getDeviceSize()).addValue("discards_bytes", lun.getDiscardsMaxBytes()).addValue("discards_bytes", lun.isDiscroe_bytes()).addValue("isDiscroe_bytes", lun.isDiscroe_bytes()).addValue("isDiscroe_bytes_bytes", lun.isDiscroe_bytes())); }
protected java.util.Map<java.util.List<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.function.Function.function.function.function.Function.separate(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.function.Function.function.function.function.Function.separateByVgInfo) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb = lunsFromDbMap.get(lunFromDb.getLUNId()); if (lunFromDb == null) { return saveNewLunsFromDb(java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); } boolean lunFromDbHasSamePvId = java.util.Objects.equals(lunFromDb.getPhysicalVolumeId(), lunFromVgInfo.getPhysicalVolumeId()); if (lunFromDb == (lunFromVgInfo.getDeviceSize())) { if (((lunFromDb.getDeviceSize())!= (java.util.Objects.equals(lunFromDb.getDiscardsValue())) || (!(java.util.Objects.equals(lunFromDb.getDiscardsArray(), lunFromVgInfo.getDiscardsArray())))) { return updateExistingLuns; } } return org.ovirt.engine.core.bll.storage.disk.L
@org.junit.Test public void testGetLunsToUpdateInDbDiffDiscmentDiscand(org.ovirt.engine.core.common.businessentities.StorageType storage48L, longSizeM); lunFromDb.setDiscmentMaxBytes(1024L); lunFromDb.setDiscmentMaxBytes(1024L); assertLunShouldBeUpdatedDueToFieldChange(); }
public void setSupportsDiscional(boolean supportsDiscorted) { staticData.setSupportsDiscalance(supportsDiscresh); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createAllMapSqlParameterSource(lun_id, lun.getLUNId()).addValue("physical_volume_id", lun.getPhysicalVolumeId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("volume_group_id", lun.getVolumeGroupId()).addValue("serial", lun.getSerial()).addValue("vendor_id", lun.getVendorId()).addValue("device_id", lun.getProductId()).addValue("device_size", lun.getDeviceSize()).addValue("device_size", lun.getDeviceSize()).addValue("discards_bytes", lun.getDeviceSize()).addValue("discards_bytes", lun.isDiscroe_bytes()).addValue("cannot_zeroes_data_data_size()).addValue("cannot delete_zeroes_data_data", lun.getCpuId()).addValue("isDiscoredZeros_data", lun.isDiscroe_bytes())); }
public void setDiscordinatorMaxBytes(java.lang.Long discardMaxBytes) { this.discvdsmRetryMaxBytes = discardMaxBytes; }
public static boolean needsAlert(org.ovirt.engine.core.common.businessentities.VM vm) { boolean needsAlert = false; if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { needsAlert = (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.hasChangedOrUpdateNeeded(vm)); } return (needAlert || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm))) || (org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.isUpdateNeeded(vm)); }
public void setVdsNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vdsNumaNodeList) { this.vdsNumaNodeList = vdsNumaNodeList; }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getVdsNumaNodeList() { return vdsNumaNodeList; }
private static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { if (numaTuneMode!= (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((vmNumaNodes.size()) == 1) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vdsNumaNodeList = vmNumaNumaNode.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = ((vdsNumaNodeList!= null) && (vdsNumaNodeList.isPinned()); if (pinnedToSingleNode) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodePinInfo() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> numaNodesAssign = getCallsHandler().executeReadList("GetAllAssignedNumaNodeInfo", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodesPinMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning> pair : numaNodesAssign) { if (!(vmNumaNodesPinMap.containsKey(pair.getFirst()))) { vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList()); } vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : numaNodesPinMap.get(pair.getSecond())); } vmNumaNodesPinMap.put(pair.getFirst(), new java.util.ArrayList<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.compat.Guid cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode>> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByCluster", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaNodeInfoWithClusterRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodesPinMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> pair : vmNumaNodesCpusMap.get(pair.getSecond().getId())); if (numaNodesCpusMap.cont
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetNumaNodeByVmId", org.ovirt.engine.core.dao.VmNumaNodeDaoImpl.vmNumaRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNumaNodes) { if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(vdsNumaNode.getId(), true, vdsNumaNode.getIndex())); } return numaNode; }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(org.ovirt.engine.core.common.businessentities.VmNumaNode node, org.ovirt.engine.core.compat.Guid vNodeId) { return org.ovirt.engine.core.dao.NumaNodeDaoImpl.getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_id", pinning.getVdsNodeId()).addValue("vds_numa_node_index", pinning.getVdsNodeIndex()).addValue("is_pinned", false); }
private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNumaNode = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaNodeTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.businessentities.VmNumaNode(org.ovirt.engine.core.compat.Guid.newGuid(), true, 0)); }
private boolean isVmNumaPinned(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes) { if ((nodes == null) || (nodes.isEmpty())) { return false; } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : nodes) { if (org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { return true; } } } } return false; }
@org.junit.Test public void shouldDetectMissingPinningEntry() { vm.getvNumaNodeList().get(0).getVdsNumaNodeList().get(0).setVdsNodeIndex(null); assertValidationFailure(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_PINNED_INDEX_ERROR); }
public org.ovirt.engine.core.common.businessentities.VmNumaNode toVmNumaNode() { final org.ovirt.engine.core.common.businessentities.VmNumaNode newNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newNode.setIndex(vmNumaNode.getIndex()); newNode.setId(vmNumaNode.getId()); newNode.setMemTotal(vmNumaNode.getMemTotal()); if (isPinned()) { newNode.setVdsNumaNodeList(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning(null, pinned, hostNodeIndex))); } return newNode; }
private boolean canVmNumaPinnedToVds(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsNumaNodeDao().getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VdsNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { if (pinningning.isPinned()) { if ((vNode.getMemTotal()) > (indexMap.get(pinning.get(pinning.getVdsIndex()).getNumaNodeStatistics().getMemFree())) { return false; } } } } } return true; }
@org.junit.Test public void testGetAllVmNumaNodeByVmId() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> result = vmNumaNodeDao.getAllVmNumaNodeByVmId(existingVm.getId()); assertNotNull(result); assertEquals(2, result.size()); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81-50-4ad1-86a1-cfa1-cfa1-cfa1-cfb15b15b15b517b517b517b517b517"); org.ovirt.engine.core.compat.Guid vmNumaNode1 = new org.ovirt.engine.core.compat.Guid("3c2b81e6-50-4ad1-cf-cfa1-cfa1-cf-cfa1-cf-cfa1-cfb15b15b15b517b517b15b517b517b517b517"); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.HashMap<>(2); nodes.get(0).getId(), result.getId(), result.get(0)); nodes.put(result.get(1).getId(), result.get(1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertTrue(nodes.containsKey(vmNumaNode1)); assertEquals(2, nodes.get(vmNumaNode1).getVdsNumaNodeList().get(0).isPinned()); assertEquals(2, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).isPinned()); assertEquals(2, nodes.get(vmNumaNode2).getVdsNumaNodeList().get(0).getVdsNumaNodeList().get(0).getVdsNumaNodeList().get(
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getParameters().getVmNumaNodeList(); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNodesCommand.getVdsNumaNodes(); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNodes) { for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vmNumaNode.getVdsNumaNodeList()) { if (pinning.isPinned()) { pinning.setVdsNumaNodeId(vmNumaNode.getId()); break; } } } nodes.add(vmNumaNode); } org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNumaNodesCommand.getVmNumaNodeDao().massUpdateNumaNode(numaNode.getId()); org.ovirt.engine.core.bll.numa.vm.UpdateVmNumaNumaNodesCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { final boolean rngUpdateRequired = VmRngDevice.Source.getCluster().getcompatibility_version(); return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter((vm) -> ((vm.getOrigin())!= null) && (!(vm.isHostedEngine()))).filter((vm) -> (vm.getCustomCompatibilityVersion()) == null) || rngUpdateRequired).filter((vm) -> (vm.getCustomCompatibilityVersion()) == null? false : ((vm.getCustomCompatibilityVersion()) == null) || (org.ovirt.engine.core.common.businessentities.VM.isCustomCompatibilityVersionSupported)) || (org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().isGlusterCompatibilityVersionSupported(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).isEmpty()))); }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.Scope.Scope.Scope.Scope.Scope.Scope.Scope.Scope.Scope.LOW)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters); if (!(result.getSucceeded())) { org.ovirt.engine.core.bll.UpdateClusterCommand.getReturnValue().setFault(result.getFault()); return false; } } return true; }
@java.lang.Override protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().isUpdateRngDevice())) { rngDeviceUtils.handleGuid(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getClusterLevelChangeFromVersion(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getCluster().getCompatibilityVersion(), templateId, org.ovirt.engine.core.bll.UpdateVmTemplateCommand.cloneContextAndDetachFromParent(), false); return; } super.updateRngDevice(templateId); }
@java.lang.Override protected void init() { org.ovirt.engine.core.bll.UpdateClusterCommand.updateMigrateOnError(); oldCluster = clusterDao.get(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); if (((oldCluster)!= null) && (!(java.util.Objects.equals(oldCluster.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterVmsInClusterNeedUpdate(); } if (!(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCluster().getCompatibilityVersion())))) { vmsLockedForUpdate = filterTemplatesInClusterNeedUpdate(); } }
public void handleUrrandomRandomChange(org.ovirt.engine.core.compat.Version oldClusterVersion, org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.bll.context.CommandContext commandContext, boolean isVm) { if (oldClusterVersion == null) { return; } final boolean updatePotentiallyRequired = VmRngDevice.Source.urator.Source.urator.Source.urator.unRandomUpdateRequired(oldClusterVersion, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBaseId), commandContext.getEngineContext()).getReturnValue(); if (!updateApplicentiallyRequired) { return; } final java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices.get(0); if (!(java.util.Arrays.asList(org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.RANDOM, VmRngDevice.Source.RANDOM).contains(rngDevice.getSource()))) { return; } final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = rngDevices.get(0); if (!(java.util.Arrays.asList(org.ovirt.engine.core.common.businessentities.VmRngDevice.Source.RANDOM, VmRngDevice.Source.Source.getSource()))) { return; } final org.ovirt.engine.core.common.action.RngDeviceParameters params = new org.ovirt.engine.core.common.action.RngDeviceParameters(rngDevice, isVm); backend.runInternalAction(VdcActionType.UpdateRngDevice, params, commandContext); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> filterTemplatesInClusterNeedUpdate() { if (!(VmRngRandom.getCompatibilityVersion().get(Version.v3_4)) { return java.util.Collections.emptyList(); } return vmTemplateDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()); }
public void onSparsify(final org.ovirt.engine.ui.uicommonweb.models.ICommand target) { java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(disk.getId()); parameterList.add(parameters); } startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.SparsifyImage, parameterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { stopProgress(); target.executeCommand(cancelCommand); } }, this); }
private boolean isSparsifyCommandAvailable() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems())!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.storage.Disk>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((!(isVmDown())) || ((!(isVmDown()))) || (!(isVmDown()))) { return false; } } return true; }
public void initialize(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disksToSparsify, org.ovirt.engine.ui.uicommonweb.ICommand target) { this.vm = vm; this.disksToSparsify = disksToSparsify; org.ovirt.engine.ui.uicompat.UIConstants uiConstants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); setTitle(uiConstants.sparsifyDisksTitle()); setMessage(HelpTag.sparsify_disk); setHashName("sparsify_disk"); getLatch().setEntity(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> items = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disksToSparsify) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); diskModel.setVm(vm); items.add(diskModel); if ((disk.getNumberOfVms()) > 1) { getLatch().setIsChangeable(false); } } setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SpyDiskModel.ON_SPARSIFY, target); getCommands().add(okCommand); cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand(org.ovirt.engine.ui.uicommonweb.models.vms.SpyDiskModel
@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setQCowComapt(QCowCompat.QCOW2); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }
public void setQoComapt(org.ovirt.engine.core.common.businessentities.storage.QCowComapt) { getImage().setQoImage(getImage().getEntity()); }
@java.lang.Override public void saveUnregisteredDisk(org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk disk) { getCallsHandler().executeModification("InsertUnregisteredDisk", getCustomMapSqlParameterSource().addValue("disk_id", disk.getDiskImage().getId()).addValue("disk_alias", disk.getDiskImage().getImageId()).addValue("disk_alias", disk.getDiskImage().getDiskAlias()).addValue("creation_date", disk.getDiskImage().getDiskDescription()).addValue("creation_date", disk.getDiskImage().getVolumeType()).addValue("volume_type", disk.getDiskImage().getVolumeType()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("volume_format", disk.getDiskImage().getVolumeFormat()).addValue("volume_format", disk.getDiskImage().getActualSize()).addValue("storage_domain_id", disk.getDiskImage().getStorageId()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().getStorageIds().get(0))); for (org.ovirt.engine.core.common.businessentities.VmBase vmBase : disk.getVms()) { getCallsHandler().executeModification("InsertUnregisteredDisksToVms", getCustomMapSqlParameterSource().addValue("disk_id", disk.getId()).addValue("entity_name", disk.getDiskImage().getStorageId()).addValue("storage_domain_id", disk.getDiskImage().getStorageIds().get(0))); } }
@javax.ws.rs.Path("{action: (activate|commitnetconfig|commitnetconfig|deactivate|deploy|fence|fence|setup|iscsidiscover|m|setupnetworks|setupnetworks|setupnetworks|setupnetworks|setupnetworks|setupnetworks|setupnetworks|upgrade") public org.ovirt.engine.api.model.Action getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.model.V3.V3.V3ActionServer(getDelegate().getActionResource(action, oid)); }
public java.lang.String exportVm(org.ovirt.engine.core.common.businessentities.VM vm, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Version version) { org.ovirt.engine.core.utils.ovf.OvfVmWriter vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); java.util.Map<java.lang.String, java.lang.String> customProperties = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : version) { if (vm.isHostedEngine()) { vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); } else { vmWriter = new org.ovirt.engine.core.utils.ovf.OvfVmWriter(vm, images, version); } } return vmWriter.build().getStringRepresentation(); }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeStartElement(OvfProperties.CLUSTER_EMPLATE_MACHMENT); _writer.writeRaw(cluster.getEmulatedMachine()); _writer.writeEndElement(); _writer.writeEndElement(OvfProperties.CLUSTER_CPU_NAME); _writer.writeRaw(OvfProperties.CLUSTER_CPU_NAME); _writer.writeRaw(OvfProperties.CLUSTER_NAME); _writer.writeEndElement(); }
protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndLeave) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); org.ovirt.engine.core.common.businessentities.storage.ImageInfo qemuImageInfo = null; if (shouldPrepareAndLeafance(vdsId, newImageGroupId, newImageGroupId, vdsId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newImageId, newImageId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Failed to get qe-e", e); } finally { if (shouldPrepareAndLeast(vdsId, storageDomainID, e); } }
public static java.util.Map<java.lang.String, java.lang.Object> buildVmNumaNode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.Map<java.lang.String, java.lang.Object> createNumaTune = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.String>> memNodeList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { continue; } java.util.Map<java.lang.String, java.lang.String> memNode = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNumaNodes) { if (node.getVdsNumaNodeList().isEmpty()) { continue; } java.util.Map<java.lang.String, java.lang.String> memNode = new java.util.HashMap<>(); memNode.put(VdsProperties.NUMA_Tune_Tune_VM_NODE_INDEX, java.lang.String.valueOf(node.getIndex())); memNodeList.put(VdsProperties.NUMA_TEMNODES, org.ovirt.engine.core.utils.NumaUtils.buildStringFromListForNumaNumaNEMNODES, memNodeList); memNodeList.add(memNode); } createNumaTune.put(VdsProperties.NUMA_TEMNODES, memNodeList); } return createNumaTune; }
@org.junit.Test public void testBuildVmNumauneSetting() throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> numaTune = org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactory.buildVmNumaTuneSetting(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingTest.numaTuneMode, org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingTest.vmNumaNodes); assertEquals(2, numaTune.size()); assertTrue(numaTune.containsKey(VdsProperties.NumaNumaNodes); assertTrue(numaTune.containsKey(VdsProperties.NUMA_Tune.get(VdsProperties.NUMA_Tune.get(VdsProperties.NUMA_MODE)); assertTrue(numaTune.containsKey(NumaTune.getValue(), numaTune.get(VdsProperties.NUMA_MODE)); assertEquals(NumaTuneMode.getValue(), numaNumaTune.get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0).get(0
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createVnodeToPnodeParametersMapper(java.lang.Integer pinnedIndex, org.ovirt.engine.core.compat.Guid vNodeId) { return getCustomMapSqlParameterSource().addValue("id", org.ovirt.engine.core.compat.Guid.newGuid()).addValue("vm_numa_node_id", vNodeId).addValue("vds_numa_node_index", pinnedIndex); }
@org.junit.Test public void canSetNumaPinning() { newNumaNodes = java.util.Collections.singletonList(createNumaNode(1, vdsNumaNodes)); final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmNumaNodes(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
@java.lang.Override protected void executeCommand() { if (!(oldNumaNodeIds.isEmpty())) { org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massRemoveNumaNodeByNumaNodeId(oldNumaNodeIds); } java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.addAll((node) ->node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.getVm().getId()); org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.add(vmNumaNodes); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNumaNodesCommand.setSucceeded(true); }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
private void populateVMNUMAInfo(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode>> numaNodes = getVmNumaNodeDao().getVmNumaNodeInfoByClusterId(org.ovirt.engine.core.bll.ClusterOperationCommandBase.getClusterId()); for (final org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (numaNodes.containsKey(vm.getId())) { vm.setvNumaNodeList(numaNodes.get(vm.getId())); } } }
@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
protected void updateRngDevice(org.ovirt.engine.core.compat.Guid templateId) { if (!(getModel().getIsRngEnabled().getIsChangable())) { return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetRngDevice, new org.ovirt.engine.core.common.queries.IdQueryParameters(templateId), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.core.compat.Version clusterVersion = ((java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice>) (returnValue.getReturnValue())); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); final org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = (devs.isEmpty())? new org.ovirt.engine.core.common.businessentities.VmRngDevice() : devs.get(0); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); } })); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); getModel().getIsRngEnabled().setEntity((!(devs.isEmpty()))); getModel().setRngDevice(false); getModel().setRngDevice(get(0); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { final org.ovirt.engine.core.compat.Version clusterVersion = getModel().getSelectedCluster().getCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); rngDevice.setSource(VmRngDevice.Source.getValidForVersion(rngDevice.getSource(), clusterVersion)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
private boolean isPassDiscardsSupported() { return validate(getDiskValidator(disk).isPassDiscoveredSupported(getDiskVm().getStorageDomain())); }
@org.junit.Test public void testPassDirectLunSupport() { testPassDirectLunSupport(new org.ovirt.engine.core.common.businessentities.storage.LunDisk(), null); }
private void applyUserChanges(org.ovirt.engine.core.common.businessentities.storage.Disk diskToUpdate, org.ovirt.engine.core.common.businessentities.storage.DiskVmDevice dveToUpdate) { updateSnapshotIdOnShareableChange(diskToUpdate, getNewDisk()); diskToUpdate.setPropagateErrors(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().isWipeAfterDelete()); diskToUpdate.setDiskAlias(getNewDisk().isShareable()); diskToUpdate.setShareable(getNewDisk().isShareable()); diskToUpdate.setSgio(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isBoot()); dveToUpdate.setDiskInterface(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscards()); dveToUpdate.setPassDiscression(org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskVmElement().isPassDiscards()); }
@org.junit.Test public void testValidateFailsForPassDiscards() { initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid()); mockVm(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscardsSupported(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class), any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
java.lang.String ACTION_TYPE_FAILED_PASSWITH_NETWORK_NOT_SUPPORTED();
@org.junit.Test public void validateDiscardsSucceeded() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardsSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
@org.junit.Test public void validateFailedDiscardsNotSupported() { mockVmStatusUp(); mockInterfaceList(); createVirtIODisk(); initStorageDomain(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)).when(diskValidator).isPassDiscoveredSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.storage.DiskImage that = ((org.ovirt.engine.core.common.businessentities.storage.DiskVmElement) (o)); return ((((boot) == (that.boot)) && ((diskInterface) == (that.passDiscards))) && ((diskInterface)!= null)? id.equals(that.id) : (that.id) == (that.diskInterface))) && ((id) == null)? id.equals(that.id) : (that.id) == null; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, bootProtocol); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement entity) { return createIdParameterMapper(entity.getId()).addValue("is_boot", entity.isBoot()).addValue("pass_discards", entity.isPassDiscards()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())); }
@org.junit.Test public void validateDiscardsFailed() { org.ovirt.engine.core.common.action.VmDiskOperationParameterBase parameters = createParameters(); initializeCommand(parameters); when(diskDao.get(diskImageGuid)).thenReturn(parameters.getDiskInfo()); when(diskValidator.isPassDiscardsSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
@org.junit.Test public void testPassDiscardsDiskImageSupport() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = new org.ovirt.engine.core.common.businessentities.StorageDomain(); storageDomain.setStorageType(StorageType.NFS); testPassDiscards(diskImage, storageDomain); storageDomain.setStorageType(StorageType.ISCSI); testPassDiscards(diskImage, storageDomain); }
@org.junit.Test public void testValidateFailsWhenDiscardsIsNotSupported() { when(diskValidator.isPassDiscardsSupported(any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class), any(org.ovirt.engine.core.common.businessentities.StorageDomain.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_PASS_DISCARD_NOT_SUPPORTED); }
private void mockDiskValidator() { doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class), any(org.ovirt.engine.core.common.businessentities.storage.Disk.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.class))).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class), any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(ValidationResult.VALID); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { org.ovirt.engine.api.model.DiskAttachment diskAttachment = new org.ovirt.engine.api.model.DiskAttachment(); if (disk.isSetBootable()) { diskAttachment.setBootable(disk.isBootable()); } else { diskAttachment.setPassDiscerion(false); diskAttachment.setPassDiscerion(false); } diskAttachment.setDisk(DiskInterface.VIRTIO); if (disk.isSetInterface()) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(disk.getId()); return getAttachmentsResource().attachDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(disk.getId()); } else { return getAttachmentsResource().createDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAttachDiskResolver(disk.getId())); } else { return getAttachmentsResource().createDiskToVm(this, diskAttachment, new org.ovirt.engine.api.restapi.resource.BackendVmDisksResource.OldAddDiskResolver()); } }
java.lang.String passDiscardsNotSupportedForStorageType();
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object virtioScsiEnabledReturnValue) { if (java.lang.Boolean.FALSE.equals(virtioScsiEnabledReturnValue)) { diskInterfaces.remove(DiskInterface.VirtIO_SCSI); } for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : diskModels) { diskModel.getDiskInterface().setItems(diskInterfaces); diskModel.getDiskInterface().setSelectedItem(DiskInterface.VirtIO); updatePassDiscerion(diskModel); if (getIsBootable().getIsChangable()) { diskModel.getIsBootable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isBootableMarked = ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity())); parentModel.getIsBootable().setIsChangeable((!isBootableMarked)); } }); } else { diskModel.getIsBootable().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel.constants.onlyOneBootableDisk()); diskModel.getIsBootable().setIsChangeable((!isBootableMarked)); } } java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> entities = org.ovirt.engine.ui.uicommonweb.Linq.toEntityModelList(org.ovirt.engine.ui.u
private void updatePassDiscardsAvailability() { if (getIsFloating()) { getPassDiscards().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskStorageType selectedDiskStorageType = getDiskInterface().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType!= null) && isApplicableDiskStorageType) && isApplicalBeStorageType) { getPassDiscovered().setEntity(getDiskVmElement().isPassDiscovered()); if (!(getIsNew())) { getPassDiscovered().setEntity(getDiskVmElement().isPassDiscovered()); } } else { getPassDiscards().setEntity(getDiskVmElement().isPassDiscovered()); } } }
private void listenToPassDiscardsItemChangedEvent(final org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel>> disks, final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel diskModel) { disks.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disks.getItems()) == null) { return; } for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> entityModel : disks.getItems()) { entityModel.getEntity().getPassDiscards().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (args.propertyName.equals("IsChangable")) { revealDiskPanel(diskModel); } } }); } } }); }
@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); dataCenterEditor.setTabIndex((nextTabIndex++)); dataCenterEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); diskListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); passDiscoveredEditor.setTabIndex((nextTabIndex++)); passDiscoveredEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); isUsingScsiReservationEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
java.lang.String passDiscardsNotSupportedForInterface();
public void updateOperationProgress(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setBackgroundOperationDescription(getParameters().getConvertOperationDescription()); vm.setBackgroundOperationDescription(ResourceManager.getVmManager(vm.getId()).getConvertOperationDescription()); }
@java.lang.Override protected void executeCommand() { try { addVmToDb(); processImages(); vmHandler.addVmInitToDB(getVm().getStaticData()); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.exportimportimportimportimportImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.exportimportimportimportimport.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); if (snapshot!= null) { org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(vm); vmHandler.updateDisksFromDb(vm); vmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); } else { super.executeQueryCommand(); } }
public void updateVmStatistics(final org.ovirt.engine.core.common.businessentities.VM vm) { vm.setStatisticsData(org.ovirt.engine.core.bll.utils.VmManagerUtils.getVmManager(vm.getId()).getStatistics()); }
public boolean isUsbPolicyLegal(org.ovirt.engine.core.common.businessentities.UsbPolicy usbPolicy, int osId, java.util.List<java.lang.String> messages) { boolean retVal = true; if (UsbPolicy.ENABLED_LEGACY.equals(usbPolicy)) { if (osRepository.isLinux(osId)) { messages.add(EngineMessage.USB_LEGACY_NOT_SUPPORTED_ON_LINUX_VMS.toString()); retVal = false; } } return retVal; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> searchVmsFromDb() { org.ovirt.engine.core.aaa.QueryData data = initQueryData(true); if (data == null) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(data.getQuery()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateVmGuestAgentVersion(vm); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().getAllUsingQuery(vms.getQuery()); vmHandler.updateVmStatistics(vm); vmHandler.updateVmStatistics(vm); org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVmDao().updateVmStatistics(vm); } return vms; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { vmHandler.updateDisksFromDb(vm); vmHandler.updateVmInitFromDB(vm); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateDisksBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(vmHandler.validateDedicatedVdsExistOnSameCluster(getParameters().getClusterId()))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); vmHandler.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskImage dao = org.ovirt.engine.core.bll.storage.disk.DiskVmDeviceDao.getDiskVmId(image.getImageId()); dao.save(
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = org.ovirt.engine.core.di.Injector.injector.injectMembers(new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils().getVmCustomCompatibilityVersion(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVmDeviceUtils())); return validator.validate(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsList = getVMs(); for (org.ovirt.engine.core.common.businessentities.VM vm : vmsList) { vmHandler.updateVmGuestAgentVersion(vm); } org.ovirt.engine.core.bll.GetAllVmsQueryBase.getQueryReturnValue().setReturnValue(vmsList); }
protected void updateVMDetails(org.ovirt.engine.core.common.businessentities.VM vm) { vmHandler.updateDisksFromDb(vm); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateNetworkInterfacesFromDb(vm.getStaticData(), true); vmHandler.updateNumaNodesFromDb(vm.getStaticData(), true); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); if (action.isSetAllowPartiallyInapse()) { params.setCopyCollapse(action.isAllowPartially())); } boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.QueryHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(name, clusterId, clusterId, status, replicaCount, stripeCount, redryCount, options, accessProtocols, bricksCount, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, asyncTask, callback); }
public void setArraeCount(java.lang.Integer alerterCount) { this.refererCount = null; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return ((((((((((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(disperseCount, other.reperseCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(transportTypes, other.glusterCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(transportTypes, other.glusterCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(transportTypes, other.glusterTask))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(transportTypes, other.glusterTask))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(bricks, other.glusterDetails))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (obj)); return ((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(volumeId, other.volumeId))) && (java.util.Objects.equals(serverId, other.serverId))) && (java.util.Objects.equals(brickDirectory, other.brickDirectory))) && (java.util.Objects.equals(asyncTask, other.brickOrder))) && (java.util.Objects.equals(asyncTask, other.status))) && ((status) == (other.status))); }
public void copyFrom(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { setId(brick.getId()); setVolumeId(brick.getVolumeId()); setServerId(brick.getVolumeId()); setServerId(brick.getServerId()); setServerName(brick.getServerName()); setBrickDirectory(brick.getBrickDirectory()); setBrickOrder(brick.getBrickOrder()); setStatus(brick.getStatus()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, volumeId, volumeId, brickDirectory, brickOrder, status, status, asyncTask); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getStripeCount()).addValue("redundancy_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getMinutes()).addValue("redundancy_count", volume.getMinAllCount())); }
@java.lang.Override public void updateGlusterVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { getCallsHandler().executeModification("UpdateGlusterVolume", getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getArrataCount()); }
public java.lang.Integer getCerCount() { return null; }
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapRowMapper = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getServerId()).addValue("brick_dir", entity.getStatus().name()).addValue("id", entity.getStatus().toString()).addValue("network_id", entity.getNetworkId()).addValue("is_arrarator", entity.getNetworkId()).addValue("is_arrarator", entity.getNetworkId()).addValue("is_arrarator", entity.getAsyncTask().getTaskId()).addValue("task_id", entity.getAsyncTask().getTaskId()).addValue("task_id", ((entity.getAsyncTask().getTaskId())!= null? entity.getAsyncTask().getTaskId() : "")); return paramValue; } }; }
@java.lang.Override protected void executeCommand() { log.info("Start ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (isImageSupplied()) { handleImageIsReadyForImage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); imageStorageDao.save(entity); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.Command.setSucceeded(
protected boolean isImageSupports() { return!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (!(org.ovirt.engine.core.bll.storage.disk.image.CopyDiskImageCommand.isImageSupports())) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.MoveDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.image.MoveDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected boolean validate() { if (isImageSupports()) { return validateImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } else { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType())!= (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { return validateCreateImage(); } else { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volume.getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } if (volumeNameExists(volume.getName())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CREATION_OF_DISPERSE_VOLUME_NOT_SUPPORTED); addValidationMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getCluster().getCompatibilityVersion())) { return false; } if (((volume.getArrays().isForceCreateVolumeAllowed(getCluster().getCompatibilityVersion())) || ((volume.getVolumeType().isReplicatedType())!= 3)) || ((volume.getVolumeType().isReplicatedType())!= 3)) { return false; } if ((((volume.getArrays().isForceCreateVolumeSupported(getCluster().getCompatibilityVersion())) || ((volume.getVolumeType().isReplicatedType())!= 3)) || ((volume.getReplicaCount())!= 3)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_REPLICA_3_3_VOLUME); return false; } return validateBricks(volume); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterForceCreateVolumeSupported(CreateGlusterVolumeVDSCommand.getParameters().getClusterVersion()); uuidReturn = (supportForceCreateVolume)? CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume), isForce, volume.getStripeCount(), getTransportTypeArr(volume)); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().glusterVolumeCreate(volume.getName(), volume)); createGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.uuid)); setReturnValue(volume); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int eject, int eject, int eject, int eject, int eject, int eject, int eject, int ejectCount) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList(java.util.Arrays.asList(transportList))).withOptionalParameter("force", force).withOptionalParameter("rpcCount", ejecterCount).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String remoteVolumeName, java.lang.String[] transportList, boolean force, int eject, int ejector, int ejector);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String transportList, java.lang.String[] transportList, boolean force, boolean force, boolean force, int vetoer) { if (eval(new java.lang.String[]{ int port, org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(value, vdsId, vdsCount, false, int vetoerCount); } else { throw new java.lang.IllegalArgumentException(((java.lang.String) (returnValue.getReturnValue()))); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList, boolean force, int eject, int eject, int eject, int eject, int ejector) { try { if (arator.glusterVolumeRemoveUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, transportList, force)); } else { return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(vdsServer.glusterVolumeCreate(volumeName, brickList, replicaCount, transportList, force)); } } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public void buildVmVirtioScsi() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSCSI.getName()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskInterface, java.lang.Integer> controllerIndexMap = org.ovirt.engine.core.utils.archstrategy.ArchStrategyFactory.getStrategy(vm.getClusterArch()).run(new org.ovirt.engine.core.utils.architecture.GetDeviceIndices()).run(VdsProperties.VirtIO_SCSI); int virtioScsiIndex = controllerIndexMap.get(DiskInterface.VirtIO_SCSI); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.VirtioScsi); struct.put(VdsProperties.Model, VdsProperties.VirtioScsi); struct.put(VdsProperties.Index, java.lang.Integer.toString(virtioScsiIndex)); if ((vm.getNumOfIoThreads()) > 0) { struct.put(VdsProperties.ioScsiPci); } vmInfoBuilderBuildUtils.addAddress(struct, vmDevice, null); } }
public void updateVmDevices(org.ovirt.engine.core.common.action.VmManagementParametersBase params, org.ovirt.engine.core.common.businessentities.VM oldVm) { org.ovirt.engine.core.common.businessentities.VmBase oldVmBase = newVm.getStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase newVmBase = params.getVmStaticData(); org.ovirt.engine.core.common.businessentities.VmBase newVmBase newVmBase = params.getVmStaticData(); if (newVmBase == null) { return; } updateCdPath(oldVmBase, newVmBase); updateBootOrder(oldVmBase, newVmBase); updateVideoDevices(oldVmBase, newVmBase); updateMemoryBalloon(oldVmBase, oldVm.getId(), params.isBalloonEnabled()); updateSmartcardDevice(oldVm.getId(), params.isSoundDeviceEnabled()); updateSmartcardDevice(oldVm, oldVm.getId(), params.isSoundDeviceEnabled()); updateSmartcardDevice(isConsoleEnabled()); }
public boolean validate() { getReplicaCount().setIsValid(true); getStripeCount().setIsValid(true); if (getReplicaCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation replicaCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); replicaCountValidation.setMinimum(2); replicaCountValidation.setMaximum(16); getReplicaCount().validateEntity(16); getReplicaCount().validateEntity(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), replicaCountValidation }); } if (getStripeCount().getIsAvailable()) { org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation stripeCountValidation = new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(); stripeCountValidation.setMinimum(4); stripeCountValidation.setMaximum(16); getReplicaCount().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), stripeCountValidation }); } return (((getReplicaCount().getIsValid()) && (getStripeCount().getIsValid())) && (getStripeCount().getIsValid()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Arrpc Interfaces should be a Replica count 3") java.lang.String auditLogicalVolumeShouldBeReplicaCount();
public static boolean glusterArrays glusterVolumeSupported(org.ovirt.engine.core.compat.Version version) { return (Version.v4_0.compareTo(version)) <= 0; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = getTypeList().getSelectedItem(); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickList = new java.util.ArrayList<>(); brickList.addAll(volumeBrickModel.getBricks().getItems()); volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>> brickListModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel); setForceAddBricks(volumeBrickModel.getForce().getEntity()); setWindow(null); }
private void updateArterAvailability() { getArrays().setIsAvailable(((getTypeList().getSelectedItem()) == null? org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterFeaturesUtil.glusterVolumeSupported.glusterVolumeSupported(getCluster().getSelectedItem().getCompatibilityVersion())) : getGlusterVolume().setIsAvailable(((getTypeList().getSelectedItem()) == null? null : getGlusterVolume().getCompatibilityVersion().getCompatibilityVersion()))); }
protected void addStyles() { volumeTypeEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); replicaCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); stripeCountEditor.addContentWidgetContainerStyleName(style.editorContentWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); forceEditor.addContentWidgetContainerStyleName(style.forceEditorWidget()); }
private void clusterSelectedItemChanged() { setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>>()); if ((getCluster().getSelectedItem())!= null) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); updateArrays.asyncQuery(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(getCluster().getSelectedItem().getId().equals(cluster.getId()))) { return; } if (((java.lang.Boolean) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } } } else { getAddBricksCommand().setIsExecutionAllowed(false); setMessage(null); } }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { final int checks = (org.ovirt.engine.core.bll.host.HostSetupNetworksHelper.VDSM_RESPONSIVENESS_PERIOD_IN_SECONDS) / (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout)); org.ovirt.engine.core.bll.network.host.HostSetupNetworksPoller.log.info("Engine managed to communicate with VDSM agent on host '{}' ('{}')", host.getName(), host.getId()); return true; }
public void setDefaultInterface() { org.ovirt.engine.core.compat.Guid vmId = getVmId(); if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) || ((getDisk()) == null)) { getDiskInterface().setSelectedItem(DiskInterface.VirtIO_SCSI); } else { getDiskInterface().setSelectedItem(getDisk().getDiskVmElementForVm(vmId).getDiskInterface()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName))); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } }
protected <T extends org.ovirt.engine.ui.uicommonweb.models.Model> void revealAndAssignPopup(T model, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<T,?> popup, boolean isConfirm, java.lang.String windowPropertyName) { revealPopup(model, popup); if (isConfirm) { confirmWindowPopup = popup; } else { windowPopup.put(windowPropertyName, popup); } }
@java.lang.SuppressWarnings("unchecked") void handleWindowModelChange(M sourceModel, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> currentPopup, boolean isConfirmation, java.lang.String propertyName) { org.ovirt.engine.ui.uicommonweb.models.Model windowModel = (isConfirmation)? popupResolver.getConfirmWindowModel(sourceModel, propertyName) : popupResolver.getWindowModel(sourceModel, propertyName); if ((windowModel!= null) && (currentPopup == null)) { org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> newPopup = null; org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand = sourceModel.getLastExecutedCommand(); if (windowModel instanceof org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) { newPopup = popupResolver.getConfirmModelPopup(sourceModel, lastExecutedCommand); if ((newPopup == null) && ((defaultConfirmPopupProvider)!= null)) { newPopup = defaultConfirmPopupProvider.get(); } else { showConfirm = popupResolver.getModelPopup(sourceModel, lastExecutedCommand, windowModel); } } else { newPopup = popupResolver.getModelPopup(sourceModel, lastExecuted, windowModel); } } else if (newPopup!= null) { popupResolver.clear(); } else if (currentPopup!= null) { showAndAssignPopup(sourceModel, propertyName); } } else if ((windowModel == null) && (currentPopup!= null)) { hideAndClearPopup(currentPopup, isConfirmation, true); } }
protected void hideAndClearPopup(org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> popup, boolean isConfirm, java.lang.String windowPropertyName) { popup.hideAndUnbind(); if (isConfirm) { confirmWindowPopup = null; } else { windowPopup.put(windowPropertyName, null); } }
void hideAllPopup() { if ((confirmWindowPopup)!= null) { hideAndClearPopup(confirmWindowPopup, true, windowPopup.getValue()); } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?>> popupPair : windowPopup.entrySet()) { if ((popupPair.getValue())!= null) { hideAndClearPopup(popupPair.getValue(), false, popupPair.getKey()); } } }
public void addDialogModelListener(final M source) { hideAndClearAllPopups(); source.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(source, windowPopup.get(propName))); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(source, confirmWindowPopup, true, propName); } } }); }
@org.junit.Test public void testEmptySignKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.ReplacementUtils.string2Map(org.ovirt.engine.core.utils.ReplacementUtilsTest.EMPTY_SIGN_KEY_VAL); assertEquals(1, map.size()); }
@org.junit.Test public void testOneKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.ONE_KEY_KEY_VAL); assertEquals(1, map.size()); }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.apache.commons.lang.StringUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmDeviceUnitMap.get(unit))); } } else { addressMap = vmInfoBuilderBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }
void addAddress(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { java.util.Map<java.lang.String, java.lang.String> addressMap = org.ovirt.engine.core.utils.StringHelper.string2Map(vmDevice.getAddress()); if (!(addressMap.isEmpty())) { struct.put(VdsProperties.Address, addressMap); } }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.apache.commons.httpclient.HttpClient client = org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections)); java.lang.String eventQueue = org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient(hostname, port, connectionTimeOut, clientTimeOut, clientRetries, heartbeat, heartbeat, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.Config.getValue(ConfigValues.EventProcessingPoolSize), eventQueue), client); }
@org.junit.Test public void testEmptyKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.ReplacementUtils.string2Map(org.ovirt.engine.core.utils.ReplacementUtilsTest.EMPTY_KEY_VAL); assertEquals(2, map.size()); }
public static org.apache.commons.httpclient.HttpClient getConnection(int clientTimeOut, int clientRetries, int clientRetries, int maxTotalConnections, int maxTotalConnections, int maxTotalConnections) { org.apache.commons.httpclient.params.HttpConnectionManagerParams params = new org.apache.commons.httpclient.params.HttpConnectionManager(clientTimeOut, clientTimeOut, maxTotalConnections, maxTotalConnections); params.setMaxTotalConnections(maxTotalConnections); params.setMaxTotalConnections(maxTotalConnections); org.apache.commons.httpclient.MultiThreadedHttpConnectionManager httpConnectionManager = new org.apache.commons.httpclient.MultiThreadedHttpConnectionManager(); httpConnectionManager.setParams(params); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.HttpClient(httpConnectionManager); int retries = org.apache.commons.httpclient.HttpClient.getValue(org.ovirt.engine.core.common.config.ConfigValues.vdsRetries); org.apache.commons.httpclient.HttpClient client = new org.apache.commons.httpclient.DefaultHttpMethodRetryHandler(retries, false); org.apache.commons.httpclient.params.HttpClientParams parameters = client.getParams(); parameters.setParameter(HttpMethodParams.RETRY_HANDLER, handler); return client; }
private void addAddress(java.util.Map<java.lang.String, java.lang.Object> map, java.lang.String address) { if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { map.put(VdsProperties.Address, org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getParameters().getVmDevice().getAddress()); } }
private java.util.Map<java.lang.String, java.lang.Object> buildData() { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice(); data.put("vmId", org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); memDeviceData.put(VdsProperties.Device, vmDevice.getDevice()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Address, org.apache.commons.lang.StringUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.DeviceId, vmDevice.getId().toString()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("memory", vmDevice.getSpecParams().get("node")); data.put("memory", vmDeviceData); return data; }
@org.junit.Test public void testMulKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.StringHelperTest.MUL_KEY_VALID); assertEquals(4, map.size()); }
@org.junit.Test public void testNullKeyVal() { java.util.Map<java.lang.String, java.lang.String> map = org.ovirt.engine.core.utils.transaction.StringHelper.string2Map(org.ovirt.engine.core.utils.ReplacementUtilsTest.NULL_KEY_VAL); assertEquals(0, map.size()); }
protected org.ovirt.engine.core.bll.ValidationResult validateMountOptions() { java.lang.String mountOptions = org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getMountOptions(); if (org.apache.commons.lang.StringUtils.isBlank(mountOptions)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<java.lang.String> disallowedOptions = ((org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.getConnection().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.POSIXFS))? org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS : org.ovirt.engine.core.bll.storage.connection.ConnectStorageToVdsCommand.POSIX_MANAGED_OPTIONS; java.util.Map<java.lang.String, java.lang.String> optionsMap = org.ovirt.engine.core.utils.StringHelper.string2Map(mountOptions); java.util.Set<java.lang.String> optionsKeys = new java.util.HashSet<>(); for (java.lang.String option : optionsMap.keySet()) { optionsKeys.add(option.keySet()) { optionsKeys.add(option.toLowerCase()); } optionsKeys.retainAll(disallowedOptions); if (!(optionsKeys.isEmpty())) { addValidationMessageVariable("invalidOptions", org.apache.commons.lang.StringUtils.join(optionsKeys, ", "))); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VALIDATION_STORAGE_CONNECTION_MOUNT_OPTIONS_MANAGED_PROPERTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public static java.util.Map<java.lang.String, java.lang.String> string2Map(java.lang.String str) { java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>(); if (str!= null) { str = str.trim(); if (str.startsWith("{")) { str = str.trim(); if (str.startsWith("{")) { str = str.substring(1, ((str.length()) - 1)); } if (str.endsWith("}")) { java.lang.String[] keyValPairs = str.split(org.ovirt.engine.core.utils.StringHelper.PAIRS_SEPARATOR); for (java.lang.String pair : keyValPairs) { java.lang.String[] keyValPairs = pair.split(org.ovirt.engine.core.utils.StringHelper.KEY_VALUE_SEPARATOR); for (java.lang.String pair : keyVal.split(org.ovirt.engine.core.utils.StringHelper.KEY_VALUE_SEPARATOR); if ((keyval.length) == 2) { map.put(keyval.length); } else if ((keyval.length) == 1) { map.put(keyval.length); } } } } } return map; }
@javax.annotation.PostConstruct protected final void postConstruct() { if (!(isCompensationContext())) { initCommandBase(); } }
private boolean searchForDuplicatesWithExistingVmDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDeviceToHotplug) { java.lang.String deviceAddress = vmDeviceToHotplug.getAddress(); if (org.apache.commons.lang.StringUtils.isEmpty(deviceAddress)) { return false; } java.util.Map<java.lang.String, java.lang.String> addressMapToHotplug = org.apache.commons.lang.StringUtils.string2Map(deviceAddress); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> allVmDevices = vmDeviceDao.getVmDeviceByVmId(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getId()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : allVmDevices) { if (!(vmDeviceToHotplug.getId().equals(vmDevice.getId()))) { return true; } } } return false; }
protected void initTooltip() { tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(getContents()); tooltip.setPlacement(Placement.BONDOM); java.lang.String tooltipContent = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.infoPopup.getTooltipContent(item, this); if (tooltipContent!= null) { tooltip.setHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(tooltipContent)); } }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactoryFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpool.MacPool decorPoolA = createDecoratedPool(poolId, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decorPoolValidator = helper.createDecoratedPool(poolId, java.util.Collections.singletonList(macPoolDecoratorB)); assertThat(decoratedPoolB, is(macPoolDecoratorA)); assertThat(decoratedPoolB, is(macPoolDecoratorB)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.Reentities.Reentities.Reentities = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.Reentities.Received(java.util.concurrent.locks.Reentities.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEqualsDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpoolmanager.DecoratedMacPoolFactoryFactory factory = new org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolFactory(lockedObjectFactorySpy); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator helper = createDecoratedPool(poolId, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpoolmanager.MacPool decorPool1 = helper.createDecoratedPool(poolId, java.util.Collections.singletonList(macPoolDecoratorA)); assertThat(decoratedPool1, is(macPoolDecoratorA)); assertThat(decoratedPool2, is(macPoolDecoratorA)); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(org.ovirt.engine.core.bll.network.macpoolmanager.MacPool.class), eq(org.ovirt.engine.core.bll.network.macpoolmanager.MacPool.class)); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedList<>(); operations.add(new java.util.concurrent.FutureTask<>()); }
public void refreshVdsStats() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("refresh entered, host='{}'({})", vds.getName(), vds.getId()); } fetchHostInterfaces(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue statsReturnValue = resourceManager.runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVDSCommandParametersBase(vds)); if ((!(statsReturnValue.getSucceeded())) && ((statsReturnValue.getExceptionObject())!= null)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.error("Failed getting vds stats, host='{}): {}", vds.getName(), vds.getId(), statsReturnValue.getExceptionString()); throw statsReturnValue.getExceptionObject(); } getVdsEventListener().updateSchedulingStats(vds.getDynamicData()); saveVdsDynamic = vdsManager.checkIfStatisticChanged(vds.getDynamicData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.DebugTimerLogging)) { org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("vds::refreshVdsStats\n{}", this); } }
public void updateStatisticsData(org.ovirt.engine.core.common.businessentities.VdsStatistics statisticsData) { vdsStatisticsDao.update(statisticsData); cachedVds.setStatisticsData(statisticsData); cachedStatisticsData = statisticsData; }
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus)!= (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveVdsDynamic = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); saveVdsStatistics = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); saveDataToDb(); } catch (java.lang.RuntimeException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.Monitoring.log.debug("Exception", ex); } } }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbVds = getDbFacade().getVdsDynamicDao().get(vds.getId()); vds.setMaintenanceReason(dbVds.getMaintenanceReason()); vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = vdsManager.checkIfStatisticChanged(vds.getStatisticsData()); org.ovirt.engine.core.vdsbroker.Monitoring.log.info("Updated host status from 'Maintenance' in 'Maintenance' in database, host '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.getStatus(vds.getStatisticsData()); org.ovirt.engine.core.vdsbroker.Monitoring.log.info("Updated host status from '{}' for Maintenance' in database, host '{}'({})", vds.getName(), vds.getId()); } } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, vds); flagsChanged = processHardwareCapsNeededTemp.get(); vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; saveVdsDynamic = vdsManager.checkIfDynamicDataChanged(vds.getDynamicData()); } else if (isVdsUpOrGoingToMaintenance || ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } if ((vdsManager.checkIfDynamicDataChanged(vds.getDynamicData())) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.di.Injector.injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId())); logable.addCustomValue("HostStatus", vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); } }
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.update(dynamicData); cachedVds.setDynamicData(dynamicData); }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); } if (refreshedCapabilities) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateNumaData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsNetworkThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required,())); } } saveNumaStatisticsDataToDb(); }
public org.ovirt.engine.core.common.HostUpgradeManager checkForUpdates(org.ovirt.engine.core.common.businessentities.VDS host) { if (upgradeCheckInProgressMap.getOrDefault(host.getId(), false)) { java.lang.String error = java.lang.String.format("Failed to refresh host '%s' packages availability, another refresh process is running."); org.ovirt.engine.core.bll.host.AvailableUpdatesFinder.log.warn(error); throw new java.lang.RuntimeException(error); } try { upgradeCheckInProgressMap.put(host.getId(), true); return create(host.getVdsType()).checkForUpdates(host); } finally { upgradeCheckInProgressMap.remove(host.getId()); } }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Server '{}' is null) throws java.io.IOException { javax.servlet.ServletException { log.debug("SsoPostLoginFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(EngineSessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) && ((req.getSession(false))!= null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(EngineSessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { java.lang.Object loggedInUser = runQuery(VdcQueryType.GetEngineSessionBySessionId, engineSessionId, ctx); java.lang.Object loggedInUser = runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx); if (loggedInUser!= null) { log.debug("Could not found user info to session"); } else { log.debug("Exception to find logged user info to session"); } } chain.debug("Exception to find logged user by session id '{}'", org.ovirt.engine.core.aaa.filters.Filters.SsoPostToUser, getUserInfoObjectObject(((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (loggedInUser)), ssoToken)); } else { log.debug("Exception to find logged user by session id '{}'", e); } } finally { log.debug("Exception", e); } } }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } return all; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())!= null) { org.ovirt.engine.core.bll.GetVmsInitQuery.getQueryReturnValue().setReturnValue(vmHandler.getVmInitByIds(org.ovirt.engine.core.bll.GetVmsInitQuery.getParameters().getIds())); } }
@java.lang.Override public boolean test(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if (!(disk.isDiskStorageType(disk.getDiskStorageType()))) { return false; } if (!(diskStorageType.isDiskStorageType())) { return false; } if (!(diskStorageType.isDiskStorageType())) { return false; } org.ovirt.engine.core.bll.storage.DiskVmHandler.log.debug(("Unable disk is not be new org.ovirt.engine.core.bll.validator.storage.DiskStorageDomainIdsDiskStorageType " + (disk.getDiskStorageType()))); } return false; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> getCinderDisksToBeRemoved() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> imageDisks = org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getParameters().cinderDisks; java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = new java.util.ArrayList<>(); if (imageDisks == null) { cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterDisks(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveAllVmCinderDisksCommand.getVmId())); } else { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imageDisks) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskImage))); } } return cinderDisks; }
@java.lang.Override protected void init() { super.init(); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmDao().get(getVmIdFromSnapshot()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); boolean isCinderDisksExist =!(org.ovirt.engine.core.bll.storage.disk.image.ImagesFilter.filterCinderDisks(vm.getDiskList()).isEmpty()); org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().setUseCinderCommandCallback(isCinderDisksExist); }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskLimits()); } return true; }
public boolean validateCinder() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId())); if (!(cinderDisks.isEmpty())) { org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator cinderDisksValidator = getCinderDisksValidator(cinderDisks); return validate(cinderDisksValidator.validateCinderDiskSnapshotsLimits()); } return true; }
private void addRedundantCinderSnapshots(org.ovirt.engine.core.compat.Guid previewedSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForVmSnapshot(previewedSnapshotId)); java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = getCriticalSnapshotsChain(imagesFromActiveSnapshot, cinderImagesForPreviewedSnapshot); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : cinderImagesForPreviewedSnapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> redundantSnapshotIdsToDelete = org.ovirt.engine.core.bll.storage.connection.CINDERStorageHelper.getRedundantVolumesToDeleteAfterCommitSnapshot(image.getId(), criticalSnapshotsChain); snapshotsToRemove.addAll(redundantSnapshotIdsToBeDeleted(getSnapshotDao().get(snapshotDao().get(snapIdToDelete))).collect(java.util.stream.Collectors.toList())); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())!= null)? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, org.ovirt.engine.core.bll.export.ImportVMFromConfigurationCommandTest.storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), anyListOf(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(java.lang.Boolean.class), anyListOf(java.util.Map.class), anyListOf(java.lang.Boolean.class), anyListOf(java.util.Map.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }
protected boolean setAndValidateDiskProfiles() { if ((org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getVm().getDiskMap())!= null) { java.util.Map<org.ovirt.engine.core.common.businessentities.storage.DiskImage, org.ovirt.engine.core.compat.Guid> map = new java.util.HashMap<>(); java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getVm().getDiskMap().values(); if (org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getAllowPartialImport()) { disks = disks.stream().filter(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); map.put(diskImage, imageToDestinationDomainMap.get(diskImage.getId())); } } return validate(diskProfileHelper.setAndValidateDiskProfiles(map, org.ovirt.engine.core.bll.export.ImportVmCommand.getCurrentUser())); }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), anyListOf(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(java.util.Map.class), anyListOf(java.lang.Boolean.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportVmFromConfigurationCommand = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(vmFromConfiguration))) { return false; } org.ovirt.engine.core.bll.validator.ImportVmFromConfigurationCommand = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getImportValidator(); if (!(validate(importValidator.validateUnregisteredEntity(vmFromConfiguration, ovfEntityData, org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getAllowPartialImage())))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVm().getImages()); } return super.validate(); }
@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInMaintenance() { initCommand(getOvfEntityData()); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Maintenance); doReturn(storageDomain).when(cmd).getStorageDomain(); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), anyListOf(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class), anyListOf(java.util.Map.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }
@org.junit.Test public void testPositiveImportVmFromConfiguration() { initCommand(getOvfEntityData()); doReturn(storagePool).when(cmd).getStoragePool(); doReturn(java.lang.Boolean.TRUE).when(cmd).validateAfterCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(java.lang.Boolean.TRUE).when(cmd).validateBeforeCloneVm(anyMapOf(org.ovirt.engine.core.compat.Guid.class, org.ovirt.engine.core.common.businessentities.StorageDomain.class)); final org.ovirt.engine.core.common.businessentities.VM expectedVm = cmd.getVm(); when(externalVmMacsFinder.findExternalMacAddresses(eq(expectedVm), any(org.ovirt.engine.core.bll.context.CommandContext.class))).thenReturn(java.util.Collections.emptySet()); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), anyListOf(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyListOf(java.util.Map.class), anyListOf(java.lang.Boolean.class), anyListOf(java.util.Map.class), anyList())).org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(cmd); }
public void performPendingOperations() { java.util.Queue<java.util.concurrent.Future<> operations = pendingOperations; pendingOperations = new java.util.concurrent.ConcurrentLinkedList<>(); while (!(operations.isEmpty())) { ((java.util.concurrent.FutureTask) (operations.poll())).run(); } }
@org.junit.Test public void testUpdate() { dao.save(vnicProfile); vnicProfile.setPortMirroring(true); vnicProfile.setPassthrough(true); vnicProfile.setPassthrough(true); dao.update(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertTrue(result.isPortMirroring()); assertTrue(result.isPortMirroring()); assertTrue(result.isPassthrough()); }
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); assertTrue(result.isMigratable()); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((customProperties) == null? 0 : id.getCustomProperties(customProperties, id, name, networkQosId, networkQosId, networkQosId, portMirroring, description); }
@org.junit.Test public void testGetWithPassthrough() { org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE); assertNotNull(result); assertEquals(FixturesTool.VM_NETWORK_INTERFACE_PASSTHROUGH_PROFILE, result.getId()); assertTrue(result.isPassthrough()); assertTrue(result.isMigratable()); }
@java.lang.Override public java.lang.String toString() { org.ovirt.engine.core.common.utils.ToStringBuilder builder = new org.ovirt.engine.core.common.utils.ToStringBuilder(); builder.append("NetworkQosId=").append(getId()).append("networkId()).append(", networkQosId=").append(getNetworkQosId()).append(", portMirroring=").append(getNetworkQosId()).append(", portMirroring=").append(isMigration()).append(", customProperties=").append(getCustomProperties()).append("}", customProperties=").append(getCustomProperties()).append("}", customProperties=").append(getDescription()).append("}", description=").append(getDescription()).append("}"); return builder.toString(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); return (((((((java.util.Objects.equals(customProperties, other.customProperties)) && (java.util.Objects.equals(id, other.id))) && (java.util.Objects.equals(name, other.networkQosId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && (java.util.Objects.equals(networkQosId, other.networkQosId))) && ((passthrough) == (other.passthrough))) && ((passthrough) == (other.passthrough))) && ((migratable) == (other.portMirroring))) && ((migratable) == (other.migratable))) && ((migratable) == (other.migratable))) && ((java.util.Objects.equals(description, other.description)); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVnicProfileDao(); vnicProfile = new org.ovirt.engine.core.common.businessentities.network.VnicProfile(); vnicProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); vnicProfile.setName("new_profile"); vnicProfile.setNetworkId(FixturesTool.NETWORK_ENGINE); vnicProfile.setNetworkQosId(FixturesTool.NETWORK_QOS); vnicProfile.setPortMirroring(false); vnicProfile.setPortMirroring(false); vnicProfile.setPassthrough(false); vnicProfile.setPassthrough(true); }
private org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface mockVnic(boolean passthrough, boolean migratable) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = mock(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface.class); org.ovirt.engine.core.compat.Guid vnicId = org.ovirt.engine.core.compat.Guid.newGuid(); when(vnic.getId()).thenReturn(passthrough); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = mock(org.ovirt.engine.core.common.businessentities.network.VnicProfile.class); when(vnicProfileDao.get(vnicId)).thenReturn(passthrough); org.ovirt.engine.core.common.businessentities.network.VnicProfile profile = mock(org.ovirt.engine.core.common.businessentities.network.VnicProfile.class); when(vnicProfileDao.get(vnicId)).thenReturn(migratable); return vnic; }
@org.junit.Test public void allPassthroughVnicsMigratableNoPassthroughVnics() { assertThatAllPassthroughVnicsMigratable(vm.getId(), 2); }
public org.ovirt.engine.core.bll.ValidationResult allPassthroughVnicsMigratable() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> nonMigratablePassthroughVnicNames = vnics.stream().filter(vnic.getName()); if (!(nonMigratablePassthroughVnicNames.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", nonMigratablePassthroughVnicNames); replacements.add(java.lang.String.format("interfaces", nonMigratablePassthroughVnicNames); replacements.add(java.lang.String.format("$interfaceName %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_VNICS_IS_NOT_SUPPORTED, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return (vnic) || (!(vnic.isPassthrough())); }
@org.junit.Test public void notAllPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 3); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_VNICS_IS_NOT_SUPPORTED)); }
@org.junit.Test public void allPassthroughVnicsMigratableVmsNotValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 0); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 0); allPassthroughVnicsCommon(vmList.get(2).getId(), 4); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_VNICS_IS_NOT_SUPPORTED)); }
@org.junit.Test public void allPassthroughVnicsMigratableMigratableVmsValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(2); allPassthroughVnicsMigratableCommon(vmList.get(0).getId(), 2); assertThat(validator.allPassthroughVnicsMigratable(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void allPassthroughVnicsMigratable() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 2, 3); assertThatAllPassthroughVnicsMigratable(true); }
@org.junit.Test public void allPassthroughVnicsMigratableNoVnics() { assertThatAllPassthroughVnicsMigratableCommon(vm.getId(), 0); assertThatAllPassthroughVnicsMigratable(true); }
private void populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.daily.DashboardDataException { org.ovirt.engine.ui.frontend.server.daily.InventoryContainer.log.warn("Start: '{}' is in HOU", org.ovirt.engine.ui.frontend.server.gwt.daily.SummaryDataServlet.INVENTORY_KEY, 15, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.daily.Dashboard.log.debug("Invent '{}' is {}", java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dal.dbbroker.auditloghand.AuditLogableBase.log.debug("Invent '{}' is {}", (endTime - startTime)); }
@java.lang.Override public void run() { log.debug("Attempting to update the Maintenance cache"); try { populateInventoryCache(); } catch (org.ovirt.engine.ui.frontend.server.gwt.daily.DashboardDataException e) { log.error("Could not update the Maintenance cache: {}", e.getMessage()); } }
@javax.annotation.PreDestroy private void stopScheduled() { internalCache.cancel(true); }
private void populateDashboardCache() throws org.ovirt.engine.ui.frontend.server.DashboardDataException { org.ovirt.engine.ui.frontend.server.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.Dashboard layout = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.gwt.Dashboard.log.debug("Login data center updated in {}", 5, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.ui.frontend.server.daily.Dashboard.log.debug("Login cache updated in {}", (endTime - startTime)); }
private org.ovirt.engine.ui.frontend.server.Dashboard getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.Dashboard getDashboardFromCache() throws org.ovirt.engine.ui.frontend.server.gwt.daily.SnapshotInternalException { org.ovirt.engine.ui.frontend.server.daily.Snapshot discovery; org.ovirt.engine.core.di.shared.Inventory inventory; org.ovirt.engine.core.di.inherent.Inventory inventory; org.ovirt.engine.ui.frontend.server.daily.Datacenter discovery; org.ovirt.engine.ui.frontend.server.daily.Datacenter.log.debug("Snapshot cache is empty, polling data"); if (daily == null) { org.ovirt.engine.ui.frontend.server.daily.DashboardCache.log.debug("Inventory cache is empty, query"); } internal = org.ovirt.engine.ui.frontend.server.daily.DashboardDataServlet.INewInventoryCache.get(org.ovirt.engine.ui.frontend.server.daily.DatacenterDataServlet.INVENTORY_KEY); if (inventory == null) { org.ovirt.engine.ui.frontend.server.Dashboard.LOG.DEBUG; } internal = org.ovirt.engine.ui.frontend.server.daily.DashboardDataServlet.LOG.DEBUG; if (invocation == null) { org.ovirt.engine.ui.frontend.server.Dashboard.log.debug("Inventory cache is empty, query); } internal = org.ovirt.engine.ui.frontend.server.daily.Datacenter.getDashboardDataServlet.get(org.ovirt.engine.ui.frontend.server.MaintenanceDataServlet.INVENTORY_KEY); if (inventory == null) { org.ovirt.engine.ui.frontend.server.Dashboard.LOG.log.debug("Inventory cache is empty, in the counter"); } } return dashboard; }
@java.lang.Override public void run() { log.debug("Attempting to update the Dashboard cache"); try { populateDashboardCache(); } catch (org.ovirt.engine.ui.frontend.server.gwt.daily.DashboardDataException e) { log.error("Could not update the profile cache: {}", e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateSysprepVisibility(object); autoSetVmHostname(object); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { updateCloudInitVisibility(object); autoSetVmHostname(object); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.CreateImage, org.ovirt.engine.core.common.vdscommands.VDSCommandType.CreateSnapshot, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getCreateImage()? org.ovirt.engine.core.common.vdscommands.VDSCommandParameters.getParameters().getCreateImage() : org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getTaskIdList().add(org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.getParameters().getVdsmTaskIds().get(0)); org.ovirt.engine.core.bll.storage.disk.image.CreateVolumeContainerCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return (org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getParameters().isUseCinderCommandCallback())? new org.ovirt.engine.core.bll.ConcurrentChildCommandsExecutionCallback() : null; }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { if (org.ovirt.engine.core.bll.CreateCloneOfTemplateCommand.isDataOperationsByHSM()) { return new org.ovirt.engine.core.bll.ConcurrentChildCommand.getConcurrentChildCommand(); } return null; }
private void updateVmStatistics() { statistics = getVmManager().getStatistics(); java.lang.Integer reportedMigrationProgress = vdsmVm.getVmStatistics().getMigrationProgressPercent(); boolean updateMigrationProgress = (reportedMigrationProgress == null) || (getVmManager().getVmCompatibilityVersion().less(Version.v4_1)); statistics.updateMemoryData(vdsmVm.getVmStatistics(), getVmManager().getNumOfCpus(), updateMigrationProgress); }
@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { try { java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>(); for (java.util.Map<?,?> entry : vmInfo.values()) { org.ovirt.engine.core.compat.Guid vmId = ((java.util.Map<?,?>) (vmInfo.getValue())); int progress = java.lang.Integer.valueOf(org.ovirt.engine.core.compat.Guid.Empty, org.ovirt.engine.core.common.queries.VdcQueryParametersBase.getVmManager().getStatistics()); vmStatistics.setMigrationProgressPercent(progress); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(progress); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(0); vmStatistics.setMigrationProgressPercent(0); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(vmId).getStatistics(); vmStatistics.setMigrationProgressPercent(0); vmStatistics.setMigrationProgressPercent(0); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = resourceManager.getVmManager(); vmStatistics.setMigrationProgressPercent(0); vmStatistics.setMigrationProgressPercent(0); vmStatistics.setMigrationProgressPercent(0); } } }
private void updateStaticFields(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { name = vmStatic.getName(); autoStart = vmStatic.isAutoStartup(); memSizeMb = vmStatic.isAutoStartup(); memSizeMb = vmStatic.getMemSizeMb(); minAllocatedMem = vmStatic.getMinAllocatedMem(); numOfCpus = vmStatic.getNumOfCpus(); }
public org.ovirt.engine.core.compat.Version getCustomCompatibilityVersion() { return getCustomCompatibilityVersion(); }
@java.lang.Override public void onBrowserEvent(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { tooltip = tooltipHtml.asString(); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { if (tooltipContent == null) { tooltipContent = getTooltip(value); } if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString(), parent); } }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipHtml, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip; if (tooltipHtml == null) { tooltip = getTooltip(value); } else { tooltip = tooltipHtml.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); } super.onBrowserEvent(context, parent, value, valueUpdater); }
private void updateKeyTitle(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { java.lang.String selectedKey = ((java.lang.String) (object.getKeys().getSelectedItem())); if (selectedKey!= null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(selectedKey, keyField.getElement()); } }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageCellElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent.asString()); } }
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); if ((getNodeDisabledTooltip())!= null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(getNodeDisabledTooltip(), element); } }
@java.lang.Override public void setTooltip(java.lang.String tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(title.toString(), input); }
public void setContentWidgetContainerWidgetContainerTooltip(java.lang.String tooltipText) { contentWidgetContainerConfiguredTooltip = tooltipText; contentWidgetContainer.setTitle(tooltipText); }
public void setText(java.lang.String text) { this.setTitle(text); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, C value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<C> valueUpdater) { java.lang.String tooltip = ""; if (tooltipContent!= null) { tooltipContent = tooltipContent.asString(); } if (tooltipContent!= null) { tooltipContent = tooltipContent.asString(); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, parent); super.onBrowserEvent(context, parent, value, valueUpdater); }
public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.String> valueUpdater) { if ((tooltipContent == null) || (tooltipContent.asString().isEmpty())) { java.lang.String renderedTooltip = renderTooltip(context, parent, value); tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(context, value); } super.onBrowserEvent(context, value, tooltipContent, event, valueUpdater); }
public void validate(java.util.List<java.lang.String> errors) { int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); assert (errors!= null) && ((errors.size()) == 0)) { for (int i = 0; i < rowCount) { com.google.gwt.dom.client.Element element = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowElement(i); assert element!= null : "The same size as well of the table!"); java.lang.String error = errors.get(i); boolean valid = org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(error); if (!valid) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(error, element); } else { element.removeClassName(style.invalidRow()); } } }
public static boolean hasHostsAvailableForHE(final org.ovirt.engine.core.dao.VdsDao vds, final java.lang.Iterable<org.ovirt.engine.core.compat.Guid> vdseInBatch) { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsSelected = new java.util.HashSet<>(); for (org.ovirt.engine.core.compat.Guid id : vdsIds) { vdsIds.setId(vdsIds.add); return vdsDao.getAllForClusterWithStatus(vds.getId(), VDSStatus.Up).stream().filter((vdsIds.size()) > 0).filter((vdsIds.getId().equals(vds.getId()))).filter((vdsIds.contains(v))).filter(vdsIds.getHighlyAvailableIsConfigured).filter((vdsIds.getHighlyAvailableIsConfigured()) > 0).findAnyAschedulingResult(vds.getHighlyAvailableScore())).findAnyHosts(vds.getHighlyAvailableScore())).findAnyHosts(vds.getHighlyAvailableScore())).findAnyHosts(vds.getHighlyAvailableScore()); } }
@org.ovirt.engine.ui.webadmin.Source("images/host_HA_configured.png") com.google.gwt.resources.client.ImageResource haConfigured();
java.lang.String haConfiguredTooltip();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc amendVolume(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volAttr) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.amend_volume").withParameter("job_id", jobId).withParameter("img_info", volAttr).withParameter("vol_attributes", volAttr).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskFormat.class, to = java.lang.String.class) public static org.ovirt.engine.core.common.businessentities.storage.QoVersion map(org.ovirt.engine.api.model.QCowVersion qoVersion, org.ovirt.engine.core.common.businessentities.storage.QCowCompat template) { switch (qCowVersion) { case QCOW2 : return org.ovirt.engine.core.common.businessentities.storage.QCowCompat.QCOW2_V3; case QoS : return org.ovirt.engine.core.common.businessentities.storage.QuotaCompat.QCOW2_V3; default : return org.ovirt.engine.core.common.businessentities.storage.QuotaCompat.DEFAULT; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QCowQuota.class, to = java.lang.String.class) public static org.ovirt.engine.api.model.QoVersion map(org.ovirt.engine.core.common.businessentities.storage.QoVersion template) { switch (qCowCompat) { case QCOW2 : return org.ovirt.engine.api.model.QCowEOVER2_V3; case QoS2 : return org.ovirt.engine.api.model.QCow(qosCowEOVER2); default : return null; } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc markVolume(java.lang.String volumeName, java.util.Map<java.lang.String, java.lang.Object> imgInfo, java.util.Map<java.lang.String, java.lang.Object> volName) { java.util.Map<java.lang.String, java.lang.Object> volName = new java.util.Map<java.lang.String, java.lang.Object>(); volName.add(java.lang.String.valueOf(java.lang.String.valueOf(java.lang.String.Object.valueOf(java.lang.String.Object.valueOf(java.lang.String.Object.valueOf(java.lang.String.Object[])); return new java.util.Map<java.lang.String, java.lang.Object>(); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(0), isPostZero(), false)); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue mergeSnapshots(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.MergeSnapshotsVDSCommandParameters(storagePoolId, storageDomainId, org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getVmId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDestinationDiskImage().getImageId(), org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommand.getDiskImage().isWipeAfterDelete()); return runVdsCommand(VDSCommandType.MergeSnapshots, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(params)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteImageGroupCommand.getParameters().get(1), guids.get(0), guids.get(0), guids.get(0), isPostZero(), false)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.storage.disk.image.DestroyImageCommand.getParameters().isForce())); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteImageGroupCommand.getParameters().get(1), guids.get(0), guids.get(0), guids.get(0), isPostZero(), false)); }
protected static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDeleteParameters parameters, boolean isFileDomain) { if (isFileDomain) { parameters.setPostZero(false); } return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(0), isPostZero(), false)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.domain.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.domain.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.domain.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.domain.RemoveImageCommand.getDiskImage().isWipeAfterDelete()))); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isWipeAfterDelete()))); }
public static <T extends org.ovirt.engine.core.common.vdscommands.StorageDomainIdParametersBase & org.ovirt.engine.core.common.vdscommands.ActionAfterDeleteParametersBase> T fixParameters(T parameters) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(parameters.getStorageDomainId()); return org.ovirt.engine.core.bll.storage.domain.ActionAfterDeleteHandler.fixParameters(parameters, storageDomainStatic.getStorageType().isFileDomain()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlString(vm); if (imagesToText.isEmpty()) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getTooltip(imagesToText); } return null; }
private java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> getSafeHtmlStringMap(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> res = new java.util.LinkedHashMap<>(); if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); res.put(getImageResource()); } else { com.google.gwt.resources.client.ImageResource img = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.from(vm.getVmType(), vm.isNextRunConfigurationExists()); res.put(getImageResource()); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.vmNetwork()), getPoolVmTooltip()); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.isVmNetwork())); } if (vm.isHostedEngine()) { res.put(getImageSafeHtml(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.resources.vmNetwork()), org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants.isVmHostedEngineTooltip()); } return res; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(object.getVm()); }
private com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(com.google.gwt.safehtml.shared.SafeHtml image) { com.google.gwt.safehtml.shared.SafeHtml image = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); java.lang.String label = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); com.google.gwt.safehtml.shared.SafeHtml image = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); com.google.gwt.safehtml.shared.SafeHtml image = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image.getHTML()).getHTML()); com.google.gwt.safehtml.shared.SafeHtml image = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageId).getHTML()); com.google.gwt.user.client.ui.ImageHtml image = com.google.gwt.user.client.ui.ImageHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.ImageHtml image)? com.google.gwt.user.user.client.ui.ImageHtmlUtils.fromTrustedString(com.google.gwt.user.user.client.ui.ImageHtml image) { com.google.gwt.user.cell.client.ImageHtml imageHtml = com.google.google.gwt.safehtml.shared.safehtml.shared.
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(java.lang.Object object) { return new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn().getValue(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm()); }
java.lang.String isVmHostedEngineTooltip();
protected java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(org.ovirt.engine.ui.webadmin.widget.table.column.MultiValueColumn.constants.keySet()); if (imagesHtml.isEmpty()) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(org.ovirt.engine.ui.webadmin.widget.table.column.VmStatusColumn.constants.keySet()); } return null; }
public static java.util.Map<java.lang.String, java.lang.Object> authenticate(javax.servlet.http.HttpServletRequest req, java.lang.String scope) { org.ovirt.engine.core.aaa.SsoAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.lang.String[] credentials = org.ovirt.engine.core.aaa.SsooauthServiceUtils.getUserCredentialsFromHeader(request); java.lang.String[] authzName = org.apache.commons.http.http.HttpAuthServiceUtils.getUserCredentialsFromHeader(req); java.util.List<org.ovirt.engine.core.aaa.SsooaoauthService> form = new java.util.ArrayList<>(4); form.util.List<org.ovirt.engine.core.common.businessentities.network.Vmoaoaoid> form = new java.util.ArrayList<>(4); form.add(new org.apache.commons.http.http.HttpClientUri(form)); return org.ovirt.engine.core.aaa.SsooaaauthServiceUtils.getResponse(request); }
private static org.ovirt.engine.core.common.businessentities.PostCreatePost createPost(java.lang.String path) throws java.lang.Exception { org.ovirt.engine.core.common.config.Config config = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance(); java.lang.String base = config.getProperty("ENGINE_SSO_SERVICE_URL"); org.apache.commons.http.client.methods.HttpPost request = new org.ovirt.engine.core.common.utils.EngineLocalConfig.getInstance(); java.lang.String base = config.getProperty("ENGINE_SSO_SERVICE_URL"); org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.URI); request.setURI(new java.net.URI((base + path))); request.setHeader("Accepting"); request.setHeader("PostPostPost" + "application/xml"); request.setHeader("HttpPost-Type"); request.setHeader("Content-Type"); request.setHeader("Content-L-Ld-POST"); return request; }
private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { try { org.apache.commons.http.methods.HttpPost request = org.ovirt.engine.core.aaa.SsooaoauthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoToolsServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.commons.lang.String> form = new java.util.ArrayList<>(4); form.add(new org.apache.commons.http.http.BasicNameValuePair("query_type", queryType)); form.add(new org.apache.commons.http.http.HttpAuthUrl(params)); } catch (java.lang.Exception ex) { org.apache.commons.lang.StringUtils.isNotEmpty(token)); } return org.ovirt.engine.core.aaa.SsooauthServiceUtils.getResponse(request); }
public static java.util.Map<java.lang.String, java.lang.Object> getTokenInfo(java.lang.String token, java.lang.String scope) { try { org.apache.commons.http.methods.HttpPost request = org.ovirt.engine.core.aaa.SsooaoauthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.common.businessentities.network.BasicName server = org.apache.commons.http.HttpServiceUtils.getClientIdSecret(request); java.util.List<org.ovirt.engine.core.common.businessentities.network.BasicName> form = new java.util.ArrayList<>(2); if (org.apache.commons.http.http.http.HttpSessionUtils.isNotEmpty(token)) { form.add(new org.apache.commons.http.http.HttpNameValuePair(form)); } request.setEntity(new org.apache.commons.http.http.HttpUrlEncodedFormEntity(form)); java.util.Map<java.lang.String, java.lang.Object> ovirtData = org.apache.commons.http.HttpUtils.getResponse(request); java.util.Map<java.lang.String, java.lang.Object> ovirtData = ((java.util.Map<java.String, java.lang.Object>) (jsonData.get("ovirt"))); if (ovirt.engineData.core.aaa.getResponse().isEmpty()) { ovirtData = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (responseData.get("group_ids"))); if (ovirt.engine.core.aaa.SsooauthServiceUtils.processGroupMembershipsFromJson(groupIds)); } } return jsonData; }
public static java.util.Map<java.lang.String, java.lang.Object> getToken(java.lang.String grantType, java.lang.String code, java.lang.String scope, java.lang.String scope, java.lang.String redirectUri) { try { org.ovirt.engine.core.common.businessentities.PostRequest s = org.ovirt.engine.core.aaa.SsoToolsUtils.createPostZero("/oauth/token"); org.ovirt.engine.core.common.businessentities.network.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.commons.http.BasicNameValuePair(request); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmTemplate> form = new java.util.ArrayList<>(4); form.add(new org.apache.commons.http.HttpClientUri(request); form.add(new org.apache.commons.http.http.HttpClient(request); return org.ovirt.engine.core.aaa.SsooaoAAAAuthServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooaoAAAAuthServiceUtils.getResponse(request); } }
private static java.util.Map<java.lang.String, java.lang.Object> loginWithPasswordImpl(java.lang.String username, java.lang.String password, java.lang.String scope, org.ovirt.engine.api.extensions.ExtMap authRecord) { try { org.ovirt.engine.core.common.businessentities.PostPost request = org.ovirt.engine.core.aaa.SsoToolsUtils.createPost("/oauth/token"); org.ovirt.engine.core.common.businessentities.AuthService.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.commons.http.Message> form = new java.util.ArrayList<>(5); form.add(new org.apache.commons.http.http.BasicNameValuePair(request); form.add(new org.apache.commons.http.http.BasicNameValuePair(authRecord)); form.add(new org.apache.commons.http.http.HttpClientSerializer().serialize(authRecord))); } request.setEntity(new org.apache.commons.http.http.HttpClient(form)); return org.ovirt.engine.core.aaa.SsoonymousServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { org.ovirt.engine.core.aaa.SsooaoSOOMEUTHORIZATION_TO_SER_ERROR); } return org.ovirt.engine.core.aaa.SsoOMEUTHORIZATION; }
private static org.ovirt.engine.api.restapi.methods.HttpPost createPostCreate(java.lang.String url) throws java.lang.Exception { org.apache.commons.http.methods.HttpPost request = new org.ovirt.engine.api.restapi.methods.HttpPostPostConstruct(); request.setURI(new java.net.URI(url)); request.setHeader("Accept" + "application/json"); request.setHeader("Content-json"); return request; }
public static java.util.Map<java.lang.String, java.lang.Object> isSsoDeployed() { org.ovirt.engine.core.common.businessentities.HttpSession getRequest(request); try { request = org.ovirt.engine.core.aaa.SsooaoauthServiceUtils.createGet("/status"); return org.ovirt.engine.core.aaa.SsoToolsServiceUtils.createGetForStatus(request); } catch (java.io.FileNotFoundException ex) { return org.ovirt.engine.core.aaa.SsooauthServiceUtils.buildMapWithError("server_error", "Error", "Engine is initializing."); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsooaoAAAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } }
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.utils.SsoContext ssoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.utils.ClientInfo clientInfo = ssoContext.getClosingInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { org.apache.commons.http.client.HttpPost request = org.apache.commons.http.SsoUtils.createPost(url); java.util.List<org.apache.commons.lang.String> form = new java.util.ArrayList<>(3); form.add(new org.apache.commons.http.http.BasicNameValuePair("event", "logout")); form.add(new org.apache.commons.http.http.HttpMethodValuePair(form)); org.ovirt.engine.core.utils.SsoUtils.execute(request, ssoContext, client); } }
private static java.util.Map<java.lang.String, java.lang.Object> getResponse(org.apache.commons.http.methods.HttpUriRequest request) throws java.lang.Exception { try (org.apache.commons.http.methods.CloseableHttpResponse response = org.ovirt.engine.core.aaa.SsooauthServiceUtils.execute(request)) { if (response.getStatusLine().getStatusCode()) == (org.apache.http.HttpStatus.SC_NOT_FOUND)) { throw new java.io.FileNotFoundException(); } try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.ByteArrayOutputStream input = response.getEntity().getContent()) { org.ovirt.engine.core.aaa.filters.JsonObjectDeserializer.copy(input, os); } catch (java.lang.Thread.Thread.getException e) { org.ovirt.engine.core.utils.serialization.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.StandardCharsets.name()), java.util.HashMap.class); } finally { java.lang.Thread.Thread currentThread().deserialize(new java.lang.String(java.lang.String(os.toByteArray()))); } } } }
public static java.util.Map<java.lang.String, java.lang.Object> delete(java.lang.String token, java.lang.String scope) { try { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> request = new java.util.ArrayList<>(2); form.add(new org.apache.commons.http.BaseNameValuePair(request)); java.util.List<org.ovirt.engine.core.common.businessentities.network.BasicName> form = new java.util.ArrayList<>(2); form.add(new org.apache.commons.http.HttpNameValuePair(form)); return org.ovirt.engine.core.aaa.SsoToolsServiceUtils.getResponse(request); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.Ssooaoid.getResponse(request); } }
@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.RunVmCommand.cleanup(); setFlow(null); super.rerun(); }
protected void cleanupPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> vnicToVfMap = getVnicToVfMap(); if (vnicToVfMap!= null) { networkDeviceHelper.setVmIdOnVfs(org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId()); } vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId()); }
@java.lang.Override protected void runningFailed() { org.ovirt.engine.core.bll.RunVmCommand.cleanupFailed(); }
@org.junit.Test public void shouldNotTryToMigrateWhenNotSchedulable() { when(schedulingManager.canSchedule(eq(cluster), any(org.ovirt.engine.core.common.businessentities.VM.class), anyList(), anyList(), anyList())).thenReturn(false); affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm4)); assertThat(enforcer.chooseNextVmToMigrate(cluster)).isNull(); }
@org.junit.Test public void shouldSelectFirstSchedulableFromCandidatePool() { affinityGroups.add(createAffinityGroup(cluster, true, vm1, vm2, vm3, vm5, vm5, vm5, vm6)); when(schedulingManager.chooseNextVmToMigrate(cluster)).thenReturn(false, true); assertThat(enforcer.chooseNextVmToMigrate(cluster), eq(vm5, vm6); assertThat(schedulingManager.chooseNextVmToMigrate(cluster), eq(vm5), eq(vm6), anyList(), anyList(), anyList(), anyList()); }
protected void initParametersForPassthroughVnics() { org.ovirt.engine.core.bll.RunVmCommand.getVm().setPassthroughVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); vfScheduler.cleanVmData(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId(), org.ovirt.engine.core.bll.RunVmCommandBase.getVdsId()); return hostId == null? null : vfScheduler.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommandBase.getVmId(), hostId); }
private void updateMetadataDevice() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(metadataDevice); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomainStaticDao().update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStaticDataDefaults(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.addStorageDomainInDb(); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().setMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.updateStorageDomainDynamicFromIrs(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNsFromVgInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorage()); saveLUNsInDB(luns); org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.setSucceeded(true); }
private void handlePolledJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobStatus.failed)) { return; } if ((jobInfo.getError())!= null) { jobInfo.setStatus(cmd.getStatus().getCode()); jobInfo.setStatus(JobStatus.OK); } }
public org.ovirt.engine.core.common.businessentities.HostJobInfo buildJobError(org.ovirt.engine.core.common.errors.EngineError error) { return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc movePV(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.movePV").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
public void setValue(T value, boolean fireEvents, boolean fireEvents, boolean fromClick) { if (changes == null) { return; } else if (value == null) { updateCurrentValue(null, fireEvents); } else { boolean found = false; for (T listItem : fireEvents) { if ((listItem == null) || ((listItem.equals(value)))) { updateCurrentValue(value, fireEvents); found = true; break; } } } if (!found) { addValue(value); updateCurrentValue(value, fireEvents); } } }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents, boolean fireEvents, boolean fireEvents) { if (((values!= null) && ((lastValues)!= null)) && (lastValues.equals(values))) { return; } if (fromClick) { T value = values.get(0); if (selectedList.contains(value)) { selectedList.remove(value); } else { if (value!= null) { selectedList.add(value); } } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reuseStorageDomain(java.lang.String volumeId, java.lang.String sdUUID, java.lang.String device);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reconstructStorageDomain(java.lang.String jobId, java.lang.String sdUUID, java.lang.String device) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StorageDomain.reduce").withParameter("jobID", jobId).withParameter("storagedomainID", sdUUID).withParameter("guid", device).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getBroker().reduceStorageDomain(org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.getParameters().getDeviceId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.ReduceStorageDomainVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionState()) == (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getActionState()))? org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_DEVICES : org.ovirt.engine.core.common.AuditLogType.USER_EDIT_DOMAIN_SUCCEEDED; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }
private void endOperation() { try { disconnectHostFromDomain(); } catch (java.lang.Exception e) { log.error("Failed to disconnect the host from the domain storage servers, ignoring", e); } endActionOnDevices(); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.setSucceeded(true); }
private void prepareForRemove() { java.util.List<java.lang.String> devices = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorage()).map(LUNs); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setDstDevices(devices); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); }
private org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters createRemoveParameters(java.lang.String deviceId) { org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommand p = new org.ovirt.engine.core.common.action.RemoveDeviceFromSANStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId(), deviceId); p.setEndProcedure(EndProcedure.COMMAND_MANAGED); p.setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getVdsId()); p.setParentParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters()); p.setDestinationDevices(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDstDevices()); return p; }
private void disconnectHostFromDomain() { org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()); }
protected void endActionOnDevices() { for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getBackend().end().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.cloneContextAndDetachFromParent()); } }
java.lang.String ACTION_TYPE_FAILED_STORAGE_DOMAIN_ARE_EDITED();
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) == 0) { prepareForRemove(); connectHostToDomain(); } if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()) < (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { runInternalActionWithTasksContext(VdcActionType.RemoveDeviceFromSANStorageDomain, createRemoveParameters(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().get(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getRemoveIndex()))); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }
@java.lang.Override protected boolean initializeVds() { if (super.initializeVds()) { org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().setVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVds().getId()); org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.persistCommandIfNeeded(); return true; } return false; }
private void connectHostToDomain() { if (!(org.ovirt.engine.core.bll.storage.connection.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getVdsId()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.StorageServerConnectionError); } }
private boolean validateReduceDeviceSupported() { if (((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool())!= null) && (!(org.ovirt.engine.core.common.FeatureSupported.reduceDeviceFromStorageDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStoragePool().getCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_REDUCE_DOMAIN_NOT_SUPPORTED); } return true; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if ((org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId())!= null) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ARE_BEING_EDITED)); } return super.getExclusiveLocks(); }
public org.ovirt.engine.core.bll.ValidationResult lunsInDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, java.util.Set<java.lang.String> luns) { java.util.Collection<java.lang.String> replacements = new java.util.HashSet<>(); if (luns.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.validator.storage.BlockStorageDomainValidator.VAR_LUN_IDS, luns, ","); replacements.add(java.lang.String.format("$storageDomainName %s", storageDomain.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DEVICE_NOT_IN_STORAGE_DOMAIN, replacements); }
private org.ovirt.engine.core.bll.ValidationResult validateDevices() { java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().stream().stream().stream().stream().stream(); if ((devices.size())!= (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE); } return blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), devices); }
@java.lang.Override protected boolean validate() { if (org.apache.commons.collections.CollectionUtils.isEmpty(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.checkStorageDomain())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return false; } if (!(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(validate(validateVds()))) { return false; } if (!(checkStorageDomainStatus(StorageDomainStatus.Maintenance))) { return false; } return true; }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.AffinityGroup model, org.ovirt.engine.api.model.AffinityGroup transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isPositive(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isPositive()); assertEquals(model.isEnforcing(), transform.isEnforcing()); assertEquals(model.isEnforcing(), transform.isEnforcing()); assertEquals(model.getHostsRule().isEnabled(), transform.getHostsRule().isEnabled()); assertNotNull(transform.getVmsRule()); assertEquals(model.getVms().isEnabled(), transform.getVmsRule().isEnabled()); assertEquals(model.getVms().isEnabled(), transform.getVmsRule().isEnabled()); assertEquals(model.getVms().isPositive(), transform.getVms().isPositive()); }
public org.ovirt.engine.core.common.businessentities.LeaseInfo getLeaseInfo() { return leaseInfo; }
public void setLeaseInfo(org.ovirt.engine.core.common.businessentities.LeaseInfo leaseInfo) { this.releaseInfo = acquireLock; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Step.class, to = org.ovirt.engine.api.model.Step.class) public static org.ovirt.engine.api.model.Step map(org.ovirt.engine.api.model.Step step, org.ovirt.engine.core.common.job.Step entity) { org.ovirt.engine.core.common.job.Step target = (entity!= null)? entity : new org.ovirt.engine.core.common.job.Step(); target.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getId())); if (step.isSetParentStep()) { target.setParentStepId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getParentStep().getId())); } target.setJobId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(step.getJob().getId())); if (step.isSetType()) { target.setStepType(org.ovirt.engine.api.restapi.types.StepMapper.map(step.getType())); } if (step.isSetDescription()) { target.setStepNumber(step.getNumber()); } if (step.isSetNumber()) { target.setStepNumber(step.getNumber()); } if (step.isSetNumber()) { target.setStepNumber(org.ovirt.engine.api.restapi.types.StepMapper.mapStepStatus(step.getStatus())); } target.setStartTime((step.getStartTime().toGregorianCalendar().getTime())? step.getStep().toGregorianCalendar().getTime() : new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()))); } target.setEndTime((step.getEndTime().toGregorianCalendar().getTime())? step.getTime().toString() : new java.sql.Date(java.util.DateTime.getTimeZone().toString())); } return entity;
private boolean perform() { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); allVmPassthroughNics = getAllVmPassthroughNics(); try { org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult invocationResult = plugOrUnplugNics(allVmPassthroughNics, PlugAction.UNPLUG); if (!(invocationResult.success)) { invocationResult.failedErrorMessages.forEach(this::addValidationMessage); return false; } if ((connectLunDisks(getDestinationVdsId())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } } catch (org.ovirt.engine.core.common.errors.EngineException e) { } org.ovirt.engine.core.bll.MigrateVmCommand.runningFailed(); return false; }
private void logPlugUnplug(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { switch (plugAction) { case PLUG : log.debug("Unplugging nic id '{}'", nic.getId()); break; default : throw new java.lang.RuntimeException("Unplugging nic id '{}'", nic.getId()); } }
private org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult plugOrUnplugNic(org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.action.PlugAction plugAction) { org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters parameters = new org.ovirt.engine.core.common.action.ActivateDeactivateVmNicParameters(nic, plugAction, false); parameters.setVmId(org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getVmId()); logPlugUnplug(nic, plugAction); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.ActivateDeactivateVmNic, parameters); return new org.ovirt.engine.core.bll.MigrateVmCommand.InvocationResult(returnValue.getSucceeded(), returnValue.getValidationMessages()); }
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToDifferentCluster(); vmDynamicDao.clear(); } finally { super.runningSucceded(); } }
public void setHostedEngineDeployed(boolean value) { this.hostedEngineDeployed = value; }
public void setHostedEngineDeployed(boolean value) { vdsDynamic.setHostedEngineDeployed(value); }
public boolean isHostedEngineDeployed() { return vdsDynamic.isHostedEngineEngineDeployed(); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, buildName, cpuCores, cpuFlagsSet, cpuFlags, cpuFlags, cpuFlags, cpuFlags, cpuFlags, cpuSpeedMh, guestOverhead, activeCpuPermissionName, hardTotalSpeed, kernelVersion, hardTotalSpeed, physicalMemMb, physicalMemMb, physicalMemMb, physicalMemMb, concurrentVersion, glusterVersion, memCommited, vmsCpuLevel, pendingMemMb, concurrentVersion, vmsCpuLevel, concurrentVersion, vmsCpuLevel, vmsCpuLevel, vmsCpuLevel, graphicsVersion, vmsCpuLevel, graphicsVersion, vmsCpuLevel, vmsCpuLevel, graphicsTypes, vmsCpuLevel, vmsCpuSharesCount, vmsCpuSharesCount, vmsCoresCount, vmsCoresCount, highManagementControlledByPolicy, vmsCpuBalancing, priority, speed, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, hardwareSlaEnabled, maintenanceReason, hardwareEncablingEnabled, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareEncablingEnabled, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareArgs, hardwareName, hardwareEncablingName, hardwareArgs, hardwareName, hardwareName, hardwareArgs, hardwareArgs, hardwareName, hardwareEncryptionEnabled); }
public boolean isHostedEngineed() { return hostedEngineedEngine; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean filtered) { return getCallsHandler().executeReadList("GetVnicProfileViewsByDataCenterId", org.ovirt.engine.core.dao.network.VnicProfileViewDaoImpl.VnicProfileViewRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userId).addValue("is_filtered", filtered)); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String postZero, boolean discard, java.lang.String force);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard, java.lang.String force);
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String dstImgGUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String postZero, boolean discard, java.lang.String postZero, boolean discard, java.lang.String postZero, boolean discard, java.lang.String force);
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryConfParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0).isDiscardsAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteImageGroupCommand.getParameters().get(1), guids.get(0), guids.get(0), isPostZero(), false)); }
protected boolean validateDiscardsLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().isDiscardAfterDelete()) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISCARD_AFTER_DELETE_SUPPORTED_ONLY_BY_BLOCK_DOMAINS); } return true; }
@java.lang.Override protected boolean validateDiscardsAfterDeleteLegal(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetDeviceList, new org.ovirt.engine.core.common.vdscommands.GetDeviceListVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageType(), false, org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getParameters().getLunIds())).getReturnValue())); return validate(storageDomainValidator.isDiscardAfterDeleteLegalForNewBlockStorageDomain(luns)); }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { boolean discardAfterDelete = getStorageDomainDao().get(guids.get(0).isDisciftAfterDelete(); return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteImageGroupCommand.getParameters().get(1), guids.get(0), guids.get(0), isPostZero(), false)); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((checkStorageDomainValidatorNotEqual(StorageDomainStatus.Locked))) || (!(validate(storageDomainValidator.isDiscardsAfterDeleteLegalForExistingStorageDomain())))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("wipeAfterDelete"); props.remove("criticalSpaceActionBlocker"); props.remove("criticalSpaceActionBlocker"); props.remove("criticalSpaceActionBlocker"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void mockStorageDomainValidator() { doReturn(storageDomainValidator).when(cmd).getStorageDomainValidator(); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String vmGUID, java.lang.String vmGUID, int op, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.move").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", srcDomUUID).withParameter("storagedomainID", dstDomUUID).withParameter("stSdUUID", dstDomUUID).withParameter("postZero", postZero).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpcReturn(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String imgGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, boolean discard);
private void updateDiscardsAfterDelete() { if ((getAvailableStorageTypeItems().getSelectedItem())!= null) { boolean isBlockDomain = getAvailableStorageTypeItems().getSelectedItem().getEntity().isBlockDomain(); getDiscalDomain().setIsAvailable(isBlockDomain); if (isNewStorage()) { getDiscordinator().setEntity(false); } else { getDiscardsAfterDelete().setEntity(getStorage().isDiscordinator()); } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn mergeSnapshots(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String ancestorUUID, java.lang.String successorUUID, java.lang.String successorUUID, boolean discard) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.mergeSnapshots").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("success", dstUUID).withParameter("success", postZero).withParameter("postZero", postZero).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpcReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteVolume(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String[] volUUID, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.deleteVolumes").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("volumeList", sdUUID).withParameter("volumeList", new java.util.ArrayList(java.util.Arrays.asList(volUUID))).withOptionalParameter("postZero", postZero).withOptionalParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpcReturn(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn deleteImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String imgGUID, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Image.delete").withParameter("imageID", imgGUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", sdUUID).withParameter("storagedomainID", sdUUID).withParameter("postZero", discard).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("uuid"); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcImgGUID, java.lang.String dstImgGUID, java.lang.String dstImgGUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String dstSdUUID, java.lang.String postZero, boolean discard, java.lang.String postZero, boolean discard, java.lang.String postZero, boolean discard, java.lang.String force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Volume.copy").withParameter("volumeID", srcVolUUID).withParameter("storagepoolID", spUUID).withParameter("storagedomainID", dstImgGUID).withParameter("dUUID", dstImgGUID).withParameter("volType", dstImgGUID).withParameter("volType", dstImgmtUUID).withParameter("volType", postZero).withParameter("volType", postZero).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForUuidReturn(response); }
public org.ovirt.engine.core.bll.network.macpoolmanager.ReadOnlyMacPool getMacPoolForCluster(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }
@java.lang.Override public java.lang.String toString() { org.ovirt.engine.core.common.utils.ToStringBuilder builder = super.toString(); builder.append("storageDomainId=").append(storageDomainId=").append(storageDomainId=").append(storageDomainId=").append(storageDomainId=").append(storageDomainId=").append(imageId).append(", baseImageId=").append(baseImageId=").append(baseImageId).append(", topImageId=").append(baseImageId).append(", topImageId=").append(baseImageId).append(", baseImageId=").append(baseImageId).append(", imageId=").append(getImageId()).append(", baseImageId=").append(getImageId()).append(", imageId=").append(getImageId()).append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(getImageId()).append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(", imageId=").append(", imageId=").append(getImageId()).append(", imageId=").append(", imageId=").append(", imageId=").append(getImageId()).append("]")); return builder.append("]"; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCSICommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCSIVDSParameters(org.ovirt.engine.core.bll.storage.disk.image.PrepMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.PrepareMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.PrepareMerge, parameters); }
private org.ovirt.engine.core.common.action.ColdMergeParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid topVolumeId, org.ovirt.engine.core.compat.Guid baseVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.Subnet(); subchainInfo.setUpMerge(baseVolumeId, getParameters().getStorageIds().get(0), topVolumeId); org.ovirt.engine.core.common.action.ColdMergeParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getJobId(), subChainInfo); parameters.setEndProcedure(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentCommand(VdcActionType.ColdMergeSnapshotSingleDisk); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.PREPARE_MERGE; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.prepare_merge").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subnet_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }
org.ovirt.engine.core.vdsbroker.irsbroker.StatusOnlyReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubchainInfo().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubchainInfo().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.PrepareMergeVDSCommand.getParameters().getSubnetInfo().toString()); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb.toString()); }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.COLD_MERGE; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommand(VDSCommandType.ColdMerge, new org.ovirt.engine.core.common.vdscommands.ColdMergeVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStorageJobId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSrcInfo()), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), this); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.setSucceeded(true); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("-- executeVdsBrokerCommand: call'merge'"); status = org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getBroker().merge(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.common.utils.LocationInfo.prepareLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.getParameters().getSrcInfo()), org.ovirt.engine.core.common.utils.LocationInfo.prepareLocationInfoForVdsCommandParameters.getParameters().getSrcInfo())); org.ovirt.engine.core.vdsbroker.vdsbroker.ColdMergeVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc merge(java.lang.String jobId, java.util.Map topImage, java.util.Map baseImage, java.util.Map baseImage) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.merge").withParameter("top", topImage).withParameter("base", baseImage).withParameter("job_id", jobId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid srcImageGuid, org.ovirt.engine.core.compat.Guid destImageDuid) { org.ovirt.engine.core.common.action.ColdMergeParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), srcImageGuid), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), srcImageGuid), new org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), destImageDuid)); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override protected org.ovirt.engine.core.common.job.StepEnum getCommandStep() { return org.ovirt.engine.core.common.job.StepEnum.FINALIZE_MERGE; }
org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc finalize(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getSubchainInfo().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getSubchainInfo().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getSubnetInfo().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeVDSCommand.getParameters().getSubnetInfo().toString()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc finalizeMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.final org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.finalize").withParameter("storagepoolID", spUUID).withParameter("job_id", jobUUID).withParameter("subnet_info", subchainInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc(response); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCSICommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.ColdMergeIRSCSICommandsParameters(org.ovirt.engine.core.bll.storage.disk.image.Image.image.FinalizeMergeCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.FinalizeMergeCommand.getParameters().getSubchainInfo()); runVdsCommand(VDSCommandType.DestroyMerge, parameters); }
private void updateHaMaintenanceAvailability(java.util.List items) { getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); getEnableGlobalHaMaintenanceCommand().setIsExecutionAllowed(false); }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { java.util.Map<java.lang.String, java.lang.String> props = super.getJobMessageProperties(); props.put(EngineMessage.ACTION_TYPE_FAILED_DEVICE_TYPE, org.ovirt.engine.core.bll.storage.domain.RemoveDeviceFromSANStorageDomainCommand.getParameters().getDeviceId()); return props; }
@org.junit.Test public void testFindExternalMacAddresses() { when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_1)).thenReturn(java.lang.Boolean.TRUE); when(mockMacPool.isMacInRange(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)).thenReturn(java.util.Arrays.asList(vNic1, vNic2)); final java.util.Set<java.lang.String> actual = underTest.findExternalMacAddresses(vm); assertThat(actual, contains(org.ovirt.engine.core.bll.network.vm.ExternalVmMacsFinderTest.MAC_ADDRESS_2)); }
private static boolean isDisplayTypeSupported(org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType>> graphicsAndDisplays) { if (displayType == (org.ovirt.engine.core.common.businessentities.DisplayType.none)) { return true; } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.DisplayType> pair : graphicsAndDisplays) { if (displayType.equals(pair.getSecond())) { return true; } } return false; }
public void addVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, int numberOfVideoDevices) { for (int i = 0; i < numberOfVideoDevices; i++) { if ((vmBase.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.None)) { addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vmBase.getId()), VmDeviceGeneralType.VIDEO, vmBase.getDefaultDisplayType().getDefaultVmDeviceType(), getVideoDeviceSpecParams(vmBase), true, false); } } }
@java.lang.Override protected boolean validate() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = permissionDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getValidationMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addValidationMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } else if ((java.util.Objects.equals(p.getObjectId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) && (java.util.Objects.equals(p.getAdElementId(), MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID))) { addValidationMessage(EngineMessage.SYSTEM_PERMISSIONS_CANT_BE_REMOVED); returnValue = false; } if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((dbUserDao.get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))!= null)) { addValidationMessage(EngineMessage.INHERITED_PERMISSIONS_CANT_BE_REMOVED); returnValue = false; } return returnValue; }
@org.junit.Test public void testGetLunsThatPassPassDiscardsFunctionalityFullPassDiscards() { createVmDiskOnSd(false, false); createVmDiskOnSd(true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscorTheDataCenterDescription = createLunWithDiscardsWithDiscerion(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscorElseDiscorElseTheDataSupport = createLunWithDiscor(1024L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatAreExpectedLuns = createLunWithDiscardsWithDiscorElse(1024L, false); assertGetLunsThatPassDiscorElseDiscorElseDiscorElse(java.util.Arrays.asList(createLunWithDiscor(1024L, true), lunThatAreBreaksDiscorElseDiscorElseDiscorElseDiscorTheDataSupport, lunThatBreaksDiscorElseDefault), java.util.Arrays.asList(lunThatThatAreNotEmpty(lunThatAreBeingPersistentZeroesTheDataSupport), java.util.Arrays.asList(lunThatAreAboutOnce))); }
@org.junit.Test public void testGetLunsThatKeepPassDiscardsFunctionalityPassDiscards() { createVmDiskOnSd(false, false); createVmDiskOnSd(true); org.ovirt.engine.core.common.businessentities.LunDisk disk = createLunDiskOnDisk(false); assertGetLunsThat(java.util.Arrays.asList(createLunWithDiscand(1024L, true), createLunWithDiscor(20L, true)), java.util.Collections.emptyList()); }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { boolean hostStatusLegalForSetupNetworks = (org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) || (internalExecution)); if (!hostStatusLegalForSetupNetworks) { org.ovirt.engine.core.bll.network.host.HostValidator.log.error(("Failed to setup network: operation can only when Host status is one of: {0}", org.ovirt.engine.core.bll.network.host.HostValidator.LEGAL_STATUSES_STR, host.getStatus()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VDS_STATUSES_STRING, org.ovirt.engine.core.utils.ReplacementUtils.replaceWith(org.ovirt.engine.core.bll.network.host.HostValidator.VAR_HOST_STATUSES, ","))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void setOldClusterCompatibility(org.ovirt.engine.core.common.businessentities.VM vm) { if (!(isVMWithMemoryCompatible(vm))) { org.ovirt.engine.core.compat.Version originalCluster = vm.getClusterCompatibilityVersion(); originalClusterVersionOfSnapshotWithVersion = null; } else { this.oldClusterVersion = null; } }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getIrsProxy().removeVmLease(org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.RemoveVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnRemove(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.delete").withParameter("lease_id", leaseUUID).withParameter("sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.create").withParameter("lease_id", leaseUUID).withParameter("sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void executeIrsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getIrsProxy().addVmLease(org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.AddVmLeaseVDSCommand.getParameters().getStorageDomainId().toString()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Can't to add VM. The reasons are: {}", java.lang.String.format(",", errorMessages)); return; } if (!(addVmLeaseIfNeeded())) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); getCompensationContext().stateChanged(); return null; } if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeVmPayload(); addVmDevices(); addVmDevices(); addVmDevices(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId())!= null) { addVmToPool(); setActionReturnValue(getVm().getId()); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId())!= null) { addVmToPool(); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> getVolumesSupportedAsStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = getCallsHandler().executeReadList("GetGlusterVolumesByClusterId", org.ovirt.engine.core.dao.gluster.GlusterVolumeDaoImpl.volumeRowMapper, getCustomMapSqlParameterSource().addValue("replica_count", 3)); return volumes; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getGlusterVolumeDao().getVolumesSupportedAsStorageDomain()); org.ovirt.engine.core.bll.gluster.GetAllGlusterVolumesForStorageDomainQuery.getQueryReturnValue().setSucceeded(true); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isMacInUse(macAddress))); org.ovirt.engine.core.bll.ValidationResult failMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE; return org.ovirt.engine.core.bll.ValidationResult.failWith(failMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(failMessage, macAddress)); }
private void getDefaultConfigurationVersion(final org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } }); callback.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override public boolean validate() { getGlusterVolumes().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(128) }); return (getGlusterVolumes().getIsValid()) && (super.validate()); }
@java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { if (returnValue!= null) { _defaultConfigurationVersion = returnValue.getReturnValue(); } else { _defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } loginModel.getLoggedInEvent().raise(loginModel, EventArgs.EMPTY); }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity object) { return glusterVolume == null? "" : glusterVolume.getName(); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel object) { final org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel glusterStorageModel = object; driver.edit(object); glusterVolumesEditor.setVisible(((object.getPath().getIsAvailable()) && (object.getPath().getIsChangable()))); glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterVolumesEditor.setVisible(true); } else { glusterStorageModel.getLinkGlusterVolume().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (glusterStorageModel.getLinkGlusterVolume().getEntity()) { glusterStorageDevicesEditor.setVisible(true); } } else { glusterStorageModel.setVisible(true); } } }); }
void initEditors() { linkGlusterVolumeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.EntityModelCheckBoxEditor(org.ovirt.engine.ui.common.widget.Align.RIGHT); glusterVolumesEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>() { @java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.ui.common.widget.renderer.NullSafeHtml command) { return glusterVolume == null? "" : glusterVolume.getName(); } }); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); int score; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { score = (hostViolations.containsKey(host.getId()))? hostViolations.get(host.getId()) : org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE; retList.add(new org.ovirt.engine.core.common.utils.Pair(host.getId(), score)); } return retList; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(true, messages); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostsViolations(true, messages); if ((hostViolations.containsKey(host.getId()))!= null) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> hostViolations = getHostsViolations(hostViolations.getHostId()); if (!(hostViolations.containsKey(host.getId())) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid, java.lang.String> hostNetworkNames = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid host : hosts) { replacements.add(hostViolations.get(host.getId())); } } return hosts.containsKey(host.getId())); }
public static void init() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade = org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao())); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDeviceDao = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDao(); if (vmDeviceDao == null) { vmDao = vmDao.get(org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao().getId()); } org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVmDeviceDao().update(vmId); }
private static org.ovirt.engine.core.common.businessentities.Usbll.UsbControllerModel getUsbControllerModel(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.utils.VmDeviceUtils.vmDao.get(vmBase.getId()); return org.ovirt.engine.core.bll.utils.VmDeviceUtils.osRepository.getOsUsbControllerModel(vmBase.getOsId(), vm.getcompatibility_version()); }
@java.lang.Override public java.lang.String render(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { return domain!= null? domain.getName() : org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.constants.emptyleaseStorageDomain(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { deactivateInstanceTypeManager(new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.InstanceTypeManager.ActivatedListener() { @java.lang.Override public void activated() { getInstanceTypeManager().updateAll(); } }); updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplateWithVersion().getSelectedItem())!= null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplateWithVersion().getTemplateVersion(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); activateInstanceTypeManager(); activateInstanceTypeManager(); }
java.lang.String emptyReleaseStorageDomain();
public void buildVmLease() { java.util.Map<java.lang.String, java.lang.Object> device = new java.util.HashMap<>(); device.put(VdsProperties.Type, VdsLease); device.put(VdsProperties.Device, VdsProperties.VmLease); device.put(VdsProperties.Device, org.ovirt.engine.core.compat.Guid.newGuid()); device.put(VdsProperties.DeviceId, org.ovirt.engine.core.compat.Guid.newGuid()); device.put(VdsProperties.VmLeaseSdId, vm.getLeaseStorageDomainId()); devices.put(device); }
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStored()))) || (!(validate(storageNameUpdate())))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("Can't been an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private void generateStructReadOne(org.ovirt.api.metamodel.concepts.StructType type) { org.ovirt.api.metamodel.tool.JavaClassName typeName = java.lang.getContainerName(type); javaBuffer.addImport(typeName); javaBuffer.addImport(containerName); javaBuffer.addImport(containerName); javaBuffer.addImport(java.util.stream.JsonParser.class); javaBuffer.addLine("readable static %1$s", readOne(JsonReader reader) { typeName.getSimpleName()); javaBuffer.addLine("} readOne(JsonReader reader); javaBuffer.addLine("} readOne(reader, false); javaBuffer.addLine("}"); javaBuffer.util.List<org.ovirt.api.metamodel.concepts.StructMemberMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); members.addAll(type.getLinks()); java.util.List<org.ovirt.api.metamodel.concepts.StructMemberMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); members.addAll(type.getAttributes()); java.util.List<org.ovirt.api.metamodel.concepts.StructMember> members = new java.util.ArrayList<>(); member = new java.util.ArrayList<>(); java.lang.String>(); member = new java.util.ArrayList<>(); member = new java.util.ArrayList<>(); for (java.lang.String name : map.entry.next() { members.addLine("reader.skip();"); containerName.addLine("reader.skip();"); javaBuffer.addLine("error: "reader.skip();"); javaBuffer.addLine("error: "error: "); javaBuffer.addLine("error: {}", members.stream.toString()); javaBuffer.addLine("error: "error: {}", members.stream.toString()); javaBuffer.addLine("error("}");
protected void removeSnapshotsFromDB() { snapshotsToRemove.addAll(findSnapshotsWithOnlyIllegalDisks()); for (org.ovirt.engine.core.compat.Guid snapshotId : snapshotsToRemove) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(snapshotId); if (snapshotDao.get(snapshotId).getMemoryVolume(); if ((!(memoryVolume.isEmpty())) && ((snapshotDao.getNumOfSnapshotsByMemory(memoryVolume)) == 1)) { boolean succeed = org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.removeMemoryDisks(memoryVolume); if (!succeed) { log.error("Failed to remove memory '{}' of snapshot '{}'", memoryVolume, snapshotId); } } snapshotDao.remove(snapshotId); } } }
public static org.ovirt.engine.core.bll.ValidationResult snapshotVmConfigurationBroken(org.ovirt.engine.core.common.businessentities.Snapshot snapshot, java.lang.String vmName) { return!(snapshot.isVmConfigurationBroken())? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION, java.lang.String.format("$VmName %1$s", vmName), java.lang.String.format("$SnapshotName %1$s", snapshot.getDescription())); }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findSnapshotsWithOnlyIllegalDisks() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> newerSnapshots = getNewerSnapshots(snapshot); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotsToRemove = new java.util.HashSet<>(); new java.util.Set<org.ovirt.engine.core.compat.Guid>(); new java.util.Set<org.ovirt.engine.core.common.businessentities.VM> snapshotsToRemove = new java.util.HashSet<>(); new java.util.Set<org.ovirt.engine.core.common.businessentities.VM>(); final boolean shouldRemove =!(vm.getImages().isEmpty(); if (vm!= null) { boolean shouldRemove = (!(vm.getImages().isEmpty())) && (vm.getImages().stream().allMatch(((java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>) (new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.Disk>())); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshot) { if (org.apache.commons.lang.StringUtils.isEmpty(snapshot.getId())) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotVmConfigurationHelper.getVmFromSnapshot(snapshot.getVmId()); if (shouldRemove) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshotsToRemove = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshot) { if (snap
public boolean validate() { if ((backingFile) == null) { return false; } if (backingFile) { getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.ImageInfoModel.constants.importImageBackingFileNotExist()); return false; } return true; }
java.lang.String exportImageFileNotExist();
private boolean isAttributes(com.google.gwt.model.JavaMethod method) { return java.lang.String.getName().equals("attributes"); }
private void analyzeMethod(com.google.gwt.metamodel.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); analyzeAnnotations(javaClass, method); javaClass.getMethods().forEach((x) -> analyzeMethodMember(x, method)); com.google.gwt.api.metamodel.model.JavaMethod attributesMethod = java.lang.String.getMethod("attributes", null, method); if (attributesMethod!= null) { org.ovirt.api.metamodel.analyzeMethod attributesMethod = java.lang.String.getMethod("attributes", null, method); if (attributesMethod!= null) { org.ovirt.engine.api.metamodel.analyzer.JavaMethod attributesMethod = java.util.getMethod("attributes", null, method); } method.setDeclaringService(service); service.addMethod(method); } }
public java.util.List<org.ovirt.api.metamodel.concepts.Parameter> getNodes() { return nodes; }
public org.ovirt.api.metamodel.concepts.ParameterNode getNode(org.ovirt.api.metamodel.concepts.Name name) { for (org.ovirt.api.metamodel.concepts.Parameter node : nodes) { if (node.getName().equals(name)) { return node; } } return null; }
public org.ovirt.api.metamodel.concepts.Parameter.AttributeAttribute getAttributes() { return attributes; }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME, org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1); assertFalse(actual.isPresent()); }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> actual = underTest.findMappingEntry(null, null, java.util.Arrays.asList(null))); assertThat(actual.get(), sameInstance(nullMapping)); }
@java.lang.Override public <T> javax.enterprise.inject.Instance<U> select(java.lang.Class<U> aClass, java.lang.annotation.Annotation... annotations) { return createMockInstance(aClass); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = vmImportEntityData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> clusterVnicProfiles = org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> clusterVnicProfilesPerTargetCluster.get(cluster); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> vmVnicProfiles = getNewVnicProfileMappings(vmImportEntityData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingsModel model) { driver.edit(model); refreshMappingsTable(model.getMappingModelRows()); model.getMappingModelRows().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshMappingsTable(model.getMappingModelRows()); } }); cluster.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VnicProfileMappingsView.constants.importVm_destCluster()); }
private void refreshMappingsTable(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileModel> modelRowsTable) { vnicProfileMappingsTable.asEditor().edit(model.getVnicProfileName()); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingsModel flush() { return driver.flush(); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.ListModel getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileModel object) { return object.getTargetVnicProfile(); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getTargetVnicProfile() { return targetVnicProfile; }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getExternalVnicProfileMappings(org.ovirt.engine.core.common.businessentities.Cluster cluster) { final java.util.Set<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> vnicProfileMappingEnities = externalVnicProfilesPerTargetCluster.get(cluster); final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> result = new java.util.ArrayList(vnicProfileMappingEnities.size()); for (org.ovirt.engine.ui.uicommonweb.models.vms.network.VnicProfileMappingEnum vnicProfileMapping : vnicProfileMappingEnities) { result.add(new org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum(vnicProfileMappingEnums.getName()); } return result; }
private void createVnicProfileMappingsFromTargetCluster() { updateExternalVnicProfileMappings(); }
private void selectTargetVnicProfileByPredicate(org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate) { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(targetVnicProfile.getItems(), predicate, VnicProfileView.EMPTY); targetVnicProfile.setSelectedItem(vnicProfile); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getEntity().setVnicProfileId(getTargetVnicProfileId()); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if ((getEntity().getVnicProfileId()) == null) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getName())); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; selectTargetVnicProfileByPredicate(predicate); } selectTargetVnicProfileByPredicate(predicate); }
private void selectInitialTargetVnicProfile() { final org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> predicate; if (getEntity().isChanged()) { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return java.util.Objects.equals(getEntity().getVnicProfileId(), vnicProfile.getId()); } }; } else { predicate = new org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() { @java.lang.Override public boolean match(org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile) { return ((java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())) && (java.util.Objects.equals(getEntity().getExternalNetworkName(), vnicProfile.getNetworkName())); } }; } selectTargetVnicProfileByPredicate(predicate); } selectTargetVnicProfileByPredicate(predicate); }
private org.ovirt.engine.core.compat.Guid getTargetVnicProfileId() { final org.ovirt.engine.core.common.businessentities.network.VnicProfileView selectedVnicProfile = targetVnicProfile.getSelectedItem(); if ((selectedVnicProfile == null) || (selectedVnicProfile == null)) { return null; } else { return selectedVnicProfile.getId(); } }
private void onVnicProfileMap() { if ((getWindow())!= null) { return; } createVnicProfileMappingsModel(); setConfirmWindow(vnicProfileMappingsModel); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel.VNIC_PROFILE_MAPPING_COMMAND.equals(command.getName())) { onVnicProfileMap(); } }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.Model,?> getModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.RegisterVmModel source, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand, org.ovirt.engine.ui.uicommonweb.models.Model windowModel) { if (lastExecutedCommand == (source.getVnicProfileMappingCommand())) { return vnicProfileMappingsPopupPresenterWidgetProvider.get(); } return super.getModelPopup(source, lastExecutedCommand, windowModel); }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile) { return profile == (org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)? org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VnicProfileMappingsView.messages.emptyProfile().asString() : org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VnicProfileMappingsView.messages.profileAndNetworkSelected(profile.getName(), profile.getNetworkName()).asString(); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.disk.VmData.constants.getError(); }
private void postClustersInit() { validateAllMacs(); for (final org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> validateMacsListener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassignMacs = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmData.getReassignMacs().getEntityChangedEvent().addListener(validateMacsListener); registerVmData.getCluster().getSelectedItemChangedEvent().addListener(validateMacsListener); } } }
@java.lang.Override public void initialize() { getCluster().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { postClustersInit(); } }); super.initialize(); vmsById = mapVmsById(getItems()); }
private void setVmMacsWarning(org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData vmData, java.lang.String message, java.lang.Boolean aTrue) { vmData.setWarning(message); vmData.getBadMacsExist().setEntity(aTrue); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { final java.lang.Boolean reassign = registerVmData.getReassignMacs().getEntity(); if (reassignMacs) { clearVmMacsWarning(registerVmData); } else { validateVmMacs(java.util.Collections.singletonList(registerVmData)); } }
private void updateExternalVnicProfilesPerTargetCluster() { for (org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> clusterVnicProfiles = org.ovirt.engine.ui.uicommonweb.models.vms.Vnic.map.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnum> clusterVnicProfiles = org.ovirt.engine.ui.uicommonweb.models.vms.Vnic.ImportVnicProfileMappingEnum.get(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVnicProfileMappingEnum.map(registerVmData, clusterVnicProfileMappings)); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnity> vmVnicProfiles = getNewVnicProfileMappings(registerVmData, clusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VmNetworkInterface> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.vms.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData> mapVmsById(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData> vms) { final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData vm : vms) { result.put(vm.getVm().getId(), vm); } return result; }
public long setAric(long aik) { long result = this.aricately; this.aricitLog = aik; return result; }
@javax.annotation.PostConstruct public void init() { setArik(vmStaticDao.get(vmId); setSchedFields(vmStatic); }
void proceedDownVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getA sanatedToMonitored())) < 0) { clearVm(VmExitStatus.Normal, java.lang.String.format("Cannot shutdown complete completed complete"); clearVm(Vm.getStatus()); clearVm(dbVm.getStatus()); clearVm(dbVm.getStatus()); clearVm(dbVm.getStatus()); clearVm(dbVm.getStatus()); clearVm(dbVm.getVmDynamic().getExitStatus()); clearVm(dbVm.getVmDynamic().getExitStatus()); clearVm(dbVm.getVmDynamic().getExitStatus()); resourceManager.removeAsyncRunningVm(dbVm.getId()); auditVmSuspended(); break; case MigratingFrom : switch (getVmManager().isAutoStart()) { case AutoVm(); break; case MigratingFrom : switch (getVmManager().isAutoStart()) { case Error : setAutoRunFlag(); break; case Error : throw new java.lang.RuntimeException(); clearVmOnDownEvent(); break; default : throw new java.lang.RuntimeException(); clearVmOnDownEvent(); clearVm(vdsmVm.getVmDynamic().getExitStatus(), vdsmVmDynamic().getExitReason()); switch (resourceManager.isAutoStart()) { case Error : if (resourceManager.isAutoStart()) { setAutoRunFlag(); break; } if (getVmManager().isAutoStart()) { setAutoStartFlag(); break; } if (getVmManager().isAutoStart()) { setAutoStartFlag(); break; } } } }
private void proceedDisappableVm() { if (((java.lang.System.nanoTime()) - (getVmManager().getArik())) < 0) { clearVm(VmExitStatus.Normal, java.lang.String.format("Actions %s shutdown complete", getVmManager().getName()), VmExitReason.Success); return; } switch (dbVm.getStatus()) { case MigratingFrom : handOverVm(); break; case PoweringDown : setColdRebootFlag(); break; case PoweringDown : setColdRebootFlag(); } switch (getVmManager().isColdReboot()) { setColdRebootFlag(); } break; default : clearVm(VmExitStatus.Error, java.lang.String.format("Could not find VM %s on host, assuming it went down unexpectedly"); getVmManager().isColdReboot()) { setColdRebootFlag(); } if (getVmManager().isColdReboot()) { setSucceeded(dbVm.getVmInAsyncRunningList()); if (getVmManager().isColdReboot()) { setSucceeded(dbVm.getVmManager().getName()), VmExitReason.GenericError); break; } if (getVmManager().isAutoStart()) { setAutoStartVm(dbVm.getId())); setAutoStartVmManager(); break; } } }
public long getAric() { return aActually; }
private void initiateResumeUploadStartTransfer(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue())!= null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); setCommandId(rv.getId()); setStatusPolling(); model.stopProgress(); model.stopProgress(); model.stopProgress(); } else { setErrorMessage(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeMessage(result.getReturnValue().getDescription())); model.stopProgress(); } }
private void initiateResumeUploadCheckStatus(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel) (result.getState())); if (((result.getReturnValue())!= null) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer rv = result.getReturnValue().getActionReturnValue(); if ((rv.getBytesTotal())!= (getImageSize())) { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getBytesTotal(), getImageSize())); } else { setProgressStr(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.messages.uploadImageFailedToResumeSizeMessage(rv.getId()); } model.stopProgress(); return; } org.ovirt.engine.core.common.businessentities.storage.ImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(rv.getId()); parameters.setUpdates(updates); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TransferImageStatus, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { initiateResumeStartTransfer(result); } }, model); } else { setErrorMessage(VdcActionType.ExportReportedExportStartTransfer(result); } }
private boolean hasBootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (hasIpv4BootProtocol(ipConfiguration)) || (hasIpv6BootProtocol(ipConfiguration)); }
private org.ovirt.engine.core.bll.validator.NetworkClusterValidator getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.bll.validator.NetworkClusterId networkClusterId = new org.ovirt.engine.core.bll.validator.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }
private boolean hasIpv6BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.isIpv6PrimaryAddressSet())!= (ipv6BootProtocol.NONE); }
private boolean validateBootProtocolForRoleNetwork() { if (!(isRoleNetwork())) { return true; } org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); if (getNetworkCluster().isMigration()) { return false; } if (getNetworkCluster().isMigration()) { return hasBootProtocol(ipConfiguration); } return hasIpv4BootProtocol(ipConfiguration); }
public org.ovirt.engine.core.bll.ValidationResult existingAttachmentIsReused(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.NetworkAttachment> existingAttachmentsByNetworkId) { org.ovirt.engine.core.bll.validator.NetworkAttachment existingAttachmentWithTheSameNetwork = existingAttachmentsByNetworkId.get(attachment.getNetworkId()); if (existingAttachmentWithTheSameNetwork == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ATTACHMENT_IS_NOT_REUSED, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, existingAttachmentWithTheSameNetwork.getId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_NAME, existingAttachmentWithSameNetwork.getNetworkName())).unless(existingAttachmentWithTheSameNetwork.getId().equals(attachment.getId())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.bll.validator.NetworkAttachment oldAttachment) { org.ovirt.engine.core.compat.Guid oldAttachmentId = (oldAttachment == null)? null : oldAttachment.getId(); boolean when = (oldAttachment!= null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CANNOT_CHANGE_ATTACHED_NETWORK, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator.VAR_NETWORK_ATTACHMENT_ID, oldAttachmentId)).when(when); }
private boolean hasIpv4BootProtocol(org.ovirt.engine.core.bll.validator.IpConfiguration ipConfiguration) { return (ipConfiguration.isIpv4PrimaryAddressSet()) && (ipv4v4BootProtocol.isBootProtocolSupported())) && (ipv4v4BootProtocol.isBootProtocolSupported()); }
protected org.ovirt.engine.core.bll.validator.Network getNetwork() { if ((network) == null) { network = networkDao.get(attachment.getNetworkId()); } return network; }
public void onFailed() { updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); log.debug("Updated id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endWithFailure(); log.error("Failed to transfer disk {} (command id '{}') (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
public void onSucceeded() { updateEntityPhase(ImageTransferPhase.FINISHED_SUCCESS); log.debug("Updated id {}", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); imageTransferDao.remove(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.endSuccessfully(); log.info("Updated disk {} (command id '{}') (command id '{}')", getImageIdNullSafe(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); }
@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { log.error(exception, e.getMessage()); } }
@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return new org.ovirt.engine.core.bll.storage.GlusterStorageSyncSyncCallback(); }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getSession() { return geoRepDao.getById(org.ovirt.engine.core.bll.storage.gluster.GlusterStorageSyncCommand.getParameters().getGeoRepSessionId()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("syncData") public void syncData(java.lang.String storageDomainId, java.lang.String geoRepSessionId) { try { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(new org.ovirt.engine.core.compat.Guid(storageDomainId)); if (storageDomain == null) { org.ovirt.engine.core.bll.storage.GlusterStorageDomainDRSyncJob.log.error("No storage domain found"); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session = geoRepDao.getById(new org.ovirt.engine.core.compat.Guid(geoRepSessionId)); if (session == null) { org.ovirt.engine.core.bll.storage.GlusterStorageDomainDRSyncJob.log.error("No geo-replication session found"); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.domain.GlusterStorageDomainDRSyncJob.log.error("Error running on geo-replication session found"); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.domain.GlusterStorageDomainDRSyncJob.log.error("Error running", e); } }
public void setSnapshotId(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmTemplate> snapshotIds) { this.snapshotIds = snapshotIds; }
public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> getSnapshotIds() { return snapshotIds; }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersSource(org.ovirt.engine.core.common.businessentities.StorageDomainDR storageDomainDR) { return getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainDR.getStorageDomainId()).addValue("georep_session_id", storageDomainDR.getGeoRepSessionId()).addValue("sync_schedule_schedule_job_job_job_job_job_job_job_job_job_job_JobId", storageDomainDR.getJobId()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule other = ((org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule) (obj)); return (((java.util.Objects.equals(frequency, other.frequency)) && (java.util.Objects.equals(days, other.days))) && (java.util.Objects.equals(hours, other.days))) && (java.util.Objects.equals(hours, other.days))) && (java.util.Objects.equals(inner, other.mins)); }
public java.lang.String getCronExpression() { java.lang.String cronExpression = ""; switch (frequency) { case DAILY : cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s * * * * * * * * * * * * * * HOUTER, cr, cronExpression = org.ovirt.engine.core.compat.StringFormat.format("0 %s * * * avg, cronExpression = * * cronExpression, * * cronExpression, * cronstruct, cronExpression); case NONE : cronExpression = ""; } return cronExpression; }
public org.ovirt.engine.core.common.businessentities.gluster.StorageSchedule get(java.lang.String cronExpression) { org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule schedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); if (((cronExpression == null) || (cronExpression.isEmpty())) || ((cronExpression.split(" ").split(").length)!= 7)) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.NONE); return schedule; } java.lang.String[] cronParts = cronExpression.split(" "); if (cronParts[5].equals("?")) { schedule.setFrequency(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.Frequency.Frequency.DAILY); } else { schedule.setMins(org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Frequency.Frequency.Frequency.Frequency.Frequency.DETAIL); schedule.setMins(java.lang.Integer.valueOf(cronParts[1])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMins(java.lang.Integer.valueOf(cronParts[2])); schedule.setMinutes(java.lang.Integer.valueOf(cronParts[2])); schedule.
private java.lang.String getDaysCron() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule.Day day : days) { sb.append(days.name()).append(","); } sb.appendCharAt(sb.toString()); return sb.toString(); }
private boolean doesMacAddressValid(org.ovirt.engine.core.common.businessentities.network.VmNic vmInterface) { return (vmNic.getMacAddress())!= null; }
public org.ovirt.engine.core.bll.ValidationResult validateThereIsEnoughOfFreeMacs(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics, org.ovirt.engine.core.bll.network.macpoolmanager.MacPool macPool) { long requiredMacs = streamOfFilteredNics(vmNics, false).count(); boolean notEnoughOfMacs = (requiredMacs > 0) && ((macPool.getAvailableMacsCount()) < requiredMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES).when(notEnoughOfMacs); }
public org.ovirt.engine.core.bll.ValidationResult validateMacAddress(java.util.List<? extends org.ovirt.engine.core.common.businessentities.network.VmNic> vmNics) { for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : vmNics) { if (!(org.ovirt.engine.core.bll.validator.VmNicValidator.VALIDATE_MAC_ADDRESS.matcher(iface.getMacAddress()).matches())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_NETWORK_INTERFACE_MAC_INVALID, java.lang.String.format("$macAddress %1$s", iface.getName()), java.lang.String.format("$macAddress %1$s", iface.getMacAddress())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void replaceInvalidEmptyStringMacAddressesWithNull(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNetworkInterface : vmNetworkInterfaces) { if ((macAddress.getMacAddress().isEmpty()) && (macAddress.isEmpty())) { vmNetworkInterface.setMacAddress(null); } } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getInterfaces(); vmNetworkInterfaces = org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getInterfaces(); vmNetworkInterfaces = org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getInterfaces(); vmNicMacsUtils.replaceInvalidStringMacAddressesWithNull(vmNetworkInterfaces); if ((org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.export.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.export.ImportVmCommand.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.export.ImportVmCommand.validateBalloonEnabled(domainsMap); } return validateAfterCloneVm(domainsMap); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); java.util.Optional<org.ovirt.engine.core.compat.Guid> vdsToRunOn = getVdsToRunOn(); setDestinationVdsId(vdsToRunOn.get()); if (vdsToRunOn.isPresent()) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn.get()); } vmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if (!(vdsToRunOn.isPresent())) { return false; } if ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds().equals(vdsToRunOn.get())) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
private java.util.List<org.ovirt.engine.core.compat.Guid> getVdsBlackList() { java.util.List<org.ovirt.engine.core.compat.Guid> blacklistList = new java.util.ArrayList(org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList()); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId())!= null) && (!(org.ovirt.engine.core.bll.MigrateVmCommand.isInternalExecution()))) { blacklist.add(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsId()); } return blacklist; }
@java.lang.Override protected void processIncoming() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { if ((this.ip) == null) { int read = read(headerBuffer); if (read <= 0) { return; } updateLastIncomingHeartbeat(); this.message = getMessage(headerBuffer, headerBuffer.position); if (contentLength == (-1)) { java.lang.String[] messages = this.message.getContentLength(); if (contentLength == (-1)) { java.lang.String[] messages = new java.lang.String[] messages.length; return; } int contentLengthReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.Message.parse(message); for (java.lang.String message : messages) { message = message + (END_OF_MESSAGE); emitOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.parse(message.getBytes(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.UTF8))); } return; } int length = this.message.getContent().length; if (contentLength == (length) { sendOnMessageReceived(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.Message.ACTION_TYPE_FAILED_OF_MESSAGE); emitOnMessageReceived(this.message); return; } else if (contentLength > length) { this.ibuffix = java.nio.ByteBuffer.allocate(((contentLength - length) + 1)); } else { byteBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1)); } else { byteBuffer.put(java.util.Arrays.copyOfRange(content, (contentLength + 1), content.length)); return; } } readIncomingHeartbeat(); int length = (this.imageLength) + (this.imageLength + 1)); if ((this.imageLength)!= (this.getContentLength())!= (length)) { this.updateLastIncomingHeartbeat(); if ((this.imageLength())!= (this
private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.EnumTranslator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance(); if (translator.containsKey(volumeEntity.getVolumeType())) { java.lang.String volumeType = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().translate(volumeEntity.getVolumeType()); if (volumeEntity.getIsArrays.asList()) { volumeType += " + (org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().arator().arator()); } getDetailModel().setVolumeTypeSilently(volumeEntity.getIsArrays()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { return brick.getQualifiedName(); }
@java.lang.Override public void setVmsWithvNumaNodeList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithvNumaNodeList) { super.setVmsWithvNumaNodeList(vmsWithvNumaNodeList); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vm.getId())) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (parentModel)); if ((model.getVmNumaNodes())!= null) { this.getVmNumaNodeListModel().setvNumaNodeList(model.getVmNumaNodes()); } vmsWithvNumaNodeList.add(vm); } else { for (org.ovirt.engine.core.common.businessentities.VM vmFromDb : vmsWithDb) { if (vmFromDb.getId().equals(vm.getId())) { vmFromDb.setvNumaNodeList(vm.getvNumaNodeList()); break; } } } }
public org.ovirt.vdsm.jsonrpc.client.ResponseBuilder run(org.ovirt.vdsm.jsonrpc.client.JsonNode params, org.ovirt.vdsm.jsonrpc.client.ResponseBuilder builder) { java.util.Map result = activateApi(params); try { java.util.Map apiResult = activateApi(params); if ((fieldName())!= null) { result = apiResult.get(fieldName()); } else { result = apiResult; } } catch (java.lang.Exception e) { org.ovirt.vdsmfake.json.JsonCommand.log.error("Error run api call", e); java.util.Map<java.lang.String, java.lang.Object> error = new java.util.HashMap<>(); error.put("code", 100); error.put("message", e.getMessage()); return builder.withError(error); } if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if (result instanceof java.util.List) { builder = builder.withResult(((java.util.List) (result))); } else if ((result!= null) && (result.getClass().isArray())) { java.util.List tempList tempList = new java.util.ArrayList(); java.util.Collections.addAll(tempList, ((java.lang.Object[]) (result))); builder = builder.withResult(tempList); } else { org.ovirt.vdsmfake.rpc.json.JsonCommand.log.error(tempList, data); } return builder; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.domain.GetStorageDomainDRQuery.getQueryReturnValue().setReturnValue(storageDomainDROM_ID); }
private void setDetailList(final org.ovirt.engine.ui.uicommonweb.models.storage.StorageEventListModel storageEventListModel, final org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StorageDomain> permissionListModel) { generalModel.setIsAvailable(false); dcListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmRegisterListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); vmListModel.setIsAvailable(false); snapshotListModel.setIsAvailable(false); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<org.ovirt.engine.core.common.businessentities.StorageDomain> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(dcBackupModel); list.setIsAvailable(false); this.diskListModel.setIsAvailable(false); this.diskListModel.setIsAvailable(false); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> list = new java.util.ArrayList<>(); list.add(generalModel); list.add(vmListModel); list.add(vmListModel); list.add(vmListModel); list.add(vmListModel); list.add(vmListModel); list.add(vmListModel); list.add(snapshotListModel); list.add(this.storageDomainListModel); list.add(this.storageEvent); list.add(this.storageEvent); list.add(this.storageEvent); setDetailModels(list); }
@java.lang.Override public org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<? extends org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel,?> getConfirmModelPopup(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel, org.ovirt.engine.ui.uicommonweb.UICommand lastExecutedCommand) { if (lastExecutedCommand == (getModel().getRemoveCommand())) { return removeConfirmPopupProvider.get(); } else { return super.getConfirmModelPopup(source, lastExecutedCommand); } }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> paramerterList = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.core.common.action.VdcActionParametersBase parameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(disk.getId(), getEntity().getId()); paramerterList.add(parameters); } model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveDisk, paramerterList, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageDiskListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }
private void updateActionAvailability() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domainDRs = ((getSelectedItems())!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(getSelectedItems()) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); getRemoveCommand().setIsExecutionAllowed(((domainDRESS > 0)); }
private void remove() { if ((getWindow())!= null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.RemoveDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDisksTitle()); model.setHelpTag(HelpTag.remove_disk); model.setHashName("remove_disk"); model.getLatch().setIsAvailable(false); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> items = new java.util.ArrayList<>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (item)); org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.setDisk(disk); items.add(diskModel); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand onRemoveCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(cancelCommand); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); parameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainByStorageDomain, parameters, new org.ovirt.engine.core.common.queries.IdQueryParameters(getId())); }
private void onSave() { final org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); final org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule syncSchedule = new org.ovirt.engine.core.common.businessentities.gluster.StorageSyncSchedule(); syncSchedule.setFrequency(model.getFrequency().getSelectedItem()); syncSchedule.setIsChangable(model.getGeoRepSession().getEntity()); syncSchedule.setMins(model.getGeoRepSession().getEntity()); org.ovirt.engine.core.compat.Guid georepId = ((model.getGeoRepSession().getSelectedItem())!= null)? model.getGeoRepSession().getId() : null; org.ovirt.engine.core.common.action.StorageSyncScheduleParameters parameter = new org.ovirt.engine.core.common.action.StorageSyncScheduleParameters(syncScheduleGlusterStorageSync, storageDomain.getId(), geoRepId); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ScheduleGlusterStorage, parameter, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (result.getState())); model.stopProgress(); localModel.postSaveAction(result.getReturnValue()); } }, this); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { model.getGeoRepSession().setItems(geoRepSessions); model.getGeoRepSession().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.IdPredicate<>(selectedDR.getGeoRepSessionId()))); }
public boolean isQualifyForOnOffUpdateCheckUpdates() { return (((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("availableUpdates") public void availableUpdates() { for (org.ovirt.engine.core.common.businessentities.VDS host : host.getVds().getStatus().isQualifyForCheckUpdates())) { org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.warn("Checker status is skipped for host '{}' due to unsupported host status '{}'", host.getName(), host.getName(), host.getStatus()); continue; } org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.log.info(("Checking available hosts '{}' due to unsupported host status '{}'", host.getName(), host.getStatus()); org.ovirt.engine.core.bll.hostdeploy.HostUpdatesCheckerService.executor.submit(new org.ovirt.engine.core.bll.hostdeploy.HostUpdatesChecker(host)); }
public boolean isQualifyForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }
public void setVdsName(final java.lang.String value) { vdsName = value; }
protected void executeSPMPerCommand(org.ovirt.engine.core.common.vdscommands.VDSCommandType vdsCommandType) { org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getSubchainInfo().getBaseImageId())); org.ovirt.engine.core.common.vdscommands.SParameters parameters = runVdsCommand(vdsCommandType, parameters); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.image.MergeSPMBaseSPMBaseCommand.getParameters().getParentCommand(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseSPMBaseCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.disk.image.image.MergeSPMBaseSPMBaseCommand.getParameters().getParentCommand(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseSPMBaseCommand.getParameters().getParentCommand(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.storage.disk.image.MoveSPMBaseSPMBaseCommand.getTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.disk.image.MergeSPMBaseCommand.getParameters().getStorageDomainId())); org.ovirt.engine
private void mockSnapshotValidator() { when(snapshotsValidator.vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); when(snapshotsValidator.vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(ValidationResult.VALID); }
@org.junit.Before public void initializeMocks() { doNothing().when(command).updateDisksFromDb(); doReturn(true).when(command).checkImageConfiguration(); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(false).when(command).isBalloonEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).isSoundDeviceEnabled(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(true).when(command).validateQuota(); doAnswer(new java.util.ArrayList()).when(diskVmElementDao).getAllForVm(org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); doAnswer(ValidationResult.VALID).when(command).validateQuota(); doAnswer(new java.util.ArrayList()).when(diskVmElementDao).getAllForVm(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(diskVmElementValidator).isPassDiscardsSupported(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.bll.utils.VmDeviceUtils.class, vmDeviceUtils); }
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); getHostList().setIsAvailable(true); getHostList().setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); getHostList().setSearchString("Host:"); getVmList().setSearchString("Vms:"); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem!= (getVolumeList()))) && (oldSelectedItem!= (getVmList()))) && (oldSelectedItem!= (getUserList()))) { setSelectedItem(getVmList()); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String search = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search = tempRef_search.argvalue; search; search = tempRef_search.argvalue; searchStringChanged(); search = tempRef_search.argvalue; searchStringChanged(); searchStringChanged(); searchStringChanged(); searchStringChanged(); searchStringChanged(); searchStringChanged(); searchStringChanged(); searchStringChanged(); searchString = tempRef_search_search.search_search
private void setAllListModelsUnavailable() { for (org.ovirt.engine.ui.uicommonweb.models.ListModel m : getItems()) { if (!(m instanceof org.ovirt.engine.ui.uicommonweb.models.plugin.PluginModel)) { m.setIsAvailable(false); } } }
private org.ovirt.engine.ui.uicommonweb.models.tags.TagModel findRootNode(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel tagModel) { if ((tagModel.getParent())!= null) { return findRootNode(tagModel.getParent()); } return tagModel; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("SelectedItems".equals(args.propertyName)) { if ((getSelectionModel().getSelectedObject())!= null) { org.ovirt.engine.ui.uicommonweb.models.tag.TagActivatedEvent.fire(this, findRootNode(getSelectionModel().getSelectedObject())); } } }
public static org.ovirt.engine.ui.webadmin.plugin.TagObject from(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { if (model!= null) { org.ovirt.engine.ui.webadmin.plugin.TagObject result = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); com.google.gwt.core.client.JsArray<org.ovirt.engine.ui.webadmin.plugin.tag.TagObject> children = com.google.gwt.core.client.JavaScriptObject.createArray().cast(); result.setValueAsString("description", model.getDescription().getEntity()); result.setValueAsDouble("selected", model.getSelection()); if ((model.getParent()) == null) { result.setValueAsDouble("selectedTagCount", org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.calculateSelectedTagCount(model)); } for (org.ovirt.engine.ui.webadmin.plugin.tag.TagObject child : model.getChildren()) { children.push(org.ovirt.engine.ui.webadmin.widget.tag.TagObject.from(child)); } return result; } else { return null; } }
private static java.lang.Double calculateSelectedTagCount(org.ovirt.engine.ui.uicommonweb.models.tags.TagModel model) { double result = 0; for (org.ovirt.engine.ui.uicommonweb.models.tags.TagModel child : model.getChildren()) { result += org.ovirt.engine.ui.webadmin.widget.entity.TagObject.calculateSelectedTagCount(child); } if (model.getSelection()) { result++; } return result; }
@java.lang.Override public void onTagActivated(org.ovirt.engine.ui.uicommonweb.models.TagActivatedEvent event) { manager.invokePlugins("TagActivated", org.ovirt.engine.ui.webadmin.plugin.ui.JsArrayHelper.createMixedArray(org.ovirt.engine.ui.webadmin.plugin.entity.TagObject.from(event.getRoot()))); }
public void setTasksMonitored(boolean tasks) { isTasks = tasksMonitored; }
public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getTasks() { return isTask; }
public void setMonitored(java.lang.String monitoring) { this.monitoring = monitoring; }
public void setJobRequired(boolean isRequired) { this.jobRequired = jobRequired; }
public void setCompleted(boolean completed) { this.finished = completed; }
private org.ovirt.engine.core.common.utils.PersistedCommandContext buildPersistedCommandContext() { org.ovirt.engine.core.common.utils.PersistedCommandContext context = new org.ovirt.engine.core.common.utils.PersistedCommandContext(); persistedCommandContext.setJobId((getExecutionContext()) == null)? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId())); persistedCommandContext.setStepId((((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null))? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().toString())); if ((getExecutionContext())!= null) { persistedCommandContext.setExecutionMethod(((getExecutionContext()) == null? null : getExecutionContext().getExecutionMethod().toString())); } if ((getExecutionContext())!= null) { persistedCommandContext.setCompleted(getExecutionContext().isCompleted()); } return persistedCommand; }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); org.ovirt.engine.core.common.PersistentCommandContext persistedCommandContext = cmdEntity.getCommandContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(persistedCommandContext.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(jobId.getJobId())); } else if (!(org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getStepId()))) { executionContext.setStep(jobRepository.getStep(jobRepository.getStepId())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(persistedCommandContext.getExecutionMethod())) { executionContext.setExecutionMethod(ExecutionContext.getExecutionMethod()); executionContext.setJobRequired(persistedCommandContext.isMonitored()); executionContext.setMonitored(persistedCommandContext.isMonitored()); executionContext.setTasksMonitored(persistedCommandContext.isMonitored()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); executionContext.setTasksMonitored(persistedCommandContext.isTasksMonitored()); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
public static org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid userId, long engineSessionSeqId, org.ovirt.engine.core.compat.Guid commandId, org.ovirt.engine.core.compat.Guid rootCommandId, org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParameters commandContext, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue, java.util.Map<java.lang.String, java.io.Serializable> data) { org.ovirt.engine.core.common.businessentities.CommandEntity entity = new org.ovirt.engine.core.common.businessentities.CommandEntity(); entity.setEngineSessionSeqId(engineSessionSeqId); entity.setUserId(userId); entity.setId(commandId); entity.setParentCommandId(parentCommandId); entity.setRootCommandId(rootCommandId); entity.setCommandContext(actionType); entity.setCommandStatus(status); entity.setCallbackEnabled(callbackEnabled); entity.setCallbackEnabled(callbackEnabled); entity.setCallbackEnabled(callbackEnabled); entity.setCallbackEnabled(callbackEnabled); entity.setCallbackEnabled(callbackEnabled); return entity; }
public boolean isCompleted() { return (getTaskHandlers()) || ((getAsyncTaskHandlers()) == null)) || (getCommands().getAsyncTaskId().equals(getTaskId())))) { return false; }
public java.lang.String getSystemType() { return getClusterId(); }
public void setExecutionMethod(java.lang.String executionMethod) { this.executionMethod = getExecutionMethod(); }
public boolean isJobRequired() { return (getJobRequired())!= null; }
public org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getMonitored() { return org.ovirt.engine.core.common.businessentities.network.NetworkStatistics.getBondById(org.ovirt.engine.core.utils.transaction.NetworkUtils.getTranslator().getTranslator()).getTranslator(); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { java.util.Map<java.lang.String, java.lang.Object> returnVal = null; if (event.isExternal()) { returnVal = getCallsHandler().executeModification("InsertAuditLog", getExternalEventSqlParameterSource(event)); } else { returnVal = getCallsHandler().executeModification("InsertAuditLog", getSqlParameterSource().getId()); } event.setAuditLogId(((java.lang.Integer) (returnVal.get("audit_log_id")))); }
private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { if (loggerString.isEmpty()) { return org.apache.commons.lang.StringUtils.isEmpty(loggerString, auditLog.getMessage()); } else { return java.text.MessageFormat.format("Unable ID: {0}, {1}", auditLog.getAuditLogId(), message); }
public static java.lang.String escapedUnderScore(final java.lang.String customizedValue, final java.lang.String customizedRelation) { java.lang.String escapedValue = customizedRelation.equalsIgnoreCase("LIKE") || (customizedRelation.equalsIgnoreCase("ILIKEi"))) { java.lang.String replaceWith = "_"; int pgMajorRelease = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PgMajorRelease); if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG8.getValue())) { replaceWith = "\\\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } else if (pgMajorRelease == (org.ovirt.engine.core.searchbackend.SyntaxChecker.PgMajorRelease.PG9.getValue())) { replaceWith = "\\_"; } else { escapedValue = customizedValue.replace("_", replaceWith); } return escapedValue; }
private java.lang.String getEffectiveEmulatedMachine() { if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomEmulatedMachine())!= null) { return org.ovirt.engine.core.bll.RunVmCommand.getVm().getEmulatedMachine(); } java.lang.String latestDefault = org.ovirt.engine.core.bll.RunVmCommand.getCluster().getEmulatedMachine(); if ((removeThisDebugEnabled) && ((org.apache.commons.lang.StringUtils.equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()))) { java.util.List<java.lang.String> oldSupported = org.ovirt.engine.core.common.config.Config.<java.util.List<java.lang.String>>getValue(ConfigValues.ClusterEmulatedMachines, org.ovirt.engine.core.bll.RunVmCommand.getVm().getCustomCompatibilityVersion().getValue()); return bestDefault; } return latestDefault; }
public static java.util.Map<java.lang.String, java.lang.Object> prepareLocationInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.LocationInfoLocationInfo nodeInfo) { if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) { org.ovirt.engine.core.common.businessentities.ExternalLocationInfo info = ((org.ovirt.engine.core.common.businessentities.ExternalLocationInfo) (locationInfo)); if (ConnectionMethod.HTTP.equals(info.getConnectionMethod())) { org.ovirt.engine.core.common.businessentities.HttpLocationInfo httpInfo = ((org.ovirt.engine.core.common.businessentities.HttpLocationInfo) (info)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("method", "http"); infoMap.put("url", httpInfo.getUrl()); infoMap.put("headers", httpInfo.getUrl()); return infoMap; } } if (locationInfo instanceof org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (locationInfo)); java.util.Map<java.lang.String, java.lang.Object> infoMap = new java.util.HashMap<>(); infoMap.put("endpoint_type", "div"); infoMap.put("sd_id", info.getImageId().toString()); infoMap.put("storage_id", info.getImageId().toString()); return infoMap; } throw new java.lang.RuntimeException("No reporting", }
@java.lang.Override public org.ovirt.engine.api.model.ImageTransfer get() { org.ovirt.engine.api.model.Image copyImage = performGet(VdcQueryType.GetImageTransferById, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); if (image!= null) { imageTransfer.getImage().unsetLinks(true); } return image; }
@java.lang.Override public org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities) { org.ovirt.engine.core.common.job.Step step = stepDao.get(stepId); if (includeSubjectEntities) { step.setSubjectEntities(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(stepId)); } return step; }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId, boolean includeSubjectEntities);
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.job.Step> steps = stepDao.getStepsByJobId(org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getParameters().getJobId()); steps.add(stepSubjectEntityDao.getStepSubjectEntitiesByStepId(s.getId()))); org.ovirt.engine.core.bll.GetStepsByJobIdQuery.getQueryReturnValue().setReturnValue(steps); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId())); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext)); }
private void reorderNics() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDevice> vmInterfaceDevices = getVmInterfaceDevices(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nicsToReorder = new java.util.ArrayList<>(); java.util.List<java.lang.String> macsToReorder = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : nics) { org.ovirt.engine.core.common.businessentities.VmDevice nicDevice = vmInterfaceDevices.get(nic.getId()); if ((nicDevice == null) || (org.apache.commons.lang.StringUtils.isEmpty(nic.getAddress()))) { nicsToReorder.add(nic); macsToReorder.add(nic); } } java.util.Collections.sort(nicsToReorder, new org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); for (int i = 0; i < (nicsToReorder.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic nic = nicsToReorder.get(i); nic.setMacAddress(macsToReorder.get(i)); vmNicDao.update(nic); } }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Nameable nameable1, org.ovirt.engine.core.common.businessentities.Nameable nameable2) { final java.lang.String nameName = nameable1.getName(); final java.lang.String name2 = nameable2.getName(); final org.ovirt.engine.core.bll.NumericSuffixSuffixNormalizer pluralSuffixNormalizer = new org.ovirt.engine.core.bll.common.NumericSuffixNormalizer(); final java.util.List<java.lang.String> normalNames = org.apache.commons.lang.ObjectUtils.isEmpty(name1, name2); return org.apache.commons.lang.ObjectUtils.isNotified(suffixedNames.get(0), negativeNames.get(1)); }
private org.ovirt.engine.core.common.businessentities.HostInfo.HostJobStatus handleUndefinedJobStatus(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Host '{}': id: '{}': attempting to determine the entity.", cmd.getActionType(), cmd.getCommandId()); org.ovirt.engine.core.common.businessentities.HostJobStatus status = pollEntity(cmd); if (status!= null) { return status; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)); if (entityPollingCommand.isJobFencingSupported()) { cmdPollingJob(); } return null; } if (jobsReportedByHost) { log.error("Host '{}': {}", id, cmdPolling job.getJobId()); entityPollingCommand.attemptedToFenceJob(); } return null; } if (obsReportedByHost) { log.error("Host '{}': {}", id, e.getCommandId()); } if (cmd.failJobWithUndefinedStatus()) { log.error("Failed to determine the same job status, '{}'", cmd.getCommandId()); return org.ovirt.engine.core.bll.storage.KPollingCommand.log.error("Host '{}' id: '{}': {}", cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.bll.storage.KJobStatus.failed; } if (cmd.failJobWithUndefinedStatus()) { log.error("Host '{}': {}", id.getCommandId()); return org.ovirt.engine.core.bll.storage.GetHostJobStatus.failed; } log.error("Host '{}' failed to determine the same operation", cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.bll.storage.GetHostIdCommandStatus.FAILED; }
private void handlePolledJobInfo(org.ovirt.engine.core.bll.storage.StorageJobCommand<?> cmd, org.ovirt.engine.core.common.businessentities.HostJobInfo jobInfo) { if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobStatus.running)) { cmd.getParameters().setJobStarted(true); cmd.persistCommand(cmd.getParameters().getParentCommand(), true); cmd.persistCommand(cmd.getParameters().getParentCommand(), true); } if ((jobInfo.getStatus())!= (org.ovirt.engine.core.common.businessentities.HostJobStatus.failed)) { return; } if ((jobInfo.getError())!= null) { jobInfo.setStatus(cmd.handleJobError(jobInfo.getError().getCode())); if ((jobInfo.getStatus()) == (org.ovirt.engine.core.common.businessentities.HostJobInfo.Done)) { jobInfo.setStatus(null); } } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterCreateBricks(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeName);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterCreateBricks(java.lang.String jobId, java.util.Map<java.lang.String, java.lang.Object> volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SD.set_creation_creation").withParameter("job_creation").withParameter("job_info", jobId).withParameter("vol_info", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private org.ovirt.engine.core.common.businessentities.HostInfo.HostJobStatus handleUndefinedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Waiting {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error("Failed {} id: '{}': {}", cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error("Failed to deter id: '{}': failed to determine the actual job status, " + " the command execution status, "Failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed as failed."); return org.ovirt.engine.core.common.businessentities.HostJobInfo.failed; }
@java.lang.Override public boolean isJobFencingSupported() { return isDstVdsmImage(); }
@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); runInternalActionWithTasksContext(VdcActionType.FenceVolume, p); } }
protected void initEffectiveCompatibilityVersion() { org.ovirt.engine.core.compat.Version effectiveCompatibilityVersion = getInstance().getSupportedClusterLevels().get(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData().getCustomCompatibilityVersion()); setEffectiveCompatibilityVersion(effectiveCompatibilityVersion); }
public void checkInvalidAddress() { assertFalse(underTest.testVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
@java.lang.Override protected void executeVdsBrokerCommand() { log.info("CopyVolumeData", org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfoInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getJobId().toString(), buildLocationInfoInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo()), buildLocationInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.CopyVolumeDataVDSCommand.getParameters().getSrcInfo())); }
protected boolean validateLeaseStorageDomain(org.ovirt.engine.core.compat.Guid leaseStorageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(leaseStorageDomainId); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(validator.isDomainExistAndActive()))) { return false; } if (getStoragePoolId().equals(domain.getStoragePoolId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_LEASE_STORAGE_IS_NOT_A_PART_OF_POOL); } return true; }
@java.lang.Override protected void executeVmCommand() { if (shouldAddLease(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm())) { if (org.ovirt.engine.core.common.FeatureSupported.isVmLeasesSupported(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getLeaseStorageDomainId())) { if (!(addVmLease(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getId()))) { org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().setLeaseStorageDomainId(null); } } else { auditLogDirector.log(this, AuditLogType.CANNOT_IMPORT_VM_WITH_LEASE_STORAGE_DOMAIN_ERROR); } } super.executeVmCommand(); }
public java.lang.String getConfigurationValue(java.lang.String subnet) { java.lang.String extraOption = ""; if (value.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.BOND4.value)) { extraOption = ""; return customOption = ""; } return (((org.ovirt.engine.core.common.businessentities.network.BondMode) + (value)) + "100") + "100") + extraOption; }
void initComboBox() { keyListBoxEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor(new org.ovirt.engine.ui.common.widget.editor.ListModelTypeAheadListBoxEditor.NullSafeBoxRenderer<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo>() { @java.lang.Override public java.lang.String getReplacementStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo option) { return option.getKey(); } }; }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionInfo data) { return templates.typeAheadNameDescription((data == null? org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty() : data.getKey()), org.ovirt.engine.ui.webadmin.section.main.view.popup.gluster.VolumeParameterPopupView.constants.empty()).asString(); }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.Command<T>.StateContext context) { log.info("Start successful transfer for {}", getTransferDescription()); if (stopImage(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferer.getVdsId())) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); org.ovirt.engine.core.common.businessentities.storage.QoImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.image.ImageCommand.getImage().getImage().getImageId(), org.ovirt.engine.core.bll.storage.image.TransferImageCommand.getImage().getImage().getImageId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImageId(), false); if (qemuImageInfo!= null) { org.ovirt.engine.core.bll.storage.disk.image.CopyImageCommand.getImage().setQCowCompat(qemuuuImageInfo.getImage()); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.CopyImageCommand.unLockImage(); updateEntityPhase(Image); } else { setImageStatus(ImageStatus.ILLEGAL); } } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.AbstractUiCommandButton createCommandButton(java.lang.String label, java.lang.String uniqueId) { if (VmBasedWidgetSwitchModeCommand.equals(uniqueId)) { org.ovirt.engine.ui.common.widget.table.LeftAlignedUiCommandButtonLeftUiCommand button = new org.ovirt.engine.ui.common.widget.uicommon.popup.IiCommandButton(label); return leftAlignedUiCommandButton; } return super.createCommandButton(label, uniqueId); }
@javax.ws.rs.Path("{action: (activate|migrate)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return injectResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{oid}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return (((getDelegate().getActionStatus(action, oid))); }
@javax.ws.rs.Path("(getprofilesestatistics|rebalance|rebalance|rebalance|setoption|start|start|start|stopproroles|stop|stop|suspend)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((javax.ws.rs.PathParam("oid")); }
@javax.ws.rs.Path("{action: (activate|export|export)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return injectResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{oid}/{oid}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return (((Delegate.getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (activate|commitnetconfig|deactivate|deploy|deploy|fence|iscsidiscover|iscsilogin|refresh|refresh|refresh|refresh|refresh|refresh|iscsilogin|setupnetworks|previewnetworks|upgrade)}/{oid}") public javax.ws.rs.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((javax.ws.rs.PathParam("oid")); }
@java.lang.Override public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendActionResource(action, id)); }
@javax.ws.rs.Path("{oid: (disable|resolve)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return injectResponse(getDelegate().getActionStatus(action, oid)); }
public javax.ws.rs.core.Response getActionStatus(java.lang.String action, java.lang.String oid) { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).build(); }
public static java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> getSubServices(java.lang.Class<?> resource) { java.util.List<org.ovirt.engine.api.rsdl.ServiceTreeNode> resources = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.rsdl.ServiceTree.getMethods(resource, org.ovirt.engine.api.rsdl.ServiceTree.SUB_RESOURCOURCES)) { java.lang.String path = method.getAnnotation(javax.rsdl.ServiceTree.class).value(); java.lang.Class<?> type = method.getAnnotation(javax.rsdl.ServiceTree.class).value(); java.lang.Class<?> type = method.getAnnotation(javax.ws.rsdl.ServiceTree.class).value(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); java.lang.Class<?> type = method.getReturnType(); if (method!= null) { java.lang.Class<?> type = method.getReturnType(); resource.add(org.ovirt.engine.api.rsdl.ServiceTree.buildNode(type, path)); } } } return resources; }
@javax.ws.rs.Path("{action: (isattachedluns)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return (((getDelegate().getActionStatus(action, oid))); }
@javax.ws.rs.Path("{export)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((Delegate.getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (allocatevm)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return ((getDelegate().getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (attach|detach|update virtualfunctions configuration)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((Delegate.getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (restore)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return (((Delegate.getActionStatus(action, oid))); }
@javax.ws.rs.Path("{oid}/{oid}") public javax.ws.rs.core.Response getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return injectResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{oid|export)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return (((getDelegate().getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (move)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return injectResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{action: (cannotate|commit_snapshot|export|commit|migrate|migrate|migrate|reboot|preview_snapshot|reboot|reboot|preview|snapshot|preview|snapshot)}/{oid}") public javax.ws.rs.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return (((javax.ws.rs.PathParam("oid") java.lang.String oid) (getDelegade().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{oid}/{oid}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return (((Delegate.getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (replace)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return injectResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{oid:{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return (((getDelegate().getActionStatus(action, oid))); }
@javax.ws.rs.Path("{reload config}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return (((getDelegate().getActionStatus(action, oid))); }
@javax.ws.rs.Path("{action: (resetemulatedmachine)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String oid) { return injectResponse(getDelegate().getActionStatus(action, oid)); }
@javax.ws.rs.Path("{importcertificates|testconnectivity)}/{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return getDelegate().getActionStatus(action, oid); }
@javax.ws.rs.Path("{action: (clear|{oid}") public javax.ws.rs.core.Response getActionStatus(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid); return (((getDelegate().getActionStatus(action, oid))); }
public void addNetworkFiltersToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = fetchVnicProfileNetworkFilter(vmNic); if (networkFilter!= null) { final java.lang.String networkFilterName = networkFilter.getName(); struct.put(VdsProperties.NW_FILTER, networkFilterName); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parameters = new java.util.LinkedList<>(); final java.util.Map<> vmNicFilterParameters = vmNicFilter.getAllForVmNic(vmNic.getId()); vmNicFilterParameters.put(new org.ovirt.engine.core.vdsbroker.vdsbroker.vdsbroker.VmNicVmNicVmNicVmNic(vmNic.getId()); vmNicFilterParameters.put("value", nicFilterParameter.getValue()); parameters.put(parameter); } struct.put(VdsProperties.NW_FILTER_PARAMETERS, parameters.getValue()); } }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getStoragePoolId()); setStoragePoolId(org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getVm()); if (((org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getDiskMap())!= null) && ((org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getDiskMap())!= null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmCommand.getEffectiveCompatibilityVersion()); }
public static org.ovirt.vdsmfake.Api.Api getInstance() { return org.ovirt.vdsmfake.Api.Api.class; }
public java.util.Map<java.lang.String, java.util.Map> hostDevListByCaps() { java.util.Map resultMap = getDoneStatus(); java.util.Map<java.lang.String, java.util.Map> infoMap = new java.util.HashMap<java.lang.String, java.util.Map>(); infoMap.put("capabilities_0000_1", getHardware(0)); infoMap.put("pci_1_1b_1", getHardware(1)); infoMap.put("pci_1b_1b_2", getHardware(1)); infoMap.put("pci_1b_1b_2", getHardware(3)); infoMap.put("pci_1_1b_2", getHardware(3)); infoMap.put("pci_1b_1b_5", getHardware(5)); infoMap.put("pci_1b_1b_5", getHardware(5)); infoMap.put("pci_1b_1b_5", getHardware(5)); infoMap.put("pci_1b_1b_1b_7", getHardware(7)); infoMap.put("pci_1b_1b_9", getHardware(9)); infoMap.put("pci_1b_1b_9", getHardware(10)); infoMap.put("pci_1b_1b_1b_10", getHardware(10)); infoMap.put("info", infoMap); } catch (java.lang.NullPointerException e) { log.error("Error failed due to {}", eMap.put("info", infoMap); throw new java.lang.NullPointerException(e); } finally { log.error("Error failed due to {}", e); } }
public void sparsifyNotSupportedWhenWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_STORAGE_DISK_WHENABLED)); }
private void setupParameters() { org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setImageGroupID(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setDestinationImageId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImageGroupID())); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.compat.Guid.newGuid())); }
private void writeCdRom(org.ovirt.engine.core.utils.ovf.xml.XmlText writer, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, org.ovirt.engine.core.common.businessentities.VM vm) { if (devices.isEmpty()) { return; } org.ovirt.engine.core.common.businessentities.VmDevice device = devices.get(0); writer.writeElement("type", "file"); writer.writeAttributeString("device"); writer.writeAttributeString("device", "cdromrom"); writer.writeAttributeString("snapshot", "cdromrom"); writer.writeAttributeString("snapshot", "no"); writer.writeAttributeString("startupPolicy", "optional"); writer.writeAttributeString("startupPolicy", "optional"); writeEndElement(); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getCompatibilityVersion(), org.ovirt.engine.core.common.businessentities.HardwareGeneralType.fromMachineType(vm.getEmulatedMachine())); writer.writeEndElement(); java.lang.String cdInterface = osRepository.getCdInterface(vm.getOs(), vm.getEmulatedMachineType(vm.getEmulatedMachine())); writer.writeEndElement(); writeAliasAndAddress(writer, device); writeAliasAndAddress(writer, device); writeAliasAndAddress(writer, device); writeAliasAndAddress(writer, device); writeAliasAndAddress(writer, device); writeAliasAndAddress(writer, device); writeAliasAndAddress(writer, device); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } macPool = getMacPool(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> domainsMap = new java.util.HashMap<>(); if (!(validateBeforeCloneVm(domainsMap))) { return false; } org.ovirt.engine.core.bll.VmHandler.updateMaxMemorySize(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmCommand.getEffectiveCompatibilityVersion()); if (org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().isImportAsNewEntity()) { initImportClonedVm(); if ((org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getInterfaces().size()) > (macPool.getAvailableMacsCount())) { return failValidation(EngineMessage.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES); } } if (!(org.ovirt.engine.core.bll.VmHandler.validateBallonDevice())) { return false; } if (!(org.ovirt.engine.core.bll.VmHandler.validateSoundDevice())) { return false; } if (!(org.ovirt.engine.core.bll.VmHandler.validateSoundDevice())) { return false; } if (!(validate(org.ovirt.engine.core.bll.VmHandler.validateMaxMemorySize(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return false; } return validateAfterCloneVm(domainsMap); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev(); vmDeviceDao.remove(graphicsDev.getId()); if (noGraphicsDevicesLeft()) { getVmDeviceUtils().removeVideoDevices(getParameters().getDev().getVmId()); setVmToHeadlessMode(); } setSucceeded(true); }
private void setVmToHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic!= null) && ((vmStatic.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmStatic.setSingleQxlPci(false); vmStaticDao.update(vmStatic); } }
private boolean noGraphicsDevicesWithoutDevice(org.ovirt.engine.core.common.businessentities.GraphicsDevice device) { java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> devices = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId()), org.ovirt.engine.core.common.queries.IdQueryParameters.getReturnValue())); return devices.isEmpty(); }
private void setTemplateToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate!= null) && ((vmTemplate.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmTemplateDao.update(vmTemplate); } if (getVmDeviceUtils().getVideoDevices(vmTemplate.getDevices().getDevices(vmTemplate)); } }
private void setVmToNonHeadlessMode() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(getParameters().getDev().getVmId()); if ((vmStatic!= null) && ((vmStatic.getDefaultDisplayType()) == (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmStaticDao.update(vmStatic); } if (getVmDeviceUtils().getVideoDevices(vmStatic.getDev().getDevicesForVideoDevices(vmStatic)); } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getDev().getVmId())); if (res.getSucceeded()) { prevDevices = res.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice device : prevDevices) { if (device.getGraphicsType().equals(getParameters().getDev().getGraphicsType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_ONLY_ONE_DEVICE_WITH_THIS_GRAPHICS_ALLOWED); } } } return true; }
public int getNeededNumberOfVideoDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { int maxMonitorsSpice = (vmBase.getSingleQxlPci())? org.ovirt.engine.core.bll.utils.VmDeviceUtils.SINGLE_QXL_MONITORS : vmBase.getNumOfMonitors(); int maxMonitorsVnc = java.lang.Math.max(org.ovirt.engine.core.bll.utils.VmDeviceUtils.VNC_MIN_MONITORS, vmBase.getNumOfMonitors()); return java.lang.Math.min(maxMonitorsSpice, maxMonitorsVnc); }
private void setTemplateToHeaders() { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = vmTemplateDao.get(getParameters().getDev().getVmId()); if ((vmTemplate!= null) && ((vmTemplate.getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.None))) { vmTemplate.setDefaultDisplayType(DisplayType.None); vmTemplateDao.update(vmTemplate); } }
public java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> getPreviousDevices() { return prevDevices; }
private void updateQCowCompat() { if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().equals(VolumeFormat.COW)) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().setQCowCompat(QoImage.getCompatibilityVersion()); if (org.ovirt.engine.core.common.FeatureSupported.qoImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getQemuImageInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.image.Image.TransferImageCommand.getImage().getImage().getDiskId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage().getDiskId(), false); if (qemuImageInfo!= null) { org.ovirt.engine.core.bll.storage.disk.image.ImportImageCommand.getImage().setQCowCompat(qemuImageInfo.getImage().getImageId(), false); } imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.ImageCommand.getImage().getImage()); } }
private void completeGenerationInfo() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getStoragePoolId(), info.getImageGroupId(), info.getBaseImageId()); info.setGeneration(image.getImage().getGeneration()); org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.persistCommandIfNeeded(); }
public static java.util.Map<java.lang.String, java.lang.Object> prepareSubchainInfoForVdsCommand(org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo) { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put("sd_id", subchainInfo.getStorageDomainId().toString()); map.put("image_id", subchainInfo.getImageId().toString()); map.put("base_id", subchainInfo.getImageId().toString()); map.put("base_id", subchainInfo.getBaseImageId().toString()); if ((subchainInfo.getBaseImageId())!= null) { map.put(org.ovirt.engine.core.bll.ValidationResult.VALID, org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_BE_HOST_ID_ID, subchainInfo.toString()); } return map; }
public java.lang.Integer getGeneration() { return generation; }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this.storageDomainId, storageDomainId).append("imageGroupId=").append(imageGroupId).append(imageGroupId).append("baseImageId=").append(baseImageId).append(baseImageId=").append(baseImageId=").append(baseImageId).append(", generation=").append(generation=").append(generation=").append(generation=").append(generation=").append(generation=").append(generation=").append(generation=").append(size()).append("]"); }
public void setGeneration(int generation) { this.generation = generation; }
@java.lang.Override public HostJobInfo.HostJobStatus poll() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); return poller.pollImage(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getStoragePoolId(), info.getImageGroupId(), info.getImageGroupId(), info.getBaseImageGroupId(), org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); }
@java.lang.Override public void attemptToFenceJob() { org.ovirt.engine.core.common.businessentities.SubchainInfo info = org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo(); org.ovirt.engine.core.common.action.VdcReturnValueBase result = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters().getSubchainInfo()); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters parameters = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(locationInfo); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getActionType()); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters()); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.ColdMergeCommand.getParameters()); parameters.setEndProcedure(false); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, parameters); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this.storageDomainId, storageDomainId).append("imageGroupId=").append(imageGroupId).append(imageGroupId).append("baseImageId=").append(baseImageId=").append(baseImageId=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(", baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(", baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(", baseImageGeneration=").append("}'", baseImageGeneration=").append("}'=").append(baseImageGeneration=").append("}'", builder.toString()).append("}'. ", "]") + "]")); }
private void setNextRunMessages() { com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); java.lang.String translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.minAllocatedMem(); try { translated = org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmNextRunConfigurationWidget.nextRunMessages.getString("minAllocatedMem"); } catch (java.util.MissingResourceException e) { } java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(translated); changedFieldsBuilder.append(bulletedItem(escapedField)); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.vms.VmNextRunConfigurationModel object) { driver.edit(object); setNextRunMessages(); if (object.isVmUnpinned()) { setVisibilityToVmUnpinningPanel(true); } if ((object.getChangedFields().size()) > 0) { setVisibilityToChangedFieldsExpander(true); com.google.gwt.safehtml.shared.SafeHtmlBuilder changedFieldsBuilder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); for (java.lang.String field : object.getChangedFields()) { java.lang.String escapedField = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(field); changedFieldsBuilder.append(bulletedItem(escapedField)); } changedFields.setHTML(changedFieldsBuilder.toSafeHtml()); } setVisibility(object); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { java.util.Collection<java.lang.String> packages = org.ovirt.engine.core.bll.hostdeploy.VdsDeployHostDeployHostPackagesUnitUpdateUpdate(host.getVdsType(), host.getClusterCompatibilityVersion()); try (final org.ovirt.engine.core.bll.hostdeploy.VdsDeploy hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.addUnit(new org.ovirt.engine.core.bll.hostdeploy.VdsDeployPackagesUnit(packages, false)); hostPackagesManager.execute(); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to update host '{}'.", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", ")); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e); throw new java.lang.RuntimeException(e); } }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (isMonitoringNeeded(vdsManager.getCopyVds().getStatus())) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.vdsbroker.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Polling to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
public boolean isMonitoringNeeded(org.ovirt.engine.core.common.businessentities.VDSStatus status) { return (status == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || (((((((((status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Unassigned)) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS))) && (status!= (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.AffinityLabel.class, to = org.ovirt.engine.core.common.businessentities.Label.class) public static org.ovirt.engine.core.common.businessentities.Label map(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label template) { org.ovirt.engine.core.common.businessentities.LabelBuilder entity = (template!= null)? new org.ovirt.engine.core.common.businessentities.LabelBuilder(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.name(model.getName()); } if (model.isSetName()) { entity.setName(model.getName()); } if ((model.isSetReadOnly()) && (model.getVms().isSetVms())) { model.getVms().getVms().getVms().forEach(((org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(vm.getId()))); } if ((model.isSetHosts()) && (model.getHosts().isSetHosts())) { model.getVms().getHosts().forEach((host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } if ((model.isSetHosts()) && (model.hosts.isSetHosts())) { model.getHosts().getHosts().forEach((host) -> entity.host(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(host.getId()))); } return entity.build(); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.api.model.Disk transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getImageId(), transform.getImageId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertEquals(model.getLogicalName(), transform.getLogicalName()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getName(), transform.getOpenstackVolumeType().getName()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected status", model.getStatus(), transform.isSparse()); assertEquals("unexpected sparse error", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable()); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); if (disk.isSetReadOnly) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.getReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.AffinityLabel model, org.ovirt.engine.core.common.businessentities.Label entity) { org.ovirt.engine.core.common.businessentities.Label newEntity = new org.ovirt.engine.core.common.businessentities.LabelBuilder(entity); if (model.isSetReadOnly()) { newEntity.readOnly(model.getReadOnly()); } if (model.isSetName()) { newEntity.name(model.getName()); } return new org.ovirt.engine.core.common.action.LabelActionParameters(newEntity.build()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse error", model.isPropagateErrors(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable()); }
public java.lang.String getFieldName() { return fieldName; }
private static java.lang.String formatted(java.lang.String xmlString) { try { javax.xml.parsers.DocumentBuilder documentBuilder = javax.xml.parsers.DocumentBuilder.newInstance(); javax.xml.XmlRpcFactory template =documentBuilderFactory.newInstance(); org.w3c3c.xml.XML = documentBuilder.newInstance(); org.ovirt.engine.core.utils.transport.TransactionMethod documentation = null; try { javax.xml.transform.TranslatorFactory = new org.xml.Translator(); transport.setOutputProperty(javax.xml.transform.OutputKeys.ENCODING, "UTF-8"); } catch (java.xml.xml.XmlNodeException e) { org.ovirt.engine.core.utils.transport.TranslatorFactory.newInstance(new java.io.IOException()); javax.xml.transform.Translator result = new javax.xml.transform.Translator(); result.setOutputProperty(javax.xml.XmlRxlwtNode(document); java.util.Map<java.lang.String, java.lang.String> result = new javax.xml.xml.XmlNode(document); result.transform(source, result); return result.getWriter().toString(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.CreateVDSCommand.log.error("failed"); return ""; } } }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.info("Create VDS::v4} {}", createInfo); if (org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().buildVMDynamicData(vm.getDynamicData(), vm.getVds().getId())) { java.lang.String libvirtXmlRpc = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getBroker().createVMDynamicData(vm.getDynamicData(), vm.getVds().getId()); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(libvirtXml)); createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vmReturn.vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getVds()); }
@javax.annotation.PostConstruct public void create() { log.info("Initializing optimizer service started"); org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.compat.Guid.newGuid(); java.lang.Integer vrefresh = ((java.lang.Integer) (configProvider.getConfig().getProperty(ConfigProvider.SOLVER_CLUSTER_REFRESH)); if (refresh!= null) { refresh = java.util.concurrent.TimeUnit.getThreadPool().submit(this.refreshClusters), java.util.concurrent.TimeUnit.MILLISECONDS); } else { throw new java.lang.IllegalArgumentException("Failed to get VDSCANCONDS '{}'", java.util.concurrent.TimeUnit.MILLISECONDS); } }
private void refreshClusters() { log.debug("refresh clusters..."); java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Clusters '{}'", availableClusters.keySet()); return; } availableClusters.removeAll(clusterOptimizer.keySet()); java.util.Properties config = new org.ovirt.optimizer().load().load().getConfig(); final int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEIP)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("cluster %sdetected cluster %sdetected", configProvider.getProperty(Configs, timeout, configProvider.customRule)); long timeout = (java.lang.Integer.parseInt(configProvider.load().getProperty(Configs, timeout, configProvider.customRule)) * 1000; int refresh = java.lang.Integer.parseInt(configProvider.load().getProperty(Configs, timeout, configProvider.customRules, timeout, configProvider.customRuleFiles)); org.ovirt.optimizer.solver.thread.Threadsolver = new org.ovirt.optimizer.solver.Threadsolver(client, optimizer); clusterOptimizer = new org.ovirt.optimizer.optimizer.solver.Threadsolver(client, optimizer); clusterOptimizer.put(clusterId, optimizer); java.util.concurrent.ComplementedFuture.supportsAsync(optimizer); java.util.concurrent.ComplementedFuture<org.ovirt.engine.core.compat.Guid, java.util.concurrent.TimeUnit> executors.put(new org.ovirt.engine.core.common.optimizer.TimeUnit.SECONDS_DITION_REQUEST)).thenReturn(clusterOptimizer); java.util.concurrent.ComplementedFuture.supportsAsync(updater), refresh, java.util.concurrent.TimeUnit.SECONDS_UP); }
public java.util.List<java.nio.file.Path>> customRuleFiles() { java.util.concurrent.Path dir = java.nio.FileSystems.getDefault().getPath(org.ovirt.optimizer.config.ConfigProvider.SOLVER_CUSTOM_RULE_DIR)); final java.util.List<java.nio.File> candidateFiles; try { candidateFiles = java.nio.File.Files.list(dir).collect(java.util.stream.Collectors.toList()); } catch (java.nio.IOException e) { org.ovirt.optimizer.config.ConfigProvider.log.warn("Could not get a list of custom DRL file: {}", e); return java.util.Collections.emptyMap(); } org.ovirt.optimizer.config.ConfigProvider.log.debug("Could not get a list of custom DDL file: {}", p.endsWith(java.util.stream.Collectors.toList()); } org.ovirt.optimizer.config.ConfigProvider.log.debug("Config:: {} custom DHL file: {}", org.ovirt.engine.core.utils.thread.ConfigProvider.log.debug("Ignoring DHL file p).collect(java.util.stream.Collectors.toList()); }
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice!= null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevicesToUpdate.add(vmDevice); } }
private void addDiskVmElements() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : _images) { disk.getDiskVmElements().stream().stream().stream().forEach(( dve) -> dve.getDiskVmElements()))); disk.setDiskVmElements(disk.getDiskVmElements()); } }
public static void deserialize(com.google.gwt.user.client.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readLong()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } }
public boolean poll(org.ovirt.engine.core.compat.Guid hostId) { waitBetweenPolls(); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runFutureVdsCommand(FutureVDSCommandType.Poll, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(hostId)); org.ovirt.engine.core.bll.network.host.HostSetupNetworksHelper.log.debug("Future executed for host {}", hostId); boolean succeeded = getValue(taskId); boolean succeeded = getValue(taskId); org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOG.debug("Polling for Host {}: {}", hostId, succeeded); timestampOfEndOfPreviousInvocation = currentTimestamp; return succeeded; }
private boolean getValue(org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> task, org.ovirt.engine.core.compat.Guid hostId) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = task.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SetupNetworksPollingTimeout), java.util.concurrent.TimeUnit.SECONDS); return vdsReturnValue.getSucceeded(); } catch (java.util.concurrent.TimeoutException e) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller.LOGger.debug("Failed to poll host {} - it in recovery mode.", e); return false; } }
@org.junit.Test public void testGetValue() { assertEquals(("test getValue() for " + (value)), value.ordINAL(), value.getValue()); }
@org.junit.Test public void testForValue() { assertEquals(("test for " + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value)).getValue("Failed for " + (value)), value, org.ovirt.engine.core.common.queries.ConfigurationValues.forValue(value.getValue())); }
private void updatePassDiscardsChangeabilityForDiskImage() { if (getStorageDomain().getSelectedItem().isFileDomain()) { getPassDiscards().setIsChangeable(true); } else if (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain()) { if (!(getStorageDomain().getSelectedItem().getSupportsDiscards().isBlockDomain()) { getPassDiscards().setEntity(false); } else { getPassDiscards().setIsChangeable(((getIsWipeAfterDelete().getEntity())) || (getStorageDomain().getSelectedItem().getSupportsDiscor().isEnabled().isEnabled().isEnabled()); } } }
private void updatePassDiscardsChangeabilityForDirectLun() { if (((getSanStorageModelBase())!= null) && ((getSanStorageModelBase().getAddedLuns().isEmpty())!= null)) { if (getSanStorageModel().getAddedLuns().isEmpty()) { getPassDiscressionDiscression().setIsChangeable(false); } else { getPassDiscards().setIsChangeable(isLunSupportDiscressionDiscressionDiscressionDiscressionDiscards(getLunDisk().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupported(getLunDisk().getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupported(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupported(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupported(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupported(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupportedStorage()); } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.repoimage.GetImagesListQueryBase.getQueryReturnValue().setReturnValue(getUserRequestForStorageDomainRepoFileList()); }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, VM.VmWithStatusForExclusive.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent =!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getSelectedItemsWithStatusForExclusiveLocked(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItemsForExclusive) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithStatusForExclusive = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItems()) { if (vm == null) { for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem()) { if ((vm.getStatus()) == (org.ovirt.engine.ui.uicommonweb.models.vms.VmStatusForStatusForStatus.getStatusForStatus())) { return new org.ovirt.engine.ui.uicommonweb.models.vms.VmModel(); } } return vmsWithStatusForExclusive; }
@java.lang.Override protected void proceedProxyReturnValue() { try { super.proceedProxyReturnValue(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException e) { handleException(e, "Failed to recovery-Recovering mode"); } }
private void handleException(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase e, java.lang.String reason) { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getVDSReturnValue(); vdsReturnValue.setSucceeded(false); vdsReturnValue.setExceptionString(e.toString()); vdsReturnValue.setExceptionString(e.getVdsError()); final java.lang.String msg = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason).getMessage(); final java.lang.String msg = org.ovirt.engine.core.vdsbroker.vdsbroker.helpers.MessageFormatter.format("Failed to poll host {} - {}.", org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getVdsId(), reason).getMessage(); org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.log.debug(msg, e); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentCloratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpoolmanager.DecoratedMacPoolFactoryFactory builder = new org.ovirt.engine.core.bll.network.macpoolmanager.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.SingletonList(java.util.Collections.singletonList(macPoolDecoratorA)), instanceof(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(macPool, java.lang.reflect.MethodCaptor.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.Reentities.ReceivedLine> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.Reentities.ReapedReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.Reentities.Received> captor2 = org.mockito.lock.ArgumentCaptor.forClass(java.util.concurrent.locks.Reentrant.class), captor.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }
@java.lang.Override public java.lang.String toString() { return (((((this) == null? " : macPool.getMacPool().get(macPool.getMacPool().getType())) + ") + (macPool.getMacPool().getMacAddress())) + ") + (macPool.getMacPool().getMacAddress())) + "]"; }
@org.junit.Test public void testCreateDecoratedPoolByDoubleDecorators() { doAnswer(false).when(lockedObjectFactoryMock).getArguments()).createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), any()); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator validator = decoratePoolWhileNotUsingLocking(java.util.Arrays.asList(macPoolDecoratorA, macPoolDecoratorB)); assertThat(decoratedPool, is(macPoolDecoratorB)); java.lang.String macToPropagate = "macToPropagate"; when(macPool.allocateNewMac()).thenReturn(macToPropagate); java.lang.String propagatedMac = decoratedMac(propagatedMac, is(macToPropagate); java.lang.String propagatedMac = decoratedMac, is(macToPropagate); java.lang.String propagatedMac = decoratedMac, is(macToPropagate); verify(macPoolDecoratorB).allocateNewMac(); verify(macPoolDecoratorB); verifyNoMoreInteractions(macPool); verifyNoMoreInteractions(macPool); }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator macPool, java.util.List<org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator> decorators) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPool decorator = decorator.createLockingInstance(macPool, org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolCommand.class, lockForMacPool(macPool.getId())); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolCommand.class, lockForMacPool(macPool.getId())); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEqualsDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactoryFactory builder = new org.ovirt.engine.core.bll.network.macpoolmanager.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.SingletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Executor.class)); assertThat(factory.createDecoratedPool(macPool, java.lang.reflect.Execor.forClass(java.util.concurrent.locks.RemitWriteWriteLock.class)); org.mockito.ArgumentCaptor<java.util.concurrent.ArgumentCaptor<java.lang.Override> org.mockito.util.concurrent.ArgumentCaptor.forClass(java.util.concurrent.locks.ReapedReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.Reentities.Reentities.Reentities = captor.getAllValues(); assertEquals(capturesValues.getAllValues().get(0), captor.get(1)); }
public void modifyPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { try (org.ovirt.engine.core.utils.lock.AutoCloseableLock lock = writeLockResource()) { if (!(macPools.containsKey(macPool.getId()))) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.INEXISTENT_POOL_EXCEPTION_MESSAGE); } org.ovirt.engine.core.bll.network.macpool.MacPoolPerCluster.log.debug("MacPool pool {}. (old will not be deleted from db entity")); removeWithoutLocking(macPool); } }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) { org.ovirt.engine.core.bll.network.macpool.TransportalMacPoolDecorator.log.warn("Failed to release with empty collection as parameter."); } else { org.ovirt.engine.core.bll.network.macpoolmanager.Translator.transaction.Transport = org.ovirt.engine.core.bll.network.macpoolmanager.TransportalMacPoolDecorator.getTranslator(); org.ovirt.engine.core.bll.network.macpoolmanager.Translator.log.debug("Failed to release with release"); } }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.context.CompensationContext compensationContext = this.commandContext.getCompensationContext(); org.ovirt.engine.core.bll.network.macpoolmanager.TransactionalMacPoolDecorator.UsingCompensationContext = this.compensationContext.getCompensationContext(); if (compensationListener.compensationContext.compareToRelease(macs.toArray())) { compensationListener.macsToReleaseOnCommit.addAll(macs); } else if (compensationListener.isEmpty(macs)) { compensationContext.macsToCommit.addAll(macsListener); } }
public org.ovirt.engine.core.bll.network.macpoolmanager.MacPool getMacPoolById(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolResult result = getMacPoolById(macPoolId, java.util.Collections.emptyList()); if (result == null) { result = result; } return result; }
@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.debug("MacAddress: {}", macsStorage.allocatedMacs); java.util.List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.debug("Mac address: {} from {}.", this); java.util.Collections.sort(result); logWhenMacPoolIsEmpty(); return result; }
private void initializeMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool) { java.util.List<java.lang.String> macsForMacPool = macPoolDao.getAllMacsForMacsForMacPool(macPool.getId()); final org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerCluster.log.debug("Mac {} with macs: {}", pool, java.util.Arrays.asList(macsForMacPool.toArray())); for (java.lang.String mac : macsForMacPool) { pool.forceAddMac(mac); } }
@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.debug("Mac Pool: '{}'", macs) { java.util.Arrays.asList(macs.toArray()), this); for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpoolmanager.MacPool macPool, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator decorator = decorator.createLockedInstance(macPool, decorator); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator = decorator.createLockedInstance(macPool, decorator); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpoolmanager.MacPool.class, lockForMacPool(macPool.getId())); }
@java.lang.Override public java.lang.String toString() { return ((((((((("Override protected + (isAllowDuplicateMacAddresses())) + "defaultPool=") + (description)) + "description) + description=") + (id)) + "name=") + (id)) + (name)) + "ranges=") + (name)) + "ranges=") + (isRanges))); }
@java.lang.Override public void cleanupCompensationDataAfterSuccess() { log.debug(macPool::freeMacsToCommit(); }
@java.lang.Override public void onSuccess() { log.debug("Failed to release macs {}", java.util.Arrays.asList(super.getMtu())); }
@java.lang.Override public void onRollback() { log.debug("Rollback occured, releasing macs {}"); releaseMacs(); }
private java.util.List<org.ovirt.engine.core.bll.network.macpool.TransportalMacPoolDecorator.Translator.TransactionalStrategyState> getStrategyForMacAllocation() { java.util.List<org.ovirt.engine.core.bll.network.macpool.TransportalMacPoolDecorator.TranslatorState> states = new java.util.ArrayList<>(); if (usingCompensationState.shouldUseCompensation()) { states.add(usingCompensationState); } boolean shouldUse = (org.ovirt.engine.core.utils.transaction.TransactionSupport.current())!= null; if (shouldUseTxDecorator) { states.add(nontransaction); } if (states.isEmpty()) { states.add(nontransaction.getTransaction()); } org.ovirt.engine.core.bll.network.macpool.TransportalMacPoolDecorator.log.debug("skipping {} as allocation modifiers", java.util.Arrays.asList(states.toArray())); return states; }
private org.ovirt.engine.core.bll.network.macpool.MacPool decoratePool(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolValidator validator) { if (validator == null) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolResult result = macPool; return macPool; } org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolResult.log.debug("MacPool {0} (org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolDecorator decorator : decorator.isEmpty()))); } if (validator.setMacPool(result); result = decorator; } return result; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("unchecked non-compensation state, initial macs {}", java.util.Arrays.asList(macs.toArray())); macs.forEach(macPool::freeMac); }
private void updatePassDiscardsChangeabilityForDirectLun() { if (((getSanStorageModelBase())!= null) && ((getSanStorageModelBase().getAddedLuns().isEmpty())!= null)) { if (getSanStorageModel().getAddedLuns().isEmpty()) { getPassDiscressionDiscression().setIsChangeable(false); } else { getPassDiscards().setIsChangeable(isLunSupportDiscressionDiscressionDiscressionDiscressionDiscression(getLunDisk().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardsIsNotSupportedByUnsupported())); if (!(getPassDiscovered().getIsChangable())) { getPassDiscression().setEntity(false); } } } else if ((getLunDisk())!= null) { getPassDiscards().setIsChangeable(false); } }
private boolean isMigrationOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel) (model.getOriginalNetworkCluster())); }
private boolean isRoleProhibitionSupported(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelected()) && (isDisplayOriginally(clusterNetworkModel)); }
private boolean isGlusterOriginal(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster())!= null) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster()); }
private boolean isDisplayOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel) (clusterNetworkModel.getCluster().isDisplay()); }
private boolean isRoleProhibitionReve(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelected()) && (isManagementOriginally(clusterNetworkModel)); }
private void initCreateOrUpdateBondParameters() { org.ovirt.engine.core.common.utils.NetworkCommonUtils.fillBondSlaves(allNics); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : allExistingNics) { if (nic.isBond()) { getHostSetupNetworksParametersData().getBonds().add(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBondParametersDataCenter(((org.ovirt.engine.core.common.businessentities.network.Bond) (nic)))); } } initBondNameToIdMap(); }
public void addBondToParameters(org.ovirt.engine.core.common.action.CreateOrUpdateBond bond) { assert (bond.getId()) == null : "When adding a bond to the parameters should be null"; org.ovirt.engine.core.compat.Guid originalIdOfBondWithTheSameName = originalBondNameToId.get(bond.getName()); bond.setId(originalId); if (originalIdOfBondWithTheSameName!= null) { removedBonds.remove(originalId); } bonds.add(bond); }
private void initOrModifiedBondNameToIdMap(org.ovirt.engine.core.common.action.CreateBond... bonds) { org.ovirt.engine.core.compat.Guid originalBondName = null; java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalBondNameToId = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.action.CreateOrUpdateBond bond : bonds) { originalBondNameToId.put(bond.getName(), bond.getId()); } }
public void setOriginalNetworkName(java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> originalNetworkNameToId) { this.originalNetworkName = originalNetworkName; }
@org.junit.Test public void testBondNotUpdatedAndRemovedSimultaneouslyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_MODULTAN_SIMULTAN; assertThat(validator.bondNotUpdatedAndRemovedAndRemoved(bond.getName()).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTAN; assertThat(validator.bondNotUpdatedAndRemovedAndRemoved(engineMessage.BOND_ID_REMOVE_SIMULTANEOUSING_PROVISIONING_SPECIFIED); }
public org.ovirt.engine.core.bll.ValidationResult bondNotUpdatedAndRemovedSimultaneously() { java.util.List<org.ovirt.engine.core.common.action.CreateBond> duplicateBonds = params.getCreateOrUpdateBonds().filter(((bond) -> params.getRemovedBonds().contains(bond.getId())).collect(java.util.Collection.Collectors.toList()); if (org.apache.commons.collections.CollectionUtils.isNotEmpty(duplicateBonds)) { org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUS_IMITIALIZED; return new org.ovirt.engine.core.bll.ValidationResult(engineMessage.VALID, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableStringVariableString(engineMessage.getMessage(), org.ovirt.engine.core.utils.ReplacementUtils.getListVariableStringVariableString(EngineMessage, EngineMessage.NETWORK_UPDATED_AND_MISSING_SIMULTOUSLAVE_PROVULTOUSLAILED); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
java.lang.String BOND_UPDATED_AND_MPDATED_AND_IMED_SIMULTUAL_SIMULTUAL_MISSING_SIMULTELY_SIMULTELY();
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); org.ovirt.engine.core.bll.SerialChildCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildCommand) (command)); if ((!anyFailed) || (serialChildExecutedCommand.ignoreChildCommandFailure())) { try { boolean endCommand =!(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!(serialChildExecutedCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Error '{}' id: '{}' failed when attempting to perform the next operation, childCmdIds, command.getCommandStatus()); serialChildExecutionCommand.handleFailure(); anyFailed = true; } } else { serialChildExecutedCommand.handleFailure(); } setCommandEndStatus(command, anyFailed, status, childCmdIds); }
@org.junit.Test public void testExecuteQueryWithNotExistingIscsiBond() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = new org.ovirt.engine.core.common.businessentities.IscsiBond(); iscsiBond.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(getQueryParameters().getId()).thenReturn(iscsiBondId); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.businessentities.IscsiBond result = getQuery().getQueryReturnValue().getReturnValue(); assertNull(result); }
@java.lang.Override protected void executeCommand() { T parameters = org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.getParameters(); addCustomValue("ApiVersion", parameters.getApiVersion()); addCustomValue("ClientAddress", parameters.getClientAddress()); addCustomValue("ClusterAddress", parameters.getClusterAddress()); addCustomValue("ClusterVersion", parameters.getClusterAddress()); org.ovirt.engine.core.bll.AddDeprecatedApiEventCommand.setSucceeded(true); }
@java.lang.Override public void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { org.ovirt.engine.api.restapi.LocalConfig localConfig = org.ovirt.engine.api.restapi.LocalConfig.getInstance(); supportedVersions = localConfig.getSupportedVersions(); defaultVersion = localConfig.getDefaultVersion(); deprecatedVersion = deprecatedVersion.getDefaultVersion(); deprecatedVersionsSet = deprecatedVersionInfos.stream().map(java.util.stream.Collectors.toMap(deprecatedVersionInfo.toSet()); deprecatedVersionsMap = deprecatedVersionInfos.stream().collect(java.util.stream.Collectors.toMap(DeprecatedVersionInfo.toSet()); deprecatedVersionsMap = (localConfig.getDeprecatedMessagesFrequency()) * 1000L; }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityVersion scheduler = org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.getInstance(); org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Initializing {}", new java.lang.Class[]{ }, 0, 7, java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Finished initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Finished initializing {}", getClass().getSimpleName()); }
@java.lang.Override public synchronized java.lang.String format(java.util.logging.LogRecord record) { cal.setTimeZone(org.ovirt.engine.core.utils.logging.LogRecord.timeZone); cal.setTimeZone(org.ovirt.engine.core.uutils.log.TimeZoneBasedFormatter.timeZone); cal.setTimeInMillis(record.getMillis()); java.lang.String source; if ((record.getSourceClassName())!= null) { source = record.getSourceClassName(); if ((record.getSourceClassName())!= null) { source = " " " " " " + (record.getSourceMethodName()); } else { source = record.getLoggerName(); } java.lang.String throwable = ""; if ((record.getThrown())!= null) { java.lang.String throwable = ""; if ((record.getThrown())!= null) { java.lang.String throwable = ""; if ((record.getThrown())!= null) { java.lang.String throw new java.lang.StringException((""; if ((record.getThrewaped())!= null) { java.lang.String throw new java.lang.String.format(""; if (((org.ovirt.engine.core.uutils.LogicalString) (sw)); pw.close(); } else if (((w.getThrew())!= null) && ((list.getLoggerName())!= null)) { throw new java.lang.StringException(org.ovirt.engine.core.uutils.log.TimeZoneError.dateTimeZoneError.dateTimeFormat.format(cal.getTime()), source, throw new java.lang.String.format("%1$s'", record, throw new java.lang.StringException(java.lang.String.format("%s'", record, record, message, throw new java.lang.String.format("%1$w-%s", message, throw new java.lang.StringException(e.format("%s' error: " + throw new java.lang.String()))); } } return java.lang.String.format(org.ovirt.engine.core.utils.log.TimeZoneError.format(org.ovirt.engine
private static java.lang.String getLoggingProperty(java.lang.String key, java.lang.String defaultValue) { if (org.apache.commons.lang.logging.isDebugProperty(key)) { return value; } java.lang.String value = java.util.logging.LogManager.getLogManager().getProperty(key); if (defaultConfiguration == null) { defaultValue = value; } if (defaultConfiguration!= null) { result = value; } return null; }
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile())!= null) { org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogLevel())!= null) { org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogLevel())!= null) { org.ovirt.engine.core.config.EngineConfig.getInstance().setLogLevel(argsMap.getLogLevel()); } } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Error with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }
public static void main(java.lang.String[] args) { org.ovirt.engine.core.notifier.utils.NotificationProperties prop = null; org.ovirt.engine.core.notifier.NotificationService notificationService = null; org.ovirt.engine.core.notifier.EngineMonitorService engineMonitorService = null; try { prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); org.ovirt.engine.core.log.JavaLoggingUtils.setLogLevel(prop.getProperty(org.ovirt.engine.core.notifier.LOG_LEVEL)); prop.validate(); notificationService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); engineMonitorService = new org.ovirt.engine.core.notifier.EngineMonitorService(prop); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); notificationService.registerTransport(new org.ovirt.engine.core.notifier.transport.smtp.Smtp(prop)); if (!(notificationService.hasTransports())) { throw new java.lang.RuntimeException(ex.lang.RuntimeException(ex.getMessage()); } } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.Notifier.log.error("Failed to initialize ex); java.lang.System.err.err.println(ex.getMessage()); java.lang.System.exit(1); } if (((args!= null) && ((args.length) > 0)) && (org.ovirt.engine.core.notifier.Notifier.ARG_VALIDATE.equals(args[0]))) { java.lang.System.exit(0); } try { notificationService.run(); engineMonitorService.run(); } catch (java.lang.Exception e) { org.ovirt.engine.core.notifier.Notifier.
public static void setLogLevel(java.lang.String levelName) { org.ovirt.engine.core.common.config.ConfigLoggingUtils.OVIRT_LOGGER.setLogLevel(org.ovirt.engine.core.utils.log.JavaLoggingUtils.parseLevel(levelName)); }
private java.lang.Integer calcMaxVCpu() { return org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVmsCpu(vm.getStaticData(), vm.getClusterCompatibilityVersion(), architecture); }
private static int brickWidth(int n) { return n == 0? 0 : 31 - (java.lang.Integer.numberOf roundedZeros(n)); }
public static boolean validateCpuCounts(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType = vm.getClusterArch().getFamily(); if (architecture == (org.ovirt.engine.core.common.businessentities.ArchitectureType.x86)) { return (org.ovirt.engine.core.common.utils.VmCpuCountHelper.isBackingOverhead(vm.getCpuPerSocket())) || (org.ovirt.engine.core.common.utils.VmCpuCountHelper.isBitWidth(vm.getCpuPerSocket())) { return org.ovirt.engine.core.bll.VmCpuCountHelper.maxBitWidth(vm.getCpuPerSocket()); } return true; }
private void writeVCpu(org.ovirt.engine.core.utils.ovf.xml.XmlText writer, java.util.Map<java.lang.String, java.lang.Object> createInfo, org.ovirt.engine.core.common.businessentities.VM vm) { writer.writeStartElement("vcpu"); writer.writeAttributeString("current", java.lang.String.valueOf(vm.getNumOfCpus())); writer.writeRaw((org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.HotPlugCpuSupported, vm.getCompatibilityVersion(), vm.getClusterArch())? org.ovirt.engine.core.common.utils.VmCpuCountHelper.calcMaxVcpu(vm.getStaticData(), vm.getClusterArch().getFamily() : java.lang.String.valueOf(vm.getNumOfCpus()))); writer.writeEndElement(); }
public void updateSuggestedLabels() { suggestedLabels = new java.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelecetedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { if (suggestedLabels.isSelectedItem()) { labelModel.setItems(suggestedLabels, labelModel.getSelectedItem()); } } }
@java.lang.Override protected void onAdd(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onAdd(value, widget); value.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); model.updateSuggestedLabels(); }
@java.lang.Override protected void init(final org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); model.updateSuggestedLabels(); } }); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.edit(model); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(flush().getSuggestedLabels()); value.setSelectedItem(""); return value; }
@org.junit.Before public void init() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.String>> initialHashes = new java.util.ArrayList<>(); initialHashes.add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.VM_ID, org.ovirt.engine.core.vdsbroker.monitoring.VmDevicesMonitoringTest.INITIAL_HASH)); doReturn(initialHASH).when(vmDynamicDao).getAllDevicesHASH(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.AddVmLeaseLave; }
protected boolean removeVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return org.ovirt.engine.core.common.action.VdcActionType.RemoveVmLease, new org.ovirt.engine.core.common.action.VmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected boolean addVmLease(org.ovirt.engine.core.compat.Guid leaseStorageDomainId, org.ovirt.engine.core.compat.Guid vmId) { if (leaseStorageDomainId == null) { return true; } return org.ovirt.engine.core.common.action.VdcActionType.AddVmLeaseParameters(getStoragePoolId(), leaseStorageDomainId, vmId)).getSucceeded(); }
protected org.ovirt.engine.core.common.vdscommands.VDSCommandType getLeaseAction() { return org.ovirt.engine.core.common.vdscommands.VDSCommandType.RemoveVmLease; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionCheckSubjects = new java.util.ArrayList<>(); permissionCheckSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType().getActionGroup())); return permissionCheckSubjects; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(getLeaseAction(), VdcActionType.CreateTaskId, createTaskParameters(taskId, returnValue.getCreationInfo(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getVmId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), VdcObjectType.Storage, org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getActionType(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId())); setSucceeded(returnValue.getSucceeded()); }
@org.junit.Test public void networkInUseBySingleVm() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = mock(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); when(vm.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByVmsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.failsWithOneNetworkInUse(), java.util.Collections.singletonList(vm)); }
@org.junit.Test public void networkInUseByTemplates() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = mock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); when(template.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByTemplatesTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAME_NAME, template)); }
@org.junit.Test public void networkInUseByHosts() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(host.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.NAMEABLE_NAME); networkNotUsedByHostsTest(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.BllMessages.NETWORK_NAME_ALREADY_EXIST); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId())!= null) { vmPoolDao.removeVmFromVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
protected void removeVmPool() { try { lockManager.acquireLockWait(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetach())); if ((vmPoolDao.getVmPoolsMapByPoolId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()).size()) == 0) { org.ovirt.engine.core.common.action.VmPoolParametersBase removePoolParam = new org.ovirt.engine.core.common.action.VmPoolParametersBase(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); removePoolParam.setSessionId(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().getSessionId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { removePoolParam.setLockProperties(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().getSessionId()); } org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RemoveVmPool, removePoolParam); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } finally { lockManager.releaseLock(new org.ovirt.engine.core.utils.lock.EngineLock(getExclusiveLockForPoolDetachFromPoolDetachFromPoolDetach())); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); }
@org.junit.Test public void replaceProductKey_definedKeyShouldBeReplaced() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "someKey", false); assertThat(res, containsString("<CDATA[anyKey]></Key>")); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldRemoveTheWholeSection() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", false); assertThat(res, not(containsString("</ProductKey>"))); }
@org.junit.Test public void replaceProductKey_emptyKeyShouldNotRemoveTheWoleSectionForCustom() { java.lang.String res = org.ovirt.engine.core.vdsbroker.vdsbroker.SysprepHandler.replaceProductKey(sysprepFile, "", true); assertThat(res, containsString("</ProductKey>")); assertThat(res, containsString("</ProductKey>")); }
@org.junit.Test public void testLimit() { java.lang.Integer maxCpu = org.ovirt.engine.core.common.utils.VmCpuCountHelper.calculator.calculateCpu(null, new java.lang.Integer(16), 2, 8, 8); assertEquals(new java.lang.Integer(100), maxVmpu); }
@com.google.gwt.uibinder.client.UiHandler("container") void onPanelDragDrop(com.google.gwt.event.dom.client.DropEvent event) { java.lang.String vmGid = event.getData("VM_GID"); if (!(vmGid.isEmpty())) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(vmGid); boolean pinned = java.lang.Integer.parseInt(event.getData("PINNED")); int vNumaNodeIndex = java.lang.Integer.parseInt(event.getData("INDEXCE_ED")); int vNumaNodeIndex = java.lang.Integer.parseInt(event.getData("INDEX")); container.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.remove(this, vmGuid); event.removeStyleName(event.vmGuid()); event.remove(event.vmGuid); event.removeStyleName(event.getId()); event.remove(event.vmGuid()); event.removeStyleName(event.getNativeEvent().getSecond()); event.removeStyleName(event.getNativeEvent()); event.removeStyleName(event.getElement()); event.removeStyleName(event.getNativeEvent().getElement()); event.removeStyleName()); event.removeStyleName(event.remove(event.getNativeEvent()); event.removeStyleName()); event.removeStyleName(event.remove(event.getElement()); event.removeClickEvent().addClickEvent(event.getElement()); event.removeEventHandler(); event.removeEvent(event.removeCpuPinnedEvent(event.getElement()); event.
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlString(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.StoragePool object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlString(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }
public boolean isCompatibilityVersionUpgradeNeeded() { return clusterCompatibilityVersion; }
@org.ovirt.engine.ui.webadmin.Template("<span style='left: relative; margin-left: 3px; width: {0}</span: {5}px; height: {0}</span>") com.google.gwt.safehtml.shared.SafeHtml text(java.lang.String text);
public void setClusterCompatibilityVersionUpgradeNeeded(boolean clusterCompatibilityVersionUpgradeNeeded) { this.clusterCompatibilityVersionUpgradeNeeded = clusterCompatibilityVersionUpgradeNeeded; }
protected com.google.gwt.safehtml.shared.SafeHtml getImageSafeHtml(org.ovirt.engine.ui.common.widget.table.column.IconType iconType) { com.google.gwt.safehtml.shared.SafeHtml safeHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((iconType) (iconType.getCssName())) + "' style='background: 'icon: 'icon:'px'></div>")); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString((("icon 'icon 'icon' style='background: 'icon'px'></background: 'icon:'></div>")); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityTooltip(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = getSafeHtmlString(object); if (!(imagesToText.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getDataCenterTooltip(imagesToText); } return null; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEntityValue(org.ovirt.engine.core.common.businessentities.Cluster object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> imagesHtml = new java.util.ArrayList(getSafeHtmlString(object).keySet()); if (!(imagesHtml.isEmpty())) { return org.ovirt.engine.ui.webadmin.widget.table.column.MultiImageColumnHelper.getValue(imagesHtml); } return null; }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.List<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = getAll(storagePoolDao, true); if (retVal.isPresent()) { org.ovirt.engine.core.common.businessentities.StoragePool dataCenters = querySearch(storagePoolDao, true); if (retVal.isSet()) { org.ovirt.engine.core.compat.Version version = retVal.get(); dataCenters.stream().forEach(dataCenter); } } return dataCenters; }
java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getVdsGroupCompatibilityVersion();
protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { initParametersForExternalNetworks(); initParametersForExternalNetworks(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return ((((((((super.equals(obj)) && (java.util.Objects.equals(sysPrepDomainName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(bootMenuEnabled, other.spiceFileTransferEnabled))) && (java.util.Objects.equals(spiceFileTransferEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.equals(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.objectsEqual(spiceCopyPasteEnabled, other.spiceCopyPasteEnabled))) && (java.util.Objects.objectsEqual(spiceCopyPasteEnabled, other.stompat.join(spiceCopyPasteEnabled, other.spiceCopy
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, customEmulatedMachine, customCpuName, customCpuName, customCpuName, customCpuName, spiceFileTransferEnabled, spiceCopyPasteEnabled); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return (((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(runAndPause))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(win2kHackEnable, other.win2kHackEnable))) && (java.util.Objects.equals(userIp, other.clientIp))) && (java.util.Objects.equals(userIp, other.clientIp))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(kernelUrl, other.kernelUrl, other.kernelUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && ((balloonEnabled) == (other.kernelParams))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), bootSequence, diskPath, runAndPause, acpiEnable, customProperties, floppyPath, clientIp, initializationType, runAsStateless, initrdUrlless, initrdUrlless, initrdUrlless, initrdUrl, kernelParams, kernelParams, payload, balloonEnabled, cpuShares); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmOnceParams)) { return false; } org.ovirt.engine.core.common.action.RunVmOnceParams other = ((org.ovirt.engine.core.common.action.RunVmOnceParams) (obj)); return ((((((((super.equals(obj)) && ((bootSequence) == (other.bootSequence))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepUserName))) && (java.util.Objects.equals(sysPrepUserName, other.sysPrepPassword))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(vmInit, other.vmInit))) && (java.util.Objects.equals(customCpuName, other.customCpuName))) && (java.util.Objects.equals(customCpuName, other.customCpuName)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, customEmulatedMachine, customCpuName, customCpuName, customCpuName, bootSequence); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.action.RunVmParams)) { return false; } org.ovirt.engine.core.common.action.RunVmParams other = ((org.ovirt.engine.core.common.action.RunVmParams) (obj)); return ((((((((((((((java.util.Objects.equals(getVmId(), other.getVmId())) && (java.util.Objects.equals(diskPath, other.diskPath))) && (java.util.Objects.equals(runAndPause, other.runAndPause))) && (java.util.Objects.equals(floppyPath, other.floppyPath))) && (java.util.Objects.equals(floppyPath, other.clientIp))) && (java.util.Objects.equals(clientIp, other.clientIp))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((initializationType) == (other.initializationType))) && ((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(runAsState, other.kernelUrl))) && (java.util.Objects.equals(kernelUrl, other.kernelUrl))) && ((balloonEnabled) == (other.kernelUrl))) && ((cpuShares) == (other.kernelParams))) && ((cpuShares) == (other.cpuShares)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getVmId(), diskPath, runAndPause, customProperties, floppyPath, clientIp, initializationType, runAsStateless, initrdUrlless, initrdUrl, kernelParams, kernelUrl, payload, balloonEnabled, cpuShares); }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid, java.lang.String callType) { org.codehaus.jackson.node.Object vmDetailNode = new org.codehaus.jackson.node.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", vmDetailNode); vmDetailNode.put("hash", java.lang.Integer.toString())); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.node.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "|")); node.put("method", (((("|" + "|") + callType) + "|") + vmid)); return node.toString(); }
private void vmUpdateStatus(final org.ovirt.vdsmfake.domain.VM vm, final org.ovirt.vdsmfake.domain.VM.VMStatus status, final long delay, final java.lang.String msg, final boolean removeClient) throws java.lang.Exception { java.util.concurrent.ExecutorService executor = java.util.concurrent.Executor.newFixedThreadPool(5); java.util.concurrent.Future<java.lang.Void> future = ((java.util.concurrent.Future<java.lang.Void>) (executor.submit(()))) (executor.submit(()).submit(delay); vm.setStatus(status); sendNotification(msg, vm.getId(), removeClient); org.ovirt.vdsmfake.json.JsonRpcNotification.log.info("failed to {} set to {}", vm.getId(), vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.json.JsonRpcNotification.log.info("failed to {}", vm.getId(), msg); if (isUpdateRequired(status)) { org.ovirt.vdsmfake.domain.VdsmManager.getInstance().updateHost(vm.getHost()); } } } catch (java.util.concurrent.ExecutionException e) { e.printStackTrace(); } }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { if (((status == (VMStatus.Up)) || (status == (VMStatus.PoweringDown))) { return false; } return false; }
private void sendNotification(java.lang.String message, java.lang.String vmId, boolean removeClient, java.lang.String callType) throws org.ovirt.vdsm.jsonrpc.client.JsonRpcNotification.log.warn("Waiting message has crashed, ignore empty messages"); send(messageFormatter(message, vmId, callType, callType, removeClient); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm().isRunInUnknownStatus()); parameters.setRunInUnknown(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()); parameters.setInitializationType(InitializationType.Sysprep); if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (!(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (!(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) { parameters.setInitializationType(InitializationType.Sysprep); } return parameters; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm().isRunInUnknownStatus()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || (((org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) { parameters.setInitializationType(InitializationType.Sysprep); } return parameters; }
private void refresh() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allVds = org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getAll(org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getUserID(), org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginQuery.getParameters().isFiltered()); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.VDS vds : allVds) { if ((sb.length()) > 0) { sb.append(vds.getHostName()); } sb.append(vds.getHostName()); } cachedResult = sb.toString(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.log.debug("Exception", cachedResult); }
private java.lang.String mergeOrigins(java.lang.String fromConfig, java.lang.String fromDefault) { if (org.apache.commons.lang.StringUtils.isEmpty(fromConfig)) { return org.ovirt.engine.core.bll.ValidationResult.failWith(("VdcBllMessages.ACTION_TYPE_FAILED_INTERNAL_NAME_INTERNAL_NAME); } if (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getParameters().getConfigValue())) { return org.ovirt.engine.core.bll.ValidationResult.failWith(org.ovirt.engine.core.bll.ValidationResult.VALID); } return (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.ValidationResult.VALID)) + ","; }
private java.lang.String getDefaultAllowedOrigins() throws javax.servlet.ServletException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.getReturnValue(); if (!(result.getSucceeded())) { throw new javax.servlet.ServletException("Can't get list of default origin"); } return value.getReturnValue(); }
private void refreshIfNeeded() { java.lang.System.currentTimeMillis(); if (((lastRefresh) + (DELAY)) < currentRefresh) { refresh(); lastRefresh = lastRefresh = lastRefresh; lastRefresh = lastRefresh = currentRefresh; } }
@java.lang.Override public org.ovirt.engine.core.common.queries.VdcQueryReturnValue runPublicQuery(org.ovirt.engine.core.common.queries.VdcQueryType actionType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { parameters.setRefresh(false); switch (actionType) { case GetAAAProfileList : case RegisterVds : case CheckDBConnection : case GetDefaultConfigurationValue : case ValidateSession : return runQueryImpl(actionType, parameters, false); case GetConfigurationValue : org.ovirt.engine.core.common.queries.GetConfigurationValueParameters configParameters = ((org.ovirt.engine.core.common.queries.GetConfigurationValueParameters) (parameters)); switch (configParameters.getConfigValue()) { case VdcVersion : case VdcVersion : case ApplicationMode : case ApplicationMode : case UserSessionTimeOutInterval : return runQueryImpl(actionType, parameters, false); default : break; } default : break; } return getErrorQueryReturnValue(EngineMessage.USER_CANNOT_RUN_QUERY_NOT_PUBLIC); }
@java.lang.Override protected void executeQueryCommand() { refreshIfNeeded(); org.ovirt.engine.core.bll.aaa.GetDefaultAllowedOriginsQuery.getQueryReturnValue().setReturnValue(cachedResult); }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> initParametersForPassthroughVnics() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> result = getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVdsId()); if (result!= null) { result = result.getVnicToVfMap(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); return result; } return result; }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm().isRunInUnknownStatus()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || (!(org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
public int getCinderDisk(org.ovirt.engine.core.common.businessentities.VmDevice disk, org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.String> address = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(disk.getAddress()); java.lang.String controllerStr = address.get(VdsProperties.Controller); int defaultIndex = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(vm.getAddress()); int defaultIndex = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.parseInt(vm.getId()); if (org.apache.commons.lang.StringUtils.isNotEmpty(vm.getDiskMap())) { return java.lang.Integer.parseInt(controllerStr); } if (((vm.getDiskMap())!= null) && (org.ovirt.engine.core.common.FeatureSupported.virtioScsiThread(vm.getCompatibilityVersion()))) { int numOfDisks = 0; return (numOfDisks % (vm.getNumOfIoThreads()) + "vm.getNumOfIoThreads", vm.getNumOfIoThreads())) + defaultIndex; } return defaultIndex; }
private java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.util.Map<java.lang.String, java.lang.Integer> vmDeviceUnitMapForController(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer>> vmDeviceUnitMap) { int controllerId = vmDeviceUnitMap.get(vmDevice, org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getVm()); if (!(vmDeviceUnitMap.containsKey(deviceId))) { return new java.util.HashMap<>(); } return vmDeviceUnitMap.get(control.get(control.getVm()); }
public org.ovirt.engine.core.bll.ValidationResult defaultRouteNetworkCannotBeExternal(org.ovirt.engine.core.common.businessentities.network.Network network) { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_ROUTE_NETWORK_CANNOT_BE_EXTERNAL, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, network.getName())).when(((networkCluster.isManagement()) && (network.isExternal()))); }
private org.ovirt.engine.core.bll.ValidationResult checkVmNumaCpuAssignment(int cpuCores, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes) { java.util.ArrayList<java.lang.Integer> cpuIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { cpuIds.addAll(node.getCpuIds()); } if (cpuIds.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int minId = java.util.Collections.min(cpuIds); int maxId = java.util.Collections.min(cpuIds); if ((minId < 0) || (maxId >= 0)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_INVALID_CPU_ID, java.lang.String.format("$cpuIndex %1$s", (minIds)); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIndex < 0)? minIds.get(i + 1 : maxId)); } java.util.Collections.sort(cpuIds); for (int i = 0; i < ((cpuIndex < ((cpuIndex)? java.lang.String.size()) - 1 : maxIds) { if (cpuIndex > 0) { if (cpuIndex.get(i).equals(cpuIndex)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID, java.lang.String.format("$cpuIndex %d", cpuIds.get(i))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void shouldDetectDuplicompat() { vmNumaNumaNode.get(0); vmNumaNodes.get(0); vmNumaNodes.get(1); }
private void storeIp(java.lang.StringBuilder output, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.IpInfoFetcher ipInfo) { output.append(java.lang.String.format("iface %s inet %s %s %s%s", ipInfoFetcher.getIp())); if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchName(), ipInfoFetcher.fetchBootProtocol())) { output.append(java.lang.String.format("$p())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchIp())) { output.append(java.lang.String.format(" address %s\n", ipInfoFetcher.fetchIp())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipInfoFetcher.fetchNetmask())) { output.append(java.lang.String.format("netmask %s\n", ipInfoFetcher.fetchNetmask())); } if (org.apache.commons.lang.StringUtils.isNotEmpty(ipAddressFetcher.fetchNetmask())) { output.append(java.lang.String.format(" gateway %s\n", ipInfoFetcher.fetchNetmask())); } }
private void storeIpv4(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv4InfoFetcher(iface)); }
private void storeNetwork() throws java.io.UnsupportedEncodingException { java.lang.StringBuilder output = new java.lang.StringBuilder(); if ((vmInit.getNetworks())!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInitNetwork> networks = vmInit.getNetworks(); for (org.ovirt.engine.core.common.businessentities.VmInitNetwork iface : networks) { if (java.lang.Boolean.TRUE.equals(iface.getName())) { output.append(" ").append(iface.getName()).append(""); } storeIpv4(output, iface); if ((vmInit.getDnsServers())!= null) { output.append(" dns-nameservers").append(" "); output.append(org.ovirt.engine.core.vdsbroker.VmInitHandler.CloudInitFileMode.NETWORK_NAME_SEVER); } if ((vmInit.getDnsServers())!= null) { output.append("\n"); } if ((vmInit.getDnsServers())!= null) { output.append("\n"); } if ((vmInit.getDnsServers())!= null) { output.append("\n"); } storeIpv6(output, iface); storeInFile(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.CloudInitFileMode.NETWORK, "/etc/network/interfaces", interfaces.getBytes("US-ASCII")); } } } interfaces = output.toString(); if (!(interfaces.isEmpty())) { metaData.put("network-interfaces", interfaces.getBytes("US-ASCII")); } }
private void storeIpv6(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv6InfoFetcher(iface)); }
private int calculateValue(org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster) { int res = 0; if (networkCluster!= null) { if (networkCluster.isDefaultRoute()) { res += 16; } if (networkCluster.isManagement()) { res += 10; } if (networkCluster.isManagement()) { res += 4; } if (networkCluster.isManagement()) { res += 4; } if (networkCluster.isMigration()) { res += 2; } if (networkCluster.isGluster()) { res += 1; } } return res; }
private org.ovirt.engine.core.bll.CommandBase<?> cmdInfo.HostedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempts to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error("Command {} id: '{}': entity polling is reported by the host," + "Assuming it failed."), cmd.getActionType(), cmd.getActionType(), cmd.getCommandId()); return null; } log.error("Command {} id: '{}' entity polling is not supported, will retry to poll the job wasn't supported", cmd.getActionType(), cmd.getCommandId()); return null; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getHostId() { return getStorageJobId(); }
protected abstract org.ovirt.engine.core.common.businessentities.VDS getHostJobType() { return org.ovirt.engine.core.common.businessentities.VDSGroup.getVdsGroupId(); }
protected org.ovirt.engine.core.bll.CommandBase<?> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }
private org.ovirt.engine.core.bll.CommandBase<?> cmdInfo.HostJobStatus pollEntity(org.ovirt.engine.core.bll.CommandBase<?> cmd) { try { return ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd)).poll(); } catch (java.lang.Exception e) { log.error("Command {} id: '{}': failed to poll the command", cmd.getActionType(), cmd.getCommandId()); } return null; }
public static java.util.Map<java.lang.String, java.lang.Object> createVmMemoryDeviceMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); java.lang.String> data = new java.util.HashMap<>(); java.lang.String, java.lang.Object> memDeviceData = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); memDeviceData.put(VdsProperties.Type, vmDevice.getType().getValue()); if (org.apache.commons.lang.StringUtils.isNotBlank(vmDevice.getAddress())) { memDeviceData.put(VdsProperties.Device, org.apache.commons.lang.StringUtils.string2Map(vmDevice.getAddress())); } memDeviceData.put(VdsProperties.DeviceId, vmDevice.getSpecParams()); memDeviceData.put("size", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("size")); memDeviceData.put("node", vmDevice.getSpecParams().get("node")); data.put("memory", memDeviceData); return data; }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.getMemoryDeviceToUnplug())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.setVdsRuntimeError(null); org.ovirt.engine.core.vdsbroker.HotUnplugVdsCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().hotplugMemory(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getMemoryDevice()); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeErrorAndReport(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(clusterDao).when(syncJob).getClusterDao(); doReturn(vdsDao).when(syncJob).getVdsDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(geoRepDao).when(syncJob).getGeoRepDao(); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getVolume()).when(glusterUtil).getGlusterUtil(); doReturn(getVolume()).when(glusterUtil).getGlusterUtil(); doReturn(getGlusterUtil()).when(glusterUtil).getGlusterUtil(); doReturn(glusterUtil).when(glusterUtil).getGlusterUtil(); doReturn(glusterUtil).when(glusterUtil).getGlusterUtil(); doReturn(glusterUtil).when(glusterUtil).getGlusterUtil(); doReturn(glusterUtil).when(glusterUtil).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_ID); }
@org.junit.Before public void init() { syncJob.setLogUtil(logUtil); org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.injectorRule.bind(org.ovirt.engine.core.utils.lock.LockManager.class, lockManager); doReturn(getClusters()).when(clusterDao).getAll(); doReturn(getVolume()).when(volumeDao).getByName(any(org.ovirt.engine.core.compat.Guid.class), anyString()); doReturn(getVolume()).when(volumeDao).getById(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(getServer()).when(glusterUtil).getRandomUpServer(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(glusterUtil).when(syncJob).getGlusterUtil(); doReturn(getSessions(2, true)).when(geoRepDao).getGeoRepSessionsInCluster(org.ovirt.engine.core.bll.gluster.GlusterGeoRepSyncJobTest.CLUSTER_ID); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> additionalVersion = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator.FINED_CLUSTER)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); optionalVersion.ifaces = getStoragePoolDao().get(dataCenter.getCompatibilityVersion()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>(); for (org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters : dataCenters.getStoragePoolIds().get(dataCenter.getId())) > 0)); dataCenter.setMacPoolId(dcSingleMacPoolFinder.find(dataCenter.getId())); } return dataCenters; }
private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol())!= null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.businessentities.network.VmInitNetworkIpv6InfoFetcher(entity))); }
private static void populateModelWithIpv4Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getBootProtocol())!= null) { model.setBootProtocol(org.ovirt.engine.api.restapi.types.Ipv4BootProtocolMapper.map(entity.getBootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.businessentities.network.VmInitNetworkIpv4InfoFetcher(entity))); }
private static org.ovirt.engine.api.model.Ip createIpModel(org.ovirt.engine.core.common.businessentities.network.VmInitNetworkIpInfo ipInfo) { org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); ip.setAddress(ipInfo.getAddress(ipInfoFetcher.fetchIp()); ip.setNetmask(ipInfoFetcher.fetchNetmask()); return ip; }
private java.lang.String getCompatVersion() { if (version == null) { return org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getStoragePool().getStoragePoolFormatType(); } return org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.VDSM_COMPAT_VERSION; }
private java.util.Map<java.lang.String, java.lang.Object> createVmProperties() { java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>(); map.put(VdsProperties.vm_name, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getVmName()); map.put(VdsProperties.PoolId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getStoragePoolId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVmVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.DomainId, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getStorageDomainId().toString()); map.put(VdsProperties.CompatibilityVersion, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getDisks()); map.put(VdsProperties.Format, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getDisks()); map.put(VdsProperties.Format, diskImage.getVolumeType().toString()); map.put(VdsProperties.VIRTIO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getVirtIO_PATH, org.ovirt.engine.core.vdsbroker.vdsbroker.ConvertVDSCommand.getParameters().getVirtIO_PATH); }
private void initCommandBase() { initUser(); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = context.getExecutionContext(); if ((executionContext.getJob())!= null) { setJobId(executionContext.getJob().getId()); } else if ((parameters.getStep())!= null) { setJobId(parameters.getStep().getJobId()); } setCorrelationId(parameters.getCorrelationId()); }
public long getMinimum() { return minimum; }
public void setMinimum(long value) { minimum = value; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (((value instanceof java.lang.String) && (!(((java.lang.String) (value)).equals("")))) || (value instanceof java.lang.String)) { java.lang.Long longValue = (value instanceof java.lang.String)? org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String msg = org.ovirt.engine.core.compat.LongCompat.tryParse(((java.lang.String) (value))) : ((java.lang.Long) (value)); java.lang.String msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().doubleValidationNumberBetweenInvalidReason(); if (longValue == null) { result.setSuccess(false); msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(); if (longValue > (getMaximum())) { if (((getMinimum())!= (java.lang.Long.MAX_VALUE)) && ((getMaximum()))) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberBetweenInvalidReason(prefixMsg, getMinimum(), getMaximum()); } else if (((getMinimum())!= (java.lang.Long.MAX_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().longValidationNumberGreaterInvalidReason(prefixMsg, getMinimum()); } else if ((getMaximum())!= (java.lang.Long.MIN_VALUE)) { msg = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMess
@org.junit.Test public void tryParse() { org.junit.Assert.assertNullNull(org.ovirt.engine.core.compat.LongCompat.tryParse("")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.LongCompat.tryParse("no good")); org.junit.Assert.assertNull(org.ovirt.engine.core.compat.Long.tryParse("no good")); org.junit.Assert.assertNull(org.apache.commons.lang.Long.valueOf(1), org.ovirt.engine.core.compat.Long.tryParse("1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf((-1)), org.ovirt.engine.core.compat.Long.tryParse("-1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf((-1)), org.ovirt.engine.core.compat.Long.tryParse("-1")); org.junit.Assert.assertEquals(java.lang.Long.valueOf(0), org.ovirt.engine.core.compat.Long.tryParse("0")); }
public void setMaximum(long value) { maximum = maximum; }
public long getMaximum() { return maximum; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return ((((((((((validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validate(validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationId()))) && (validate(validator.validate(validator.validNetworkFilterForPassthroughProfile(useDefaultNetworkFilterId))) && (validate(validator.validator.validateNetworkFilterForPassthroughProfile(validator.validateNetworkFilterForPassthroughProfile(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationId())); }
java.lang.String ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_CANNOT_BE_USED_WITH_PASSTHROUGH();
public org.ovirt.engine.core.bll.ValidationResult validNetworkFilterForPassthroughProfile(boolean useDefaultNetworkFilterId) { if (!(vnicProfile.isPassthrough())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_NETWORK_CANNOT_BE_WITH_PASSTHROUGH; boolean allowedState = ((vnicProfile.getNetworkFilterId()) == null) && (!allowDefaultNetworkFilterId); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_INVALID_VNIC_PROFILE_CANNOT_BE_USED_WITH_PASSTHROUGH; }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.UpdateVnicProfileCommand.createVnicProfileValidator(); return (((((((((((validator.vnicProfileIsSet())) && (validate(validator.vnicProfileExists()))) && (validate(validator.networkNotChanged()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.portMirroringNotChangedIfUsedByVms()))) && (validate(validator.portMirroringNotChangedIfExternalNetwork()))) && (validate(validator.portMirroringNotChangedIfExternalNetwork()))) && (validate(validator.passthroughNotChangedProperties()))) && (validate(validator.passthroughNotChangedProperties()))) && (validate(validator.passthroughNotChangedProperties()))) && (validate(validator.validNetworkFilterId())); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator. naturalOrder()); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.forEach((dataCenter) -> dataCenters.setStoragePoolCompatibilityVersionUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }
public org.ovirt.engine.core.bll.ValidationResult memoryOptimizationConfiguration() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.CLUSTER_TO_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_MUST_ALLOW_K_AND_KSM_MUSTER); }
@org.junit.Test public void memoryOptimizationLowerThanZeroWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit((-52)); cluster.setEnableKsm(false); cluster.setEnableKsm(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_AND_KSM_AND_KSM_AND_KSMUSTER); }
java.lang.String CLUSTER_TO_MEMORY_OPTIMIT_MUSTER_VOLUME_OP_MUSTER_BE_MUSTER();
@org.junit.Test public void memoryOptimizationWithoutKsmOrBallooning() { final org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.core.bll.UpdateClusterCommandTest.createDefaultCluster(); cluster.setMaxVdsMemoryOverCommit(100); cluster.setEnableKsm(false); cluster.setEnableBallooning(false); createCommand(cluster); cpuExists(); validateFailedWithReason(EngineMessage.CLUSTER_TO_ALLOW_MEMORY_OPTIMIZATION_YOU_MUST_ALLOW_K_MUSTER_AND_BALLOON_MUSTER); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles!= null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = (((getDisk())!= null) && (isExistingDisk())) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)))? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId!= null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk())!= null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); } }
@java.lang.Override public org.ovirt.engine.api.model.Vm update(org.ovirt.engine.api.model.Vm incoming) { validateParameters(incoming); if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.toString().equals(get().getCluster().getId()))) { performAction(VdcActionType.ChangeVMCluster, new org.ovirt.engine.core.common.action.ChangeVMClusterParameters(clusterId, guid, null)); } } if (!(isFiltered())) { if (incoming.isSetPlacementPolicy()) { parent.validateAndUpdateHostsInPlacementPolicy(incoming.getPlacementPolicy()); } } else { incoming.setPlacementPolicy(null); } org.ovirt.engine.api.model.Vm vm = performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class), VdcActionType.UpdateVm, new org.ovirt.engine.api.restapi.resource.BackendVmResource.UpdateParametersProvider()); if (isNextRunRequested()) { org.ovirt.engine.core.common.businessentities.VM entity = getEntity(org.ovirt.engine.core.common.businessentities.VM.class, VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.api.restapi.resource.BackendVmMapper()); if (isNextRunRequested()) { org.ovirt.engine.api.model.VM entity = getEntity(org.ovirt.engine.api.restapi.types.VmMapper.map(entity, null, false), entity, true); } if (isSetPlugged()) { org.ovirt.engine.api.
public void refresh() { try { refreshVdsRunTimeInfo(); } finally { try { if (((firstStatus)!= (vds.getStatus())) && ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { vdsManager.cancelRecoveryJob(); org.ovirt.engine.core.vdsbroker.monitoring.HostMonitoring.log.debug("Host '{}' ({}) firing up event.", vds.getName(), vds.getId()); vdsManager.setIsSetNonOperationalExecuted((!(getVdsEventListener().vdsUpEvent(vds)))); } saveDataToDb(); } catch (org.ovirt.engine.core.vdsbroker.irsbroker.IRSErrorException ex) { logFailureMessage("ResourceManager::refreshVdsRunTimeInfo:", ex); org.ovirt.engine.core.vdsbroker.Monitoring.log.debug("Exception", ex); } } }
@org.junit.Test public void testListWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.list().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
public org.ovirt.engine.sdk.ConnectionBuilder headers(java.util.Map<java.lang.String, java.lang.String> headers) { this.headers = headers; }
@org.junit.Test public void testAddWithCustomHeader() { clustersService.add().cluster(cluster()).send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testLGetWithCustomGlobalHeader() { clusterService.get().send(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Before public void setUp() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(); headers.put("my", "value"); setXmlResponse("clusters/123", 200, "<clusters/>"); setXmlResponse("clusters/123", 200, "<clusterId=\"123\n"></cluster>"); startServer(); connection = ((org.ovirt.engine.sdk.internal.HttpConnection) (testConnectionBuilder().headers(headers).build())); clustersService = connections.systemService.clusterService(); clusterService = clustersService.clusterService(); clusterService = clustersService.clusterService.clusterService(); clusterService = clustersService.clusterService.clusterService.clusterService(); }
@org.junit.Test public void testListWithCustomGlobalHeader() { clustersService.list(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testRemoveWithCustomHeader() { clusterService.remove(); assertEquals(getLastRequestHeaders().get("my").getFirst(), "value"); }
@org.junit.Test public void testRemoveWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.remove().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateAdditionalHeadersParameters() { buffer.addLine("headers", org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().keySetHeader()).append("headers: "); buffer.addLine("header: "); buffer.addLine("setHeader(header.getKey(), header.getValue()); }
private void generateAdditionalQueryParameters() { buffer.addLine("if (query!= null? null : query.entry.getKey())); buffer.addLine("for (queryParam.getKey(), queryParam.getValue()); }
private void injectHeaders(org.ovirt.engine.api.restapi.methods.HttpUriRequest request) { for (java.util.Map.Entry<java.lang.String, java.lang.String> header : headers.entrySet()) { request.addHeader(header.getKey(), header.getValue()); } java.util.List<org.apache.commons.http.Header> updated = excludeNullHeaders(request.getKey(), header.getValue()); if ((updated!= null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()))); } for (org.apache.http.Header[updated.getURI(), http.getValuePair().UTF_8)) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Version", "4"); request.addHeader("Authorization", " + (getAccessToken()))); }
@org.junit.Test public void testGetWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clusterService.get().headers(headers).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
@org.junit.Test public void testListWithTwoCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(2); query.put("first", "value1"); query.put("second", "value2"); query.put("second", "value2"); vmsService.list().query(query).send(); assertEquals("first=value1&second=value2", getLastRequestQuery()); }
private void injectHeaders(org.ovirt.engine.api.restapi.methods.HttpUriRequest request) { java.util.List<org.ovirt.engine.api.restapi.utils.HttpUriResource> exclude = excludeNullHeaders(request.getKey(), header); java.util.List<org.apache.commons.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated!= null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.Header[updated.getUrl(), http.getUrl().getValue()); } if (org.apache.http.Header[updated.isEmpty()) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("User-agent", "ThisSD"); request.addHeader("Authorization", " + (getAccessToken()))); }
@org.junit.Test public void testListWithCustomQueryParam() { java.util.Map<java.lang.String, java.lang.String> query = new java.util.HashMap<>(1); query.put("my", "value"); vmsService.list().query(query).send(); assertEquals("my=value", getLastRequestQuery()); }
private void generateRequestInterface(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); java.lang.String request = getRequestName(method); java.lang.String response = getResponseName(method); java.lang.String response = getResponseName(method); method.parameters().filter(Parameter.isIn).sorted().forEach(this::generateRequestParameter); javaBuffer.addLine("method: http headers"); javaBuffer.addLine("method: http headers (method); request.addImport(java.util.Map.class); javaBuffer.addDocComment("headers: http headers"); javaBuffer.addLine("headers(Map); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine("}"); javaBuffer.addLine(); }
@org.junit.Test public void testAddWithCustomHeaderOverridden() { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.HashMap<>(1); headers.put("my", "local"); clustersService.add().cluster(cluster()).send(); assertEquals("local", getLastRequestHeaders().get("my").getFirst()); }
private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String requestImpl = getRequestImplName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("Method", getRequestImplParameterImplementation); buffer.addLine("Method", method); buffer.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addLine("}"); buffer.addValue(Header); buffer.addLine("}"); buffer.addValue(method); buffer.addLine("}"); buffer.addRequest("}", query); if (org.ovirt.engine.sdk.ServicesImplGenerator.INSTANCE.NOT_BE_SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSched(org.ovirt.sdk.sdk.sdk.jsonrk.AbstractDiskGenerator.UPDATE.VM_NAME); } else { generateActionRequest(); } buffer.addLine("}"); buffer.addLine(); }
@java.lang.Override public javax.ws.rs.core.Response ticket(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType = deriveGraphicsType(); if (graphicsType == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Failed Failed"); fault.setDetail(localize(messages.VdcActionType.GetVmTICKET_FOR_DOWN_VM)); return javax.ws.rs.core.Response.status(Response.Status.CONFLICT).entity(action); } java.lang.String consoleId = org.ovirt.engine.api.restapi.resource.BackendGraphicsConsoleHelper.asConsole(graphicsType); return getGraphicsConsolesResource().getConsoleResource(consoleId).ticket(action); }
public boolean isAction() { java.util.List<java.lang.String> nonActionMethodNames = new java.util.ArrayList<>(java.util.Arrays.asList(add("get", "list", "update", "remove")); if ((nonActionMethodNames.contains(getName().toLowerCase())) || (((nonActionMethodNames.contains(base.getName().toLowerCase()))) || ((nonActionMethodNames.contains(base.getName().toLowerCase()))) { return false; } else { return true; } }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method " + method) + " doesn\'t have any struct parameter parameter"); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addImport(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@PUT"); javaBuffer.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { mainTypeReference.getText(), mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelper.addLine("} update(%s %s) { mainTypeReference.getText(), mainTypeReference.getText(), parameterName); writeHelper.addLine("}", mainTypeReference.getText(), mainTypeReference.getName()); writeHelperInvocation(helperClassName, parameterNameReference.getJavaMemberStyleName()); javaBuffer.lang.String parameterName = java.lang.String referenceName; mainClassName = java.lang.String reference.getText(); java.lang.String parameterName = java.lang.String referenceName; mainTypeReference.getText(), mainTypeReference.getName()); mainTypeReference.addLine(""); mainClassName = mainTypeReference.getText(), mainTypeReference.getJavaMemberStyleName(mainParameter.getName())); } else { addMethod(mainTypeReference.getText(), " + mainTypeReference.get
private void generateAddMethod(org.ovirt.api.metamodel.concepts.Method method, boolean base) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method " + method) + " doesn\'t have any struct parameter"); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addImport(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@POST"); javaBuffer.addLine("@POST"); javaBuffer.lang.String parameterName = javaNames.getJavaMemberStyleName(mainParameter.getName()); if (base) { mainTypeReference.getText(), parameterName); writeHelper.addLine("} %s }) generateMediaTypes()); writeHelperInvocation(helperClassName, parameterName, methodName); writeHelperInvocationInvocation(helperClassName, parameterName, methodName); writeHelperInvocationInvocation(helperClassName, parameterName, methodName, methodName); writeHelper.addLine("}"); } else { addResponse("}"); } }
private void generateGetMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("(" + method) + " doesn\'t have any struct parameter") + ") + " is either struct parameter"); return; } org.ovirt.api.metamodel.concepts.Service service = method.getDeclaringService(); boolean isRoot = service == (service.getModel().getRoot()); generateDoc(method); javaBuffer.addLine("@GET"); if (isRoot) { javaBuffer.addImport(javax.ws.rs.core.GET.class); addResponseReturnMethod("get()"); } else { org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getImports(); addMethod("getType"); } else { org.ovirt.api.metamodel.tools.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getImports(); addMethod(mainTypeReference.getImports()); addMethod(mainTypeReference.getText(), "get()"); } javaBuffer.addLine(mainTypeReference.getText(), "getText()); } javaBuffer.addLine(); }
private void generateMethod(org.ovirt.api.metamodel.concepts.Method method, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { boolean baseMethods = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if (JaxrsGeneratorUtils.ADD.equals(method)) { generateAddMethod(method, helperClassName, base); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateGetMethod(method); } else if (JaxrsGeneratorUtils.LIST.equals(name)) { generateUpdateMethod(method); } else if (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateUpdateSignature(method); } else if (org.ovirt.api.metamodel.tool.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateUpdateSignature(method); } else if (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method)) { generateActionSignature(method); } else if (org.ovirt.api.metamodel.tool.utils.JaxUtils.isUpdateSignature(method)) { generateActionSignature(method); } else { generateActionMethod(method); } }
private void generateActionMethod(org.ovirt.api.metamodel.concepts.Method method, boolean base) { javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.POST.class); javaBuffer.addImport(javax.ws.rs.Path.class); javaBuffer.addImport(javax.ws.rs.Path.class); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Action"); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Actionable"); generateDoc(method); javaBuffer.addImport(java.lang.String); javaBuffer.addImport(javaPackages.getXjcPackageName(), "Actionable"); generateDoc(method); javaBuffer.addLine("@Path(\"%s }) generateMediaTypes()); javaBuffer.addLine("@Path(\"%s }) generateMediaTypes()); javaBuffer.addLine("@Path(\"%s(Action action) { javaBuffer.addLine("@Path(\"%s\")", methodName); writeHelper.addLine("} (actionName); writeHelper.addLine("} (actionName); writeHelper.addLine("}", actionName); } else { addResponseReturnMethod(((jaxrsNames.getMethodName(method.getName())) + " action)"); } else { addResponseReturnMethod(((javaxrsNames.getMethodName(method.getName())) + " action)"); } javaBuffer.lang.String methodName = "className"; }
private void generateUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainUpdateParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addLine((("default %s " + methodName) + (methodName) + (methodName) + "(methodName) + "%s %s) {"), mainTypeReference.getText(), mainTypeReference.getText(), mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine("expected \"" + (namesNames.getText(), mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine("unsupportedOperationException"); }
private void initVariables(org.ovirt.api.metamodel.concepts.Service service) { resourceName = jaxrsNames.getInterfaceName(service); helperName = new org.ovirt.api.tool.JavaClassName(resource); helperName = new org.ovirt.api.metamodel.tool.JavaClassName(service); javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassLoader(); javaBuffer.setClassName(helperName); javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); javaBuffer.setClassName(helperName); javaBuffer.addImport(resourceName); }
private void writeHelperInvocation(org.ovirt.api.metamodel.concepts.Name helperClassName, java.lang.String parameterName, org.ovirt.api.metamodel.concepts.Name methodName) { javaBuffer.addLine("try {"); javaBuffer.addLine("try {"); javaBuffer.addLine(((((Response) + (javaNames.getJavaClassStyleName(methodName))) + ") + parameterName) + ") + parameterName) + ") + parameterName) + ") + (((javaNames.getJavaClassStyleName(helperClassName)) + ") + parameterName) + ") + parameterName) + ") + (javaBuffer.getFunctionMethodStyleName(this, ") + parameterName) + parameterName) + "); javaBuffer.addLine("foundor error is not invoke a callback in a callback in a-generated code"); } javaBuffer.addLine("failed to find API method. The failure is in auto-generated code process"); }
private void writeActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { javaBuffer.addLine("public static void validate%s(javaNames.getName())); }
private static void updateBaseMethodsMap(org.ovirt.api.metamodel.concepts.Method method, java.util.List<org.ovirt.api.metamodel.concepts.Method> methods, java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (((currentMethod.getBase())!= null) && (currentMethod.getBase().equals(method))) { org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.add(baseMethods, method, currentMethod); } } }
public static boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase())!= null) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.UPDATE))); }
private static void add(java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods, org.ovirt.api.metamodel.concepts.Method currentMethod) { if (!(baseMethods.containsKey(method))) { baseMethods.put(method, new java.util.HashSet()); } java.util.Set<org.ovirt.api.metamodel.concepts.Method> fingerprints = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); java.util.Set<org.ovirt.api.metamodel.concepts.Method> results = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); java.util.Set<org.ovirt.api.metamodel.concepts.Method> results = ((java.util.Set<org.ovirt.api.metamodel.concepts.Method>) (baseMethods.get(method))); results.add(currentMethod); }
private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); javaBuffer.addLine("public static void validateStaticData(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); javaBuffer.addLine("public static void validateStatic void validateStaticData(javaNames.getName()), javaNames.getJavaClassStyleName(parameter.getName()), javaNames.getJavaClassStyleName(parameter.getName())); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(((java.lang.String) (method)) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.PrimitiveType)).findFirst().orElse(null); return mainParameter; }
public static boolean isAddSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase())!= null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.ADD)); }
public static org.ovirt.api.metamodel.concepts.Parameter getMainUpdateParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(((x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.PrimitiveType).findFirst().orElse(null); return mainParameter; }
public static boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.UPDATE)); }
public static java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method> methods) { java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); if (method!= null) { updateClassNamesMap(getClass().getName()); } return baseMethodsMap; }
private void closeSignatureMethod() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.addLine("return null"); javaBuffer.lang.StringBuilder builder = new javaBuffer(); builder.addLine("{}"); }
private void generateAddSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Parameter mainParameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getJavaMemberStyleName(mainType); javaBuffer.addLine((("default Response " + methodName) + (methodName) + (methodName) + (org.ovirt.api.metamodel.tool.tool.JavaTypeReference " + methodName) + (methodName) + "%s %s) {"), mainTypeReference.getText(), parameterName); javaBuffer.addLine("expected Response "throw new UnsupportedOperationException"); javaBuffer.addLine("unsupportedOperation"); javaBuffer.addLine(); }
private static boolean isAttributesContainsContainsContains(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes1, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> mandatoryAttributes) { return org.ovirt.api.metamodel.tool.util.JaxrsHelperGeneratorUtils.toNames(MandatoryAttributes2).containsAll(org.ovirt.api.metamodel.tool.concepts.MemberInvolvementTree); }
private static java.util.List<org.ovirt.api.metamodel.concepts.Name> toNames(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> attributes) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.MemberInvolvementAttribute attribute : attributes) { names.add(((attribute.getAlternative()) == null? attribute.shallowToString() : org.ovirt.api.metamodel.tool.JaxrsHelperGeneratorUtils.combineAlternatives(attribute))); } return names; }
private void generateValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { generateValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateParameterValidation(parameter); } javaBuffer.addLine("}"); }
private void generateHelper(org.ovirt.api.metamodel.concepts.Method method) { boolean base = baseMethods.containsKey(method); org.ovirt.api.metamodel.concepts.Name name = method.getName(); if ((((((JaxrsGeneratorUtils.GET.GET.equals(name)) || (JaxrsGeneratorUtils.LIST.equals(name))) || (org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.isAddSignature(method))) || (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method))) || (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method))) { return; } if ((jaxrsGeneratorUtils.ADD.UPDATE.equals(name)) || (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method))) { if (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isUpdateSignature(method))) { if (base) { if (base) { generateParams.updateScheection(method); } else { if (org.ovirt.api.metamodel.tool.tool.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { if (org.ovirt.api.metamodel.tool.utils.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { if (org.ovirt.api.metamodel.tool.utils.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateActionValidation(method); } else { if (org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateActionValidation(method); } else { if (org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.isMandatoryParametersExist(method)) { generateActionValidation(method); }
private void generateActionSignature(org.ovirt.api.metamodel.concepts.Method method) { generateDoc(method); org.ovirt.api.metamodel.concepts.Name methodName = new org.ovirt.api.metamodel.concepts.Name(method.getBase().getName()); methodName.addWords(method.getName().getWords()); javaBuffer.addLine("Response %s(Action action) {", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("Response %s(methodName)); javaBuffer.addLine("Exception", jaxrsNames.getMethodName(methodName)); javaBuffer.addLine("unsupportedOperation"); }
private void generateParameterValidation(org.ovirt.api.metamodel.concepts.Parameter parameter) { for (org.ovirt.api.metamodel.concepts.Parameter element : parameter.getMandatoryAttributes()) { java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list = null; java.lang.String attributePath = getAttributePath(list); javaBuffer.addLine((("if (" + name) + " == null")); javaBuffer.addLine((("if (" + name) + " == null")); javaBuffer.addLine(getFullAttributeStyleName(javaNames.getJavaMemberStyleName(parameter.getName()), list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.OR)); javaBuffer.lang.String name = java.lang.String name.getFullAttributeStyleName(parameter.getJavaMemberStyleName(parameter.getName()), list, org.ovirt.api.metamodel.tool.JaxrsHelperGenerator.OR)); javaBuffer.lang.String name = java.lang.String name = java.lang.String.format("%s: " + name) + attributePath) + attributePath) + attributePath) + attributePath)); javaBuffer.addLine(); } }
public static boolean isContained(org.ovirt.api.metamodel.concepts.Method method, org.ovirt.api.metamodel.concepts.Method method2) { if (method.getName().equals(method2.getName())) { return false; } if ((method.getBase()) == null) { return false; } if (!(method.getBase().getName().equals(method2.getName()))) { return false; } if (!(method.getBase().getName().equals(method2.getName()))) { return false; } if (!(method.getBase().getName().equals(method2.getMandatoryParameters()))) { return false; } if (!(method.getBase().getName().equals(method.getMandatoryParameters()))) { org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorGeneratorGeneratorUtils.isAttributesContaining(methods.getMandatoryParameters(), method2.getMandatoryParameters()))) { return false; } if (!(org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorGeneratorUtils.isAttributesContaining(method))) { return false; } if (!(org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorGeneratorUtils.isAttributesContainingParametersContaining(method))) { return false; } } return (org.ovirt.api.metamodel.tool.tool.JaxrsHelperGeneratorGeneratorGeneratorGeneratorGeneratorGeneratorGeneratorUtils.isAttributesContaining(method)) && (methods.getMandatoryParameters())) && (org.ovirt.api.metamodel.tool.utils.JaxrsHelperGeneratorUtils.isAttributesContainingParameters(methods.getMandatoryParameters()))) && (org.ovirt.api.metamodel.tool.utils.Jaxrsapi.Jaxrsapi.tool.Jaxrsapi.tool.Jaxrsapi.tool.Jaxrsapi.Jaxrsapi.util.JaxUtils.isAttributesContainingParameters(methods.getMandatoryParameters(), method2.getMandatoryParameters
private void generateSignatureDetection(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter parameter = org.ovirt.api.metamodel.tool.JaxrsGeneratorUtils.getMainAddParameter(method); javaBuffer.addImports(schemaNames.getXjcTypeReference(parameter.getType()).getImports()); org.ovirt.api.metamodel.concepts.Name parameterName = getSignatureDetectionMethodName(method); org.ovirt.api.metamodel.concepts.Name parameterName = parameter.getName(); javaBuffer.addLine("public staticMethod %s(%s %s) throws NoSuchMethodException, CertificateException, CertificateException {", javaNames.getJavaClassStyleName(methodName), javaNames.getJavaClassStyleName(parameterName), javaNames.getJavaClassStyleName(parameterName), javaNames.getJavaClassStyleName(parameterName), javaNames.getJavaClassStyleName(parameterName), javaNames.getJavaClassStyleName(parameterName)); generateParameterValidation(parameter); java.util.Set<org.ovirt.api.metamodel.concepts.Method> signatures = baseMethods.get(method); org.ovirt.api.metamodel.concepts.Method signature = iterator.next(); iterator.next(); if (!(org.ovirt.api.metamodel.tools.Method method.isContained(signature,ifiers))) { handleSignature(method.getName(), signature, parameterName); iterator.remove(); } } closeSignatureMethod(); }
private java.lang.String getFullAttributeCheck(java.lang.String paramName, java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list, org.ovirt.api.tool.JaxrsHelper.Operator operator) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { builder.append(operator.getPaddedSign()).append(paramName).append(getAttributePath(list.subList(0, (i + 1))) { builder.append(operator.endsWith(".size()).append("null"); } java.lang.String attributeCheck = builder.toString(); if (attributeCheck.endsWith(".size())) { attributeCheck = attributeCheck.substring(0, ((attributeCheck.length()) - 6)); } return attributeCheck; }
private void generateActionValidationMethodName(org.ovirt.api.metamodel.concepts.Method method) { writeActionValidationMethodName(method); for (org.ovirt.api.metamodel.concepts.Parameter parameter : method.getParameters()) { generateActionParameterValidation(parameter); } javaBuffer.addLine("}"); }
private java.lang.String getAttributePath(java.util.List<org.ovirt.api.metamodel.concepts.MemberInvolvementTree> list) { java.lang.String attributePath = new java.lang.StringBuilder(); for (int i = 0; i < (list.size()); i++) { org.ovirt.api.metamodel.concepts.MemberInvolvementTree(list, list.get(i); attributePath.append("get").append(java.lang.String.valueOf(current.getName()))); } } return attributePath.toString(); }
private void generateHelper(org.ovirt.api.metamodel.concepts.Service service) { initVariable(service); serviceMethods.write(outDir); }
public static boolean isContaining(org.ovirt.api.metamodel.concepts.Method method, java.util.Collection<org.ovirt.api.metamodel.concepts.Method> methods) { for (org.ovirt.api.metamodel.concepts.Method currentMethod : methods) { if (org.ovirt.api.metamodel.tool.utils.JaxrsHelperGeneratorUtils.isContained(method, currentMethod)) { return true; } } return false; }
private static boolean isParametersContainsContainsContains(java.util.List<org.ovirt.engine.api.metamodel.concepts.Parameter> mandatoryParameters1, java.util.List<org.ovirt.api.metamodel.concepts.Parameter> mandatoryParameters2) { java.util.List<org.ovirt.api.metamodel.concepts.Name> names1 = new java.util.ArrayList<>(); java.util.List<org.ovirt.api.metamodel.concepts.Parameter> names2 = new java.util.ArrayList<>(); for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names1.add(p.getName()); } for (org.ovirt.api.metamodel.concepts.Parameter p : mandatoryParameters2) { names2.add(p.getName()); } return mandatoryParameters2.containsAll(MandatoryParameters1); }
private static org.ovirt.api.metamodel.concepts.Name combineAlternatives(org.ovirt.api.metamodel.concepts.MemberInvolvementTreeAttribute attribute) { org.ovirt.api.metamodel.concepts.Name name1 = attribute.getAlternative().get(); org.ovirt.api.metamodel.concepts.Name name2 = attribute.getAlternative().shallowToString(); if ((name1.toString().compareTo(name2.toString())) < 0) { name1.addWords(name1.toString()); return name2; } else { name2.addWords(name1.getWords()); return name2; } }
public void updateInitialRunFields() { getIsSysprepPossible().setEntity(getIsWindowsOS()); getIsSysprepEnabled().setEntity(((getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitPossible().setEntity((!(getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep))); getIsCloudInitEnabled().setEntity((!(getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit))); getIsCloudInitEnabled().setEntity((!(getIsWindowsOS()))); getVmInitModel().updateSysprepDomain(null); }
private void vmInitEnabledChangedChanged() { if (!(getVmInitEnabled().getEntity())) { getSysprepEnabled().setEntity(false); getSysprepEnabled().setEntity(false); } else { getSysprepEnabled().setEntity(getIsWindowsOS()); getCloudInitModel().updateSysprepDomain(null); } }
@java.lang.Override public java.util.List<java.lang.String> addMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> notAddedMacs = new java.util.ArrayList<>(macs.size()); for (java.lang.String mac : macs) { if (addMac(mac)) { addMac(mac); } } return notAddedMacs; }
public void moveMacsOfUpdatedCluster(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.compat.Guid idOfClusterHavingSourceMacPool, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceMacPoolId); if (needToMigrateMacs(targetMacPoolId, targetMacPoolId)) { java.util.List<java.lang.String> macToMigrate = vmNicDao.getAllMacsByClusterId(idOfClusterHavingSourceMacPool); if (needToMigrateMacs(sourceMacPoolId, targetMacPoolId, commandContext); } }
private void migrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid sourceMacPoolId, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(macToMigrate); org.ovirt.engine.core.bll.network.macpoolmanager.MacPool targetPool = poolPerCluster.getMacPoolById(sourceMacPoolId, commandContext); org.ovirt.engine.core.bll.network.macpoolmanager.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId, commandContext); for (java.lang.String mac : macToMigrate) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId!= null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacs.updateClusterAndMoveAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
public org.ovirt.engine.api.model.Disks list() { throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Response.Status.NOT_IMPLICATIONED).build(); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Can't to add VM. The reasons are: {}", java.lang.String.format(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); addVmNumaNodes(); getCompensationContext().stateChanged(); return null; } if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeVmPayload(); addVmDevices(); addVmDevices(); addVmDevices(); addVmDevices(); addVmDevices(); addGraphicsDevice(); setActionReturnValue(getVm().getStaticData(), getParameters().isVirtioScsiEnabled()); setSucceeded(true); return null; } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId())!= null) { addVmToPool(); addVmToPool(); } }
@org.junit.Test public void statusSupportedForHostUpgrade() { assertThat(validator.statusSupportedForHostUpgrade(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
private void removeImage() { org.ovirt.engine.core.common.action.RemoveImageParameters removeImageParams = new org.ovirt.engine.core.common.action.RemoveImageParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getDestinationImageId()); removeImageParams.setStorageDomainId(getDestinationStorageDomainId()); removeImageParams.setParentCommand(VdcActionType.RemoveImage); removeImageParams.setDbOperationScope(ImageDbOperationScope.NONE); removeImageParams.setShouldLockImage(false); removeImageParams.setShouldLockImage(false); removeImageParams.setCorrelationId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotFromTemplateCommand.getParameters().getCorrelationId()); removeImageParams.setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcActionType.RemoveImage, removeImageParams); if (!(returnValue.getSucceeded())) { addAuditLogOnRemoveFailure(); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(@javax.validation.constraints.NotNull org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allowedHosts = new java.util.ArrayList<>(); final int allowedSwapUsage = org.apache.commons.lang.math.IntegerUtils.toInt(parameters.get(PolicyUnitParameter.MAX_ALLOWED_SWAP_USAGE.getDbName()), org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BlockMigrationOnSwapUsagePercentage)); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (isHostSwapUsage(vds, allowedSwapUsage)) { org.ovirt.engine.core.bll.scheduling.policyunits.SwapFilterPolicyUnit.log.debug("Host '{}' is swapping more than allowed it.", vds.getName()); messages.addMessage(vds.getId(), EngineMessage.VAR__DETAIL__DETAIL__SWAP_VALUE_ILLEGAL.toString()); continue; } } return validHosts; }
private boolean isHostSwapping(@javax.validation.constraint.NotNull org.ovirt.engine.core.common.businessentities.VDS host, int allowedSwapUsage) { if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableSwapCheck))) { return false; } if (((((((host.getSwapTotal()) == null) || ((host.getSwapFree()) == null)) || ((host.getMemAvailable()) <= 0)) || ((host.getPhysicalMemMb()) <= 0)) || ((host.getPhysicalMemMb()) <= 0)) { return false; } else { long swap_total = host.getSwapTotal(); long mem_available = host.getSwapFree(); long mem_available = host.getSwapFree(); return ((((swap_total - swap_available) - mem_available) * 100) / 100) / 100)) > allowedSwapUsage; } }
@org.junit.Test public void externalNetworkNameChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@org.junit.Test public void externalNetworkDescriptionChanged() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network externalNetwork = mockExternalNetwork(); assertThat(validator.externalNetworkDetailsUnchanged(externalNetwork), isValid()); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { log.debug("Macs on a non-compensation state", macs); macPool.freeMacs(mac); }
@java.lang.Override public void cleanupCompensationDataAfterSuccess() { log.debug(("MacsToRelease: {0}", macsToReleaseOnCommit); }
private void mockThatDuringAddingToTargetOnlyFirst() { when(targetMacPool.addMacs(anyList())).thenAnswer(((org.ovirt.engine.core.bll.gluster.AddGlusterCommand.getMacs(anyList())).thenReturn(((java.util.Collections.singletonList(macPool.get(1))).thenAnswer(((java.util.Collections.singletonList(macPool.get(1)); }
private void mockLockObjectFactoryToDisableLocking() { when(lockedObjectFactory.createLockingInstance(any(org.ovirt.engine.core.bll.network.macpool.MacPool.class), eq(java.util.concurrent.RejectsArgumentException.returnsArgumentException))).thenAnswer(org.mockito.AdditionalAnswers.returnsArgAt(0)); }
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ((TotalMillis)? "-" : "-")? "-" : "-")"; return java.lang.String.format("%s%s:%02d:%02d:%02d.%02d", prefix, 60, milliseconds, 60, 60, ((days, days) == 0? null : days, 60, 60, 60)))) }
@java.lang.Override protected void setActionMessageParameters() { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); if (originalHostId!= null) { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); } else { org.ovirt.engine.core.compat.Guid originalHostId = org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds(); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setStartTime(new java.util.Date()); destinationHostLock = new org.ovirt.engine.core.utils.lock.EngineLock(hostLocking.getSetupNetworksLock(getDestinationVdsId())); lockManager.acquireLockWait(destinationHostLock); if (((unplugPassthroughNics()) && (migrateVm())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_MIGRATION_IN_PROGRESS)); }
@java.lang.Override protected void runningFailed() { try { cleanupFailed(); lockManager.releaseLock(destinationHostLock); } finally { super.runningFailed(); lockManager.releaseLock(destinationHostLock); } }
java.lang.String ACTION_TYPE_FAILED_SETUP_NETWORK_OR_MIGRATION();
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToDifferentCluster(); vmDynamicDao.clearMigratingToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolume(java.lang.String vmId, java.lang.String jobId, java.util.Map<java.lang.String, java.lang.String> raidType, java.util.Map<java.lang.String, java.lang.String>> volumes);
@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.SealVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setVmId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); getDiskImages().forEach((diskImage) -> parameters.getId())).getImageId(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommand(VDSCommandType.SealDisks, parameters, getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); lockTemplateInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommand(VDSCommandType.SealDisks, parameters, getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); } setSucceeded(vdsReturnValue.getSucceeded()); } setSucceeded(vdsReturnValue.getSucceeded()); }
@java.lang.Override protected void endSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); setVmId(getVmIdFromImageParameters()); isVmInDb = (org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm())!= null; vmStaticDao.incrementDbGeneration(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().endAction(p.getCommandType(), p, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } if ((reloadVmTemplateFromDB())!= null) { endDefaultOperations(); } checkTrustedService(); org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void endSuccessfullySynchronous() { if ((reloadVmTemplateFromDB())!= null) { endDefaultOperations(); } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void sealVmTemplate() { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return; } org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolume(java.lang.String vmId, java.lang.String jobId, java.util.List<java.lang.String> volumes) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.seal").withParameter("vmID", vmId).withParameter("job_id", jobId).withOptionalParameterAsList("volumes", volumes).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImages() { if ((diskImages) == null) { diskImages = diskImages; } return diskImages; }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).appendAttributes(tsb).append("vmId", vmId).append("volume_name", volumeId).append("}", volumeId).append("}", volumeId).append("}", volumeId=").append(vmId).append(", volumeId).append("}", volumeId=").append(getUserId()).append("}", volumeId=").append(vmId).append(", volumeId=").append(getUserId()).append("}", volumeId=").append(vmId=").append(vmId=").append(vmId=").append(getId()).append("}", volumeId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append(vmId=").append("}")); return builder.getStatus=").append("}"; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.SSEVmTemplateCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, EngineMessage.VAR_TYPE_FAILED_STORAGE_DOMAIN); return locks; }
public void addVolume(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid volumeId) { volumes.add(new org.ovirt.engine.core.common.vdscommands.SeedDisksVDSCommandParameters(storageDomainId, imageId, volumeId)); }
@java.lang.Override protected void executeVdsBrokerCommand() { result = org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getBroker().sealDisks(org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getJobId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.getParameters().getVolumes().stream().map(this::mapToEndpoint).collect(java.util.stream.Collectors.toList())); org.ovirt.engine.core.vdsbroker.vdsbroker.SealDisksVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override protected void endWithFailure() { super.endWithFailure(); unlockTemplateInDb(); if ((getDiskImages())!= null) { addDiskImagesInDb(); } else { setDiskImages(false); } }
private void lockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getCompensationContext().snapshotEntityStatus(diskImage.getImage()); diskImage.setImageStatus(ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.LOCKED); } }); }
private java.util.Map<java.lang.String, java.lang.String> mapToEnd(org.ovirt.engine.core.common.vdscommands.SessionsVDSCommandParameters.VolumeAddress volumeAddress) { java.util.Map<java.lang.String, java.lang.String> dstVdsId = new java.util.HashMap<>(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue return java.util.Collections.singletonMap(storageDomainId, new java.lang.String(storageAddress)); }
private void unlockDiskImagesInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDiskImages().forValue(getImageId()).setImageStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(diskImage.getImageId(), ImageStatus.OK); return null; } }); }
public java.util.List<org.ovirt.engine.core.common.vdscommands.SeedDisksVDSCommandParameters> getVolumes() { return volumes; }
@java.lang.Override protected void endSuccessfully() { super.endSuccessfully(); unlockTemplateInDb(); }
private void assignLegalAndShared(boolean legalAndShared) { org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters parameters = new org.ovirt.engine.core.common.action.UpdateAllTemplateDisksParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId(), legalAndShared, (legalAndShared? org.ovirt.engine.core.common.businessentities.storage.CopyVolumeType.SharedVol : null)); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(false); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.UpdateAllTemplateDisks, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (completedChildCount < (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.AddVmTemplateCommand.getCommandId()).size())) { return false; } switch (org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getPhase()) { case CREATE : if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isSealTemplate())) { return true; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SEAL); break; case ASSIGN_ILLEGAL : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().setPhase(Phase.SEAL); break; case DEL_LEGAL_SHARED : return true; case ASSIGN_SHARED : return true; case AssignOperation(); return false; } org.ovirt.engine.core.bll.AddVmTemplateCommand.persistCommandIfNeeded(); executeCommandIfNeeded(); return false; }
private void sealVmTemplate() { org.ovirt.engine.core.common.action.SealVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.SealVmTemplateParameters(); parameters.setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); parameters.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); parameters.setEndProcedure(false); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(VdcActionType.SealVmTemplate, parameters, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.ovirt.engine.ui.uicommonweb.models.TabListModel> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName)) < lowIndex) { lowerIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowIndex!= (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowIndex)); } }
@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel())!= null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = presenterWidget.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } }
public static com.google.gwt.event.shared.HandlerRegistration registerValidationHandler(final com.google.gwt.event.shared.EventBus eventBus, final org.ovirt.engine.ui.common.presenter.AbstractModelBoundPopupPresenterWidget<?,?> presenterWidget, final org.ovirt.engine.ui.common.view.TabbedView view) { return eventBus.addHandler(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.getType(), new org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent.ValidationCompleteEventHandler() { @java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel())!= null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = view.getModel().getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabNameModel> mapping = view.getTabNameMapping(); org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().equals(mapping.get(invalidTabName()))) { return; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping); } } }); }
private void updateTabVisibilities(org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel object) { generalTab.setVisible(object.isGeneralTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); scheduleTab.setVisible(object.isScheduleTabVisible()); if ((object.getRecurrence().getSelectedItem())!= (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotScheduleRecurrence.UNKNOWN)) { } }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget> getTabNameMapping() { return ((org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget) (getContentWidget())).getTabNameMapping(); }
@java.lang.Override public void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean closeIconVisible) { asWidget().setWidth(width); asWidget().setHeight(height); asWidget().setCloseIconButtonVisible(closeIconVisible); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } } }); iscsiTargetToLunView.edit(object); iscsiLunToTargetView.switchTab((object.getIsGrouppedByTarget()? targetsTab : lunToTargetsTab)); updateListByGropping(object); }
@java.lang.Override public java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> getTabNameMapping() { return tabMap; }
@java.lang.Override public void show() { super.show(); super.show(); contentScrollPanel.getElement().setHeight(((getOffsetHeight()) - 100), Unit.PX); }
@java.lang.Override public void setHeight(java.lang.String value) { this.height = height; }
@java.lang.Override @com.google.gwt.uibinder.client.UiChild(tagname = "header", limit = 1) public void setHeader(java.lang.String headerTitle) { com.google.gwt.user.client.ui.HTML headerTitlePanel = new com.google.gwt.user.client.ui.HTML(("H4", headerTitle)); headerTitlePanel.addStyleName(style.getWidgetCount()); headerTitlePanel.addStyleName(style.getWidgetCount()); }
public java.util.List<org.ovirt.engine.ui.common.utils.TabListItem> getTabs() { java.util.List<org.ovirt.engine.core.utils.TabListItem> tab = new java.util.ArrayList<>(); for (int i = 0; i < (div>.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Widget tab = navigationTabs.getWidget(i); if (tab instanceof org.ovirt.engine.ui.webadmin.widget.TabListItem) { tab = ((org.ovirt.engine.ui.webadmin.widget.tab.TabListItem) (tab))); if (tab instanceof org.ovirt.engine.ui.webadmin.widget.TabListItem) { tab = ((org.ovirt.engine.ui.webadmin.widget.tab.TabListItem) (tab))); } } } return tab; }
@java.lang.Override public void setHelpCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { command.setHelpCommand(HelpCommand); }
@java.lang.Override public final java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> getTabNameMapping() { return tabMap; }
public org.ovirt.engine.ui.webadmin.section.main.tab.ui.AbstractListItem getTabListItem() { return tabListItem; }
java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> getTabNameMapping();
public void setNoScroll(boolean value) { if (value!= null) { contentScrollPanel.getElement().getStyle().setOverflow(Overview.CONSTIBLE); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.uicommonweb.models.TabListModel> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { } else { } } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel flush() { return flush(); }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel disk) { boolean isInVm = (disk.getVm())!= null; if (!(isNewLunDiskEnabled) { externalDiskPanel.setVisible(isNewLunDiskEnabled); externalDiskPanel.setVisible(((isNewLunDiskEnabled) && ((disk.getDiskStorageType().getEntity()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)))); aliasEditor.setFocus((!isInVm)); aliasEditor.setFocus((!isInVm)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("IsChangable".equals(propName)) { if ((disk.getDiskStorageType().getIsChangable()) && (disk.isEditEnabled())) { enableWidget(radioButtonsPanel); } else { disableWidget(radioButtonsPanel); } } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealStorageView(disk); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (disk.getIsModel().getEntity()) { disableWidget(getWidget()); enableWidget(datacenterEditor); enableWidget(datacenterEditor); } else { enableWidget(getWidget()); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { disk.getDiskStorageType().setEntity(DiskStorageType.LUN); revealDiskPanel(disk); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.constants.glusterStorageDomain()); }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + (org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageLunToTargetList.constants.glusterToTarget()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return ((java.lang.String) (object.getVmMemSizeMb())) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageVmBackupView.constants.mb()); }
private java.lang.String renderMemory(double memory) { if (memory <= 0) { return "0"; } return memory > (java.lang.Math.abs(((org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.MB_GB_THRESHOLD) * (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGABILITIES.render((memory / (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.GIGA) (memory)) + ((int) (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.constants.mb()) + ") + (org.ovirt.engine.ui.userportal.widget.QuotaMemoryProgressBar.constants.mb()); }
private java.lang.String renderHumanReadableSize(long size) { long sizeInBytes = org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.BYTES).longValue(); if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_GB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.convert(sizeInBytes, SizeUnit.BYTES, SizeUnit.GiB).doubleValue()) + " " " ") + (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB))); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_MB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) + " ") + (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB))); } else if (sizeInBytes > (org.ovirt.engine.core.common.utils.SizeConverter.BYTES_KB)) { return ((org.ovirt.engine.core.common.utils.SizeConverter.BYTES_IN_KB)) + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.BYTES_KB))); } else { return (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.mb()); } }
@java.lang.Override public java.lang.String render(T sizeInMB) { return sizeInMB!= null? (sizeInMB.toString() : org.ovirt.engine.ui.common.widget.renderer.MemorySizeRenderer.constants.unAvailablePropertyLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData object) { return ((java.lang.String) (object.getVm().getVmMemSizeMb())) + ") + (org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData.MEMPLATE_MEMPLATE); }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return " " " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenters.AbstractFindStoragePopupView.constants.bb()); } return ((storage.getAvailableDiskSize()) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenters.AbstractFindStoragePopupView.constants.gluster()); }
private java.lang.String renderGigabyteSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB))? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return (sizeInGB >= 1? sizeInGB : " " + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.glusterSizeRenderer.getBytesRenderer().getBytes())) + " ") + (org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.constants.glusterSizeRenderer.isEmpty())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.RegisterVmData registerVmData) { int size = ((org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb()); return ((size) (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterVmPopupView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VM object) { return ((java.lang.String.valueOf(object.getVmMemSizeMb())) + ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { int size = getEntity(object).getMemSizeMb(); return ((size + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterTemplatePopupView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { double used = 0; double used = 0; if ((object.getGlobalQuotaStorage())!= null) { allocated = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGB(); used = object.getGlobalQuotaStorage().getStorageSizeGB(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : object.getQuotaStorages()) { if (!(QuotaStorage.UNLIMITED.equals(quotaStorage.getStorageSizeGB()))) { allocated += quotaStorage.getStorageSizeGB(); used += quotaStorage.getStorageSizeGB(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaStorage.UNLIMITED; break; } } } value = allocated - 0; java.lang.String returnVal; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return ((java.lang.String.valueOf(object.getMemSizeMb())) + ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageTemplateBackupView.constants.mb()); }
private void initTable() { org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { return storage.getStorageName(); } }; storageDomainItems.setColumnWidth(nameColumn, "280px"); storageDomainItems.addColumn(nameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.nameStorage()); org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain> freeSpaceColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractEntityModelTextColumn<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenters.RecoveryStorageConfirmationPopupView.constants.storageFreeSpaceColumn, " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.storage.status()); } return ((storage.getAvailableDiskSize()) + ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenter.RecoveryStorageConfirmationPopupView.constants.mb()); } }; storageDomainItems.setColumnWidth(freeSpaceColumn
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getVmMemSizeMb())) + ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportVmFromExportDomainPopupView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (object)).getTemplate().getMemSizeMb())) + ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportTemplatePopupView.constants.mb()); }
java.lang.String bytes2();
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Quota object) { int allocated = 0; if ((object.getGlobalQuotaCluster())!= null) { allocated = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMB(); used = object.getGlobalQuotaCluster().getMemSizeMBUsage(); } else { for (org.ovirt.engine.core.common.businessentities.QuotaCluster quota : object.getQuotaClusters()) { if (!(QuotaCluster.UNLIMITED_MEM.equals(quotaCluster.getMemSizeMB()))) { allocated += quotaCluster.getMemSizeMB(); } else { allocated = org.ovirt.engine.core.common.businessentities.QuotaCluster.UNLIMITED_MEM; break; } } } value = ((int) (allocated - used)); java.lang.String return Val; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.glusterTEM_BRICKS_SIZE_INVALID)) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.glusterTEM_BRICKS_SIZE); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return ((java.lang.String.valueOf(object.getMemSizeMb())) + ") + (org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.constants.mb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asVm(entity).getDiskSize())).intValue(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return (((java.lang.Double) (asDisk(entity).getActualDiskWithSnapshotsSize())).intValue()) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.glusterVolumeWithSnapshotsSize())).intValue()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.EntityModel entity) { return ((asDisk(entity).getSizeInGigabytes()) + (org.ovirt.engine.ui.userportal.widget.table.column.VmTable.constants.glusterTEME_GB)); }
@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if (((storage.getAvailableDiskSize()) == null) || ((storage.getAvailableDiskSize()) < 1)) { return " " + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenters.RecoveryStorageConfirmationPopupView.constants.bb()); } return ((storage.getAvailableDiskSize()) + " ") + (org.ovirt.engine.ui.webadmin.section.main.view.popup.datacenters.RecoveryStorageConfirmationPopupView.constants.bb()); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return ((java.lang.String.valueOf(object.getSizeInGigabytes())) + ") + (org.ovirt.engine.ui.common.widget.uicommon.template.TemplateDiskListModelTable.constants.glusterImage()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateVmwareVisible(model.getVmwarePropertiesModel().getIsAvailable()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateDataCenterVisible(model.getDataCenter().getIsAvailable()); } }
void updateAvailability(boolean isAvailable);
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateKvmVisible(model.getKvmPropertiesModel().getIsAvailable()); } }
public void updateDataCenterVisible(boolean isAvailable) { if (isAvailable) { typeEditorRow.removeStyleName(style.headerSeparator()); } else { typeEditorRow.removeStyleName(style.headerSeparator()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateXenVisible(model.getXenPropertiesModel().getIsAvailable()); } }
@java.lang.Override protected boolean validateImageTransfer(org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(imageId))); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); return (((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskAttachedToAnyVm()))) && (validate(diskValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked())); }
protected void initializeSuppliedImage() { super.initSuppliedImage(transferImageCommand); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); doReturn(diskImage).when(diskDao).get(any()); doReturn(diskValidator).when(getCommand()).getDiskValidator(any()); doReturn(diskImagesValidator).when(getCommand()).getDiskImagesValidator(any()); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToAnyVm(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotLocked(); doReturn(ValidationResult.VALID).when(diskImagesValidator).diskImagesNotIllegal(); }
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("VmName", vm.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "tasks.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Message", "tsoDomainType", vm.getName()); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vm.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmStaticDao.update(vm); } } return true; }
private boolean updateTemplates() { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templatesLockedForUpdate) { template.setClusterCompatibilityVersion(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion()); final org.ovirt.engine.core.common.action.UpdateVmTemplateParameters parameters = new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(template); parameters.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); parameters.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); updateRngDeviceIfNecessary(template.getId(), template.getCustomCompatibilityVersion(), parameters); if (!(parameters.isUpdateRngDevice())) { continue; } final org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVmTemplate, parameters, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { addCustomValue("TemplateName", template.getName()); org.ovirt.engine.core.bll.UpdateClusterCommand.addCustomValue("Tasks"); auditLogDirector.log(this, AuditLogType.CLUSTER_CANNOT_UPDATE_TEMPLATE_COMPATIBILITY_VERSION); template.setCustomCompatibilityVersion(oldCluster.getCompatibilityVersion()); vmTemplateDao.update(template); } } return true; }
@java.lang.Override public void initialize() throws org.quartz.SchedulerConfigException { executorService = new java.util.concurrent.ThreadPoolExecutor(10, count, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.TimeUnit<java.lang.Boolean>(queueSize), new org.ovirt.engine.core.utils.timer.SchedulerThreadPool.SchedulerThreadFactory(this)); }
private void generateParameterSpec(org.ovirt.api.metamodel.concepts.Parameter parameter) { org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); org.ovirt.api.metamodel.concepts.Type type = parameter.getType(); java.lang.String namespace = dictionary.getName(); java.lang.String name = null; if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.concepts.Model model = type.getModel(); if (type == (model.getStringType())) { clazz = "String"; } else if (type instanceof org.ovirt.api.metamodel.concepts.PrimitiveType) { org.ovirt.api.metamodel.concepts.Model model = type.getModel(); if (type == (model.getBooleanType())) { clazz = "Fixnum"; } else if (type == (model.getIntegerType())) { clazz = "Date"; } else if (type == (model.getDateType())) { clazz = "Date"; } else if (type instanceof org.ovirt.api.metamodel.concepts.ListType) { clazz = "Date"; } else if (clazz = "Date"; } else if (clazz = "Date"; } } else if (clazz!= null) { buffer.addLine("Date", "Date"; } }
protected void setQCowCompat(org.ovirt.engine.core.common.businessentities.storage.Image diskImage, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageGroupId, java.util.List<org.ovirt.engine.core.compat.Guid> hostsForExecution, boolean shouldPrepareAndLeast) { diskImage.setQCowCompat(QCowCompat.QCOW2); if (org.ovirt.engine.core.common.FeatureSupported.qowCompatSupported(org.ovirt.engine.core.bll.storage.disk.image.BaseImagesCommand.getStoragePool().getCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.ImageInfoHelper.getQosInfoFromVdsm(storagePoolId, newImageGroupId, newImageGroupId, hostsForExecution, shouldPrepareAndLeast(vdsGroupID, hostsForExecution, shouldPrepareAndLeast(qosForExecution, shouldPrepareAndLeast); if (qemuImageInfo!= null) { diskImage.setQoCompat(qemuImageInfo.getQoCompat()); } } }
private void handleFinalizingSuccess(final org.ovirt.engine.core.bll.storage.disk.Command<T>.StateContext context) { log.info("Successfully complete transfer for {}", getTransferDescription()); if (stopImageTransferSession(context.entity)) { org.ovirt.engine.core.compat.Guid transferingVdsId = context.entity.getVdsId(); if (verifyImage(transferer.getVdsId())) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.LEGAL_IMAGE); if (verifyImage(transfererVdsId)) { setVolumeLegalityInStorage(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getVolumeFormat().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getStorageDomainId(), null); imageDao.update(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getImage().getImage()); } org.ovirt.engine.core.bll.storage.disk.image.CopyImageCommand.unLockImage(); updateEntityPhase(ImageStatus.FINISHED_SUCCESS); } else { setImageStatus(ImageStatus.ILLEGAL); updateEntityPhase(ImageStatus.ILLEGAL); } } }
private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIdToExecuteQemuImageInfo = java.util.Collections.emptyList(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { if (vm.isStartingOrUp()) { hostIdToExecuteQemuImageInfo.add(vm.getRunOnVds()); break; } } } setQCowCompat(getDestinationDiskImage().getImage(), storagePoolId, newImageGroupId, hostIdToExecuteQemuImageInfo); }
private void showPanelItems(boolean show) { securityCheckbox.setVisible(show); bugCheckbox.setVisible(show); enhancementCheckbox.setVisible(show); buildCheckboxIconCheckboxIcon.setVisible(show); }); }
@java.lang.Override public org.ovirt.engine.ui.webadmin.widget.table.column.IconType getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { getCell().setColor(org.ovirt.engine.ui.webadmin.widget.table.cell.ErrataType.BUGFIX); return org.gwtbootstrap3.client.ui.Constants.createIconType(org.ovirt.engine.ui.common.widget.businessentities.Erratum.ErrataType.ENHANCEMENT); } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("BLUE")); return org.gwtbootstrap3.client.ui.Constants.iconType.PLUS_SQUERY; } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { getCell().setColor(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString("DARKORAGEORAGEORAGE")); return org.gwtbootstrap3.client.ui.Constants.IconType.WARNING; } return null; }
protected com.google.gwt.safehtml.shared.SafeHtml getRenderedImage(org.ovirt.engine.ui.common.widget.table.cell.IconType value, java.lang.String color) { return org.ovirt.engine.ui.common.widget.table.cell.IconTypeCell.TEMPLATE.icon(value.getCssName(), color); }
@org.ovirt.engine.ui.common.widget.table.cell.Template("<span>{0}</icon=\"{1}</icon=\"{1}</icon=\"{1}\" style=\"{1}\" style=\"{1}\" style=\"{1}\" style=\"{1}</div>") + "color: {1}</div>") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className, java.lang.String color);
private void setQcowCompatByQemuImageInfo(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid newImageId) { org.ovirt.engine.core.compat.Guid hostIdToExecuteQemuImageInfo = null; java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> attachedVmsInfo = vmDao.getVmsWithPlugInfo(getDestinationDiskImage().getId()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> pair : attachedVmsInfo) { org.ovirt.engine.core.common.businessentities.VM vm = pair.getFirst(); if (java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged())) { hostIdToExecuteQemuImageInfo = vm.getRunOnVds(); break; } } setQoVdsId(java.lang.Boolean.TRUE.equals(pair.getSecond().isPlugged()))); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(disk().alias()); optional(disk.alias()); optional(disk().bootable()); optional(disk().prop attachment()); optional(disk().propagateErrors()); optional(disk().shareable()); optional(disk().getBytesOffset()); optional(disk().getByteswipeAfterDelete()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment.id()); optional(attachment.active()); optional(attachment.disk().readOnly()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(attachment.id()); mandatory(attachment.get().snapshot().id()); optional(attachment.get().snapshot().getSnapshot().id()); optional(attachment.getAttachment().active()); }
public static int getCdDeviceIndex(java.lang.String cdInterface) { switch (cdInterface) { case "ide" : return 2; case "ide" : return 2; default : return -1; } }
public boolean hasDisceroe_eroe_ReroeTheDataCenter() { return java.lang.Boolean.TRUE.equals(getDiscoreCase()); }
public boolean supportsDiscional() { return ((getDisciftMaxSize())!= null) && ((getDiscoredMaxSize()) > 0); }
private java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getAddedLuns(java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> lunModels, boolean selectedLuns, boolean includedLuns) { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.LinkedList<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lun : lunModels) { if ((selectedLuns && (lun.getIsSelected())) || ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(luns, new org.ovirt.engine.ui.uicommonweb.Linq.LunPredicate(lun))) == null)) { luns.add(lun); } } return luns; }
private boolean isStorageDomainSupportDiscressionDiscards(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns) { java.lang.Long discardMaxSize = lun.getEntity().getDiscor().getDiscor().getDiscor().getEntity(); if (((luns!= null) && (discards.isEmpty())) && (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel.getEntity().getDiscor().getDiscor().getDiscor().isEmpty())) { return false; } } return true; }
private void validateDiscardsAfterDelete() { if ((getDiscards().getIsAvailable().getIsAvailable()) && (getDiscardsAfterDelete().getEntity())) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = sanStorageModel.getAddedLuns(); if ((luns!= null) && (!(isStorageDomainSupportDiscressionDiscression(luns)))) { getDiscardsAfterDelete().setIsValid(false); getDiscardsAfterDelete().getInvalidityReasons().add(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel.constants.discardsIsNotSupportedByUnsupportedStorage()); return; } } getDiscardsAfterDelete().setIsValid(false); }
public void updateLunWarningForDiscardsAfterDelete() { if (getContainer().getDiscards()) { for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getAddedLuns()) { if (!(lunSupportsDiscression.isNotSupportedByUnsupportedStorage()); return; } } setSelectedLunWarning(org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel.ui.uicommonStorageModelBase.unSanStorageModel.messages.emptyString()); }
private boolean lunSupportsDiscards(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { return ((lun.getDiscordinator().getDiscordinator())!= null) && ((lun.getDiscordinator().size()) > 0); }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { org.gwtbootstrap3.client.ui.Icon icon = new org.gwtbootstrap3.client.ui.Icon(); org.gwt.basestrap3.client.ui.Base icon = new org.gwt.widget.table.cell.client.ui.BaseCell(); org.gwt.basestrap3.client.ui.BaseCell.addEnumStyleName(icon, iconType); if (org.ovirt.engine.ui.common.widget.table.cell.AbstractIconButtonCell.isEnabled()) { icon.getElement().getStyle().setProperty("color", enabledColor); } else { icon.getElement().getStyle().setProperty("cursor", "default"); } sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(icon.toString())); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.gwtplatform.mvp.client.PresenterWidget<?> content) { super.setInSlot(slot, content); if (slot == (tabContentSlot)) { try { com.gwtplatform.mvp.client.Presenter<?,?> presenter = ((com.gwtplatform.mvp.client.Presenter<?,?>) (content)); com.gwtplatform.mvp.client.proxy.TabContentProxy<?> proxy = ((com.gwtplatform.mvp.client.proxy.TabContentProxy<?>) (presenter.getProxy())); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTab(proxy.getTab()); org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.getView().setActiveTab(proxy.getTab()); } catch (java.lang.Exception e) { org.ovirt.engine.ui.common.presenter.DynamicTabContainerPresenter.logger.log(java.util.logging.Level.SEVERE, "Error while updating tab view", e); } } }
@org.junit.Test public void testSetStatusForRequiredNetworksAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = java.util.Arrays.asList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME2)); when(vdsStaticDao.countHostsInClusterThatNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, networks); assertThat(networkClusterDao).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Before public void setUp() { networkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID1); when(networkClusterDao.get(networkCluster.getId())).thenReturn(networkCluster); managementNetworkCluster = createNetworkCluster(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID); when(managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_NAME))).thenReturn(network); when(networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.MANAGEMENT_NETWORK_ID))).thenReturn(network); }
@org.junit.Test public void testSetStatusForRequiredNetworkAbsentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); when(vdsStaticDao.countHostsInClusterThatNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, VDSStatus.Up)).thenReturn(666); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1)); verify(networkClusterDao).updateStatus(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.NON_OPERATIONAL)); }
@org.junit.Test public void testSetStatusForRequiredNetworkPresentOnHost() { networkCluster.setStatus(NetworkStatus.OPERATIONAL); underTest.setStatus(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.CLUSTER_ID, java.util.Collections.singletonList(createNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_ID1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1)); verify(vdsStaticDao).countHostsInClusterThatNetwork(org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1, org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelperTest.NETWORK_NAME1); verify(networkClusterDao, never()).updateStatus(same(networkCluster)); assertThat(networkCluster.getStatus(), is(NetworkStatus.OPERATIONAL)); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster!= null; if (doUpdateNetworkClusterStatus) { if (doUpdateNetworkClusterStatus(networkCluster, network.getName())) { updateStatusOfRequiredNetworkCluster(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
public static java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomainId) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return (sourceImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW)? org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes() : imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public static void redirectToModule(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException { org.ovirt.engine.core.s.utils.SsoUtils.log.debug("No module"); try { org.ovirt.engine.core.utils.SsoUtils.log.debug("Code redirect toModule"); } catch (java.lang.Exception e) { org.ovirt.engine.core.uutils.net.SSOutils.log.error("Error redirect to module: {}", e); } }
private static java.lang.String createTmpSsoClientConfFile(java.lang.String clientSecret, java.lang.String certificateFile, java.lang.String certificateFile, java.lang.String callbackPrefix) throws java.io.FileNotFoundException { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty())) { org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getTmpdirs(); } java.io.File tmpFile = new java.io.File(org.ovirt.engine.core.utils.EngineSSOvdsSsoLocalConfig.getInstance(), java.lang.String.format("99_Sso_client_%s.conf", java.lang.System.currentTimeMillis())); try (java.io.PrintWriter pw = new java.io.PrintWriter(new java.io.FileOutputStream(tmpFile))) { pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", clientSecret)); pw.println(java.lang.String.format("SSO_CLIENT_CERTIFICATE_FILE=%s", certificateFile)); pw.println(java.lang.String.format("SSHClient_CERTIFICATE_PREFIX=%s", callbackPrefix)); pw.println(java.lang.String.format("SSHClient_CERTIFICATE_PREFIX=%s", callbackPrefix)); } return tmpFile.getAbsolutePath(); }
public static java.lang.String createJson(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.utils.SsoSession ssoSession, java.lang.String clientId) throws java.security.NoSuchAlgorithmException { java.lang.String serverName = request.getServerName(); java.lang.String referring = request.getServerName(); java.lang.String issuer = java.lang.String.format("[%s]", request.getScheme(), (org.apache.commons.http.client.Authz.ID)).setIssuedAt(new java.lang.String(java.lang.System.currentTimeMillis())? java.util.Date(java.lang.System.currentTimeMillis()) : server.getServerPort()); org.ovirt.engine.core.utils.JsonRwtpBuilder builder = iowts.JsonBuilder.build().setId(ssoSession.getId(), getExpectedValue()); java.lang.String reqwebadminBuilder builder = iowebadmin.json.JsonBuilder.build().setId(java.lang.System.currentTimeMillis())).setIssuedAt(new java.util.Date(java.lang.System.currentTimeMillis())).setAuditLogged(issuer).setAuditLogged(clientId).setAuditLogged(clientId).signature(clientId).signWith(clientId).signature(clientId).signature(clientId).signature(clientId).signWith(Auth.getUserId(), org.apache.commons.lang.StringUtils.join(Authz.PrincipalRecord.EMAIL)); values.put("sub", ssoSession.getPrincipalRecord().<java.lang.String>get(Authz.PrincipalRecord.EMAIL)); builder.put("submitted_username", java.lang.String.format("%s@%s", ssoSession.getUserId(), ssoSession.getProfile())); builder.put("name", ssoSession.getAuthzName().<java.lang.String>get(Authz.PrincipalRecord.EMAIL)); builder.put("name", ssoSession.getDescription().<java.lang.String>get(Authz.
protected java.lang.String findBestMatchForEmulatedMachine(java.lang.String currentEmulatedMachines) { if (candidateEmulatedMachines.contains(currentEmulatedMachines)) { return currentEmulatedMachines.max(org.ovirt.engine.core.bll.Comparator.compat.compareToDifference(currentEmulatedMachine, s))).orElse(currentEmulatedMachine); } return candidateEmulatedMachines.max(org.ovirt.engine.core.bll.Comparator.compareToDifference(currentEmulatedMachine, s))).orElse(currentEmulatedMachines); }
private void setQCowCompatForSnapshot(org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot) { try { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImageIRS = getVolumeInfo(snapshot.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getImageId()); if (newImageIRSrc == null) { setQCowCompatByQxlunId(image.getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), snapshot.getImageId()); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image '{}' (image: '{}') on domain '{}'", snapshot.getId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId()); } }
@java.lang.Override protected void endSuccessfully() { if (shouldUpdateStorageDisk()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = diskImageDao.getAllSnapshotsForImageGroup(org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getDestImageGroupId()); org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.setSnapshotForShareableDisk(snapshots); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage snapshot : snapshots) { imageStorageDomainMapDao.remove(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMapId(snapshot.getImageId(), snapshot.getStorageIds().get(0))); imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(snapshot.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.image.CopyImageGroupCommand.getParameters().getQuotaId())); setQCowCompatForSnapshot(snapshot); } } super.endSuccessfully(); }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { try { new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResourceTest.DATA_CENTER_ID, "foo"); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network network) { validateParameters(network, "id|name"); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = getNetworks(); org.ovirt.engine.core.common.businessentities.network.Network net = null; if (network.isSetId()) { network = getNetworkById(network.getId(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } else if (network.isSetName()) { net = getNetworkByName(network.getName(), networks); if (net == null) { notFound(org.ovirt.engine.api.model.Network.class); } } return performCreate(VdcActionType.AttachNetworkToCluster, new org.ovirt.engine.core.common.action.AttachNetworkToClusterParameter(getCluster(), net), new org.ovirt.engine.api.restapi.resource.BackendNetworkToClusterParameter(net.getId())); }
@java.lang.Override public org.ovirt.engine.api.resource.DataCenterNetworkResource getNetworkResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworkResource(dataCenterId, id)); }
protected boolean setAndValidateCpuProfile() { getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getClusterId()); getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmCommandBase.getUserId(), org.ovirt.engine.core.bll.export.ImportVmCommandBase.getUserId()); }
protected boolean setAndValidateCpuProfile() { if ((isInstanceType()) || (org.ovirt.engine.core.bll.UpdateVmTemplateCommand.isBlankTemplate())) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getUserId()); }
protected boolean setAndValidateCpuProfile() { getVmTemplate().setClusterId(getClusterId()); getVmTemplate().setCpuProfileId(getParameters().getCpuProfileId()); return validate(cpuProfileHelper.setAndValidateCpuProfile(getVmTemplate(), getUserId()); }
protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.CommonVmPoolCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserId(), org.ovirt.engine.core.bll.CommonVmPoolCommand.getUserId()); }
protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getUserId()); }
public org.ovirt.engine.core.compat.Guid getUserIdIfExternal() { return getUserId(); }
protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(cpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getUserId()); }
@javax.ws.rs.POST @javax.ws.rs.POST @org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.types.V3Host host) { org.ovirt.engine.api.model.Host update(getDelegate(), "update", host); org.ovirt.engine.api.model.HostHelper.addStatistics(host); return host; }
private void registerExternalProvidersTrustStore(org.apache.http.HttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().toCharArray()); } catch (java.io.IOException ex) { inputStream.close(); } org.apache.commons.http.ssl.SSLSocketFactory socketFactory = new org.ovirt.engine.core.utils.http.ssl.SSLSocketFactory(trustStore); org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProvider.ScheduleFactory socketFactory = new org.ovirt.engine.core.common.config.Config.SchemaFactory(trustStore); org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy.log.warn("Cannot register external providers trust store: ", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProvider.log.warn("Cannot register external provider trust store: ", ex); } }
private void registerExternalProvidersTrustStore(org.apache.http.HttpClient httpClient) { try { java.security.KeyStore trustStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType()); try { trustStore.load(inputStream, org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().toCharArray()); } catch (java.lang.Exception ex) { throw new org.apache.commons.http.ssl.SSLSocketFactory(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExternalProvidersTrustStore().getAbsolutePath())); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.gluster.GlusterStorageSyncCommand.getActionType()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getActionType(); if (returnValue.getSucceeded()) { org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.persistCommand(VdcActionType.GlusterStorageGeoRepSyncInternal, parameters, org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TRECESS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TEM_SNAPSHOTS : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TEMPLATE : removeDRSnapshots(); break; case REMOvfRepSucceeded : removeDRSnapshots(); break; case ENDED : case ENDED : case ENDED_
public static boolean isValidCredentials(final javax.servlet.http.HttpServletRequest request, final org.ovirt.engine.core.utils.Credentials credentials) throws org.ovirt.engine.core.utils.AuthenticationException { return org.ovirt.engine.core.utils.EngineSSHUtils.isValid(request, credentials, false); }
public static boolean isValidCredentials(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.utils.Credentials credentials, boolean isInteractiveAuth) throws org.ovirt.engine.core.utils.AuthenticationException { org.ovirt.engine.core.utils.SsoContext ssoContext = org.ovirt.engine.core.utils.EngineSsoUtils.getSsoContext(request); if (org.apache.commons.lang.StringUtils.isNotEmpty(isInteractiveAuth? org.ovirt.engine.core.utils.EngineSSHOST_ERROR_ERROR_NO_USER_INTERACTIVE_AUTHENTIALS) { throw new org.ovirt.engine.core.utils.Sso.AuthenticationException(ssoContext.getLocalizationUtils().getLocalize((isInteractiveAuth? S_ERROR_NO_USER_INTERACTIVE_AUTHENTIALS) : org.ovirt.engine.core.utils.transaction.AuthenticationException.getLocalizationUtils().localize((isInteractiveAuth? ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (!(credentials.isProfileValid())) { throw new org.ovirt.engine.core.utils.transaction.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.ERROR_ERROR_NO_VALID_PREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } if (!(credentials.isEmpty())) { throw new org.ovirt.engine.core.utils.EngineSSLException(ssoContext.getLocalizationUtils().getLocalize(SsoConstants.NO_PROFILE_IN_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } return true; }
private java.lang.String authenticateUser(final javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException { if ((userCredentials == null) || (!(org.ovirt.engine.core.utils.SsoUtils.isValidCredentials(request, userCredentials, true)))) { throw new org.ovirt.engine.core.sso.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlet.InteractiveAuthServlet.log.debug("failed user using credentials"); response response.addCookie(new javax.servlet.http.Cookie("profile", userCredentials.getProfile())); org.ovirt.engine.core.sso.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.SsoConstants.INTERACTIVE_REDIRECTIRECTIRECTIRECTIRECTIRECT_URI); } catch (java.lang.Exception ex) { throw ex; } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.InteractiveAuthServlet.log.error("Exception: {}", ex.getMessage()); org.ovirt.engine.core.sso.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException(ex.getMessage(), ex); } }
@java.lang.Override public org.ovirt.engine.core.utils.ssh.SimpleResult doAuth(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.lang.Exception { org.ovirt.engine.core.sso.NonInteractiveAuth.log.debug("Initializing Auth"); org.ovirt.engine.core.utils.Credentials credentials = org.ovirt.engine.core.utils.SsoMap.getUserCredentialsFromHeader(request); org.ovirt.engine.core.sso.utils.Credentials credentials = new org.ovirt.engine.core.utils.SsoMap(); if ((credentials == null) || (!(org.ovirt.engine.core.utils.sso.SsoUtils.isValidCredentials(request, credentials)))) { retVal.setStatus(Authn.AuthResult.CREDENTIALS_INVALID); } else { retVal.setCredentials(credentials); org.ovirt.engine.core.utils.AuthenticationUtils.handleCredentials(org.ovirt.engine.core.sso.utils.SsoUtils.getSsoContext(request), request, credentials); retVal.setToken(((java.lang.String) (request.getAttribute(SsoConstants.HTTP_REQ_ATTACHESS_TOKEN)))); if ((retVal.getToken())!= null) { org.ovirt.engine.core.utils.NonOperationalUtils.log.debug("Success authentication succeeded"); retVal.setStatus(Authn.AuthResult.SUCCESS); } else { retVal.setStatus(Authn.Authn.AuthResult.SUCCESS); } } return retVal; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.sso.InteractiveBasicAuthServlet.log.debug("Initial basic auth credentials from header"); org.ovirt.engine.core.utils.Credentials credentials = org.ovirt.engine.core.utils.SsoPathSsoUtils.getUserCredentialsFromHeader(request); boolean credentialsValid = false; try { credentialsValid = (credentials!= null) && (org.ovirt.engine.core.utils.SsoUtils.isValidCredentials(request, credentials)); } catch (org.ovirt.engine.core.sso.utils.AuthenticationException ex) { org.ovirt.engine.core.sso.servlet.InteractiveBasicAuthServlet.log.error("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); } if (credentialsValid) { org.ovirt.engine.core.sso.servlet.InteractiveBasicAuthServlet.log.debug("Exception", ex); } if (credentialsValid) { org.ovirt.engine.core.utils.SsoUtils.getSsoSession(request).setTempCredentials(credentials); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.utils.sso.SsoConstants.INTERACTIVE_LOGIN_AUTH_URI))); } else { org.ovirt.engine.core.sso.InteractiveBasicAuthServlet.log.debug("Exception", ex); } } org.ovirt.engine.core.utils.servlet.InteractiveBasicAuthServlet.log.debug("Exception", exsoConstants.INTERACTIVE_LOGIN_U_AUTH_URI); response.sendRedirect(((request.getContextPath()) + (org.ovirt.engine.core.utils.SsoMap
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndLeamed) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndLeast(storagePoolId, newImageGroupId, newImageGroupId, newImageGroupId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newImageID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Failed to get qeguid from storage", e); } finally { if (shouldPrepareAndLeast(storagePoolId, storagePoolId, vdsId)) { teARD_CREATED.setReturnValue(java.util.Arrays.asList(vdsId, storagePoolId, newImageId); } } return qemuImageInfo; }
public java.lang.Long determineImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.Image sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomain, org.ovirt.engine.core.compat.Guid srcDomainId) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromStorage = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getVolumeInfoFromVdsm(storagePoolId, srcDomain, imageGroupID, sourceImage.getId()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(imageInfoFromStorage.getActualSizeInBytes()); } return null; }
public java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid dstDomain) { if (isInitialSizeSupportedForFormat(destFormat, dstDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, storageDomain); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
public static java.lang.Long determineTotalImageInitialSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage sourceImage, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat destFormat, org.ovirt.engine.core.compat.Guid srcFormat, org.ovirt.engine.core.compat.Guid srcDomain) { if (org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.isInitialSizeSupportedForFormat(destFormat, srcDomain)) { double totalSizeForClonedDisk = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getTotalActualSizeOfDisk(sourceImage, org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(srcDomain).getStorageStaticData()); return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.computeCowImageNeededSize(sourceImage.getVolumeFormat(), java.lang.Double.valueOf(totalSizeForClonedDisk).longValue()); } return null; }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createEvent() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVds(host); return event; }
private void verifyAuditLoweredBaseFailedPropertiesFailed(org.ovirt.engine.core.bll.network.NetworkConfigurator underTest, org.ovirt.engine.core.common.AuditLogType auditLogType) { try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogableBaseArgumentCaptor.capture(), eq(auditLogType), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBaseArgumentCaptor.getValue(); assertThat(capturedEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.HOST_NAME)); return; } fail("The test should compensate to NetworkConfiguratorException"); }
@org.junit.Test public void testCreateManagementNetworkIfRequiredFailsOnDifferentVlanId() { host.setActiveNic(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_VLAN_ID); nic.setVlanId(org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.MANAGEMENT_NETWORK_VLAN_ID); try { underTest.createManagementNetworkIfRequired(); } catch (org.ovirt.engine.core.bll.network.NetworkConfigurator.NetworkConfiguratorException e) { verify(auditLogableBaseArgumentCaptor.capture(), sameEvent.getVdsName(), is(org.ovirt.engine.core.bll.network.network.NetworkConfiguratorTest.HOST_ID_MISMATCH_FOR_MANAGEMENT_NETWORK_CONFIGURATION), anyString()); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase capturedEvent = auditLogableBase.getValue(); assertThat(capturedCustomValues, hasEntry("vlanid", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_ID))); assertThat(capturedCustomValues, hasEntry("mgmtuicompat-NETWORK_NAME", java.lang.String.valueOf(org.ovirt.engine.core.bll.network.network.NetworkConfiguratorTest.MANAGMENT_NETWORK_VLAN_ID))); assertThat(capturedCustomValues, hasEntry("mgmtuicately", org.ovirt.engine.core.bll.network.network.NetworkConfiguratorTest.NIC_NAME)); } fail("The test should proceed to NetworkConfigurator", org.ovirt.engine.core.bll.network.NetworkConfiguratorTest.NIC_NAME)); }
public static <T> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList(violations.size()); javax.validation.metadata.ConstraintDescriptation<T> constraintViolation = constraintViolation.getConstraintDescriptor(); if (constraintViolation!= null) { java.util.Map<java.lang.String, java.lang.Object> violationAttributes = constraintDescriptor.getAttributes(); for (java.util.Map.Entry<java.lang.String, java.lang.Object> violationAttributes : violationAttributes.entrySet()) { java.lang.String message = java.lang.String.format("%s %s", violationAttributes.getKey(), violationAttribute.getValue()); messages.add(EngineMessage.ACTION_TYPE_FAILED_ATTRIBUTE_PATH.name()); messages.add(org.ovirt.engine.core.common.utils.ValidationUtils.createSetVariableString(path, constraintViolation.getPropertyPath())); } } } return messages; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsFingerprintVerified(false); if (((getGlusterHostAddress().getEntity()) == null) || ((getGlusterHostAddress().getEntity().trim().length()) == 0)) { getGlusterHostFingerprint().setEntity(""); return; } fetchFingerprint(getGlusterHostAddress().getEntity()); }
@java.lang.Override public void sendMessage(byte[] message) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { try { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withResponseQueue(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withResponse(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.fromString(msg))).build()); } }
@java.lang.Override public void sendMessage(byte[] message) { org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message msg = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().send().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_REPLY_TO, getResponseQueue()).withContent(message); send(addCorrelationId(msg))); }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runInternalQuery(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVdsCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug())); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } final org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic = runInternalQuery(VdcQueryType.GetVmNextRunConfiguration, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId())).<org.ovirt.engine.core.common.businessentities.VM>getReturnValue().getStaticData(); final int final int finalMemorySize = (nextRunConfigurationStatic)? (((nextRunConfigurationStatic) (nextRunConfigurationStatic.getMemSizeMb()) - (org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb())) : null; updateVm(nextRunConfigurationStatic, finalMemorySize); if (finalMemorySize > 0) { updateVm(nextRunConfigurationStatic, finalMemorySize); } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if ((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NEEDS_TO_BE_UP, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStatus())); } if ((getDeviceToHotUnplug()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_MEMORY_DEVICE_NOT_FOUND, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("memorySize", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("vmId", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId()), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getMemorySizeMb())); } return true; }
private void updateVm(org.ovirt.engine.core.common.businessentities.VmStatic nextRunConfigurationStatic, int finalMemorySize) { nextRunConfigurationStatic.setMemSizeMb(finalMemorySize); final org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(nextRunConfigurationStatic); updateVmParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.class); runInternalAction(VdcActionType.UpdateVm, updateVmParams); }
public void setReturnValueFailure(org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueFailure) { org.ovirt.engine.core.bll.HotUnplugMemoryCommand.setSucceeded(false); final org.ovirt.engine.core.common.errors.EngineFault engineFault = new org.ovirt.engine.core.common.errors.EngineFault(); engineFault.setError(returnValueFailure.getVdsError().getCode()); engineFault.setMessage(returnValueFailure.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().setFault(engineFault); }
java.lang.String VdcObjectType.VDS_NEUTED_UP();
java.lang.String ACTION_TYPE_FAILED_DISK_MEMORY_DEVICE_DISK();
public static java.lang.Integer getSizeOfMemoryDeviceMb(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevice) { if ((memoryDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(java.lang.String.format("Memory device expected but device %s", memoryDevice.getType())); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionsList = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); if ((vm!= null) && (vm.getParameters().getActionGroup())) { addCustomValue(VdcObjectType.Vm, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getActionType().getActionGroup())); } else if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getActionGroup())!= null) && ((vmTemplateId)!= null)) { addCustomValue(VdcActionType.ProcessDown); } return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().getActionGroupId(); }
protected org.ovirt.engine.core.common.businessentities.VmDevice getDeviceToHotplug() { if ((deviceToHotplug) == null) { return cpuToUnplug; } return deviceToHotplug; }
@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getVmId()); }
private org.ovirt.engine.core.common.businessentities.VmDevice computeDeviceToHotUnplug() { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = vmDeviceDao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId(), VmDeviceGeneralType.MEMORY); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> reversedMemoryDevices = new java.util.ArrayList(memoryDevices); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice> reversedMemoryDevices = new java.util.ArrayList(revers); return memoryDevices.stream().filter((device) -> java.util.Objects.equals(getParameters().getMemorySizeMb(), org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device))).findFirst().orElse(null); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> result = new java.util.HashMap(super.getSharedLocks()); result.put(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED).with("vmName", org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()))); return result; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getReturnValue().getSucceeded()? org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUGGED : org.ovirt.engine.core.common.AuditLogType.MEMORY_HOT_UNPLUGGED; }
private void setQcowCompat(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { newDiskImage.setQCowCompat(QoImage.getImage()); org.ovirt.engine.core.common.businessentities.StoragePool sp = storagePoolDao.get(storagePoolId); if ((sp!= null) && (org.ovirt.engine.core.common.FeatureSupported.qosowCompatSupported(sp.getCompatibilityVersion()))) { org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = org.ovirt.engine.core.bll.storage.disk.image.image.bll.image.image.image.imageInfoFromVdsmImageInfoFromVdsm(storagePoolId, storageDomainId, diskImage, null); if (qemuImageInfo!= null) { newDiskImage.setQoImage(qemuImageInfo.getQoImage()); } } } }
private void setQCowCompat(org.ovirt.engine.core.common.businessentities.storage.DiskImage newDiskImage) { if (newDiskImage.getVolumeFormat().equals(VolumeFormat.COW)) { try { setQCowCompatByQemuImageInfo(newDiskImage.getStoragePoolId(), newDiskImage.getId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId(), newDiskImage.getImageId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Unable to update the image '{}' (image group: '{}'", newDiskImage.getId(), org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getStorageDomainId()); } } }
protected org.ovirt.engine.core.common.businessentities.VM setUpVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VmStatic.class); expect(vmStatic.getId()).andReturn(id).anyTimes(); expect(vm.getStaticData()).andReturn(vmStatic).anyTimes(); return vm; }
private org.ovirt.engine.ui.frontend.server.Dashboard populateUtilizationCache() throws org.ovirt.engine.ui.frontend.server.DashboardLayoutException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); dashboardCache.put(org.ovirt.engine.ui.frontend.server.gwt.DashboardDataServlet.UTILIZATION_KEY, dashboard, org.ovirt.engine.ui.frontend.server.gwt.daily.Dashel.UTILIZATION_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.Dashboard.log.debug("Finished optimization cache updated in {}", db.getTimeOut()); return dashboard; }
private org.ovirt.engine.ui.frontend.server.daily.Inventory populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.gwt.daily.INventoryCache populateInventoryCache() throws org.ovirt.engine.ui.frontend.server.daily.InventoryCacheException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.daily.InventoryImpl long endTime = java.lang.System.currentTimeMillis(); long endTime = java.lang.System.currentTimeMillis(); accuminationCache.put(org.ovirt.engine.ui.frontend.server.dal.dbbroker.auditloghand.DashboardDataServlet.INVENTORY_CACHE_UPDATE_INTERVAL, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.ui.frontend.server.dal.dbbroker.auditloghand.AuditLogableBase.log.debug("Finished discovered ovirt cache updated in {}", endTimeInDate); org.ovirt.engine.ui.frontend.server.dal.dbbroker.auditloghand.AuditLogableBase.log.debug("Finished excavacheted coco-cACHEHE_UPDATE_INTERVALUES", java.util.concurrent.TimeUnit.SECONDS); return invirt.engine.ui.frontend.server.dal.dbbroker.datacenter.DashboardDataServlet.log.debug("Finished during {}", end); }
private org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase createAuditLog(final org.ovirt.engine.core.common.businessentities.network.VmNic iface) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("MAC_ID", iface.getVmId()); logable.addCustomValue("MACAddr", iface.getMacAddress()); logable.addCustomValue("IfaceName", iface.getName()); return logable; }
@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel(sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model1.getMessage()); } org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(model.getExport().getIsAvailable()); model.getView().toggleSubnetVisibility(model.getExport().getIsAvailable()); }
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.ui.Command) (widget.getText(), ((com.google.gwt.user.client.ui.Command<T>) (item))) { menuPanelPopup.asPopupPanel().hide(); buttonDef.addInitializeHandler(((org.ovirt.engine.ui.user.client.Command) (widget))); menuItem.setEnabled(buttonDef.isEnabled(null))); buttonDef.addInitializeHandler(((java.util.List<T>) (((org.ovirt.engine.ui.webadmin.widget.table.column.Command) (item))).getEnabled())).setEnabled(buttonDef.isEnabled(null))); menuPanelPopup.getMenuBar().addItem(menuItem); }
public boolean invokeAsString(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, jsFunction.RESULT_TYPE_STRING, ((org.ovirt.engine.ui.webadmin.plugin.JsFunction.ResultHandler<java.lang.String>) (result))); }
public boolean invokeAsBoolean(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, jsFunction.RESULT_TYPE_BOOLEANLEAN, ((org.ovirt.engine.ui.webadmin.plugin.plugin.ui.JsFunction.ResultHandler<java.lang.Boolean>) (result)); }
public boolean invokeAsNumber(com.google.gwt.core.client.JsArray<?> args, org.ovirt.engine.ui.webadmin.plugin.JsFunction.ErrorHandler errorHandler) { clearResultInformation(); return function.invoke(args, jsFunction.RESULT_TYPE_NUMBER, ((org.ovirt.engine.ui.webadmin.plugin.JsFunction.ResultHandler<java.lang.Double>) (result))); }
@java.lang.Override protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(removeFunction); } else { menuBar.addItem(removeFunction(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.policyUnit); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.Model itemPopup.hide(); } }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "The selected a NetworkCommand List with more than one Unary Operation menu operation."); } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = new java.util.Comparator(entry.getKey(), commands.get(0)); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.add(new com.google.gwt.user.client.ui.Labeled(label.getName(), commands.get(0))); } } else { java.util.Collections.sort(new com.google.gwt.user.client.ui.Labeled(label)); } }
protected void fillMenuBar(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { if (used) { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.removeFilter(), ((com.google.gwt.user.client.ui.Command) (model.getPolicyUnit()))); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } else { menuBar.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.addFilter(), ((com.google.gwt.user.client.ui.Widget) (model.getPolicyUnit()))); } }
protected void addSubMenu(org.ovirt.engine.ui.common.widget.MenuBar menuBar) { org.ovirt.engine.ui.common.widget.MenuBar subMenu = new org.ovirt.engine.ui.common.widget.MenuBar(true); if ((position)!= 0) { subMenu.addItem(org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.constants.noPositionFilter(), ((com.google.gwt.user.client.ui.Command) (model.getPolicyUnit, used, 0)); org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.PolicyUnitPanel.menuPopup.hide(); } }
private com.google.gwt.user.client.ui.PushButton createButton(com.google.gwt.user.client.ImageResource imageResource) { com.google.gwt.user.client.ui.PushButton result = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image(imageResource), ((com.google.gwt.user.client.ui.Image) (widget.getImage(imageResource))).setVisibleWestPanel(false); result.setVisible(false); result.addStyleName(style.sliderButton()); result.addStyleName("tslp_sliderButton_pfly_fix"); return result; }
@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(event1); nativeEvent.fireNativePreviewHandler(event1); if ((((nativeEvent.getKeyCode()) == keyCodes.KEY_ENTER) || ((event1.getTypeInt()) == (event.getTypeInt()) == (event.getTypeInt())) || (!(event1.isCancel()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); if ((event1.getTypeInt()) == event.getTypeInt()) == event.getTypeInt()) == event.getTypeInt())) { enterPressed(); } } }
private org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionsMenuOptionsMenu getRefreshRate() { org.ovirt.engine.ui.common.widget.refresh.BaseRefreshPanel.RefreshRateOptionsMenuOptionsMenuOptionsMenu = new org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRateOptionsMenuOptionsMenuOptionsMenu(true); refreshOptionsMenu.setStylePrimaryName(style.refreshRateMenu()); com.google.gwt.user.client.ui.MenuItem title = new com.google.gwt.user.client.ui.MenuItem(org.ovirt.engine.ui.common.widget.refresh.BaseRefreshRate.constants.refreshRate(), ((com.google.gwt.user.client.Command) (client.getRefreshRate(), ((com.google.gwt.user.client.Command) (lastRate))); }
@com.google.gwt.uibinder.client.UiHandler("uploadButton") void onUploadIconButton(com.google.gwt.event.dom.client.ClickEvent event) { hiddenPanel.clear(); final com.google.gwt.user.client.ui.FileUpload inputFileWidget = new com.google.gwt.user.client.ui.FileInput(); inputFileWidget.getElement().setAttribute("accept", "image/javax.user.client.ui.FileInputStream.setAttribute("option/javax.user.client.ui.Override public void onUploadedIconFile(event.getElement())); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.getElement().setTabIndex((-1)); hiddenPanel.add(inputFileWidget); inputFileWidget.click(); }
private void initMenuPopup(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> actions) { menuPopup = new org.ovirt.engine.ui.common.widget.action.MenuPanelPopup(true); for (final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef : actions) { com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), ((com.google.gwt.user.client.ui.Widget) (item.getText(), ((com.google.gwt.user.client.ui.Widget) (item.getSelectedItems()))); } }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.fire(this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggregatedVnumaEvent.fire(this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeModel.getIndex(), nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaEvent.fire(this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaEvent.fire(this, nodeModel.getVm().getId(), ((com.google.gwt.user.client.ui.Command) (new com.google.gwt.user.client.ui.Label() ((org.ovirt.engine.ui.common.widget.uicommon.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode())), ((com.google.gwt.user.client.ui.uicommon.model.UpdateVmNumaPanel.constants.unPinned())), ((com.google.gwt.user.client.ui.uicommonweb.model.Numa.constants.unPinned())), ((org.ovirt.engine.ui.common.widget.uicommon.popup.numa.DraggableVirtualNumaNode) (node.getVm().
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (memoryHotUnplugCommand)) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); onMemoryHotUnplugConfirmUnplug(); } else if (command == (getCancelMemoryCommand())) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); } }
private void onMemoryHotUnplugConfirmation() { final org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDevice == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } if ((vmDevice == null) || ((vmDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } else { log.error("Cannot plugMemoryCommand " + vmDeviceGeneralType.MEMORY); } }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.table.CellClickHandler<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.ui.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDevice, org.ovirt.engine.core.common.businessentities.VmDevice> vmDevice) { getModelProvider().getModel().onHotplugCpu(); } }); }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button=\"{0}</button>") com.google.gwt.safehtml.shared.SafeHtml button(java.lang.String id, java.lang.String hotUnplugLabel);
java.lang.String remove();
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation(org.ovirt.engine.core.bll.dwh.DwhHeartBeat.DWH_BEAT_METHOD) public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Heartbeat Heart Beat - Start"); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.RequiresNew,()).unless(heartbeatExistingHeart Beat); dwhHistoryTimekeepingDao.save(heartbeatTime); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Exception", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Exception", ex); } }
@java.lang.Override protected void teardDown() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() { int sleepTimeInSec = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ServerRebootTimeout); org.ovirt.engine.core.bll.pm.log.info("Finished seconds, seconds, for server to finish boot process."); org.ovirt.engine.core.utils.ThreadUtils.sleep(TimeUnit.SECONDS.toMillis(sleepTimeInSec)); if (getParameters().isChangeHostToMaintenanceOnStart()) { setStatus(VDSStatus.Maintenance); } else { setStatus(VDSStatus.NonResponsive); } } }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { try { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user!= null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } } catch (javax.ws.rs.WebApplicationException ex) { } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice device) { return device.getAddress(); }
private void addPluggedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFelevantColumn> pluggedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFelevantColumn>() { @java.lang.Override public boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesfealefe) { return object.isPlugged(); } }; pluggedColumn.makeSortable(); getTable().addColumn(pluggedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.devicePluggedAlias(), "70px"); }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); getView().getHotUnplugColumn().addHandler(new org.ovirt.engine.ui.common.widget.cell.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void onClick(com.google.gwt.dom.client.NativeEvent event, org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeoUnplug) { getModelProvider().getModel().onHotUnplug(vmDevice); } }); }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.uicommon.vm.Context context, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>> valueUpdater) { super.onBrowserEvent(context, parent, device, event, valueUpdater); if (!(BrowserEvents.CLICK.equals(event.getType()))) { return; } if (((parent.getFirstChildElement()) == null) || (!(parent.getFirstChildElement().isOrHasChild(com.google.gwt.dom.client.Element.as(event.getEventTarget()))))) { return; } for (org.ovirt.engine.ui.common.widget.cell.CellClickHandler<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>> clickHandler : clickHandler.onClick(event, device); } }
@org.ovirt.engine.ui.common.widget.uicommon.vm.Template("<button=\"{0}</button>") com.google.gwt.safehtml.shared.SafeHtml disabledButton(java.lang.String id, java.lang.String hotUnplugLabel);
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.bll.storage.AddVmTemplateToStringBuilder.getStringBuilder().build(); }
public boolean isBeingUnplugged() { return (isBeingUnplugged()) && (org.ovirt.engine.core.utils.ssh.InitializationUtils.isBeingPlugged(getParameters().getVdsGroupId()))); }
@java.lang.SuppressWarnings("unchecked") protected java.util.Collection<T> convertQuotaDao(org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue) { java.util.Set<T> queryReturnValue = ((java.util.Collection<T>) (queryReturnValue.getReturnValue())); if (!(org.ovirt.engine.core.compat.Guid.Empty.equals(Guid.Empty))) { return null; } else { return null; } }
private void onMemoryHotUnplugConfirmation() { final org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.setConfirmWindow(null); final org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getSelectedItem(); if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } devicesBeingHotUnplugged.add(vmDeviceFeEntity, new org.ovirt.engine.ui.uicommonweb.models.utils.ExistingSet.RemovalSet.RemovalAction<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity>() { @java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity item) { updateItems(); } }); updateItems(); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder getToStringBuilder() { return super.getToStringBuilder().append("}"); }
public void setBeingplugged(boolean isUnplugged) { this.usingCached = beingUnplugged; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeolean object) { return object.isManaged(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue) { setItems(converter, null); }
private void addDeviceTypeColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> deviceTypeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice>>>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeolean device) { return device.getDevice(); } }; deviceTypeColumn.makeSortable(); getTable().addColumn(deviceTypeColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceType(), "70px"); }
private void updateItems() { java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> items = org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getItems(); for (org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeolean vmDevice : items) { vmDeviceFeodel.setBeingUnplugged(devicesBeingHotPlugged.contains(vmDevice))); } setItems(items); }
private int toSortingIndex(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice<java.lang.Boolean> vmDevice == null) { return (vmDevice == null) || (!(org.ovirt.engine.ui.common.widget.uicommon.vm.HotUnplugCell.isHotUnpluggable(vmDevice)))? 0 : 1; }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice device) { return object.getReadOnly(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getSpecParams().toString(); }
public void onHotUnplug(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity vmDevice) { if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity()) == null) { return; } if ((vmDeviceFeEntity == null) || ((vmDeviceFeEntity.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY))) { return; } final java.lang.Integer memorySizeMb = ((java.lang.Integer) (vmDeviceFeEntity.getSpecParams().get("size"))); if (memorySizeMb == null) { return; } setSelectedItem(vmDeviceFeEntity); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmationModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().messages().memoryHotUnplug()); confirmationModel.setHelpTag(HelpTag.template_not_found_on_export_domain); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.messages.messages.memoryHotUnplugConfirmation(memorySizeMb, org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel.getEntity().getName())); confirmationModel.getCommands().add(cancelMemoryHotUnplugCommand); setConfirmWindow(confirmationModel); }
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralModel object) { return object.isPlugged(); }
@java.lang.Override public void itemRemoved(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceGeneralModel item) { updateItems(); }
private void addAddressColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> deviceAddressColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeilingEntity>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeolean device) { return device.getAddress(); } }; deviceAddressColumn.makeSortable(); getTable().addColumn(deviceAddressColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceAddress(), "185px"); }
private void addManagedColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> managedColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFelevantColumn>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeolean object) { return object.isManaged(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel object) { return false; } }; managedColumn.makeSortable(); getTable().addColumn(managedColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceManagedAlias(), "70px"); }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeEntity> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice>>>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeolean device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
private void addReadOnlyColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeitiveColumn> readColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractCheckboxColumn<org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice>>>() { @java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDeviceFeitive) { return object.getReadOnly(); } @java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevicesListModel object) { return false; } }; readonlyColumn.makeSortable(); getTable().addColumn(readonlyColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceReadOnlyAlias(), "70px"); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.VmDevice device) { return device.getDevice(); }
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.setWipeAfterDelete(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
private java.lang.String composeObjectId() { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable.AuditLogKeyComposer(event, logType).composeObjectId(); }
private void compose(java.lang.String key, java.lang.String key, java.lang.String value) { if ((builder.length()) > 0) { builder.append(KEY_PARTS_DELIMITER); } builder.append(key).append(NAME_SEPARATOR).append(value); }
private boolean hasHostExternalStatus() { return ((getEvent().getExternalStatus())!= null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())!= null); }
@java.lang.Override protected boolean validate() { if (((getEvent()) == null) || (AuditLog.OVIRT_ORIGIN); return failValidation(EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_ORIGIN); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = getPermissionList(getEvent()); if (hasHostExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getVdsId(), org.ovirt.engine.core.common.VdcObjectType.VDS, org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } if (hasStorageDomainExternalStatus()) { permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(getEvent().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_STORAGE_DOMAIN_CONFIGURATION)); } return permissionList; }
private boolean hasStorageDomainExternalStatus() { return ((getEvent().getExternalStatus())!= null) && ((org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus())!= null); }
protected void addStorageDomainInDb() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Object getCompensationContext().snapshotNewEntity(storageStaticData); getCompensationContext().snapshotNewEntity(storageStaticData); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic newStorageDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(null, getStorageDomain().getId(), null); getReturnValue().setActionReturnValue(getStorageDomain().getId()); storageDomainDynamicDao.save(newStorageDynamic); getCompensationContext().stateChanged(); return null; } if (org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.createDefaultDiskProfile(); } }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastDbBackup = getLastBackupByScope(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.BackupScope.DB); if ((lastDbBackup == null) || (lastFilesBackup == null)) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_FULL_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastFilesBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = lastDbBackup.getDoneAt(); java.util.Date lastFilesBackupDate = ((lastDbBackupDate.compareTo(lastFilesBackupDate)) < 0)? lastFilesBackupDate : lastFilesBackupDate; long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastFullBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastFullBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
private static java.lang.String getMessageOrNull(org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.String key = logType.name(); try { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resourceBundle.getString(key); } catch (java.lang.Exception e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error("Error '{}' is not translated in '{}'", key, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getResourceBundleName()); return null; } }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AuditLog event) { getCallsHandler().executeModification("InsertAuditLog", (event.isExternal()? org.ovirt.engine.core.dao.AuditLogDaoImpl.PER_NAME : getExternalEventSqlParameterSource().addValue("db_id", org.ovirt.engine.core.dao.AuditLogDaoImpl.PERMapper.instance) : getSqlParameterSqlParameterSource().addValue("db_id", org.apache.commons.lang.StringUtils.join(event.getString())); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getEvent())); event.setExternal(true); java.lang.String message = truncateMessage(event, AuditLogType.EXTERNAL_EVENT_NORMAL, message); switch (getEvent().getSeverity()) { case NORMAL : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_WARNING, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case ERROR : auditLogDirector.log(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case FAIL : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.alert(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case FAILED : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.alert(event, AuditLogType.EXTERNAL_EVENT_ERROR, message); break; case AlERT : org.ovirt.engine.core.bll.AddExternalEventCommand.setSucceeded(true); break; case FAILED : vdsDynamicDao.updateExternalStatus(getEvent().getVdsId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ovirt.engine.core.bll.AddExternalEventCommand.getParameters().getExternalStatus()); } if (hasHostExternalStatus()) { vdsDynamicDao.updateExternalStatus(getEvent().getStorageDomainId(), org.ov
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Exception", org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Could not updated for external broker."); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Could not found result when both to broker. Disabling external network. Disabling external networks"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failed = policyUnitDao.getAll().stream().stream().stream().stream().stream().stream().stream().stream().stream(); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
private void hotSetMemory(int currentMemoryMb, int newAmountOfMemoryMb) { final int minorHotPlugDeviceSizeMb = hotSetAmountOfMemoryCommand.HOTPLUG_MEMORY_SIZE_FOUND); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> memoryDevices = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDeviceUtils().getMemoryDevices(getVmId()); final boolean localMemoryDevicePresent = memoryDevices.stream().anyMatch(((java.util.List<java.lang.String>) (newAmountOfMemoryMb)) == null)? (newAmountOfMemoryMb) : (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device)) == null); final int secondPartSizeMb = (newAmountOfMemoryMb == 0; if (secondPartOfMemoryDevicePresent || (secondPartSizeMb == 0)) { hotPlugMemoryDevice(currentMemoryMb, newAmountOfMemoryMb); hotPlugMemoryDevice(currentMemoryMb, (currentMemoryMb + minAllPlugDeviceSizeMb); } hotPlugMemoryDevice(currentMemoryMb, (currentMemoryMb + minAllPlugDeviceSizeMb); }
private void hotPlugMemoryDevice(int currentMemoryMb, int newAmountOfMemoryMb) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, org.ovirt.engine.core.common.action.PlugAction.PLUG, 0, (newAmountOfMemoryMb))); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isHostedEngine())) { newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded()? newAmountOfMemoryResult : newAmountOfMemoryResult); } hotSetMemlog(params, setAmountOfMemoryResult); }
private void updateDefaultNetworkFilterIfRequired() { if (org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId()) { org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile().isUseDefaultNetworkFilterId(); if (networkFilter!= null) { org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.setNetworkFilterId(null); } else { final org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = org.ovirt.engine.core.bll.network.cluster.NetworkHelper.resolveVnicProfileDefaultNetworkFilter(networkFilterDao); setNetworkFilterId(networkFilterId); } } }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFilterId(); return (((((((((((validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validateDefaultNetworkFilterId())); }
public boolean isUseDefaultNetworkFilterId() { return useDefaultNetworkFiterId; }
public java.lang.String getCustomCompatibilityVersion() { return compatibilityVersion; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcActionType actionToExecute = org.ovirt.engine.core.bll.RunAsyncCommand.getParameters().getAction(); org.ovirt.engine.core.common.action.VdcActionParametersBase actionParameters = org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters().getActionParameters(); actionParameters.setEndProcedure(VdcActionType.RunAction); actionParameters.setParentParameters(VdcActionType.RunAction); actionParameters.setParentParameters(org.ovirt.engine.core.bll.RunAsyncActionCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(actionToExecute, actionParameters, org.ovirt.engine.core.bll.RunAsyncActionCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.RunAsyncCommand.setSucceeded(true); }
public boolean isLegal() { if (useTimeout) { java.lang.String keyForCheck = ("".equals(timeoutObjectId))? logType.toString() : timeoutObjectId; java.lang.String value = org.ovirt.engine.core.dal.dbbroker.utils.CacheManager.getTimeoutBaseCache().putIfAbsent(keyForCheck, keyForCheck, endTime, java.util.concurrent.TimeUnit.MILLISECONDS); return value == null; } return true; }
private boolean validateManagementNetworkAttachment() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
private org.ovirt.engine.core.common.action.ColdMergeParameters buildColdMergeParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolume, topVolume); org.ovirt.engine.core.common.action.ColdMergeParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subChain.getParentId()); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.common.businessentities.SubchainInfo that = ((org.ovirt.engine.core.common.businessentities.SubchainInfo) (o)); return ((((java.util.Objects.equals(storageDomainId, that.storageDomainId)) && (java.util.Objects.equals(imageGroupId, that.imageGroupId))) && (java.util.Objects.equals(baseImageGeneration, that.baseImageGeneration))) && (java.util.Objects.equals(baseImage, that.baseImage))) && (java.util.Objects.equals(topImage, that.baseImage))) && (java.util.Objects.equals(topImage, that.baseImage)); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((storageDomainId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((storageDomainId) == null? 0 : storageDomainId.getId().toString()) + baseImageId()); result = (prime * result) + ((imageId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : storageDomainId.hashCode()); result = (prime * result) + ((imageType) == null? 0 : highImageId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : 1 : 1; result = (prime * result) + ((imageId) == null? 0 : 0 : 1; result = (prime * result) + ((imageId) == null? 0 : 1 : 1)); result = (prime * result) + ((imageId) == null? 0 : 1 : 1; result = (prime * result) + ((imageId) == null? 0 : 1)); result = (prime * result) + ((imageId) == null? 0 : id.hashCode()); result = (prime * result) + ((imageId) == null? 0 : 1) + ((imageId) == null? 0 : 1)); result = (prime * result) + ((imageId) == null? 0 : 1 : 1)); result = (prime * result) + ((imageId) == null? 0 : 1) + ((imageId) == null? 0 : 1) + ((imageId) == null? 0 : imageId.hashCode()); result = (prime * result) + ((imageId) == null? 0 : 0 : 1; result) + ((imageId) == null? 0 : id.hashCode()); result = (prime * result) + ((imageId) + ((imageId) == null) + ((imageId) == null) + ((imageId) == null) + ((imageId) == null) + ((imageId) == null) + ((imageId) == null) + ((imageId) == null) + ((image
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksListForStorageAllocations() { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSnapshotsDummiesForStorageAllocations(getSourceImages()); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("storageDomainId", storageDomainId=").append(imageGroupId=").append(imageGroupId=").append(imageGroupId=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append(baseImageGeneration=").append("}'", baseImageGeneration=").append("}'. ", imageGeneration=").append("}'", baseImageGeneration=").append("}'.append("}") + "]")).append("}")); }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturnValueReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo())!= null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object o) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().equals(vdsProperties.Address)) { vmDevice.setAddress(vdsmDevice.Address); vmDevice.setAddress(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.getVdsProperties.Address))); } } } } }
private void updateVmDeviceWithDataReturnedFromHost(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if ((vdsReturnValue.getSucceeded()) && ((org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getAction()) == (org.ovirt.engine.core.common.action.PlugAction.PLUG))) { org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturn vmInfoReturn = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoReturnValueReturn) (vdsReturnValue.getReturnValue())); if ((vmInfoReturn.getVmInfo())!= null) { java.util.Map<java.lang.String, java.lang.Object> vmInfo = ((java.util.Map<java.lang.String, java.lang.Object>) (vmInfoReturn.getVmInfo())); for (java.lang.Object o : ((java.lang.Object o) (vmInfo.get(VdsProperties.Devices)))) { java.util.Map<java.lang.String, java.lang.Object> vdsmDevice = ((java.util.Map<java.lang.String, java.lang.Object>) (o)); if (vmDevice.getId().equals(vdsmDevice.get(VdsProperties.DeviceId))) { vmDevice.setAddress(vdsmDevice.get(VdsProperties.Address).toString()); vmDevice.setAddress(org.apache.commons.lang.StringUtils.defaultString(((java.lang.String) (vdsmDevice.getVdsProperties.Address))); } } } } }
@java.lang.Override protected boolean validateInputManagementNetwork() { if (!(org.ovirt.engine.core.bll.AddClusterCommand.findManagementNetwork())) { return false; } final org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase networkClusterValidator = createNetworkClusterValidator(); return ((validate(networkClusterValidator.networkBelongsToClusterDataCenter(org.ovirt.engine.core.bll.AddClusterCommand.getCluster(), managementNetwork))) && (validate(networkClusterValidator.managementNetworkRequired(managementNetwork)))) && (validate(networkClusterValidator.managementNetworkNotExternal(managementNetwork))); }
protected boolean validateSpaceRequirements() { if (isUnregisteredDiskExistsForCopyTemplate()) { return true; } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); if (validate(storageDomainValidator.isDomainWithinThresholds())) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE)) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(diskImageDao.getAllSnapshotsForLeaf(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())); } return validate(storageDomainValidator.hasSpaceForDiskWithSnapshots(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())); } return false; }
protected java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> getVmsWithVmDeviceInfoForDiskId() { if ((cachedVmsDeviceInfo) == null) { cachedVmsDeviceInfo = vmDao.getVmsWithPlugInfo(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getId()); } return cachedVmsDeviceInfo; }
@java.lang.Override protected void init() { cachedParamsToDisks = org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getParametersList().stream().stream().stream().stream().stream().stream().stream().stream().select(java.util.stream.Function.toMap.toMap(java.util.function.Function.toMap(java.util.stream.Function.toMap.toMap(java.util.function.Function.toMap(java.util.stream.Function.toMap(), (p.getImageId())))); }
private boolean isTemplate() { return!(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType()) == null) || (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType()))); }
protected boolean checkTemplateInDestStorageDomain() { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId())))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageTemplateId()); if (!(templateImage.getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean isImageExist() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())!= null? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
protected boolean checkOperationIsCorrect() { if ((((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType())!= null)) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getVmEntityType().isTemplateType())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_IS_NOT_VM_DISK, java.lang.String.format("$diskAliases %2$s", "diskAliases", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage())!= null? org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage() : org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingMigratedMessage())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<>(); list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(getDestinationQuotaId(), null, QuotaConsumptionParameter.QuotaAction.CONSUME, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), ((double) (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSizeInGigabytes())))); if ((org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move) == (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation())) { if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())!= null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId())))) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getQuotaId(), null, QuotaConsumptionParameter.QuotaAction.RELEASE, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), null, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), null, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(), null); } } return org.ovirt
protected boolean setAndValidateDiskProfiles() { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(diskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getCurrentUser())); }
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) || ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)); if ((moveOrCopy && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$storageName %2$s", "diskAlias", org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskAlias())); } return true; }
@java.lang.Override protected void executeCommand() { if (isUnregisteredDiskExistsForCopyTemplate()) { addDiskMapping(); return; } org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = prepareChildParameters(); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = runInternalActionWithTasksContext(getImagesActionType(), p); if (!(vdcRetValue.getSucceeded())) { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(false); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getReturnValue().setFault(vdcRetValue.getFault()); } else { org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.setSucceeded(true); if (((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy)) && (!(isTemplate()))) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.addDiskImageWithNoVmDevice(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()); } } }
protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateForImage() { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage()) == null) { return null; } java.util.Collection<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = vmTemplateDao.getAllForImage(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getImageId()); return!(templates.isEmpty()? templates.iterator().next() : null; }
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_ALREADY_EXISTS); } return true; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { if ((cachedPermsList) == null) { cachedPermsList = new java.util.ArrayList(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); org.ovirt.engine.core.compat.Guid diskId = (image == null)? org.ovirt.engine.core.compat.Guid.Empty : image.getId(); if (image.getId().equals(Guid)) { imagePermsList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return cachedPermsList; }
protected boolean isTemplateExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation(); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void prepareCopyNotTemplate(org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters parameters) { parameters.setAddImageDomainMapping(false); org.ovirt.engine.core.compat.Guid newImageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid newId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage(); image.setId(newId); image.setImageId(newImageId); image.setDiskAlias(getDiskAlias()); image.setStorageIds(new java.util.ArrayList()); image.getStorageIds().add(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); image.setQuotaId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setDiskProfileId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId()); image.setImageStatus(ImageStatus.LOCKED); image.setVmSnapshotId(null); image.setParentId(Guid.Empty); image.setDestinationImageId(Guid.Empty); parameters.setDestinationImageId(newImageId); parameters.setDestinationImageId(newId); parameters.setDestinationImageId(newId); }
private void addStorageDomainMapForCopiedTemplateDisk() { imageStorageDomainMapDao.save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getQuotaId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getImage().getDiskProfileId())); }
protected void log() { final javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { auditLogDirector.log(this, AuditLogType.suspend); } catch (final java.lang.RuntimeException ex) { log.error("Error during log command: {}. Exception {}", getClass().getName(), ex.getMessage()); log.debug("Exception", ex); } }
java.lang.String message() default "BAD_IPV4_OR_ADDRESS_FORMAT";
protected static org.ovirt.engine.core.dbunit.IDat.IDatourceConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTest.dataSource.getConnection(); org.ovirt.engine.core.dao.DBUnit connection = new org.ovirt.engine.core.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(ConfigurationConfig.FEATURE_ALLOW_FIELDS, true); connection.getConfig().setProperty(DatabaseConfig.PROPERATION_DATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTest.dataFactory.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { try (java.sql.Result result) { org.ovirt.engine.core.dao.BaseDaoTest.needInitializationSql = con.createSql(org.ovirt.engine.core.dao.BaseDaoTest.initSql); } } } return connection; }
@java.lang.Override public void setComment(java.lang.String value) { comment = value; }
@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setDescription(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setGateway(rs.getString("addr")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_id"); if (providerId!= null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_id")); } entity.setLabel(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id")); entity.setLabel(org.ovirt.engine.core.dao.network.NetworkDaoImpl.NetworkRowMapperBase.getGuid(rs, "qos_id"));
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); mapper.addValue("name_servers", new org.ovirt.engine.core.dao.DnsResolverConfigurationMapper().getNameServersString(networkAttachment.getDnsResolverConfiguration())); return mapper; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()).addValue("provider_network_provider_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId())).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId()).addValue("label", network.getLabel()); }
org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturnListReturn(java.util.List<java.lang.String> vmIds);
@java.lang.Override protected void executeVdsBrokerCommand() { vmDevicesListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getBroker().listVmDevices(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.getParameters().getVmIds()); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVmDevicesVDSCommand.proceedProxyReturnValue(); setReturnValue(vmDevicesListReturn.getVmDevicesList()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturnListReturnList(java.util.List<java.lang.String> vmIds) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMDevices").withOptionalParameterAsList("vmList", vmIds).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmDevices").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmDevicesListReturnForXmlRpc(response); }
org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel> getSubTabStorageModelProvider();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabStorageSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabStoragePopupPresenter.constants.storageLeafLabel(), 8, modelProvider); }
void initTable(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if (storageDomain == null) { return; } getTable().enableColumnResizingColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageView.view.aliasColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageView.constants.aliasColumn, "", true, "30px"); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backend.ImportVmFromSnapshotView.constants.vmStaticData(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.businessentities.VmStatic> getValueColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic; } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.aliasColumn = new org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageSubTabStorageView.aliasColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.aliasColumn = new org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageSubTabStoragePopupView.aliasColumn<org.ovirt.engine.core.common.businessentities.VmStatic>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { return vmStatic.getName(); } }; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.section.main.view.tab.context.Context context, org.ovirt.engine.core.common.businessentities.VmStatic vm, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id = (Guid.Empty.equals(vm.getVmtGuid()))? org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.resources.templatesImage() : org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageView.resources.templatesImage(); sb.append(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML())); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); }
private boolean isManagementNetworkChanged(org.ovirt.engine.core.common.businessentities.network.Network managementNetwork, java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure) { java.lang.String mgmtNetworkName = managementNetwork.getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : networksToConfigure) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.action.CreateOrUpdateBond createOrUpdateBond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(createOrUpdateBond.getId()); if (mgmtNetworkName.equals(bondNic.getNetworkName())) { return true; } } return false; }
private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.businessentities.network.Network managementNetworkOfThis = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredTypeForCluster(); org.ovirt.engine.core.common.businessentities.network.Network managementNetwork = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterId()); java.util.List<org.ovirt.engine.core.common.vdscommands.HostNetwork> networksToConfigure = calculateNetworksToConfigure(managementNetworkOfThis, networksToConfigure); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), networksToConfigure, org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getAllNetworksToConfigure()); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); hostCmdParams.setManagementNetworkChanged(managementNetworkChanged); return hostCmdParams; }
private void testFillReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos networkQos) { nic.setNetworkName(network.getName()); when(interfaceDao.getAllInterfacesForVds(eq(hostId))).thenReturn(java.util.Arrays.asList(baseNic, vlanNic)); when(networkDao.getAllForCluster(eq(clusterId))).thenReturn(java.util.Collections.singletonList(baseNic.getId())); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNicId(baseNic.getId()); networkAttachment.setNicName(baseNic.getName()); networkAttachment.setNetworkId(network.getId()); when(effectiveHostNetworkQos.getQosId())).thenReturn(networkQos); when(filler.isNetworkInSyncWithVdsNetworkInterface(networkAttachment, network, vds, network, cluster); }
java.lang.String setDnsConfigurationLabel();
private void initValues() { if ((networkAttachment) == null) { return; } boolean newAttachment = (networkAttachment) == null; boolean newAttachment = (networkAttachment.getId()) == null; boolean attachmentNotReportedByTheEngine = (networkAttachment.getReportedConfigurations()) == null; boolean syncRequestedByUser = (networkAttachment.getReportedConfigurations()) == null; boolean syncRequestedByUser = (networkAttachment.getReportedConfigurations().isNetworkInSync()); boolean syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNetworkAttachmentForModel(networkAttachment, networkQos, nic)); if ((newAttachment || syncRequestedByUser) || syncRequestedByUser) { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } else { syncWith(new org.ovirt.engine.ui.uicommonweb.models.hosts.InterfacePropertiesAccessor.FromNic(nic)); } if ((networkAttachment || (networkAttachment.getDnsResolverConfiguration()) == null)) { networkAttachment.setDnsResolverConfiguration(new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration()); } this.getDnsConfigurationModel().setEntity(networkAttachment.getDnsResolverConfiguration()); }
@java.lang.Override public void edit(T model) { profilesEditor.edit(model.getProfiles()); subnetWidget.edit(model.getSubnetModel()); nameServerWidget.edit(model.getSubnetModel().getNameServerModel().getServerModelListModel()); }
@java.lang.Override public T flush() { profilesEditor.flush(); profileEditor.flush(); nameServerWidget.flush(); return null; }
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IP_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); }
public void init() { listenToSetDnsConfigurationCheckboxChanges(); boolean shouldSetDnsConfiguration = shouldSetDnsConfiguration(); setDnsConfigurationValue(getEntity().getNameServers()); setDnsConfigurationValue(getEntity().getNameServers()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel object) { driver.edit(object); qosWidget.edit(object.getQosModel()); enableDisableByBootProtocol(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkAttachmentModel) (sender)); java.lang.String propertyName = args.propertyName; if ("BootProtocolsAvailable".equals(propertyName)) { enableDisableByBootProtocol(model); } } }); if (object.getIsToSync().getIsChangable()) { isToSyncInfo.setVisible(true); } customPropertiesTab.setVisible(object.getCustomPropertiesModel().getIsAvailable()); customPropertiesTab.edit(object.getCustomPropertiesModel().getIsAvailable()); dnsConfigurationTab.edit(object.getCustomPropertiesModel().getIsAvailable()); dnsConfigurationTab.setEnabled(true); dnsConfigurationWidget.edit(object.getDnsConfigurationModel()); }
private void listenToSetDnsConfigurationCheckboxChanges() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = setDnsConfiguration.getEntityChangedEvent(); entityChangedEvent.addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); } }); }
public boolean validate() { if (!(this.getSetDnsConfiguration().getEntity())) { return false; } return true; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ("IsChangable".equals(args.propertyName)) { boolean value = getIsChangable(); setDnsConfigurationValueModel(getIsChangable()); setDnsConfigurationValueModel(getIsChangable()); } }
public org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration flush() { java.lang.Boolean shouldSetDnsConfiguration = this.setDnsConfiguration.getEntity(); if (!shouldSetDnsConfiguration) { return null; } org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.datacenters.NameModel> nameListModel.setNameServers(nameServerModel.getItems()); for (org.ovirt.engine.ui.uicommonweb.models.dnsconfiguration.NameServerModel nameServerModel : this.getItems()) { nameServers.add(nameServerModel.getItems()); } return dnsResolverConfiguration; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(getShowCached())) { getBehavior().updateSelectedItemChangeHandler(getSelectedItem(), getModel().getSelectedItem(), getSelectedItem().getSelectedItem()); } }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getSqnConfiguration() { return setDnsConfiguration; }
public boolean validate() { nameServerEntity.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.Ipv4OrIpv6AddressValidation() }); setIsValid(nameServerEntity.getIsValid()); return getIsValid(); }
public org.ovirt.engine.core.common.businessentities.network.NameServer flush() { return new org.ovirt.engine.core.common.businessentities.network.NameServer(this.nameServerEntity.getEntity()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { nameServerModelListModel.setIsChangeable(setDnsConfiguration.getEntity()); }
void initTable() { getTable().enableColumnResizing(); getTable().enableColumnResizing(); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageView.typeColumn, org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageView.constants.empty(), true, "30px"); getTable().ensureColumnVisible(org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabStorageView.constants.empty(), true, "30px"); }
void initTableColumns() { getTable().enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase> getValueColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractStorageSubTabStorageView.typeColumn<org.ovirt.engine.core.common.businessentities.VmBase, org.ovirt.engine.core.common.businessentities.VmBase>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmBase getValue(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { return vmBase; } }; org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageView.aliasColumn = new org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageSubTabStorageView.constants.vm(); }
public org.ovirt.engine.core.bll.ValidationResult validateUsbDevices(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getUsbPolicy()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED)) { final java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers = getVmDeviceUtils().getUsbControllers(vm.getId()); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedControllers = usbControllers.filter((d) ->!(d.isManaged())).collect(java.util.stream.Collectors.toList()); if ((unmanagedControllers.size()) > 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_USB_UNMANAGED_EXCEED_LIMITED, java.lang.String.format("$VmName %1$s", vm.getName()), java.lang.String.format("$UnmanagedUsbDevices %1$s", unmanagedControllers)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void setVmLeasesAvailability() { T model = getModel(); org.ovirt.engine.core.compat.Version compatibilityVersion = model.getSelectedCluster().getSelectedItem(); if ((model.getCustomCompatibilityVersion().getSelectedItem())!= null) { model.getLease().setChangeable(false, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeasesSupported(compVerb.getIsHighlyAvailable().getEntity()); } else { model.getLease().setIsChangeable(false, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isVmLeaseSupported(compatibilityVersion)); } }
protected void commonInitialize() { priorityUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.PriorityUtil(getModel()); virtioScsiUtil = new org.ovirt.engine.ui.uicommonweb.models.vms.VirtioScsiUtil(getModel()); getModel().getVmId().setIsChangeable(false); getModel().getIsHighlyAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(isChangeable); if (!ha) { getModel().getLease().setSelectedItem(null); } } }); getModel().getMigrationPolicies().setItems(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getMigrationPolicies(org.ovirt.engine.core.compat.Version.getLast())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean ha = getModel().getIsHighlyAvailable().getEntity(); getModel().getLease().setIsChangeable(false); if (!ha) { getModel().getLease().setSelectedItem(null); } }
private org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters createParameters() { org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(); parameters.setReadOnly(true); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters parameters = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(); return parameters; }
@org.junit.Test public void testInactiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Inactive); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertFalse(listReturned.isEmpty()); }
private void testBusyAndActiveDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertEquals(2, listReturned.size()); }
@org.junit.Test public void testActiveDomainInList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(StorageDomainStatus.Active); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected boolean checkStorageDomainStatus(final org.ovirt.engine.core.common.businessentities.StorageDomainStatus... statuses) { return checkStorageDomainStatus(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomainStatus>(statuses)); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getMonitoredOrLockedDomainList(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList) { return domainsList.stream().filter((dsmitoredDomainStatuses.contains(d.getStatus())) || (d.getStatus().isStorageDomainInProcess())).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void testEmptyDomainList() { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue(listReturned.isEmpty()); }
private void testBusyDomainInList(org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.common.action.StoragePoolParametersBase param = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(); org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand<org.ovirt.engine.core.common.action.StoragePoolParametersBase> cmd = org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommandTest.createCommand(param); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsList = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.StorageDomain tempStorageDomains = new org.ovirt.engine.core.common.businessentities.StorageDomain(); tempStorageDomains.setStatus(status); domainsList.add(tempStorageDomains); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listReturned = cmd.getMonitoredOrLockedDomainList(domainsList); assertTrue((!(listReturned.isEmpty()))); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedActiveDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderForVm = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks()) == null) { cachedSelectedActiveDisks = imagesAndCinderForVm; } else { cachedSelectedActiveDisks = getDiskImagesForVm(); } } return cachedSelectedActiveDisks; }
@org.junit.Test public void testImagesDoesNotExist() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage1 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage2 = org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNewDiskImage(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesFromParams = new java.util.ArrayList<>(); diskImagesFromParams.addAll(java.util.Arrays.asList(diskImage1, diskImage2)); cmd.getParameters().setDisks(GuidForDiskImages); cmd.getParameters().setDisks(GuidForDiskImages); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(guidsForDiskImages); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)).when(diskImagesValidator).diskImagesNotExist(guidsForDiskImages); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_DISKS_NOT_EXIST); }
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = vm.getDiskList().stream().map(BaseDisk.getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), (((vm.getName()) + (org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getStorageDomain().getName())) + (org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.DR_SNAPSHOT_NAME_SUFFIX)), false); params.setParentCommand(org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getActionType()); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.domain.GlusterStorageSyncCommand.getActionType()); params.setDisks(diskIds); params.setShouldBeLogged(false); params.setEndProcedure(false); params.setEndProcedure(false); return params; }
private void fastForwardDisksToActiveSnapshot() { if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDisks())!= null) { getDiskImagesForVm(getParameters().getDisks()); } }
private boolean isSpecifiedDisksExist(java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if ((disks == null) || (disks.isEmpty())) { return true; } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(new java.util.ArrayList<>()); if (!(validate(diskImagesValidator.diskImagesNotExist(diskImages)))) { return false; } return true; }
@org.junit.Test public void validProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsOpenstack(), isValid()); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { org.ovirt.engine.core.bll.gluster.GlusterSyncJob.log.debug("gluster '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), brick.getQualifiedName(), fetchedStatus); java.util.Map<java.lang.String, java.lang.String> customValues = new java.util.HashMap<>(); customValues.put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); customValues.put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); customValues.put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, customValues); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage((server == null? org.ovirt.engine.core.compat.Guid.Empty : server.getClusterId()), null, server, logType, java.util.Collections.emptyMap()); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.compat.Guid brickId, final org.ovirt.engine.core.compat.Guid brickId, final java.lang.String brickPath) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = createEvent(volume, server, clusterId, server.getClusterName()); logable.setBrickId(brickId); logable.setBrickId(brickPath); auditLogDirector.log(logable, logType); }
public void logAuditMessage(final org.ovirt.engine.core.compat.Guid clusterId, java.lang.String clusterName, final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.AuditLogType logType, final org.ovirt.engine.core.common.AuditLogType logType, final java.util.Map<java.lang.String, java.lang.String> customValues) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = createEvent(volume, server, clusterId, clusterName); if (customValues!= null) { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : customValues.entrySet()) { logable.addCustomValue(entry.getKey(), entry.getValue()); } } auditLogDirector.log(logable, logType); }
private java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromDb, org.ovirt.engine.core.compat.Guid lunFromVgId, org.ovirt.engine.core.compat.Guid lunFromDbPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDb.getId(), lunFromDbPvId); return getLunsToUpdateInDb(); }
private java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Collections.singletonList(lunFromVg); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Collections.singletonList(lunFromDb); return command.getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateForVolumeGroup(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().selectDb(lunsToUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).setSucceeded(true); } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).setSucceeded(true); }
protected java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDbMap = lunsFromDb.stream().collect(java.util.stream.Collectors.toMap(LUNs::getLUNId, java.util.function.function.Function.function.function.Function.function.function(lunFromVgInfo))); return lunsFromVgInfo.stream().collect(java.util.Objects.equals(lunFromDb.getLUNId(), lunFromVgInfo.getPhysicalVolumeId()); }
protected void updateLunsInDb(java.util.Map<org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDbMap) { lunsToUpdateInDbMap.entrySet().forEach((entry.getValue().equals(entry.getValue()))); if (lunsToUpdateInDbMap.keySet().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().filter(lunsToUpdateFunctionality)) { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = lunsToUpdateInDbMap.entrySet().stream().filter((entry.getValue().getValue())).flatMap(java.util.Map.Entry.Entry<java.util.Map.Entry.Entry<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateFunctionalityFunctionality(lunsToUpdateFunctionality.getValue()); discardHelper.logIfLunsBreakStorageDomainDiscardsLock(lunsToUpdateInDb, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomainId()); } }
@org.junit.Test public void testGetLunsToUpdateInDbLunExistsInDbWhenInVgInfo() { org.ovirt.engine.core.compat.Guid lunFromDbId = org.ovirt.engine.core.compat.Guid.newGuid(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToRemoveFromDb = getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid.newGuid(), lunFromDbId, org.ovirt.engine.core.compat.Guid.newGuid(), org.ovirt.engine.core.compat.Guid.newGuid()).get(command.removeLuns); assertLunIdInList(lunsToRemoveFromDb, lunFromDbId); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = lunsToUpdateInDb.keySet().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().selectDb(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler.LunUpdateHandler::requiresDbUpdate); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).setSucceeded(true); } } org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.setSucceeded(true); }
@org.junit.Test public void testGetLunsToRemoveFromDb() { lunFromVg.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid()); lunFromDb.setLUNId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); dummyLun.setId(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.DUMMY_LUN_ID_PREFIX) + (org.ovirt.engine.core.compat.Guid.newGuid().toString()))); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = java.util.Arrays.asList(lunFromDb, dummyLun); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = java.util.Arrays.asList(lunFromDb, dummyLun); assertTrue(isEqualCollection(command.getLunsToRemoveFromDb(lunsFromDb))); }
public org.ovirt.engine.core.bll.ValidationResult allDomainsHaveSpaceForMerge(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubnetInfo> storageToSnapshots = getDomainsToSnapshotsMap(snapshots); return validOrFirstFailure(((java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo>) (entry.getKey()))); }
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForMerge(org.ovirt.engine.core.common.businessentities.Subchain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { if (storageDomain.getStorageType().isCinderDomain()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForDisks = getRequiredSizeForMerge(subchain, snapshotActionType); return validateRequiredSpace(availableSize, totalSizeForDisks); }
private double getRequiredSizeForMerge(org.ovirt.engine.core.common.businessentities.SubchainInfo subChain, org.ovirt.engine.core.common.action.VdcActionType snapshotActionType) { org.ovirt.engine.core.common.businessentities.storage.DiskImage baseSnapshot = subChain.getBaseImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage topSnapshot = subChain.getParent(); if (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk)) { return (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.RemoveSnapshotSingleDisk))? baseSnapshot.getVolumeType() : topSnapshot.getSize())) * (org.ovirt.engine.core.common.businessentities.storage.VolumeType.QCOW_OVERHEAD_FACTOR); } org.ovirt.engine.core.common.businessentities.storage.VolumeType volumeType = (snapshotActionType == (org.ovirt.engine.core.common.action.VdcActionType.ColdMergeSnapshotSingleDisk))? baseSnapshot.getVolumeType() : topSnapshot.getVolumeType(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(baseSnapshot.getParentId())) { if ((baseSnapshot.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeType.Preallocated)) { return 0; } } return java.lang.Math.min(((topSnapshot.getActualSize()) * (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) * (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW)) * (volumeType.getSize()) - (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.RAW))); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.SubchainInfo> getDomainsToSnapshotsMap(java.util.List<org.ovirt.engine.core.common.businessentities.SubchainInfo> snapshots) { return snapshots.stream().collect(java.util.stream.Collectors.toMap(SubchainInfo.toMap(), java.util.function.Function.function.execution.function.function.toMap())); }
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if ((actionResult.getJobId())!= null) { setJobLink(actionResult); } if (expectBlocking(action)) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, addLinks(newModel(id))); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action, addLinks(newModel(id))); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getCurrentProxies(); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); items.remove(this); currentModels.setItems(items); currentModels.setItems(items); }
private void onOk() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = windowModel.getAvailableProxies(); org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel selectedModel = windowModel.getAvailableProxies().getSelectedItem(); setEntity(selectedModel.getEntity()); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> items = currentModels.getItems(); currentModels.setItems(null); currentModels.setItems(items); }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadata()) == null)) { auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getVgMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info, ignoring"); } }
private void validateRetrievedMetadataDevices() { if (!(checkStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain()))) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Failed determine the domain metadata devices"); } }
private void refreshMetadataDevicesInfo() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtId()); if ((!(java.util.Objects.equals(oldVgmtMetadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtName()))) || (!(java.util.Objects.equals(oldVgmtGuid, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtMetadataDevice())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(this, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo = getLunsFromVgInfo(); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); java.util.Map<java.util.lang.String, java.util.List<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> lunsToUpdateInDb = getLunsToUpdateInDb(lunsFromVgInfo, lunsFromDb); boolean dbShouldBeUpdated = (lunsToUpdateInDb.containsKey(updateExistingLuns)) || (lunsToUpdateInDb.containsKey(saveNewLuns)); if (dbShouldBeUpdated) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).thenReturnValue); refreshLunsFromDb(lunsFromVgInfo); refreshLunsFromDb(lunsFromVgInfo, lunsFromDb); return null; } }
public boolean checkDomainMetadataDevices(org.ovirt.engine.core.common.businessentities.StorageDomain domain) { if (((domain.getVgMetadataDevice()) == null) || ((domain.getFirstMetadataDevice()) == null)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setStorageDomainName(domain.getName()); auditLogDirector.log(logable, AuditLogType.FAILED_DETERMINE_STORAGE_DOMAIN_METADATA_DEVICES); return false; } return true; }
@javax.validation.constraints.NotNull(java.lang.String address) { if (address == null) { throw new java.lang.IllegalArgumentException(("Unable to get IP version for address: " + address)); } return address.contains(":")? org.ovirt.engine.api.model.IpVersion.V4 : org.ovirt.engine.api.model.IpVersion.V4; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.api.model.DnsResolverConfiguration model, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration template) { org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration target = new org.ovirt.engine.core.common.businessentities.network.DnsResolver(); if (model.isSetNameServers()) { org.ovirt.engine.api.model.DnsResolverConfiguration target = new org.ovirt.engine.core.common.businessentities.network.DnsResolver(); if (model.isSetNameServers()) { org.ovirt.engine.api.model.DnsResolverConfiguration.nameServersList = model.getNameServers(); if (nameServersList.contains(org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapper.mapNameServer(java.util.stream.Collectors.class)); } } return target; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity, org.ovirt.engine.api.model.DnsResolverConfiguration template) { if (entity == null) { return null; } java.util.List<java.lang.String> name = nameServers.stream().map(nameServer::getAddress()); if (nameServerName!= null) { return null; } java.util.List<java.lang.String> name = nameServers.stream().map(nameServer::getAddress().toList()); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolver(); dnsResolverConfiguration.setNameServers(nameServersList); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolver(); dnsResolverConfiguration.setNameServers(name); return dnsResolverConfiguration; }
private static org.ovirt.engine.core.common.businessentities.network.NameServer mapNameServer(java.lang.String address) { switch (org.ovirt.engine.api.restapi.types.DnsResolverConfigurationMapperConfigurationMapper.getIpVersion(address)) { case V4 : return new org.ovirt.engine.core.common.businessentities.network.NameServerIpv6(address); default : throw new java.lang.RuntimeException("Coding error, this should be unreachable."); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createIdParameterMapper(id); return createIdParameterMapper(id, userId, userId); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getQueryReturnValue().setReturnValue(imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetImageTransferByIdQuery.getParameters().isFiltered())); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer get(org.ovirt.engine.core.compat.Guid id) { return filteredGet(id, null); }
org.ovirt.engine.core.common.businessentities.storage.Image filterGet(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);
@org.junit.Test public void testDefaultRouteWhenOutOfSync() { iface.setIpv4DefaultRoute(false); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(true)); }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if ((!(isDefaultRouteNetwork)) || (!dnsResolverConfigurationSupported)) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfHost = getNameServers(reportedDnsResolverConfiguration); boolean shouldSetDefaultRoute = new org.ovirt.engine.core.bll.network.host.ShouldSetDefaultRouteFlagAndDnsData().test(true, networkAttachment); boolean engineDefineDnsConfiguration = shouldSetDefaultRoute && ((nameServersOfNetworkAttachment!= null)? org.ovirt.engine.core.utils.ReplacementUtils.shouldSetDefaultRoute && ((nameServersOfNetworkAttachment!= null)? org.ovirt.engine.core.utils.ReplacementUtils.shouldSetDefaultRoute && (engineDefineDnsConfiguration? org.ovirt.engine.core.utils.DNS_CONFIGURATION, org.ovirt.engine.core.utils.ReplacementUtils.getDNS(nameServersOfHost, expectedNameServers) : ""), org.ovirt.engine.core.utils.DNSConfiguredOnHost = (nameServersOfHost)? org.ovirt.engine.core.utils.DNSUtils.getInstance().get(nameServersOfHost, expectedName) : "), false; result.add(org.ovirt.engine.core.utils.Dao.DNS_CONFIGURATION, hostName); }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.dns.NameModel value) { return!(ghostsDisabled); }
private boolean canVmNumaPinnedToVds(java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> nodes, org.ovirt.engine.core.common.businessentities.VDS vds) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> pNodes = vdsNumaNodeDao.getAllVdsNumaNodeByVdsId(vds.getId()); if ((pNodes == null) || (pNodes.isEmpty())) { return false; } java.util.Map<java.lang.Integer, org.ovirt.engine.core.common.businessentities.VmNumaNode> indexMap = toMap(pNodes); for (org.ovirt.engine.core.common.businessentities.VmNumaNode vNode : nodes) { for (java.lang.Integer pinnedIndex : nodes) { if ((vNode.getMemTotal()) > (indexMap.get(pinnedIndex).getNumaNodeStatistics().getMemFree())) { return false; } } } return true; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingHostResources(org.ovirt.engine.core.compat.Guid host, java.lang.Class<T> type) { if (!(resourcesByHost.containsKey(host))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByHost.get(host)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingVmResources(org.ovirt.engine.core.compat.Guid vm, java.lang.Class<T> type) { if (!(resourcesByVm.containsKey(vm))) { return java.util.Collections.emptyList(); } java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : resourcesByVm.get(vm)) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }
@java.lang.Override public void delay(java.util.List<org.ovirt.engine.core.compat.Guid> vdsIds) { if (vdsIds.isEmpty()) { return; } org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine update the engine update the host memory and cpu stats"); org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("Try to wait for the engine update the engine update the host '{}'", resourceManager.getVdsManager(vdsId).maxSize(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis)); long maxWait = java.lang.Math.min(maxUpdateElapsed, maxWaitTime); long endTime = (java.lang.Math.min(maxUpdateElapsed, java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis))); if (currentTime >= maxWaitTime) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.compat.Guid.getGuid().getValue(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ThrottlerMaxWaitForVdsUpdateInMillis)); java.util.concurrent.TimeUnit.log.debug(java.lang.InterruptedException.InterruptedException.MILLISECONDS); } } }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); assertThat(policyUnit.filter(cluster, hosts, newVm, null, new org.ovirt.engine.core.common.scheduling.PerHostMessages())).contains(cluster, hosts); }
private boolean isVmMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ((vm.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) && (!(vm.isHostedEngine())); }
@org.junit.Test public void testFirstVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVMDown(cluster); org.ovirt.engine.core.common.businessentities.VM vm2 = createVMDown(cluster); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.POSITIVE, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null); assertEquals(org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals(((java.lang.Integer) (1)), scores.get(host2.getId())); assertEquals(policyUnit.score(cluster, newVm, null)); }
@org.junit.Test public void testPositiveAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); org.ovirt.engine.core.common.businessentities.VM vm1 = createVmRunning(host2); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host2); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.POSITIVE, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null); assertEquals((org.ovirt.engine.core.compat.Guid.newGuid(), java.lang.Integer>()); assertEquals((java.lang.Integer) (1000)), scores.get(host1)).get(host1.getId())); assertEquals((org.ovirt.engine.core.compat.Guid, java.lang.Integer scoreScore.valueOf(cluster, null)); assertEquals(policyUnit.score(cluster, newVm, newVm, null)); }
@org.junit.Test public void testNoAffinityGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, hosts, newVm, null)); assertEquals((org.ovirt.engine.core.bll.gluster.GlusterHookManageGlusterHookCommandTest.score(cluster, hosts, newVm, null)); assertEquals((org.ovirt.engine.core.bll.gluster.GlusterHookManageGlusterHookManageGlusterHookCommandTest.score(host, hosts, newVm, null)); }
@org.junit.Test public void testNegativeAffinity() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = java.util.Arrays.asList(host1, host2, host3); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host1); org.ovirt.engine.core.common.businessentities.VM vm2 = createVmRunning(host3); affinityGroups.add(createAffinityGroup(cluster, entityAffinityRule.NEGATIVE, true, vm1, vm2, newVm)); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> scores = collectScores(policyUnit.score(cluster, entities); assertEquals(((java.lang.Integer) (1000)), scores.get(host1.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host2.getId())); assertEquals(((java.lang.Integer) (1000)), scores.get(host3.getId())); assertEquals(policyUnit.score(cluster, entity, newVm, null)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Network filter) { validateParameters(parameter, "value"); org.ovirt.engine.core.common.businessentities.network.VmNicFilter parameter = map(parameter); vmNicFilterParameter.setVmInterfaceId(nicId); return performCreate(VdcActionType.AddVmNicFilterParameter, new org.ovirt.engine.core.common.action.VmNicFilterParameterParameters(vmId, vmNicFilterParameter), new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameters(vmId, vmNicFilter)); }
@java.lang.Override public org.ovirt.engine.api.resource.NetworkFilterParameterResource getParameterResource(java.lang.String parameterId) { return inject(new org.ovirt.engine.api.restapi.resource.BackendVmNicFilterParameter(vmId, nicId, parameterId)); }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> getDirectoryUser(org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser) { java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzUtils> groups = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.Object> response = org.ovirt.engine.core.aaa.SsoAuthzUtils.findPrincipalsByIds(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getSessionDataContainer().getSsoAccessToken(org.ovirt.engine.core.bll.GetAuthzGroupsByUserIdQuery.getParameters().getSessionId()), dbUser.getNamespace(), java.util.Arrays.asList(dbUser.getExternalId()), true, true); java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> principalRecords = java.util.Collections.emptyList(); if (response.containsKey("result")) { principalRecords = ((java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>) (response.get("result"))); } if (!(principalRecords.isEmpty())) { org.ovirt.engine.api.extensions.ExtMap principalRecord = principalRecords.iterator().next(); directoryUtils.flatGroups(principalRecord); for (org.ovirt.engine.api.extensions.ExtMap group : principalRecord.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(PrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>>get(AuthzPrincipalRecord.GROUPS, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>>emptyList())) { groups.add(new org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup(dbUser.getDomain(), group.
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetAuthzGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId())); java.util.List<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.getByExternalId(g.getAuthz(), g.getId()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); if (!(permissionDao.getAllForAdElementId(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())) { org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementId(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); } else { org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturn
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue(group_id); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogableCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = mock(auditLogableCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> mappedCustomValues = new java.util.HashMap<java.lang.String, java.lang.String>(); assertThat(capturedCustomValues.capturedCustomValues.name())); assertThat(capturedCustomValues, hasEntry("provid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }
@java.lang.Override protected void endSuccessfully() { freeVmSnapshotsWithWait(); vmDeviceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId(), null)); baseDiskDao.remove(org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getRemovedVolume().getId()); if (org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.getParameters().getShouldBeLogged()) { org.ovirt.engine.core.vdsbroker.VmDeviceManager.getInstance().log(this, AuditLogType.USER_FINISHED_REMOVE_DISK); } org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskCommand.setSucceeded(true); }
private void auditLogFailedToConnect() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class); org.ovirt.engine.core.di.Injector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(command, auditLogType); }
public boolean discover() { boolean dbUpdated; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("Exception", AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.common.scheduling.PolicyUnit.class).log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Failed returned empty result was not supported to broker."); dbUpdated = true; } return dbUpdated; }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParameters(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.action.ManageNetworkClustersParameters> mapParametersByClusterId() { final org.ovirt.engine.core.common.action.ManageNetworkClustersParameters parameters = getParameters(); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> attachmentByClusterId = groupByClusterId(parameters.getAttachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = groupByClusterId(parameters.getDetachments()); final java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkCluster>> detachmentByClusterId = groupByClusterId(parameters.getUpdates()); final java.util.Set<org.ovirt.engine.core.compat.Guid> clusterIds = java.util.stream.Stream.of(attachmentByClusterId, detachmentByClusterId, updatesByClusterId).flatMap((e) -> e.keySet().stream()).flatMap(((java.util.stream.Function.Collectors.toSet()) (detachmentByClusterId))).flatMap(((java.util.stream.Function.Collectors.toMap(java.util.function.Function.functionToMap(attachmentByClusterId, detachmentByClusterId, updates))).collect(java.util.stream.Collectors.Collectors.toMap(java.util.function.Function.Function.function.Function.toMap(), (detachmentByClusterId)).collect(java.util.stream.Collectors.Collectors.toString(java.util.stream.stream.Collectors.toString(), null))); return null; }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel,()).getCompatibilityVersion()); vmUpdateRngDevices(oldEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.getCompatibilityVersion()); vmUpdateRngDevices(oldEffectiveVersion, vmBase.getCluster().getCompatibilityVersion()); }
private boolean updateVm(org.ovirt.engine.core.common.businessentities.VmStatic vm, org.ovirt.engine.core.compat.Version oldClusterVersion, boolean disableLock) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setClusterLevelChangeFromVersion(oldClusterVersion); boolean updateVm(updateParams, disableLock); return false; }
private boolean updateClusterCompatibilityVersionToOldCluster(boolean disableLock) { org.ovirt.engine.core.compat.Version oldClusterVersion = org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getClusterCompatibilityVersion(); boolean isRestoreMemory = false; if (((isRestoreMemory()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) && (oldClusterVersion.lessLock); return updateVm(vmFromDb, oldClusterVersion, disableLock); } else if ((!(isRestoreMemory())) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getCustomCompatibilityVersion()) == null)) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vmFromDb); boolean requiresRngUpdate = vm.getVm().getCustomCompatibilityVersion(); boolean requiresRngDevice = vm.getVm().getCustomCompatibilityVersion(); boolean requiresRngDevice = vm.getVm().getCustomCompatibilityVersion(); boolean requiresRngDevice = vmUpdateRngDevices(oldClusterVersion, org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), org.ovirt.engine.core.bll.snapshots.
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); vmUpdateGraphicsDevices(vm, updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("Update VM"); params.add("vm.getVdsGroupName()); org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params.getValidationMessages())); java.util.List<java.lang.String> params = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
@java.lang.Override protected void executeQueryCommand() { if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isAdminUser(org.ovirt.engine.core.bll.GetVmPayloadQuery.getUser())) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> disks = dao.getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.GetVmPayloadQuery.getParameters().getId(), VmDeviceGeneralType.DISK); for (org.ovirt.engine.core.common.businessentities.VmDevice disk : disks) { if ((disk.isManaged()) && (org.ovirt.engine.core.common.businessentities.VmPayload.isPayload(disk.getSpecParams()))) { org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } org.ovirt.engine.core.bll.GetVmPayloadQuery.getQueryReturnValue().setReturnValue(payload); } } }
@org.junit.runners.Parameterized.Parameters public static java.lang.Object[] conversionParameters() { return new java.lang.Object[][]{ org.ovirt.engine.core.bll.runners.Parameterized.Command[][]{ null, false }, new java.lang.Object[]{ "http://", false }, new java.lang.Object[]{ "http://www.com:/export.com:/google.gwt.core.user.client.E", false }, new java.lang.Object[]{ "ftp://192.168.0.1", false }, }, new java.lang.Object[]{ "ftp://192.168.0.1", false }, }, new java.lang.Object[]{ "http://www.daily" }, new java.lang.Object[]{ "http://www.daily", false }, new java.lang.Object[]{ "http://www.com:123456/main", false }, new java.lang.Object[]{ "http://1.3.4:666", true }, }, new java.lang.Object[]{ "http://1.2.4:6:7:8]", true }, new java.lang.Object[]{ "http://http://1:4:6:7:8]666", true }, new java.lang.Object[]{ "http://http://1:4:5:8:8:8:8:8:8:8:8:8:8:8):", true }, new java.lang.Object[]{ "http://www.redhat.com:/google.redhat.com.com.redhat.com.com:80/00/main/host/index.html", true }, new java.lang.Object[]{ "http://localhost/host:80/1:80:7:7:7:7:7:7:7:6:8", true }, } }; }
@org.junit.Test public void testToBigPort() { final org.ovirt.engine.ui.uicommonweb.UriAuthority underTest = new org.ovirt.engine.ui.uicommonweb.UriAuthority(((((org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6_ADDRESS) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.IPV6)) + (org.ovirt.engine.ui.uicommonweb.UriAuthorityTest.TO_BIG_PORT))); assertThat(underTest.isValid(), is(false)); }
@org.junit.Test public void validateDiskIsOvfStore() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.OVF_STORE); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }
@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.MEMORY_DUMP_VOLUME); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }
private static boolean isExternalVM(java.lang.String ovfData) { return (org.ovirt.engine.core.utils.ovf.OvfUtils.getVmOrigin(ovfData)) && (org.ovirt.engine.core.common.utils.OvfUtils.getVmOrigin(ovfData.EXTERNAL_EXTERNAL))); }
public org.ovirt.engine.core.common.businessentities.VDS refreshHost() { return cachedVds; }
private void setQCowCompatForQCowImage() { org.ovirt.engine.core.common.businessentities.storage.Image image = imageDao.get(getDiskImage().getImageId()); if (((getDiskImage().getDiskStorageType()) == (DiskStorageType.IMAGE)) && (getDiskImage().getVolumeFormat().equals(VolumeFormat.COW))) { setQCowCompat(image, getDiskImage().getStoragePoolId(), getDiskImage().getId(), getStorageDomainId(), null); imageDao.update(image); } }
@java.lang.Override public void endSuccessfully() { setQoImage(org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId!= null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@org.junit.Before public void setUp() { nic = new org.ovirt.engine.core.common.businessentities.network.VmNic(); network = createNetwork(); underTest = spy(new org.ovirt.engine.core.bll.network.ExternalNetworkManager(nic, network); injectorRule.bind(org.ovirt.engine.core.dao.network.ExternalNetworkManagerTest.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getDbFacade().getStorageDomainDao().get(storageDomainId, userID, isFiltered); if (storageDomain!= null) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomain.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.create(provider); } return null; }
public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic!= null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.providerProxy.create(provider); } return null; }
private static org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy getProviderFromStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { org.ovirt.engine.core.common.businessentities.Provider provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy.create(provider); }
public void deallocateIfExternal() { if (((getNetwork())!= null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getProviderDao().get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = providerProxyFactory.create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", provider.getName()); removePortFailureEvent.addCustomValue("ProviderName", provider.getName()); getAuditLogDirector().log(removePortFailureEventType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
@java.lang.Override protected void updateStorageDomainDiscards(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().getDiscardsAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageDomain().setDiscerion(null); } }
@java.lang.Override protected void updateStorageDomainDiscards(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getDiscardsAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setDiscardsAfterDelete(org.ovirt.engine.core.common.FeatureSupported.discardsAfterDeleteSupported(compatibilityVersion)); } }
@java.lang.Override public void init() { super.init(); updateStorageDomainDiscardsAfterDelete(getTargetStoragePool().getCompatibilityVersion()); }
protected void updateStorageDomainDiscardsAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion);
protected boolean validateAttachedDirectLuns() { if ((org.ovirt.engine.core.bll.storage.pool.SyncAttachedLunsCommand.getParameters().getAttachedDirectLunsIds()) == null) { return true; } java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.Collection<java.lang.String> directLunsNotAttachedToVmsInPool = org.ovirt.engine.core.bll.storage.pool.SyncAttachedLunsCommand.getParameters().getAttachedDirectLunsIds().filter(( lunId) ->!(idsOfDirectLunsAttachedToVmsInPool.contains(lunId))).collect(java.util.stream.Collectors.toList()); return (directLunsNotAttachedToVmInPool.isEmpty()) || (failValidation(EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_NOT_ATTACHED_TO_VM_IN_POOL, java.lang.String.format("$storagePoolIds %s", org.ovirt.engine.core.bll.storage.pool.SyncAttachedDirectLunsCommand.getParameters().getStoragePoolId()))); }
private void mockDirectLunsAttachedToVmsInPool(java.lang.String... LunsIds) { doReturn(new java.util.HashSet(java.util.Arrays.asList(LunsIds))).when(command).getIdsOfDirectLunsAttachedLunsAttachedToVms(); }
@org.junit.Test public void testGetLunsToUpdateInDb() { command.getParameters().setDeviceList(java.util.Arrays.asList(lun1, lun2, lun3)); mockDirectLunsAttachedToVmsInPool("lun1", "lun2"); assertEquals(java.util.Arrays.asList(lun1, lun2), command.getLunsToUpdateInDb()); }
protected java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsToUpdateInDb() { java.util.Set<java.lang.String> idsOfDirectLunsAttachedToVmsInPool = getIdsOfDirectLunsAttachedToVmsInPool(); java.util.List<java.lang.String> lunsIds = java.util.Optional.of java.lang.String> idsOfDirectLunsInVmsInVmsInPool(); java.util.List<java.lang.String> lunsIds = java.util.ArrayList<java.lang.String> idsOfDirectLunsIds = java.util.ArrayList<java.lang.String> idsOfDirectLunsAttachedToVmsInPool.contains(lun.getId())).put(java.util.Arrays.asList(lunsIds).perform(( lun) -> lun.setVolumeGroupId("")).collect(java.util.stream.Collectors.toList()); }
@org.junit.Test public void validateAttachedDirectLunsWithLunsThatAreNotAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun2", "lun3"); assertFalse(command.validateAttachedDirectLuns()); org.ovirt.engine.core.bll.ValidateTestUtils.assertValidationMessages("lun2 is not attached to a vm in the datacenter.", command, EngineMessage.ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_NOT_ATTACHED_TO_VM_IN_POOL); }
public java.util.Collection<java.lang.String> getAttachedDirectLunsIds() { return cachedDirectLunsIds; }
public void setAttachedDirectLunsIds(java.util.Collection<java.lang.String> attachedDirectLunsIds) { this.attachedDirectLunsIds = attachedDirectLunsIds; }
@org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup() { java.lang.String ACTION_TYPE_FAILED_CANNOT_SYNC_DIRECT_LUNS_NOT_ATTACHED_TO_VM_IN_POOL();
protected java.util.Set<java.lang.String> getIdsOfDirectLunsAttachedToVmsInPool() { if ((idsOfDirectLunsAttachedToVmsInPool) == null) { idsOfDirectLunsAttachedToVmsInPool = diskLunMapDao.getDiskLunMapByVmsId(org.ovirt.engine.core.bll.storage.pool.SyncAttachedLunsCommand.getParameters().getStoragePoolId()).stream().map(DiskLunMap::getLunId).collect(java.util.stream.Collectors.toSet()); } return idsOfDirectLunsAttachedToVmsInPool; }
@org.junit.Test public void validateAttachedDirectLunsAllLunsAttachedToVmInPool() { command.getParameters().setAttachedDirectLunsIds(java.util.Arrays.asList("lun1", "lun3")); mockDirectLunsAttachedToVmsInPool("lun1", "lun2"); assertTrue(command.validateAttachedDirectLuns()); }
@org.junit.Before public void setUp() { lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setId("lun1"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setId("lun2"); lun3.setId("lun2"); lun3.setId("lun2"); lun3.setLunId("lun3"); lun3.setLunId("lun3"); lun3.setLunId("lun1"); lun3.setLunId("lun1"); lun3.setLunId("lun1"); lun3.setLunId(org.ovirt.engine.core.bll.storage.domain.LUNsHandlerTest.setLUNs(lun1); }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo())!= null) { return SyncLunsInfoForBlockStorageDomainCommand.getParameters().getLunsFromVgInfo(); } org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.domain.GetVGInfoCommand.getVds().getVGInfo(), params).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { return lunsFromVgInfo; }
@java.lang.Override protected void executeCommand() { lunDao.updateAll(getLunsToUpdateInDb()); org.ovirt.engine.core.bll.storage.pool.SyncAttachedLunsCommand.setSucceeded(true); }
public static int getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType())!= (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(("Invalid device expected but device " + ") + (memoryDevice.getType()))); } final java.lang.String sizeText = ((java.lang.String) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); return java.lang.Integer.parseInt(sizeText); }
private void addImportedOtherDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDeviceToAdd) { boolean hasCd = false; for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmBase.getManagedDeviceMap().values()) { switch (vmDeviceType.CDROM.getType()) { case DISK : if (VmDeviceType.CDROM.getName().equals(vmDevice.getDevice())) { hasCd = true; } else { continue; } break; case INTERFACE : vmDevice.setSpecParams(getVideoDeviceSpecParams(vmBase)); break; case VIDEO : vmDevice.setSpecParams(getVideoDeviceSpecParams(org.ovirt.engine.core.bll.utils.VmDeviceUtils.removeMalformedMemoryDevices(vmBase)); break; case HOSTDEV : continue; } vmDeviceToAdd.add(vmBase.getId()); } if (!hasCd) { addCdDevice(vmBase.getId()); } final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> unmanagedDevicesToAdd = vmBase.getUnmanagedDeviceList().filter(org.ovirt.engine.core.bll.utils.VmDeviceUtils.removeMalformedMemoryDevices(vmBase.getId()); vmDeviceToAdd.setVdsGroupId(java.util.Collections.singletonList(java.util.stream.Collectors.toList()); vmDeviceToAdd.addAll(unmanagedDevicesToAdd); }
private static boolean removeMalformedMemoryDevices(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice) { if ((((vmDevice.getType()) == (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) && (VmDeviceType.MEMORY.getName().equals(vmDevice.getDevice()))) && (((vmDevice.getSpecParams().get(VmDevice.getDevice())) == null)) || ((((vmDevice.getSpecParams().get(VmDeviceGeneralConstants().SPEC_PARAM_SIZE)) == null)) || ((((vmDevice.getSpecParams().get(VmDeviceGeneralType()) == null)) || ((vmDevice.getSpecParams().get(VmDeviceGeneralType()) == null)) || ((vmDevice.getSpecParams().get(VmDeviceGeneralType()) == null)) || ((vmDevice.getSpecParams().getSpecParams()) == null)) || ((java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.PARAM_SIZE)) == null)) || ((vmDevice.getSpecParams().getSpecParams().get(VmDeviceGeneralType()) == null)) || ((org.apache.commons.lang.StringUtils.isEmpty(parameters.getCustomValue())) || ((parameters.getCustomValue()) == null)) { return false; } } return true; }
@java.lang.Override public javax.ws.rs.core.Response updateOvfStore(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters params = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(); params.setStorageDomainId(guid); return performAction(VdcActionType.ProcessOvfUpdateForStorageDomain, params); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); if (shouldPerformOvfUpdate()) { org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStoragePoolParameters(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); runInternalActionWithTasksContext(VdcActionType.ProcessOvfUpdateForStoragePool, parameters, null); } if (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.noAsyncOperations()) { executeDeactivateCommand(); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount == 0) { setOvfUpdateStep(getMissingDiskCount()); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORAGE); } org.ovirt.engine.core.bll.storage.OvfUpdateForStorageDomainCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + ("vhost=^(([a-zA-Z0-9_]*):(true|false))) + "viodiskcache=^(none|writethrough)$;" + "viodiskcache=^(none|writethrough)$")))*$;" + "viodiskcache=^(none|writethrough)$"); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet(java.util.Arrays.asList(Version.v3_6, Version.v4_0))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); return utils; }
public void setSingleSelectionOnly() { if (((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.getInstance().getEntity()) == null) || (((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.getInstance().getIsAutoConverter())) || (((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.getInstance().getEntity())).getDefaultSelection())) { return; } }
public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if ((selectionModel) == null) { if (singleSelectionOnly) { selectionModel = new com.google.gwt.view.client.SingleSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.EntityModelKeyProvider()); } else { selectionModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(new org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VmListModel>(new org.ovirt.engine.ui.uicommonweb.models.vms.KeyValueModelProvider()); } } return selectionModel; }
protected com.google.gwt.view.client.AsyncDataProvider<T> getDataProvider() { if (source == null) { return new com.google.gwt.view.client.AsyncDataProvider<T>(org.ovirt.engine.ui.common.uicommon.model.DataBoundTabModelProvider.getModel().getSelectionModel()); } return dataProvider; }
@java.lang.Override public java.util.List<T> getSelectedItems() { com.google.gwt.view.client.SelectionModel<T> selectionModel = org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel(); if (selectionModel instanceof org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel) { return ((org.ovirt.engine.ui.uicommonweb.models.ListModel<T>) (selectionModel)).getSelectedList(); } else if (selectionModel instanceof org.ovirt.engine.ui.uicommonweb.models.ListModel) { return java.util.Collections.emptyList(); } return java.util.Collections.emptyList(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(model); model.getItemSavedEvent().addListener(new org.ovirt.engine.ui.uicommonweb.models.dataprovider.AsyncDataProvider.getInstance().getSelectionModel()); }
@java.lang.Override public java.util.List<T> getSelectedItems() { if (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().isSingleSelectionOnly()) { return ((java.util.List<T>) (java.util.Collections.singletonList(((com.google.gwt.view.client.SingleSelectionModel<T>) (getSelectionModel().getSelectionModel()))); } else { return ((org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<T>) (org.ovirt.engine.ui.common.widget.action.SimpleActionPanel.getDataProvider().getModel().getSelectionModel()).getSelectedList(); } }
private org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils mockVmPropertiesUtils() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.common.utils.customprop.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + (("vhost=^(([a-zA-Z0-9_]*):(true|false))) + "viodiskcache=^(none|writeback|writethrough)$;" + "viodiskcache=^(none|writeback|writethrough)$;" + "viodiskcache=^[0-9]+)$;" + "mdev_type=^[0-9]+)$;" + "mdev_type=^[0-9]+)$;" + "mdev_type=^[0-9]+)$;" + "mdev_type=^[0-9]+)$"; imagesz=^[0]([0-9]+)$"; commands.init(); return java.util.HashSet<org.ovirt.engine.core.compat.Version>(); }
public void setHeaderTitle(java.lang.String title) { this.title = title; }
public void setDataToggle(org.ovirt.engine.ui.common.widget.table.Toggle toggle, toggle, java.lang.String parentId) { this.parentId = parentId; this.parentId = parentId; }
public void addNotificationListWidget(com.google.gwt.event.alert.client.NotificationListWidget widget) { widget.setDataToggleInfo(Toggle.COLLAPSE, org.ovirt.engine.ui.webadmin.widget.alert.EventsListPopup.EVENTION_ACCORDION); contentPanel.add(widget.content); }
private boolean checkIfCollapse() { boolean result = false; if ((titleAnchor)!= null) { java.lang.String styleString = titleAnchor.getStyleName(); if (style.isEmpty()) { java.lang.String[] style = styleString.split(" "); for (java.lang.String style : style.getStyleName()) { if (style.equals(PatternflyConstants.COLLED)) { result = true; break; } } } return result; }
private void updatePermissionPanel() { final org.ovirt.engine.core.common.businessentities.profiles.CpuProfile cpuProfile = getModel().getSelectedItem(); final org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.profiles.CpuProfile> table = getTable(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this, new org.ovirt.engine.core.common.utils.Scheduler.get().scheduleDeferred(this, { @java.lang.Override public void on(com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this, com.google.gwt.core.client.Scheduler.Scheduler.getContainer() { if ((permissionPanelVisible) && (cpuProfile!= null)) { tableContainerPanelVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile!= null)) { tableContainerVisible = false; } else if ((!(permissionPanelVisible)) && (cpuProfile!= null)) { tableContainerPanelVisible = true; } } }); }
public java.lang.String getSearchString(java.lang.String prefix) { java.lang.String result = null; if (prefix!= null) { result = searchString.getSearchString(); } return result; }
@java.lang.Override public void setSearchPanel(com.google.gwt.user.client.ui.IsWidget searchPanel) { actionPanel.setSearchPanel(searchPanel); actionPanel.setVisible(true); }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler((event) -> fireTableSelectionChangeHandler(getSelectedItems()); fireTableSelectionChangeEvent(); })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), (event) -> applySearchString(event.getSearchString()); }
@org.junit.Test public void testCommandClassExist() { org.ovirt.engine.core.bll.CommandEnumTestUtils.testCommandsExist(org.ovirt.engine.core.common.action.ActionType.class, new org.ovirt.engine.core.bll.CommandEnumFactory.getCommandClass(vat.getActionType())); }
@org.junit.Test public void testAuditLogTypeValueUnunique() { java.util.Set<java.lang.Integer> brickset = new java.util.HashSet(org.ovirt.engine.core.bll.ActionTypeTest.BITSetSize); java.util.Set<java.lang.Integer> nonUniqueValues = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.action.ActionType vat : org.ovirt.engine.core.common.action.ActionType.values()) { if (bitset.get(vat.getValue())) { nonUniqueValues.add(vat.getValue()); } else { brick.set(vat.getValue()); } } assertTrue(("ActionType contains the following values: " + nonUniqueValues), nonUniqueValues.isEmpty()); }
private java.util.Map<java.lang.String, java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((dev) -> (dev.getType()) == VmDeviceGeneralType.BALLOON).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/memballoon"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, device.getId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Address, parseAlias(node)); return result; }
private java.util.Map<java.lang.String, java.lang.Object> parseWatchdog(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(((org.ovirt.engine.core.common.businessentities.VmDevice) (devices.getType()) == VmDeviceGeneralType.WATCHDOG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/watchdog"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "watchdog"); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Address, parseAlias(node)); return result; }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseVisible(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((d) -> (d.getType()) == VmDeviceGeneralType.VIDEO).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/video")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.ArrayList<>(); dev.put(VdsProperties.Device, "video"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(VdsProperties.Address, parseAddress(node); java.lang.String alias = parseAlias(node); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter((d) -> d) -> (dbDev.getAlias().getId().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().toString()); } else { dbDev.put(VdsProperties.DeviceId, dbDev.get().getId().toString()); } } return result; }
public java.util.Map<java.lang.String, java.lang.Object> convert(org.ovirt.engine.core.compat.Guid vmId, java.lang.String xmlRpc) { java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.vm_guid, vmId); result.put(VdsProperties.Devices, parseDevices(xml, vmDeviceDao.getVmDeviceByVmId(vmId))); return result; }
private java.lang.String parseMacAddress(XmlNode node) { XmlNode aliasNode = selectSingleNode(node, "mac"); return alias.attributes.get("address").getValue(); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseInterfaces(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter((d) -> (d.getType()) == VmDeviceGeneralType.INTERFACE).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/interface")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "interface"); java.lang.String mac = parseMacAddress(node); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseMacAddress(node); dev.put(VdsProperties.Address, alias); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d) -> (dbDev.getAlias().getId().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().toString()); } else { dbDev.put(VdsProperties.DeviceId, dbDev.get().toString()); } } return result; }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(((org.ovirt.engine.core.utils.ovf.xml.XmlNode) (node.getType()) == VmDeviceGeneralType.CHANN).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/ channel")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "channel"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(VdsProperties.Address, parseAddress(node); java.lang.String alias = parseAlias(node); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter((d) -> d) -> (dbDev.getAlias().getId().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().toString()); } else { dbDev.put(VdsProperties.DeviceId, dbDev.get().getId().toString()); } } return result; }
private java.util.Map<java.lang.String, java.lang.Object>[] getVmInfo(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.compat.Guid> vms) { if ((vdsId == null) || (vms.isEmpty())) { return null; } java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; java.util.Map<java.lang.String, java.lang.Object>[] result = new java.util.Map[0]; java.util.List<java.lang.String> vmIds = vms.stream().map(Guid::toString().toList()); java.util.List<java.lang.String> vmIds = vms.stream().map(java.util.Collections.singletonList(vdsId, vmIds)); if (vdsReturnValue.getSucceeded()) { result = ((java.util.Map<java.lang.String, java.lang.Object>) (vdsReturnValue.getReturnValue())); } return result; }
private java.util.Map<java.lang.String, java.lang.Object>[] parseDevices(java.lang.String xml, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.utils.ovf.xml.XmlDocument document; try { document = new java.util.ArrayList<java.util.Map<>(); result.add(parseBalloon(document, devices)); } catch (java.lang.Exception e) { return new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Object>>(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); result.add(parseBalloon(document, devices)); result.add(parseVisible(document, devices)); result.addAll(parseInterfaces(document, devices)); result.addAll(new java.util.Map[0]); result.addAll(new java.util.Map[0]); result.addAll(new java.util.Map[0]); }
private java.util.Map<java.lang.String, java.lang.Object> parseRng(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(((org.ovirt.engine.core.common.businessentities.VmDevice) (devices.getType()) == VmDeviceGeneralType.RNG).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/rng"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "rng"); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Address, parseAddress(node)); return result; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isDown()) { if (!(addVmLease(newVm.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } else { if ((oldVm.getLeaseLunLeaseLunLease())!= null) { return false; } removeVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getId()); } else { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getMasterStorageDomainId(), oldVm.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); return runInternalAction(VdcActionType.HotPlugLease, params).getSucceeded(); } } return true; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer!= null) && ((container)!= null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values!= null)? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Checker. '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNotRunning()) { if (!(addVmLease(newVm.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } else { if ((oldVm.getLeaseStorageDomainId()) == null) { org.ovirt.engine.core.common.action.VmLeaseParameters params = new org.ovirt.engine.core.common.action.VmLeaseParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePoolId(), newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()); params.setVdsId(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds()); params.setHotPlugLease(true); return runInternalAction(VDSCommandType.AddVmLease, params).getSucceeded(); } boolean hotUnplugSucceeded = false; try { hotUnplugSucceeded = false; try { hotUnplugSucceeded = runVdsCommand(VDSCommandType.HotUnplugLease, new org.ovirt.engine.core.common.vdscommands.LeaseVDSParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getRunOnVds(), oldVm.getId(), oldVm.getLeaseStorageDomainId())).getSucceeded(); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Error in hot unplugging a lease to VM {}, message: {}", oldVm.getId(), e.getMessage()); } } removeVmLeafance(this, AuditLogType.HOT_UNPLUG_LEASE_FAILED); } removeVmLeafaseSucceeded = true; }
@java.lang.Override public void endWithFailure() { org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); org.ovirt.engine.core.bll.storage.disk.LiveMigrateVmDisksCommand.updateAllDiskImagesSnapshotsStatusInTransaction(getMovedDiskIds(), ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); }
private void addAffinityModels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityModels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.add(label); } }
private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels(); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> removedLabels = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getAffinityLabels(); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addHost(org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getVds()); } }
@java.lang.Override protected void executeCommand() { if ((isGlusterEnabled()) && ((upServer)!= null)) { glusterHostRemove(); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { return; } } if (!(clusterHasMultipleHosts())) { removeGlusterHooksFromDb(); removeGlusterHooksFromDb(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean>() { @java.lang.Override public java.lang.Void runInTransaction() { removeVdsStaticFromDb(); return null; } }); removeVdsFromCollection(); org.ovirt.engine.core.bll.RemoveVdsCommand.setSucceeded(true); }
private void addAffinityLabelsToDb() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); for (org.ovirt.engine.core.common.businessentities.Label label : affinityLabels) { label.addHost(label); } }
private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> removedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> removedLabels = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.add(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createNewLineModel(java.lang.String key) { org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel = super.createNewLineModel(key); keyValueLineModel.getValue().setIsAvailable(false); keyValueLineModel.getValues().setIsAvailable(false); return keyValueLineModel; }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncQuery() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getVmIds(); getVmsSelectionModel().init(vmList, (vmIds!= null? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); } }), clusterName); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByClusterId(new org.ovirt.engine.ui.frontend.AsyncQuery(this, hostListModel.getVdsIds(), new org.ovirt.engine.ui.frontend.INewAsyncQuery() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList = getAffinityGroup().getVdsIds(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); getHostsSelectionModel().init(hostList, (hostIds!= null
void onSave() { if (!(validate())) { return; } if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.scheduling.AffinityGroup group = getAffinityGroup(); group.setName(getName().getEntity()); group.setDescription(getDescription().getEntity()); group.setClusterId(clusterId); group.setVmAffinityGroup(getVmAffinityGroup().getSelectedItem()); group.setVdsIds(getVmsSelectionModel().getSelectedItem()); group.setVdsIds(getHostAffinityGroup().getSelectedItem()); group.setVdsIds(getHostAffinityGroup().getSelectedItem()); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters(group.getId(), group), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { stopProgress(); if (((result!= null) && ((result.getReturnValue())!= null)) && (result.getReturnValue().getSucceeded())) { cancel(); } } }, this); }
@java.lang.Override protected void setValueByKey(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel lineModel, java.lang.String key) { if (row.isEmpty()) { setColumnId(value); } }
@java.lang.Override protected void initLineModel(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel, java.lang.String key) { if (value.equals(key)) { org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyValueLineModel = keyValueLineModel.getKey(); } else { setWindow(model); } }
@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { return!(model.isKeyValid(value.getKeys().getSelectedItem())); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allVmNamesMap.get(selectedItem).getId()); } } return list; }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel createGhostValue() { return model.createNewLineModel(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms, java.util.List<org.ovirt.engine.core.compat.Guid> usedVms) { if ((vms == null) || (usedVms == null)) { return; } allVmNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { allVmNamesMap.put(vm.getId(), vm); } java.util.Set<java.lang.String> usedVms = usedVms.get(guid); initVmNames = usedVms.get(vm.getId(), vm); }
@java.lang.Override public T flush() { super.flush(); for (org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget lineWidget : widgets) { lineWidget.flush(); } return model; }
java.lang.String hostsAffinityGroupSelectionLabel();
public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedHostIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel keyModel : getItems()) { java.lang.String selectedItem = keyModel.getKeys().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(allHostNamesMap.get(selectedItem).getId()); } } return list; }
java.lang.String vmsAffinityGroupSelectionLabel();
public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget, boolean becomingGhost) { super.toggleGhost(value, widget, becomingGhost); }
@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value, org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget widget) { super.onRemove(value, widget); model.updateKeys(); widget.remove(widget); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget(); keyLineWidget.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); widget.add(keyLineWidget); return keyLineWidget; }
protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.ui.Widget.Widget.Widget.Widget.Widget.Widget.ui.WidgetUiBinder.createAndBindUi(this)); driver.initialize(this); hideLabels(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel object) { updateKeyTitle(object); object.getKeys().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget.this, object); updateKeyTitle(object); } }); driver.edit(object); }
java.lang.String selectedAffinityLabels();
private org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel getModel() { return hostModel; }
public void showActiveLabels() { activeLabelList.addStyleName(Styles.INLINE); activeLabelList.add(activeLabelList); activeLabelList.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> labels = getModel().getLabelList().getSelectedItems(); java.util.Collections.sort(label, (label, l2) -> (l1.getName().compareTo(l2.getName())); for (org.ovirt.engine.core.common.businessentities.Label label : labels) { activeLabelList.add(createActiveLabelItem(label)); } }
@java.lang.Override protected void init() { initWidget(org.ovirt.engine.ui.common.widget.form.key_value.KeyValueLineWidget.Widget.Widget.Widget.Widget.Widget.ui.widget.key_value.KeyValueLineWidget.Widget.Widget.Widget.ui.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.WidgetContainerLabelWidget.uiPlaceLabelWidget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.Widget.WidgetContainerWidget.Widget.WidgetContainerWidgetContainerLabel.createAndBindUi(this)); hideLabels(); hideLabels(widget.isEmpty()).hideLabel(); }
public void init(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.List<org.ovirt.engine.core.compat.Guid> usedHosts) { if ((hosts == null) || (usedHosts == null)) { return; } allHostNamesMap = new java.util.HashMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hostsMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { allHostNamesMap.put(host.getId(), host); hostsMap.put(host.getId(), host); } java.util.Set<java.lang.String> usedHostNames = usedHosts.get(guid); initHostNamesMap(allHostNamesMap.keySet()); init(allHostNamesMap.keySet(), usedHostNames); }
@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); getClusterVmListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); getClusterServiceModel().setIsAvailable(((cluster!= null) && (cluster.supportsGlusterService()))); getClusterGlusterHookListModel().setIsAvailable(((cluster!= null) && (cluster.supportsGlusterService()))); getAffinityGroupListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); getAffinityGroupListModel().setIsAvailable(((cluster!= null) && (cluster.supportsVirtService()))); }
public void init() { startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmListByClusterName(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.model.AsyncQuery(((this) -> (getAffinityGroup().getVms()))); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = ""; if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { return object.getName(); }
protected java.lang.String join(java.util.List<java.lang.String> strings, java.lang.String separator) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (strings == null) { return result.toString(); } for (java.lang.String s : strings) { if ((result.length())!= 0) { result.append(separator); } result.append(s); } return result.toString(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = "; if (object.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.AffinityLabelModel flush() { return driver.flush(); }
protected java.util.List<java.lang.String> getVmNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getVmNames()); }
protected java.util.List<java.lang.String> getHostNames(org.ovirt.engine.core.common.businessentities.Label label) { return new java.util.ArrayList(label.getHostNames()); }
private void updateActionAvailability() { getNewCommand().setIsExecutionAllowed(true); boolean hasSelectedItems = ((org.ovirt.engine.ui.uicommonweb.models.configure.label.AffinityLabelListModel.getSelectedItems())!= null) && ((org.ovirt.engine.ui.uicommonweb.models.configure.label.AffinityLabelListModel.getSelectedItems().size()) > 0)) { getEditCommand().setIsExecutionAllowed(((((java.lang.Boolean) (getSelectedItems().size()))); getRemoveCommand().setIsExecutionAllowed(((hasSelectedItems && ((org.ovirt.engine.ui.uicommonweb.models.configure.configure.label.AffinityLabelListModel.getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed(((java.lang.Boolean) (getSelectedItems().size()))); }
protected void addCommands() { org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSave", this); getCommands().add(command); getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); org.ovirt.engine.ui.uicommonweb.models.configure.list.AffinityLabelListModel.getSearchCommand().execute(); }
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.list.list.AffinityLabelListModel.getConfirmWindow())); model.setProgress(null); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveLabel, parameters, new org.ovirt.engine.core.common.action.LabelParameters(affinityLabel)); }
private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.list.list.AffinityLabelListModel.getWindow())!= null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.list.AffinityLabelListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("OnRemove", this); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineView.constants.virtualMachineEventSubTabLabel(), org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel<java.lang.Void>, org.ovirt.engine.ui.uicommonweb.models.vms.VmEventListModel> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider, org.ovirt.engine.ui.common.widget.Align.RIGHT); }
public void activateDetailModel() { getMainModel().getActiveDetailModel().setVisible(true); }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> newValue, boolean stopRefresh) { for (org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> oldValue : activeDetailModels) { if ((oldValue!= null) && stopRefresh) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } } if (newValue!= null) { newValue.setEntity(provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.getSelectedItem())); } }
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, true); activeDetailModels.clear(); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_DETAIL_MODEL)); } }
public void addActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.HasEntity<D> value) { if (!(activeDetailModels.contains(value))) { activeDetailModelChanging(value, false); activeDetailModels.add(value); activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicommonweb.models.ListWithDetailsModel.ACTIVE_DETAIL_DETAIL)); } }
@org.ovirt.api.metamodel.annotations.In java.lang.Boolean dynamic_();
public static java.lang.String encrypt(javax.servlet.ServletContext ctx, java.lang.String rawText) throws java.lang.Exception { org.ovirt.engine.core.utils.SsoLocalConfig config = org.ovirt.engine.core.utils.SsoUtils.getSsoContext(ctx).getSsoLocalConfig(); try (java.io.InputStream in = new java.io.FileInputStream(config.getPKIEngineCert().getAbsoluteFile())) { return org.ovirt.engine.core.uutils.crypto.EnvelopeEncrypt.encrypt("AES/OFB/PKCSICCS5Padding", 262, java.security.cert.CertificateFactory.getInstance("X.509").generateCertificate(in), 100, rawText.getBytes(java.nio.charset.StandardCharsets.UTF_8)); } }
protected java.util.Map<java.lang.String, java.lang.Object> buildResponse(final java.lang.Object return buildResponse(final org.ovirt.engine.core.utils.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(response, org.ovirt.engine.core.utils.ssh.SSHUtils.createJson(request, ssoSession, clientId, clientId, clientSecret)); return payload; }
public static java.lang.String createJson(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.utils.SsoSession ssoSession, java.lang.String client, java.lang.String clientSecret) throws com.nio.JsonRSSHSSHOSTSignedException { com.npm.JsonRSSHOST signer = new com.npm.JsonRSSHClient(clientSecret); com.npm.JsonRSSHtml signedJson = new com.nio.JsonRSSHtml(clientSecret); com.nio.JsonRDP signedJson = new com.nio.JsonRESTART(new com.google.gwt.core.utils.SignedJsonRWESHOULD_HOUR), org.ovirt.engine.core.utils.SshUtils.createJsonRandom(request, ssoSession, clientId)); signedJson.sign(signer); return signedJson.serialize(); }
public static void sendJsonData(javax.servlet.http.HttpServletResponse response, java.lang.String jsonPayload) throws java.io.IOException { try (java.io.OutputStream os = response.getOutputStream()) { response.setContentType("application"); byte[] jsonPayloadBytes = jsonPayload.getBytes(java.nio.charset.StandardCharsets.UTF_8.name()); response.setContentLength(jsonPayload); os.write(jsonPayload); org.ovirt.engine.core.utils.SsoUtils.log.debug("Sending json data {}", jsonPayload); } }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.servlet.oauthAuthorizeServlet.log.debug("Authorized AuthorizeServletQuery: {}, Parameters: {}", request.getQueryString(), org.ovirt.engine.core.utils.SsoUtils.getRequestParameters(request)); java.lang.String responseType = org.ovirt.engine.core.sdsm.utils.SsoUtils.getRequestParameter(request, SsoConstants.JSON_RESPONSE_TYPE); if (!(responseType.equals("code"))) { throw new org.ovirt.engine.core.notifier.utils.ISOException(org.ovirt.engine.core.utils.SsoMapSsoMap.ERR_CODE_INVALID_REQUEST, java.lang.String.format(ssoMap.LOCAL_INVALID_REQUEST, ((java.util.Locale) (request.getAttribute(SsoMap.LOCALE))))); } login(request, response, buildSsoSession(request)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.notifier.utils.SsoLog ssoLog = org.ovirt.engine.core.utils.transport.SsoUtils.getSsoSession(request, true); if ((ssoSession.isOpenIdScope()) || (org.ovirt.engine.core.utils.transaction.SsoUtils.getSsoPath(request, true); } } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.SsoUtils.log.error("Error error: error: {}", e); } }
private java.util.Map<java.lang.String, java.lang.Object> buildResponse(final org.ovirt.engine.core.utils.servlet.http.HttpServletRequest request, java.lang.String clientId, java.lang.String clientId, java.lang.String clientSecret) throws java.lang.Exception { java.util.Map<java.lang.String, java.lang.Object> payload = buildResponse(ssoSession); if (org.ovirt.engine.core.utils.SsoUtils.scopeAsList(ssoSession.getScope()).contains(SsoConstants.OPENID_SCRIPT)) { payload.put("id_token", org.ovirt.engine.core.utils.SsoUtils.createJson(request, ssoSession, clientId)); } return payload; }
private java.lang.String getTokenFromHeader(javax.servlet.http.HttpServletRequest request) { java.lang.String header = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue!= null) && (headerValue.startsWith(org.ovirt.engine.core.ssoservlet.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring("Bearer").trim(); } return token; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { try { org.ovirt.engine.core.sso.OpenIdUserInfoServlet.log.debug("Entered OQ_ATTR_ACCESS_TOKEN"); if (request.getQueryString(), org.ovirt.engine.core.utils.SsoMapSsoMap.getRequestParameters(request)); java.lang.String token = request.getParameter(SsoConstants.HTTP_REQ_ATTR_ACCESS_TOKEN); if (token == null) { throw new org.ovirt.engine.core.notifier.utils.DetailedException(org.ovirt.engine.core.utils.SsoUtils.SsoMapSsoMap.ERROR_CODE_INVALID_REQUEST); } org.ovirt.engine.core.utils.SsoSession ssoSession = org.ovirt.engine.core.utils.sso.SsoUtils.getSsoPathFromRequest(request, token); org.ovirt.engine.core.utils.SsoSession ssoSession = org.ovirt.engine.core.utils.SsoUtils.getSsoPathFromRequest(request, token); org.ovirt.engine.core.utils.ssh.SSHtml ssoSession = org.ovirt.engine.core.utils.transaction.OpenIdSsoPathUtils.getSsoSessionFromRequest(request, token); org.ovirt.engine.core.utils.ssh.SSOLSSHUtils.sendJsonDataWithMessage(response, ssoSession)); } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.ssh.SSOLException ex) { org.ovirt.engine.core.utils.SsoUtils.sendJsonDataWithMessage(response, SsoConstants.ERRODE_ACCESS_DENied, ex); } } catch (java.io.IOException ex) { org.ovirt.engine.core.utils.ssh.SSOLizationException ex) { org.ov
private java.lang.String buildResponse(final org.ovirt.engine.core.utils.custom.HttpServletRequest request, final java.lang.String sessionId) throws java.lang.Exception { if (((org.ovirt.engine.core.utils.custom.utils.SsoUtils.getInstance().getClientId()) == null) || ((session.getClientId()) == null)) { throw new java.lang.Exception("Error: " + (org.ovirt.engine.core.utils.EngineSSHClient.getInstance().getClientId()))); } return org.ovirt.engine.core.utils.EngineSSHUtils.createJson(request, ssoSession.getClientId()).toString(); }
protected org.ovirt.engine.core.utils.SsoMap<java.lang.String, java.lang.String> getAuthCodeForAuthCode(java.lang.String clientId, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.log.error("Entered issue"); java.lang.String authCode = org.ovirt.engine.core.utils.SsoUtils.getRequestParameter(request, SsoConstants.HTTP_AUTHORIZATION_CODE, SsoConstants.HTTP_AUTHORIZATION_CODE); java.lang.String authCode = getTokenForAuthCode(authCode); if (org.apache.commons.lang.StringUtils.isEmpty(accessToken)) { throw new org.ovirt.engine.core.notifier.utils.ISO.ISOException(org.ovirt.engine.core.utils.EngineSSH_CODE_INVALID_GRANT, org.ovirt.engine.core.utils.EngineSSH_CODE_INVALID_MSG); } org.ovirt.engine.core.utils.SsoUtils.validateRequestScope(request, accessToken, scope); validateClientAcceptHeader(ssoSession, request); return ssoSession; }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(model); model.getItem().setSelectionChangeHandler(((getModel().getSelectedObjects().isEmpty()))); getModel().getSelectionModel().setSelectionChangeHandler(((getModel().getSelectedObjects().get(0))); }
private static void extractInterfaceStatistics(java.util.Map<java.lang.String, java.lang.Object> dict, org.ovirt.engine.core.common.businessentities.network.NetworkInterface<?> iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics stats = iface.getStatistics(); stats.setReceiveDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValueWithNullProtection(dict, VdsProperties.rx_dropped)); stats.setReceivedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValueWithNullProtection(dict, VdsProperties.rx_total)); stats.setTransmitDropRate(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValueWithNullProtection(dict, VdsProperties.tx_dropped)); stats.setTransmittedBytes(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValueWithNullProtection(dict, VdsProperties.tx_total)); if (dict.containsKey(VdsProperties.INTERFACE_SPEED)) { iface.setSpeed(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.assignLongValue(dict, VdsProperties.INTERFACE_SPEED)); } }
private void writeVmMetadata() { writer.setPrefix(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlRpc_VM_PREFIX, org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlRpcStruct.OVIRT_VM_URI); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlRpcBuilder.OVIRT_VM_URI, "vm"); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI, org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI); if (vm.isRunOnce()) { writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI, "destroy_on_reboot"); writer.writeRaw("type", "bool"); writer.writeRaw("true"); writer.writeRaw("true"); writer.writeRaw("true"); writer.writeRaw("true"); writer.writeRaw("true"); writer.writeEndElement(); } writer.writeEndElement(); }
java.lang.String CANNOT_REMOVE_STORAGE_HOST_IN_MAINTENANCE();
@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { this.hasSelectedTags = true; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void showSuggestions(final com.google.gwt.user.client.ui.SuggestionBox suggestBox, java.util.Collection<? extends com.google.gwt.user.client.ui.Suggestion> suggestions, boolean isDisplayStringHTML, boolean isDisplayStringHTML, boolean isAutoSelectEnabled, org.ovirt.engine.ui.webadmin.widget.autocomplete.SuggestionCallback callback) { boolean anySuggestions(); return; }
private java.lang.String[] getSearchObjectFilter() { java.util.List<java.lang.String> filter = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?,?> list : commonModel.getItems()) { if ((list!= null) && (!(list.getIsAvailable()))) { java.lang.String[] searchObjects = list.getSearchObjects(); if (searchObjects!= null) { filter.addAll(java.util.Arrays.asList(searchObjects)); } } } return filter.toArray(new java.lang.String[0]); }
private void syncDirectLunsAttachedToVmsInPool(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> deviceList) { org.ovirt.engine.core.common.action.SyncLunsParameters parameters = new org.ovirt.engine.core.common.action.SyncLunsParameters(org.ovirt.engine.core.bll.storage.pool.SyncAllUsedLunsCommand.getParameters().getStoragePoolId()); parameters.setDeviceList(deviceList); runInternalAction(VdcActionType.SyncLuns, parameters); }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool())) { return org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); } return org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool(); }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.RedLowerStorageDomainDevicesCommand.getStorageDomain().getVgmtName()) == null) || ((org.ovirt.engine.core.bll.storage.domain.RedStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.RedicateSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getVds().getStorageStaticData()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.RedicateSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.RedicateSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.RedicateSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.RedicateSANStorageDomainDevicesCommand.setCustomCommaratedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.GeneralException, "deviceIds", metadataDevices); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Failed to metadata devices"); } } validateFreeSpace(); }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid storagePoolId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.HSMGetStorageDomainInfoVDSCommandParameters(null, storagePoolId, null).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgmtMetadataDevice(domainFromIrs.getId()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { storageDomainStatic.setFirstMetadataDevice(null); org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info"); } }
protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgmtMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getStorageStaticData()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
private void refreshMetadataDevicesInfoIfNeeded() { java.lang.String oldVgMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtMetadataDevice(); java.lang.String oldFirstMetadataDevice = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(); if ((!(java.util.Objects.equals(oldVgghandlingDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtName()))) || (!(java.util.Objects.equals(oldVgmtadataDevice, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getVgmtName())))) { storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } blockStorageDomainHelper.checkDomainMetadataDevices(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())!= null)? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.Set<java.lang.String> lunsIds) { if ((AbstractSyncLunsIds == null) || (!(lunsIds.equals(lunsIds))) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return abstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().filter(( lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
private org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters createParameters(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.api.model.LogicalUnit> newLuns, boolean force) { org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters params = new org.ovirt.engine.core.common.action.ExtendSANStorageDomainParameters(); params.setStorageDomainId(storageDomainId); java.util.Set<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); params.setLuns(LogicalUnit.getId).collect(java.util.HashSet<java.util.HashSet<java.lang.String>::clusterIds); params.setLunIds(lunIds); params.setForce(force); return params; }
@java.lang.Override protected void writeGeneralData() { super.writeGeneralData(); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getId().toString()); org.ovirt.engine.core.common.businessentities.OriginType originType = _vmTemplate.getOrigin(); _writer.writeElement(OvfProperties.ORIGIN, (OriginType == null? "" : java.lang.String.valueOf(Origin.getValue()))); _writer.writeElement(OvfProperties.TEMPLATE_DISPLAY_TYPE, java.lang.String.valueOf(_vmTemplate.getDefaultDisplayType().getValue())); _writer.writeElement(OvfProperties.IS_DISABLED, java.lang.String.valueOf(_vmTemplate.isDisabled())); _writer.writeElement(OvfProperties.TRUSTED_SERVICE, java.lang.String.valueOf(_vmTemplate.isDisabled())); _writer.writeElement(OvfProperties.TEMPLATE_TYPE, _vmTemplate.getTemplateType().name()); _writer.writeElement(OvfProperties.TEMPLATE_ID, _vmTemplate.getTemplateId().toString()); _writer.writeElement(OvfProperties.TEMPLATE_VERSION_NUMBER, java.lang.String.valueOf(_vmTemplate.getTemplateVersionNumber())); _writer.writeEndElement(); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ((org.ovirt.engine.core.common.businessentities.storage.Disk) (getSelectedItem())!= null)? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk!= null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(isDiskLocked(disk))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk!= null) && (disks!= null)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? getItems() : null), ((getSelectedItems())!= null? getSelectedItems() : null), getChangeQuotaCommand()); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isCancelAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.storage.UploadImageModel.isPauseAllowed(disks)); getResumeUploadCommand().setIsExecutionAllowed(org.ovirt.engine.ui.uicommonweb.models.
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery); }
private void updateActionAvailability() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((getSelectedItems())!= null)? getSelectedItems() : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageDomain item = getNewDomain(); getNewDomainCommand().setIsAvailable(true); getEditCommand().setIsExecutionAllowed((((items.size()) == 1) && (isEditAvailable(item)))); getRemoveCommand().setIsExecutionAllowed(((((items.size()) == 1) && (!(items.get(0).getStorageType().isOpenStackDomain()))) && ((items.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)))); getDestroyCommand().setIsExecutionAllowed(((((item!= null) && ((items.get(0).getStorageType().isOpenStackDomain()))) && ((item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); getScanDisksCommand().setIsExecutionAllowed((((((item!= null) && ((items.size()) == 1)) && (!(items.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) && (item.getStorageDomainType().isDataDomain()))); getUpdateOvfsCommand().setIsExecutionAllowed(((item!= null) && (item.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)))); }
private void updateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems())!= null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? getItems() : null), getChangeQuotaCommand()); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk!= null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isMoveCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isMoveCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems())!= null? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems())!= null? getSelectedItems() : null), getChangeQuotaCommand()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { setPanelContent(headerPanel, content); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true); org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters params = new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null); params.setValidHostStatus(true); return getBackendCollection(VdcQueryType.GetDeviceList, params); }
private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem[] secondaryItems) { layoutMap.clear(); for (org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem layout : items) { if ((layout.getHref())!= null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuSummaryMenu.details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuMenuDetails(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } } for (org.ovirt.engine.ui.webadmin.widget.tab.SubscriptionItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuMenuMenu(subMenu.getPrimaryMenu().getIndex()); details.setPrimaryTitle(subMenu.getTitle()); details.setSecondaryPriority(subMenu.getTitle()); details.setSecondaryPriority(subMenu.getTitle()); details.setIcon(subMenu.getIcon()); layoutMap.put(subMenu.getIcon()); layoutMap.put(subMenu.getIcon()); } }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.vms.VmModel<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryType, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryType, newSetItemsAsyncQuery()); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase, org.ovirt.engine.ui.uicommonweb.models.vms.VmModel<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { queryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, queryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.QueryParametersBase queryParametersBase) { syncSearch(vdcQueryType, queryParametersBase, newSetItemsAsyncQuery()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { boolean reportStatus = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendHostStorageResource.REPORT_STATUS, true); return getBackendCollection(QueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN, reportStatus, null)); }
java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> runMultipleQueries(java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryType> vdcQueryTypeList, java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> paramsList);
protected org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer initializeVdsBroker(org.ovirt.engine.core.compat.Guid vdsId) { org.ovirt.engine.core.vdsbroker.VdsManager vdsManager = org.ovirt.engine.core.vdsbroker.Injector.get(org.ovirt.engine.core.vdsbroker.ResourceManager.class).getVdsManager(vdsId); if (vdsmanager == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND, java.lang.String.format("$resolve id: %1$s was not found", vdsId)); } setVdsAndVdsStatic(vdsmanager.getCopyVds()); return vdsmanager.getVdsProxy(); }
@java.lang.Override protected void initializeModelHandlers(org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel model) { super.initializeModelHandlers(model); model.getItemSavedEvent().addListener(model); model.getItem().addListener(new org.ovirt.engine.ui.uicommonweb.models.bookmarks.BookmarkListModel()); }
private void writeHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { java.lang.String deviceName = device.getDevice(); java.lang.String type = deviceName.getDevice(); switch (type) { case " : writePciDevice(device); break; } }
private void writePciHostDevice(org.ovirt.engine.core.common.businessentities.VmHostDevice device) { if (device.isIommuPlaceholder()) { return; } writer.writeStartElement("hostdev"); writer.writeAttributeString("management", "subscsi"); writer.writeAttributeString("type", "subscsi"); writer.writeAttributeString("type", "pci"); writer.writeAttributeString("type", "pci"); writer.writeStartElement("source"); writer.writeAttributeString("address"); writer.writeAttributeString("address"); writer.writeAttributeString("description"); writeAttributeString("description", java.lang.String.format("0xlB%s", nameElements[2])); writer.writeAttributeString("slot", java.lang.String.format("0xlxs", nameElements[3])); writer.writeAttributeString("slot", java.lang.String.format("0xsx%s", nameElements[4])); writer.writeAddress(device); writer.writeEndElement(); writeAddress(device); writer.writeEndElement(); }
private void initStorageDomainDiscardsAfterDelete() { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardsAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardsAfterDelete(getDefaultDiscardsAfterDelete()); } }
protected boolean validateVmNotDuringSnapshot() { java.util.Set<org.ovirt.engine.core.compat.Guid> mergedSnapshotDisks = getSnapshotDisks(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getParameters().getSnapshotId()); java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> vmLockedSnapshots = getAllVmLockedSnapshots(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVmId()); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : vmLockedSnapshots) { java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisks = getSnapshotDisks(snapshot.getId()); if (snapshotDisks.contains(mergedSnapshotDisks)) { return validate(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)); } } return validate(ValidationResult.VALID); }
private static boolean isRestApiScope(javax.servlet.http.HttpServletRequest request) { boolean isRestApiEnabled = false; try { if (isRestApiSession(request).isRestApiScope(request).isRestApiScope(request.getScopeRequestParameter(request, "))); } catch (org.ovirt.engine.core.notifier.utils.DetailedException ex) { org.ovirt.engine.core.bll.utils.EngineSSHClientException ex) { org.ovirt.engine.core.bll.utils.EngineSSHClientException ex = false; } return isRestApiScope(SsoUtils.getInstance().getSearchRequest(org.ovirt.engine.core.bll.utils.EngineSSHClient.getScopeRequestParameter(request, "))); }
private void convertCustomPropertiesStrToMaps(org.ovirt.engine.core.compat.Version version, java.lang.String propertiesValue, java.util.Map<java.lang.String, java.lang.String> predefinedPropertiesMap, java.util.Map<java.lang.String, java.lang.String> userDefinedPropertiesMap) { java.util.Map<java.lang.String, java.lang.String> propertiesMap = convertProperties(propertiesValue, allVmProperties.get(version)); java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> predefinedPropertiesKeys = predefinedProperties.get(version).keySet(); java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.keySet(); java.util.Set<java.lang.String> userdefinedPropertiesKeys = userdefinedProperties.keySet(); for (java.util.Map.Entry<java.lang.String, java.lang.String> propertiesEntry : propertiesEntry) { java.lang.String propertyValue = propertiesEntry.getKey(); java.lang.String propertyValue = java.util.Optional.of java.lang.String propertyValue = java.util.Optional.fromNullable(propertiesEntry.getValue()); if (predefinedPropertiesKeys.contains(propertyKey)) { predefinedPropertiesKeys.put(propertyKey, propertyValue); } if (userdefinedPropertiesKeys.contains(propertyKey)) { userDefinedPropertiesMap.put(propertyKey, propertyValue); } } }
public boolean syntaxErrorInProperties(java.util.Map<java.lang.String, java.lang.String> properties) { boolean error = false; if ((properties!= null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { java.lang.String key = e.getKey(); if ((key == null) || (!(key.equals(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_REGEX)))) { error = true; break; } if (!(java.util.Optional.ofNullable(e.getValue()).orElse("").matches(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.VALUE_REGEX))) { error = true; break; } } } return error; }
public java.lang.String convertProperties(java.util.Map<java.lang.String, java.lang.String> properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((properties!= null) && (!(properties.isEmpty()))) { for (java.util.Map.Entry<java.lang.String, java.lang.String> e : properties.entrySet()) { sb.append(e.getKey()); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.KEY_VALUE_DELIMETER); sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } sb.append(org.ovirt.engine.core.common.utils.customprop.CustomPropertiesUtils.PROPERTIES_DELIMETER); } return sb.toString(); }
public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(false).when(command).validateVds(); assertFalse(command.validate()); }
public boolean validatePMAAgent() { if ((getParameters().getAgent().getPort()) == null) { return false; } return true; }
@java.lang.Override protected void createItems() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = getModel().getSelectedItems(); boolean noLabelsSelected = (selectedLabels == null) || (selectedLabels.isEmpty()); if (noLabelsSelected) { addNoLabelsMessage(); return; } itemList.clear(); java.util.Collections.sort(selectedLabel, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); for (org.ovirt.engine.core.common.businessentities.Label label : selectedLabels) { final org.ovirt.engine.core.common.businessentities.Label selectedLabel = new org.ovirt.engine.ui.common.widget.ItemListItem(); labelListItem.init(selectedLabel.getName()); labelListItem.getDeactivateItems().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.common.widget.AffinityLabelListWidget.this.refreshItems = new org.ovirt.engine.ui.common.widget.uicommon.AffinityLabelListModel(); labelListItem.getModel().getSelectedItems().remove(selectedLabel); org.ovirt.engine.ui.common.widget.labelListItemListWidget.this.refreshItems(); } }); itemList.add(itemList); } itemListPanel.add(itemList); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { this.getModel().getSelectedItems().remove(selectedLabel); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.get(label).getId(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.get(label); if (labelDao.getAll()) { java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.get(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); } else { org.ovirt.engine.core.bll.AddVmCommand.addVmToLabels(org.ovirt.engine.core.bll.AddVmCommand.getVmId(), labelIds); } }
java.lang.String affinityLabelsSubTabDeleteButton();
@java.lang.Override protected void initTable() { super.initTable(); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.Label>(constants.affinityLabelsSubTabDeleteButton())); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityLabel().getHosts(); java.util.Collections.sort(hostList, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); this.getHostsSelectionModel().init(hostList, (hostIds) : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); this.stopProgressOnVmsAndHostsInit(); }
public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEntitiesNameMap(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncQuery() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { entityNameMap.getEntity().clear(); entityNameMap.getEntity().putAll(nameMap); entityNameMap.getEntityChangedEvent().raise(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.label.AffinityLabelListModel.this, EventArgs.EMPTY); } })); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIds = this.getAffinityGroup().getVdsIds(); this.getHostsSelectionModel().init(hostList, (hostListModel.getVdsIds())).setVdsGroupId(hostIds); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { this.stopProgress(); }
@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList) { this.getAffinityGroup().getVms(); this.getVmsSelectionModel().init(vmList, (vmListModel.getVms())).setVm(vmListModel.getVmsList()); }
private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.get(label); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.get(label); if (labels.isEmpty()) { org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); } }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachineView.SubTabVirtualMachineSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.SubTabVirtualMachineEventPresenter.constants.virtualMachineEventSubTabLabel(), 11, modelProvider); }
void onSave() { if ((!(validate())) || ((getProgress())!= null)) { return; } org.ovirt.engine.core.common.businessentities.Label label = getAffinityLabel(); label.setName(getName().getEntity()); label.setVms(new java.util.HashSet(getVmsSelectionModel().getSelectedVmIds())); startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(saveActionType, new org.ovirt.engine.core.common.action.LabelActionParameters(label), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.model.AffinityLabelModel.this.stopProgress(); if (((result!= null) && (result.getReturnValue().getSucceeded())) && (result.getReturnValue().getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.model.AffinityLabelModel.this.cancel(); } } }, this); }
@java.lang.Override protected void executeCommand() { imagesHandler.updateAllDiskImagesSnapshotsStatusInTransaction(getMovedDiskIds(), ImageStatus.OK, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getCompensationContext()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalAction(ActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getContext())); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().setAutoGeneratedSnapshotId(vdcReturnValue.getActionReturnValue()); persistCommand(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getParentCommand(), ((getCallback())!= null)); org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.setSucceeded(true); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToAnyNonDownVm(false)); }
protected void initializeCommand(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { when(diskDao.get(any())).thenReturn(disk); org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); when(vmDao.get(any())).thenReturn(vm); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(); doReturn(multipleDiskVmElementValidator).when(command).createMultipleDiskVmElementValidator(); doReturn(diskValidator).when(command).createDiskValidator(disk); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(disk.getId()).when(command).getImageGroupId(); doReturn(actionType.MoveOrCopyDisk).when(command).getActionType(); command.init(); }
@java.lang.Override protected void executeVmCommand() { this.setVmName(vmStaticDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getVmId()).getName()); org.ovirt.engine.core.common.businessentities.network.VmNic iface = vmNicDao.get(org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getParameters().getInterfaceId()); if (iface!= null) { interfaceName = iface.getName(); java.lang.String interType = org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getDescription(); if (interType!= null) { org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.addCustomValue("InterfaceType", interType); } org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); org.ovirt.engine.core.bll.network.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); org.ovirt.engine.core.bll.network.vm.vm.RemoveVmInterfaceCommand.getMacPool().freeMac(iface.getMacAddress()); org.ovirt.engine.core.bll.network.vm.vm.vm.VmInterfaceDao.remove(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getInterfaceId(), getParameters().getVmId())); setSucceeded(true); } }
private void removeNetworks() { final java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = networkDao.getAllForDataCenter(org.ovirt.engine.core.bll.storage.pool.RemoveStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (network.isExternal()) { for (org.ovirt.engine.core.common.businessentities.network.VmNic nic : vmNicDao.getAllForNetwork(network.getId())) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(nic, network).deallocateIfExternal(); } } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() { for (final org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile : profiles) { getCompensationContext().snapshotEntity(vnicProfile); org.ovirt.engine.core.bll.storage.pool.VnicProfileDao.remove(vnicProfile.getId()); } getCompensationContext().stateChanged(); return null; }
private void unplugFromExternalNetwork() { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { org.ovirt.engine.core.bll.network.ExternalNetworkManager.create(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); injectorRule.bind(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); when(providerDao.get(org.ovirt.engine.core.bll.network.external.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(provider); doReturn(providerProxyFactory).when(underTest).getProviderProxy(); when(providerProxyProxy.create(provider)).thenReturn(networkProviderProxy); }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndLeave) { if (vdsId == null) { vdsId = vdsId; } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndLeave) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageGroupId, newImageId); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndLelete) { prepareImage(storagePoolId, newImageGroupId, newImageGroupId, newImageId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newImageID, newImageGroupId, newImageId, vdsId); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.ImagesHandler.log.error("Failed to get qe-eguid from storage", e); } finally { if (shouldPrepareAndLeaf(storagePoolId, storageDomainID, vdsId); } return qosInfo; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public org.ovirt.engine.core.transaction.TransactionSupport.executeInNewTransaction(org.ovirt.engine.core.bll.network.dc.network.NetworkHelper.createVnicProfile(getNetwork())); } }); org.ovirt.engine.core.bll.network.dc.network.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); if (cmd!= null) { if (((cmd.getCommandStep())!= null) && ((cmd.getExecutionContext().getStep())!= null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn())!= null) { stepSubjectEntityDao.remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution!= null) { stepSubjectEntityDao.removeAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback())!= null)); } }
private void removeNetworkFromHosts(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.bll.context.CommandContext context, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = removeNetworkParametersBuilder.buildParameters(network, nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.host.HostSetupNetworksParametersBuilder.updateParametersSequencing(parameters); backend.runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, parameters, context); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }
public void deallocateIfExternal() { if (((getNetwork())!= null) && (getNetwork().isExternal())) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = providerDao.get(getNetwork().getProvidedBy().getProviderId()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy providerProxy = getProviderProxyFactory().create(provider); try { providerProxy.deallocate(nic); } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase removePortFailureEvent = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); removePortFailureEvent.addCustomValue("NicName", nic.getName()); removePortFailureEvent.addCustomValue("NicId", provider.getName()); auditLogDirector.log(removePortFailureEvent, AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED); } } }
protected boolean validatePMAgentPort() { java.lang.Integer port = getParameters().getAgent().getPort(); if (port == null) { if (port == null) { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> optionsMap = getParameters().getAgent().getOptionsMap(); if (optionsMap!= null) { port = org.apache.commons.lang.StringUtils.isNotEmpty(portStr); } else { return false; } } return true; }
private void addDnsConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { boolean dnsResolverConfigurationSupported = org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.DnsResolverConfigurationSupported, this.cluster.getCompatibilityVersion()); if (!dnsResolverConfigurationSupported) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServersOfNetworkAttachment = getNameServers(networkAttachment.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServersOfNetwork = getNameServers(network.getDnsResolverConfiguration()); java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameEngineDnsServers = getNameServers(reportedDnsResolverConfiguration); boolean engineDefineDnsConfiguration = (nameServersOfNetworkAttachment!= null)? org.ovirt.engine.core.common.businessentities.network.NameServerNameServer : getNameServers(nameServersOfHost, expectedNameServersOfNetwork); boolean inSync = (!(isDefaultRouteNetwork)) || (iface.isIpv4DefaultRoute()); java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> expectedNameServers = (nameServersOfNetworkAttachment!= null)? addressesAsString(expectedNameServers) : ""), (!(java.util.Objects.equals(nameServersOfHost, expectedNameServers) : ""), org.ovirt.engine.core.utils.DNSConfigurator.toString(nameServersOfHost, expectedNameServers); boolean inSync = (isDefaultRouteNetwork)? java.lang.Boolean.toString(isDefaultRouteNetwork) : ""; result.add(org.ovirt.engine.core.utils.Dao.DEFAULT_ROUTE, java.lang.Boolean.toString(isDefaultRouteNetwork)? java.lang.Boolean.TRUE : ") (isDefault
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformed(param.getAttachments(), param.getDetachments(), param.getUpdates()); org.ovirt.engine.core.bll.network.host.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }
org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> labeledNetworksToBeAdded, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToBeRemoved, java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.network.NetworkInterface>> updatedNetworks);
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bba-e96-e96c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484bc5eb-e4e-e96b66-e96b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70b70.0"); newProfile.setSshPublicKey("user4"); newProfile.setLoginName("user4"); newProfile.setLoginName("user4@javax.ws.rs.core.UserProfile>"); }
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain(org.ovirt.engine.core.utils.dbFacade.getDbUserDao().getByUsernameAndDomain(org.ovirt.engine.core.utils.EngineLocalUser.redhat.com.redhat.com.redhat.com.google.gwt.core.client.NonAdminUser nonAdminUser.redhat.com"); assertNotNull(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (response)); javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (response)); if (org.ovirt.engine.core.aaa.filters.FiltersHelper.isAuthenticated(req)) { chain.doFilter(request, response); } else { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> schemes = ((java.util.List<java.lang.String>) (req.getAttribute(FiltersHelper.Constants.REQUEST_SCHEMES_KEY))); if (schedes == null) { schemes = java.util.Collections.emptyList(); } java.util.List<java.lang.String> allSchemes = new java.util.HashSet<>(schedScheters); if ((additionalSchemes)!= null) { allSchemes.addAll(additionalSchemes); } for (java.lang.String scheme : allSchemes) { res.setHeader(FiltersHelper.HEADER_URLICATE, scheme); } if (req.getContextPath().endsWith("/api")) { req.getHeader(java.lang.String.format(ERROR_URL_FORMAT, defaultVersion, res); } else { res.sendError(HttpServletResponse.SC_UNAUTHORIZED); } } } }
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { for (java.lang.String paramName : java.util.Collections.list(filterConfig.getInitParameterNames())) { if (paramName.startsWith("scheme")) { additionalSchemes.add(filterConfig.getInitParameter(paramName)); } } defaultVersion = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_DEFAULT_VERSION"); }
public static boolean isBackedByHugepages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (((vm.getCustomProperties()) == null) || (vm.getCustomProperties().isEmpty())) { return false; } java.lang.String hugePage = org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePagesSize(vm); if (hugePage == null) { return false; } try { java.lang.Integer maxNumOfCpu = getCustomProperties().getCpuPasteSize(vm); return true; } catch (java.lang.NumberFormatException e) { return false; } }
public static java.util.Map<java.lang.Integer, java.lang.Integer> getHugePages(org.ovirt.engine.core.common.businessentities.VmBase vm) { if (!(org.ovirt.engine.core.common.utils.HugePagesUtils.isBackedByHugepages(vm))) { return java.util.Collections.emptyMap(); } int hugePageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePagesSize(vm)); int fullPages = (vm.getMemSizeMb()) / hugePageSize; int lastPages = java.lang.Math.min(1, ((vm.getMemSizeMb()) %hugePageSize)); return java.util.Collections.singletonMap(hugePagesSize, (fullPages + (fullPages + lastPage)); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).get(1024), is(1)); }
@org.junit.Test public void getHugePagesNoHugePagesDefined() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setMemSizeMb(1025); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).size(), is(0)); }
@org.junit.Test public void getHugePagesMemoryDoesNotFitIntoOne() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(10); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).size(), is(1)); assertThat(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(base).get(1024), is(2)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabPanelPresenter.class, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabVolumePerTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.DiskSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.uicommon.model.TabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.disk.SubTabDiskPerTabDiskPermissionPresenter.constants.diskPermissionSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.ErrataSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.ErrataListModelProvider<org.ovirt.engine.ui.uicommonweb.models.ErrataListModel, org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.Erratum>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabEngineErrorPopupView.constants.errataDetailsSubTabLabel(), 1); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pools.PoolSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pools.SubTabPoolPerTabPoolPerTabPanelPresenter.constants.poolPermissionSubTabLabel(), 2); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanel, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabVolumeGeoRepListModel.constants.volumeGeoRepSubTabLabel(), 4); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.StorageSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.uicommon.model.TabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabStoragePopupPresenter.storage.SubTabStoragePopupView.constants.storageTemplateBackupSubTabLabel(), 3); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.StorageSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.uicommon.model.TabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabStoragePerTabStoragePermissionPresenter.constants.storagePermissionSubTabLabel(), 13); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.storage.StorageSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabStorageSubTabPanelPresenter.class) { return new org.ovirt.engine.ui.common.uicommon.model.TabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabStorageView.constants.storageDRSubTabLabel(), 12); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.DataCenterDetailModelProvider<org.ovirt.engine.core.common.businessentities.StoragePool, org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.SubTabDataCenterPermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool>>() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.StoragePool> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.SubTabDataCenterPermissionListModel.constants.dataCenterPermissionSubTabLabel(), 5); } }); }
java.lang.String getPrefixedKey(java.lang.String key) { return ((org.ovirt.engine.ui.common.system.ClientStorageImpl.CLIENT_STORAGE_KEY_PREFIX) + "_") + key; }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.TemplateSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.TemplateSubTabPanelPresenter.class, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmTemplate>> modelProvider) { return new org.ovirt.engine.ui.common.uicommon.model.GroupedTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.template.SubTabTemplatePermissionPresenter.constants.templatePermissionSubTabLabel(), 5); }
private java.util.Map<java.lang.Integer, java.lang.Integer> substractMaps(java.util.Map<java.lang.Integer, java.lang.Integer> from, java.util.Map<java.lang.Integer, java.lang.Integer> amount) { java.util.Map<java.lang.Integer, java.lang.Integer> result = new java.util.HashMap<>(from); for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> subs : amount.entrySet()) { result.compute(subs.getKey(), (subs.getValue())); } return java.util.Collections.unmodifiableMap(result); }
public static java.util.Map<java.lang.Integer, java.lang.Integer> collectForHost(org.ovirt.engine.core.bll.scheduling.pending.PendingResourceManager manager, org.ovirt.engine.core.compat.Guid host) { java.util.Map<java.lang.Integer, java.lang.Integer> pageCount = new java.util.HashMap<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages resource : manager.pendingHostResources(host, org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.class)) { pageCount.compute(resource.getPageSize(), (hpsize, count) { result.compute(resource.getPageSize(), (resource.getCount())); } return java.util.Collections.unmodifiableMap(pageCount); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getHost(), result) == null? 0 : result.hashCode()); result = (prime * result) + ((pageSize) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : 1237); result = (prime * result) + ((lastIndex) == null? 0 : 1) + ((pages.size()) == 1) + ((size()) == 1) + 1) + 1)); result = (prime * result) + ((lastIndex) == null? 0 : 1; result = (prime * result) + ((lastIndex) == null? 0 : result) + ((lastIndex) == null? 0 : result.hashCode()); result = (prime * result) + ((pagesSize) == null? 0 : result) + ((pages.hashCode()); result) + ((pagesSize) == null? 0 : 1) + ((pagesSize.hashCode()); result) + ((pagesSize) == null? 0 : 1) + ((pagesSize) == null? 0 : 1237); result = (prime * result) + ((pages.hashCode()) == null? 0 : 1237); result = (prime * result) + ((pages) == null? 0 : 1237); result) + ((org.ovirt.engine.ui.uicommuicommuicommuicommuicommuicommuicommuicommand id) + ((org.ovirt.engine.core.common.businessentities.aaa.profiles) (result) == null) + ((org.ovirt.engine.core.common.businessentities.aaa.Profile) (result) (result) == null) result) {
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(org.ovirt.engine.core.utils.HugePagesUtils.isBackedByVugepages(vm.getStaticData()))) { return new java.util.ArrayList<java.lang.Integer>(); } java.util.Map<java.lang.Integer, java.lang.Integer> requiredPages = org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePages(vm.getStaticData()); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHosts = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = new java.util.ArrayList(hosts.size()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { java.util.Map<java.lang.Integer, java.lang.Integer> availablePages = substractMaps(prepareHugePagesMap(host), org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages.collectForHost(getPendingResourceManager(), host.getId())); if (!(requiredPages.getOrDefault(pg) { org.ovirt.engine.core.bll.scheduling.policyunits.HugePagesFilterPolicyUnit.log.debug("Host {} does not have enough free free free free free free free free free free free free free free free free free free free free free
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass())!= (o.getClass()))) { return false; } org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages that = ((org.ovirt.engine.core.bll.scheduling.pending.PendingHugePages) (o)); return ((pageSize) == (that.pageSize)) && (java.util.Objects.equals(this.getHost(), that.getHost())); }
private org.ovirt.engine.ui.common.widget.uicommon.UICoreCaseItem createSelectionDropDown(com.google.gwt.safehtml.shared.SafeHtml currentName) { org.ovirt.engine.ui.common.view.OvirtBrickDcannotListItem (-1) { org.ovirt.engine.ui.common.view.OvirtBrickDcannotListItem = new org.ovirt.engine.ui.common.view.OvirtBrickDreadCreduceCoresListItem(); org.ovirt.engine.ui.common.view.popup.ui.ClientWidget alternateButton = new org.ovirt.engine.ui.common.view.ovirt.engine.ui.common.view.OvirtBrickVirtIODbView.QUICK_SWITCH); org.ovirt.engine.ui.common.widget.uicommon.ui.popup.IoAncestors.OUCHANGE = new org.ovirt.engine.ui.common.widget.uicommon.OvirtBrickBase(); anchor.setIcon(org.ovirt.engine.ui.common.view.OvirtBrick.QUICK_SWITCH); org.ovirt.engine.ui.common.widget.uicommon.UICommand anchor = dropDown.getAnchor(); anchor.setText(currentName.asString()); anchor.getElement().getStyle().setFont().setFont(14, Unit.PX); anchor.setClickHandler(((popup.isVisible()) && (popup.isVisible())? org.ovirt.engine.ui.common.widget.uicommon.OvirtBrick.constants.notAvailable() : org.ovirt.engine.ui.common.view.popup.OvNC); dropDown.setWidth(((org.ovirt.engine.ui.common.widget.uicommon.Ovms) (drop))); dropDown.add(org.ovirt.engine.ui.common.uicommon.model.O); return dropDown; }
public void setCurrentSelectedName(com.google.gwt.safehtml.shared.SafeHtml name) { currentSelectedItemWidget = createSelectionDropDown(name); }
public void setCurrentProfileName(com.google.gwt.safehtml.shared.SafeHtml name);
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getName(T item) { java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.VmNameable) { result = ((org.ovirt.engine.core.common.businessentities.VmNameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(result); }
private java.util.List<T> getItemsAsList(M searchableListModel) { return new java.util.ArrayList<T>(); }
public void previousEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int currentIndex = itemsAsList.indexOf(entity); if (newIndex < 0) { if (((org.ovirt.engine.ui.uicommonweb.models.ListModel.getSuggestPreviousNextPreviousPageCommand())!= null) && (searchableListModel.getSearchPreviousPageCommand().getIsExecutionAllowed())) { if (newIndex < 0) { if ((org.ovirt.engine.ui.uicommonweb.models.SearchListModel<T>Items.size()) > 0) { org.ovirt.engine.ui.uicommonweb.models.ListModel> items = ((java.util.List<T>) (itemsListModel.getSearchPreviousSelectedItem())); currentListModel.executeCommand(itemsAsListModel.getSearchPreviousPageCommand()); updateToLastRow(itemsAsListModel.get(newIndex), true); } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } } }
public void nextEntity() { M searchableListModel = listModelProvider.getModel(); T entity = ((T) (searchableListModel.getSelectedItem())); java.util.List<T> itemsAsList = getItemsAsList(searchableListModel); int currentIndex = itemsAsList.indexOf(entity); int currentIndex = itemsAsList.indexOf(item); if (newIndex >= (itemsAsList.size())) { if (newIndex >= (itemsAsList.size())) { if ((searchableListModel.getSearchNextNextPageCommand().getIsExecutionAllowed()) && (itemsAsListModel.getSearchNextPageCommand().getIsAvailable())) { searchableListModel.executeCommand(itemsAsList.get(newIndex), true); } } else { selectionModel.setSelected(itemsAsList.get(newIndex), true); } }
@java.lang.Override public void modelSelected(T model) { modelSelectedItem.setSelected(model, true); }
private void updateSelectedRows() { if (updateToFirstRow) { updateToFirstRow = false; java.util.Collection<T> items = listModelProvider.getModel().getItems(); if (items instanceof java.util.List) { final java.util.List<T> items = ((java.util.List<T>) (items)); if (!(items instanceof java.util.List.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this); selectionModelProvider.getModel().setSelectedItem(firstItem, true); listModelProvider.getModel().setSelectedItem(firstItem, true); listModelProvider.getModel().setSelectedItem(firstItem, true); listModelProvider.getModel().setCurrentSelectedName(getView().getName(firstItem)); } } } else if (updateToLastRow) { updateToLastRow = false; java.util.Collection<T> itemsAsList = ((java.util.List<T>) (items)); if (!(itemsAsList.isEmpty())) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(newItem, true); } } } if (((listModelProvider.getModel().getSelectedItem())!= null) && (showSelectedName)) { org.ovirt.engine.ui.common.presenter.OvirtBrickModelProvider.getView().setCurrentSelectedName(lastItem); getView().setCurrentSelectedName(getView().getName(lastItem)); } }
@java.lang.Override protected void onBind() { super.onBind(); M listModel = listModelProvider.getModel(); listModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void onSelectedRows(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, args) { org.ovirt.engine.ui.uicommonweb.models.ListModel model = listModelProvider.getModel(); listModel.getSelectedItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.EventListener() { @java.lang.Override public void onSuccess(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, sender, args) { updateSelectedRows(model, args) { updateSelectedRows(); } }); }
private void createPopover(org.ovirt.engine.ui.common.widget.tooltip.Anchor anchor) { popup = new org.ovirt.engine.ui.common.widget.tooltip.OvirtPopup(anchor); popover.setBracement(constants.MANUAL); popup.setPlacement(constants.MANUAL); popup.setPlacement(constants.MANAGEMENT); if ((searchBox) == null) { searchBox.setContainer(constants.searchPanel()); } else if ((searchBox) == null) { searchBox.addModel(org.ovirt.engine.ui.common.widget.tooltip.VmPopupWidget.constants.fromValueBOTH_CLUSTOM); } }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (content!= null) { actionPanel.setSearchPanel(content); actionPanel.setVisible(true); } else if (slot == null) { addTab(content); } } else if (slot == null) { addInSlot(content); } else { super.setInSlot(slot, content); } }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler((event) ->!(event) -> { com.google.gwt.dom.client.NativeEvent.addNativePreviewHandler((event) -> ((BREKEYDOWN)!= null) { if ((event.getTypeInt()) == (org.ovirt.engine.core.common.utils.NativeEvent.getNativeEvent())) { if ((event.getTypeInt()) == (nativeEvent.getCharCode()) == (nativeEvent.getKeyCode())) { nativeEvent.preventDefault(); nativeEvent.preventDefault(); nativeEvent.preventDefault(); nativeEvent.preventDefault(); nativeEvent.preventDefault(); nativeEvent.stopPropagation(); } } else if ((!(this.breadCreduceSearchVisible())) && ((nativeEvent.getKeyCode()) == keyCodes.KEY_DOWN)) { nativeEvent.preventDefault(); nativeEvent.preventDefault(); event.preventDefault(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.stopPropagation(); event.cancel(); } } }
public void buildCredb(java.lang.String modelTitle, java.lang.String modelHref) {BCbs.clear(); b.clear();BCItem.add(new org.ovirt.engine.ui.common.utils.Anchor.SimpleListItem(primaryLabel)); }
public boolean hasActionPanelPresenterWidget() { return (getActionPanelPresenterWidget())!= null; }
@java.lang.Override protected void onReveal() { super.onReveal(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.setSubTabPanelVisible(false); getBreadCredsubTab(); getTable().resetScrollPosition(); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setBreadCredb(getBreadCredb()); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (content!= null) { if (content!= null) { if (content!= null) { actionPanel.setSearchPanel(content); } else { actionPanel.setSearchPanel(null); } } } else if (slot == null) { actionPanel = ((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.TYPE_SetActionPanel)) && (content!= null)) { actionSearchPanel.add(content); this.actionPanel = ((org.ovirt.engine.ui.common.presenter.ActionPanelPresenterWidget<?>) (content)); if ((searchPanel)!= null) { actionPanel.setSearchPanel(((com.google.gwt.user.client.PresenterWidget<?>) (searchPanel))); } addResultPanel(actionPanel); } } else { super.setInSlot(slot, content); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList = pluginActionButtonList; }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPresenter.TYPE_SetMainTabPanelContent)) { actionPanel.add(content); } else if (slot == (org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel)) { actionPanel.add(content); } else { super.setInSlot(content); } }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable())!= null)? getTable().getSelectionModel() : null; if (tableSelectionModel!= null) { registerHandler(tableSelectionModel.addSelectionChangeHandler((event) -> { updateDetailModelSelection(); } } initializeHandlers(); getSelectedMainItems().registerListener(this); itemChanged(getSelectedMainItems().getSelectedItem()); setInSlot(org.ovirt.engine.ui.common.presenter.AbstractSubTabPresenter.TYPE_SetActionPanel, actionPanel); }
@java.lang.Override public void setInSlot(java.lang.Object slot, com.google.gwt.user.client.ui.IsWidget content) { if (slot == (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPresenter.TYPE_SetMainTabPanelContent)) { container.insert(content, 0); } else if (slot == null) { container.insert(content, 0); } }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler((event) -> fireTableSelectionChangeHandler(getSelectedItems()); fireTableSelectionChangeEvent(); })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), (event) { applySearchString(event.getSearchString()); }
@java.lang.Override protected void initializeButtons() { org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.action.PermissionActionPanel>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.addPermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getAddCommand(); } }); org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.addActionButton(new org.ovirt.engine.ui.common.widget.action.UiCommandButtonDefinition<org.ovirt.engine.core.common.businessentities.Permission>(org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.getSharedEventBus(), org.ovirt.engine.ui.common.widget.action.PermissionActionPanelPresenter.constants.removePermission()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getModel().getRemoveCommand(); } }); }
@org.junit.Test public void testUpdate() { existingDomain.setStorageName("UpdatedName"); existingDomain.setWipeAfterDelete(true); existingDomain.setCriticalSpaceActionBlocker(4); existingDomain.setCriticalSpaceActionBlocker(FixturesTool.LUN_ID1); existingDomain.setUseForBackup(true); dao.update(existingDomain); org.ovirt.engine.core.common.businessentities.StorageDomainStatic after = dao.get(existingDomain.getId()); assertEquals(after, existingDomain); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getStorageDomainDynamicDao(); diskImageDao = dbFacade.getDiskImageDao(); diskImageDao = dbFacade.getDiskImageDao(); imageDao = dbFacade.getImageDao(); existingDomain = dao.get(new org.ovirt.engine.core.compat.Guid("72e3a666-89e1-a7-f7548004a9ab")); newStaticDomain = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); newStaticDomain.setStorageName("NewStorageDomain"); newStaticDomain.setStorage("NewStorageDomain"); newStaticDomain.setStorageFormat(StorageFormatType.V1); newStaticDomain.setWipeAfterDelete(true); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setCriticalSpaceActionBlocker(9); newStaticDomain.setCriticalSpaceActionBlocker(FixturesTool.LUN_ID2); newStaticDomain.setVgMetadataDevice(FixturesTool.DISK_ID2); newStaticDomain.setUseForBackup(FixturesTool.USE_FOR_BACKUP_FLAGUP_FLAGUP_FLAGS_FLAG); }
public void setUseForBackup(boolean useForBackup) { getStorageStaticData().setUseForBackup(useForBackup); }
public boolean getUseForBackup() { return getStorageStaticData().getUseForBackup(); }
private static org.ovirt.engine.core.common.businessentities.StorageDomainStatic cloneStorageDomainStatic(org.ovirt.engine.core.common.businessentities.StorageDomainStatic instance) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic obj = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); obj.setConnection(instance.getConnection()); obj.setId(instance.getId()); obj.setStorageDomainType(instance.getStorage()); obj.setStorageType(instance.getStorageDomainType()); obj.setStorageType(instance.getStorageType()); obj.setStorageName(instance.getStorageName()); obj.setFirstMetadataDevice(instance.getFirstMetadataDevice()); obj.setVgMetadataDevice(instance.getVgMetadataDevice()); obj.setComment(instance.getComment()); obj.setComment(instance.getComment()); obj.setComment(instance.getComment()); obj.setComment(instance.getComment()); obj.setWarningLowSpaceIndicator(instance.isDisciftAfterDelete()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); obj.setCriticalSpaceActionBlocker(instance.getCriticalSpaceActionBlocker()); obj.setUseForBackup(instance.getUseForBackup()); return obj; }
private void assertGetResult(org.ovirt.engine.core.common.businessentities.StorageDomain result) { assertNotNull(result); assertEquals(existingDomain, result); assertEquals("Expected committed disk size 8, result.getCommittedDiskSize()); assertEquals("Expected disk size 4, result.getActualImagesSize()); assertEquals("Wrong a metadata device device device", FixturesTool.LUN_ID_OF_DOMAIN_VG_METADATA, result.getVgmtMetadataDevice()); assertEquals("Wrong storage domain", FixturesTool.LUN_ID_OF_DOMAIN_VG_VG_METADATA, result.getVgmtMetadataDevice()); assertEquals("Wrong backup mode", FixturesTool.USE_FOR_BACKUP_FLAGS_FLAG, result.getStorageDomainSharedStatus()); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain) { return getCustomMapSqlParameterSource().addValue("id", domain.getId()).addValue("storage", domain.getStorageName()).addValue("storage_description", domain.getStorageName()).addValue("storage_description", domain.getDescription()).addValue("storage_type", domain.getComment()).addValue("storage_domain_type", domain.getStorageType()).addValue("storage_domain_type", domain.getStorageFormat()).addValue("last_time_used_as_master", domain.getLastTimeUsedAsMaster()).addValue("wipe_delete", domain.getWipeAfterDelete()).addValue("wipe_delete", domain.isDiscardsAfterDelete()).addValue("first_metadata", domain.getFirstMetadataDevice()).addValue("hw_metadata", domain.getVgmtDevice()).addValue("hw_metadata", domain.getVgmtDevice()).addValue("hw_memory_indicator", domain.getCriticalSpaceActionBlocker()).addValue("use_space_action_cluster_id", domain.getUseForBackup()); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storageFormat, storageFormat, storageFormat, storageFormat, storageFormat, storageType, storageType, description, sanState, discardAfterDelete, discardAfterDelete, discardAfterDelete, dataCenterId, warningLowSpaceActionBlocker, useForBackup); }
public void setUseForBackup(boolean useForBackup) { this.useForBackup = useForBackup; }
public java.lang.Boolean getUseForBackup() { return useForBackup; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.StorageDomainStatic)) { return false; } org.ovirt.engine.core.common.businessentities.StorageDomainStatic other = ((org.ovirt.engine.core.common.businessentities.StorageDomainStatic) (obj)); return (((((((((((((((java.util.Objects.equals(id, other.id)) && ((autoRecoverable) == (other.autoRecoverable))) && (java.util.Objects.equals(connection, other.connection))) && (java.util.Objects.equals(storage, other.storageFormat))) && (java.util.Objects.equals(storage, other.storageFormat))) && (java.util.Objects.equals(storage, other.storageFormat))) && ((storagePoolType) == (other.storageType))) && ((sanState) == (other.sanState))) && ((sanState) == (other.sanState))) && ((sanState) == (other.sanState))) && (java.util.Objects.equals(getusageLowSpaceIndicator))) && (java.util.Objects.equals(getusageLowSpaceIndicator(), other.gMetadataDevice))) && (java.util.Objects.equals(usageLowSpaceIndicator))) && (java.util.Objects.equals(useForBackup, other.usage))) && (java.util.Objects.equals(useForBackup, other.usageInfo))) && (java.util.Objects.equals(useForBackup, other.usageInfo))) && (java.util.Objects.equals(useForBackup, other.usageInfo))) && (java.util.Objects.equals(useForBackup, other.usage)); }
private boolean isFeatureSupportedAsAdditionalFeature(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String featureName) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addtionalFeaturesSupported = clusterFeatureDao.getSupportedFeaturesByClusterId(clusterId); for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature : addtionalFeaturesSupported) { if (supportedFeature.getFeature().getName().equalsIgnoreCase(featureName)) { return supportedFeature.isEnabled(); } } return false; }
@java.lang.Override public org.ovirt.engine.api.model.ServiceTreeNode next() { currentPathSegment = pathIterator.next(); if (isID(currentPathSegment, node)) { node = node.getSubService("{id}"); } else if (node.containsSubService(currentPathSegment)) { node = node.getSubService(currentPathSegment); } else { throw new java.lang.IllegalArgumentException((("sement '" + (currentPathSegment)) + "' of path does not exist")); } return node; }
public org.ovirt.engine.api.restapi.resource.BackendResource locateResource(java.lang.Stringhref) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.security.NoSuchMethodException, java.lang.SecurityException { href = removePrefix(href); org.ovirt.engine.api.rsdl.ServiceTreeCearcher search = new org.ovirt.engine.api.rsdl.ServiceTreeCrawl(java.util.Arrays.asList(href.split("/"))); org.ovirt.engine.api.rsdl.ServiceTree currhat.getBackendResource(java.util.Arrays.asList(node.getGetter())); org.ovirt.engine.api.rsdl.Service tree = null; while (crawler.hasNext()) { java.lang.reflect.Method method = resource.next(); if (node.isCollection()) { java.lang.reflect.Method method = resource.getClass().getMethod(node.getGetter()); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource.getGetter()))); resource = ((org.ovirt.engine.api.restapi.resource.BaseBackendResource) (method.invoke(resource.getGetter()))); } else { java.lang.reflect.Method method = resource.getClass().getMethod(node.getCurrentPathSegment()))); } } } return resource; }
org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlRpc getVmLeaseInfo(java.lang.String leaseUUID, java.lang.String sdUUID);
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlRpcListReturnForXmlRpcList(java.lang.String leaseUUID, java.lang.String sdUUID) { java.util.Map<java.lang.String, java.lang.Object> leaseDict = new java.util.HashMap<>(); leaseDict.put("lease_id", leaseUUID); leaseDict.put("sd_id", sdUUID); org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap request = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.DomainXmlRpc(this.client, request); }
@java.lang.Override public java.lang.Object getReturnValue() { return domainXmlRpcListReturn; }
@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnStatus() { return domainXmlRpcListReturn.getStatus(); }
@java.lang.Override protected void executeIrsBrokerCommand() { domainXmlListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getIrsProxy().getVmLeaseInfo(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getLeaseId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.getParameters().getStorageDomainId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmLeaseInfoVDSCommand.proceedProxyReturnValue(); }
public static void cleanupSsoSession(org.ovirt.engine.core.utils.SsoContext ssoContext, org.ovirt.engine.core.utils.SsoSession ssoSession, java.util.Set<java.lang.String> associateClientIds) { try { ssoContext.removeSsoSession(ssoSession.getAccessToken()); javax.servlet.http.HttpSession existingSession = ssoSession.getHttpSession(); if (existingSession == null) { org.ovirt.engine.core.utils.TokenCleanupUtils.log.debug("The existing session found for token: {}, cannot invalidating session", ssoSession.getAccessToken()); } else { org.ovirt.engine.core.sso.utils.TokenCleanupUtils.log.debug("Token found for token: {}, invalidating session sso: {}, invalidating session", ssoSession.getAccessToken()); existingSession.invalidate(); } org.ovirt.engine.core.sso.utils.TokenCleanupUtils.invokeAuthout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.invokeAuthout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.invokeAuthout(ssoContext, ssoSession); org.ovirt.engine.core.sso.utils.SsoUtils.log.debug("Failed to cleanup SsoSession: {}", ex.getMessage()); org.ovirt.engine.core.utils.Serialization.log.debug("Exception", ex); } }
public static void setNetworkVdsmName(org.ovirt.engine.core.common.businessentities.network.Network network) { java.lang.String networkName = network.getName(); org.ovirt.engine.core.compat.Guid networkId = network.getId(); if (((networkName.length()) <= (org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH)) || (networkId == null)) { network.setVdsmName(networkName); } network.setVdsmName(networkId.toString().replaceAll("[^a-zA-Z0-9]+", "").substring(0, ((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH) - 2))))); }
public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this.getLabel()).append("label", getLabel()).append("priority", groupTitle=").append(getPriority()).append("groupPriority", groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").append(groupPriority=").toString()).append("}"); }
@java.lang.Override public com.google.gwtplatform.mvp.client.Tab addTab(com.google.gwtplatform.user.client.TabData tabData, java.lang.String historyToken) { com.google.gwtplatform.mvp.client.TabData ret = addTabImpl(tabData, historyToken); allTabs.put(tabData, historyToken); return tab; }
@java.lang.Override public com.gwtplatform.mvp.client.Tab addTabImpl(com.google.gwt.event.dom.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); if (tabData instanceof org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) { menuLayout.addMenuItem(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData))); newTab.setTargetHistoryToken(historyToken); newTab.setId(((TabDefinition.TAB_ID_PREFIX) + historyToken)); newTab.setText(tabData.getLabel()); addTabDefinition(newTab, menuLayout.getMenuIndex(((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); } else { throw new java.lang.RuntimeException("The GroupedTabData } updateTabData(newTabHistoryToken())!= null? ((org.ovirt.engine.ui.common.uicommon.model.GroupedTabData) (tabData)))); }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractSubTabPanelPresenter.getTabVisibleEventBus().addHandler(org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.getType(), (event.getTabData(), event.isTabVisible()); }
@java.lang.Override public com.google.gwtplatform.mvp.client.TabUpdateTabImpl addTabImpl(com.google.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken) { org.ovirt.engine.ui.common.widget.tab.TabDefinition newTab = createNewTab(tabData); newTab.setTargetHistoryToken(historyToken); newTab.setText(tabData.getLabel()); int index = tabLayout.addGroupedTabData(tabData); addTabDefinition(newTab, index); updateTab(newTab, index); updateTab(newTab); return newTab; }
@java.lang.Override public void setTabVisible(com.google.gwtplatform.mvp.client.TabData tabData, boolean visible) { getTabPanel().getTabWidget(tabData).asWidget().setVisible(visible); }
public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(ev, sender, args) { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity!= null) { onDetailModelEntityChange(entity); } }); modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.common.utils.Scheduler.get().scheduleDeferred(this, sender, args) { if ((modelProvider.getModel().getProgress())!= null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(this, event.getTable().getSelectedItem().getLoading()); } } } else if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.common.presenter.D detailModel = modelProvider.getModel(); org.ovirt.engine.ui.common.presenter.SetTabVisibleEvent.fire(this, resolveTabData(), detailModel.getIsAvailable()); } }
protected abstract com.gwtplatform.mvp.client.TabAdditionalImpl getTabImpl(com.google.gwtplatform.user.client.TabData tabData, java.lang.String historyToken);
private void initSelectedSpiceImpl() { org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel spiceModel = model.getVmConsoles().getConsoleModel(org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel.class); if (spiceModel == null) { return; } spiceModel.initConsole(); spiceModel.initConsole(); }
@java.lang.Override protected void executeVdsBrokerCommand() { buildVmData(); org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.log.info("Initializing {} createInfo"); if (((boolean) (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML)) && ((org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vm.getCompatibilityVersion().getValue())))) { org.ovirt.engine.core.vdsbroker.Builder builder = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.getVds().getId(), getRunOncePayload(), org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettEEDY_VM); java.lang.String libvirtXml = builder.build(); java.lang.String formattedLibvirtXml = builder.build(); java.lang.String formattedLibvirtXml = builder.build(); java.lang.String formattedLibvirtXml = org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerVDSCommand.prettlThreadsBuilder.pretttl(); if (prettyLibvirtXml!= null) { org.ovirt.engine.core.vdsbroker.vdsbroker.CreateBrokerObjectsBuilder.log.info("{} {} libvirtXml: {}", libvirtXml); } createInfo.put("xml", libvirtXml); } vmReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vm, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vm.getDynamicData(), vm, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder
@org.ovirt.engine.ui.common.widget.table.cell.Template("<span> hidden; text='{0}</span>") + (("{1}</span>") + (("{1}</div id=\"{2}</div>") + (("</div>") + "</div></div>") + (com.google.gwt.safehtml.shared.SafeHtml>") com.google.gwt.safehtml.shared.SafeHtml containerAndLink(java.lang.String cellStyle, java.lang.String linkId, com.google.gwt.safehtml.shared.SafeHtml text);
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value!= null) { com.google.gwt.safehtml.shared.SafeHtml safeValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(getStyleClass(id), id, safeValue)); } }
@org.ovirt.api.metamodel.annotations.InputDetail default input() { mandatory(cluster.name()); org.ovirt.engine.api.metamodel.annotations.InputDetail default : mandatory(cluster).unless(cluster().dataCenter().id()), mandatory(cluster).append()); optional(cluster.cpu().image_idarchitecture()); optional(cluster.cpu().image_architecture()); optional(cluster().cpu().architecture()); optional(cluster().display().type()); optional(cluster().display().display().proxy()); optional(cluster().errorHandling().enableIfConnectivityBroken().enableIfSdActive().enabled()); optional(cluster().errorsHandling().enableIfSdActive().enabled()); optional(cluster().scheduleHandling().skipIfSdActive().enableIfSdActive().enabled()); optional(cluster().scheduleOverCommit(clusterPolicy); optional(cluster().scheduleInternalMigration()); optional(cluster().masterPolicyRequired()); optional(cluster().masterPolicy.masterManagement()); optional(cluster().masterPolicy.masterManagement()); optional(cluster().masterPolicy.master().trim().transparentHugePages().transparentHugePages().transparentHugePages().enabled()); optional(cluster().tunnelMigration()); optional(cluster().tunnelMigration()); optional(cluster().tunnelMigration()); optional(cluster().tunnelMigration()); optional(cluster().tunnelMigration()); org.ovirt.engine.core.bll.validator.network.AttachmentPolicyFactory or (clusterPolicy.getClusterPolicy().id()), java.util.Arrays.asList(clusterPolicy.id()), optional(clusterPolicy.getClusterPolicy().name())); }
@java.lang.Override public void onLoad() { super.onLoad(); keyHandler = com.google.gwt.user.client.Event.addNativePreviewHandler((event) ->!(event) -> { com.google.gwt.dom.client.NativeEvent.addNativePreviewHandler((event) -> ((BREKEYDOWN)!= null) { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((event.getTypeInt()) == (org.ovirt.engine.core.common.businessentities.ABLED)!= null) { if (!(nativeEvent.getCtrlKey())) { nativeEvent.preventDefault(); nativeEvent.preventDefault(); nativeEvent.stopPropagation(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.stopPropagation(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.stopPropagation(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.preventDefault(); event.cancel(); event.preventDefault(); event.cancel(); event.preventDefault(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); event.cancel(); } } if (((eventPanel)!= null) && ((mainActionPanel.getWidgetCount()) == 0)) { mainCrawlBrick.add(actionPanel); } } if (((actionPanel)!= null) && ((mainActionPanel.getWidgetCount()) == 0)) { mainActionPanel.add(actionPanel); } if (((actionPanel)!= null) && ((mainActionPanel.getWidgetCount()) == 0)) { mainActionPanel.add(actionPanel); } }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, java.lang.Boolean forceRefreshed) { org.apache.commons.lang.mutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, (k) -> new org.apache.commons.lang.mutableLong((-1))); if (shouldInvalidateCache(lastRefreshed.longValue())) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(lastRefreshed.longValue())); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } }
@java.lang.Override public int compare(java.lang.Comparable a, java.lang.Comparable b) { if (a == null) { return null? 0 : null? 0 : null? 0 : null? 0 : null? 0 : null? 0 : null? 0 : null? 0 : null? -1 : 1; } else if (b == null) { return null? 0 : -1; } else { return a.compareTo(b); } }
private void updateWarningWarning(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks) { java.util.List<java.lang.String> liveMigrateDisks = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : disks) { if (diskModel.isPluggedToRunningVm()) { liveMigrateDisks.add(diskModel.getAlias().getEntity()); } } if (!(liveMigrateDisks.isEmpty())) { setMessage(messages.moveDisksWhileVmRunning(liveMigrateDisks.iterator().next()); } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model) { driver.edit(model); if ((model.isShowMemorySnapshotWarning()) && (!(model.isShowPartialSnapshotWarning()))) { com.google.gwt.dom.client.Style dialogStyle = getParent().getParent().getParent().getElement().getStyle().getStyle(); dialogStyle.setWidth(350, Style.PX); dialogStyle.setHeight(255, style.Unit.PX); } partialSnapshotWarningPanel.setVisible(model.isShowPartialSnapshotWarning()); memoryWarningPanel.setVisible(false); } partialSnapshotWarningPanel.setVisible(((model.isShowPartiallySnapshotWarning())!= null? model.getVmSnapshotContainsMemoryWarning() : messageLabel.getText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotContainsMemoryIncompatibleCluster(model.getOldClusterVersionOfSnapshotWithMemory().toString())); model.getMemory().setEntity(false); }izontalSeparator.setVisible(((model.isShowPartialSnapshotWarning()) && (model.isShowMemorySnapshotWarning()))); vmDisksLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmSnapshotPreviewPopupWidget.messages.snapshotDisksLabel(model.getVmDisks().size(), org.ovirt.engine.ui.uicommonweb.Linq.getDiskAliases(model.getDisks().size()), snapshotDisksLabel.getText(), org.ovirt.engine.ui.uicommonweb.Linq.messages.snapshotDisksLabel(model.getDisks().size()), snapshotDisksLabel.getText(), null)); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(diskImage.getStoragesNames().stream().stream().stream().stream().translate(java.util.stream.Collectors.separator.joining(java.util.stream.Collectors.separator.joining("")), ")); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String hostNames = getHostNames(label); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return hostNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label label) { java.lang.String vmNames = getVmNames(label); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return vmNames; }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.storage.Disk object) { if ((object.getNumberOfVms()) < 2) { return null; } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(object.getVmNames().stream().stream().collect(java.util.stream.Collectors.fromString(java.util.stream.Collectors.singleton.toString(java.util.stream.Collectors.toString())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String vmNames = getVmNames(groupName); if (vmNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.SubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return vmNames; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = getHostNames(group); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
private void volumeSelectedItemChanged() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumes().getSelectedItem(); java.lang.Boolean useLinkGlusterVolume = getLinkGlusterVolume().getEntity(); java.lang.String mountOptions = ""; if ((volume == null) || (!useLinkGlusterVolume)) { return; } java.util.Set<java.lang.String> addressSet = new java.util.LinkedHashSet<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { addressSet.add((brick.getNetworkId())!= null)? brick.getNetworkAddress() : null)); } java.util.List<java.lang.String> addressSet = new java.util.ArrayList<>(); addressSet.addAll(addressSet); if ((addressSet.size()) >= 1) { addressList.remove(0); } if ((addressList.size()) > 0) { mountOptions = ((org.ovirt.engine.core.common.constants.StorageConstants.GLUSTER_BACKUP_SERVERS_MNT_OPTION) + "=") + (addressList.stream().getBrickName().collect(java.util.stream.Collectors.joining(":"))); } getMountOptions().setEntity(mountOptions); }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatedMac = java.util.Objects.toString(bond.getAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.hosts.BondPanel.messages.bondAdAggregatedMac(adAggregatorId)); for (org.ovirt.engine.ui.webadmin.widget.hosts.HostInterface nic : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicName = java.util.Objects.toString(nic.getInterface().getAdAggregatedAdAggregatorId(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.BondPanel.messages.bondSlaveAdAggregatedAdAggregatorId(nicName, nicName)); } return bondProperties.stream().collect(java.util.stream.Collectors.Collectors.joining(("\n")); }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(disks.get(java.util.Collections.singletonList(java.util.Collections.singletonList(getDiskName()))); }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> getQoutaColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.storage.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr!= null) { value = quotaNamesArr.stream().collect(java.util.stream.CollectableComparator.join(java.util.stream.Collectors.joining(")); } } return value; } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private void showRemoveTemplateWithDependentVMConfirmationWindow(java.util.Map<java.lang.String, java.util.List<java.lang.String>> problematicVmNames) { java.util.List<java.lang.String> missingTemplatesFromVms = problematicVmNames.entrySet().stream().map(((java.util.List<java.lang.String>>) (problem.getValue().getValue()))).getValue().stream().map(java.util.stream.Collectors.templatesWithDependentsVMs(e.getKey(), e.getValue().getMessage()).collect(java.util.stream.Collectors.joining(java.util.stream.Collectors.removeBackedUpTemplatesWithDependentsVMTitle)); confirmModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.removeBackedUpTemplatesWithDependentsVMTitle()); confirmModel.setHelpTag(HelpTag.remove_backed_template); confirmModel.setHashName("remove_backed_template"); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.models.storage.TemplateBackupModel.constants.theFollowingTemplatesHaveDependentVmsBackupOnExportDomainMsg()); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("RemoveVmTemplates", this)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("RemoveVmTemplates", this)); }
public static java.lang.String getDiskLabelList(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { if (disks.isEmpty()) { return null; } final java.util.List<java.lang.String> labels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { labels.add(disk.getDiskAlias()); } return labels.stream().toString(); }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan())!= null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyy-MM-MM-dd")); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(diskImage.getDiskProfileNames().stream().stream().collect(java.util.stream.Collectors.joining("Unsupported")); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk object) { java.lang.String value = ""; if ((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (object)); java.util.ArrayList<java.lang.String> quotaNamesArr = diskImage.getQuotaNames(); if (quotaNamesArr!= null) { value = quotaNamesArr.stream().collect(java.util.stream.Collectors.joining(" ")); } } return value; }
private void updateCurrentValue(final java.util.List<T> value, boolean fireEvents) { lastValues = value; java.util.List<java.lang.String> renderedValues = new java.util.ArrayList<>(); for (T val : value) { renderedValues.add(org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.getRenderer().render(java.util.Arrays.asList(val))); } java.lang.String renderedValue = renderedValues.stream().collect(java.util.stream.Collectors.joining(","))); if (org.ovirt.engine.ui.common.widget.editor.StringUtils.isEmpty(renderedValue)) { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } else { renderedValue = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(renderedValue); } ((com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(selectedValue))).setInnerHTML(renderedValue); dropdownButton.setTitle(renderedValue); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems); lastValues = null; com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, selectedItems); lastValues = null; } else { lastValues = null; } }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileNames = ((org.ovirt.engine.core.common.businessentities.NameableDiskProfileEntity) (diskProfileEntity.getName())); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileNames = diskProfileNames.iterator().collect(java.util.Collections.singletonList(qosName, diskProfileNamesAsString)); } java.lang.String diskProfileNames = diskProfileNames.stream.filter(numberOfTimesUsedByData.getName(), null); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByTimesUsedByDiskProfiles)); setItems(list); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); result.setSuccess(false); result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().notSupportedReasonInvalidReason()); }
@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotCopyDisks(disks.stream().toString(), ((java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>) (getDisk().getVm().getId()))); }
private java.lang.String getOuterClassNames() { java.util.Set<java.lang.String> classNames = new java.util.LinkedHashSet<>(); classNames.add(extraTooltipClassNames); return new java.util.LinkedList<java.util.List<java.util.List<org.ovirt.engine.ui.common.widget.tooltip.TooltipConfig.Defaults>() { @java.lang.Override public java.lang.String call() { return java.util.Collections.singletonMap.collect(java.util.List<java.lang.String, java.lang.String>emptyList()); } }; }
private void updateDisksWarningByImageStatus(java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> disks, org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus) { java.util.ArrayList<java.lang.String> disksAliases = getDisksAliasesByImageStatus(disks, imageStatus); if (!(disksAliases.isEmpty())) { generalWarningMessage.setText(org.ovirt.engine.ui.common.widget.uicommon.popup.AbstractVmPopupWidget.messages.disksStatusWarning(org.ovirt.engine.ui.uicompat.EnumTranslator.getInstance().translate(imageStatus), disksAliases.stream().stream().stream().collect(java.util.Enum.getInstance().translate(java.util.Enum.getInstance().translate(imageStatus), disksAliases.collect(java.util.Arrays.asList(java.util.Enum.asList.asList(getEntityStatus())), (((java.util.List<org.ovirt.engine.ui.uicompat.external.String>) (getMessages().contains(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(imageStatus.getEntity())))); } }
private void updateProblematicDisk(org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = diskModel.getStorageDomain().getSelectedItem(); if (storageDomain == null) { return; } java.lang.String diskAlias = diskModel.getDisk().getDiskAlias(); if (storageDomain.getStorageType().isBlockDomain()) { if (!(problematicDisksForWarning.contains(diskAlias))) { problematicDisksForWarning.add(diskAlias); } } else { problematicDisksForWarning.remove(diskAlias); } if (!(problematicDisksForWarning.isEmpty())) { getDynamicWarning().setEntity(messages.moveDisksPreallocatedWarning(java.util.stream.Collectors.joining(problematicDisksForWarning.stream().collect(java.util.stream.Collectors.Collectors.joining(problematicDisksForWarning.stream())); getDynamicWarning().setIsAvailable(true); } else { getDynamicWarning().setIsAvailable(false); } }
public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg!= null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg.getString(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.replace('.', '_'); } java.lang.String errorsString = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = java.util.Arrays.asList(splitted); } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } } }
private java.lang.String composeExistingVmsWarningMessage(java.util.List<T> existingVms) { final java.util.List<java.lang.String> list = new java.util.ArrayList<>(); for (T t : existingVms) { list.add(extractNameFromEntity(t)); } return list.stream().collect(java.util.Collections.singletonList(getName())); }
public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return names.contains(java.util.Collections.emptyList()); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); java.util.List selectedItem = ((java.util.List) (getSelectedItem())); if (selectedItem!= null) { java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<>(); for (java.lang.Object item : selectedItem) { org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel i = ((org.ovirt.engine.ui.uicommonweb.models.autocomplete.SuggestItemPartModel) (item)); items.add(i.getPartString()); } java.lang.String searchString = items.substring(getPrefix().length()); } }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return object.getDnsServers().stream().stream().collect(java.util.stream.Collectors.joining("")); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId!= null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (moveMacs.migrate(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext())) { clusterDao.update(cluster); } } } }
public boolean migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetCluster); java.util.Objects.requireNonNull(targetCluster); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged =!(sourceMacPoolId.equals(targetCluster.getId()); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } return macPoolChanged; }
private org.ovirt.engine.core.bll.ValidationResult canMigrateMacsToAnotherMacPool(org.ovirt.engine.core.compat.Guid targetMacPoolId, java.util.List<java.lang.String> macsToMigrate) { java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(macsToMigrate); org.ovirt.engine.core.bll.network.macpoolmanager.MacPool targetPool = poolPerCluster.getMacPoolById(targetMacPoolId); if (targetPool.isDuplicateMacAddressesAllowed()) { return ValidationResult.VALID; } java.util.Map<java.lang.String, java.lang.Long> occurrenceCount = macsToMigrate.stream().collect(java.util.stream.Function.functioningBy(java.util.stream.Function.functioningBy(java.util.function.Function.functioningBy(java.util.function.Function.function.functioningBy(mac)) || (( occurrenceCount.get(mac)) > 1)).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_DUE_TO_DUPLICATES; java.util.List<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableStringVariableStringVariableString(engineMessage, problematicMacs); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage, replacements).when((!(problematicMacs.isEmpty()))); }
@org.junit.Test public void canMigrateMacsToAnotherMacPoolWhenThereAreDuplicates() { when(vmNicDao.getAllMacsByClusterId(cluster.getId())).thenReturn(macsToMigrate); assertThat(underTest.canMigrateMacsToAnotherMacPool(cluster, targetMacPoolId), isValid()); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = getNewMacPoolId(); if (shouldSetNewMacPoolOnAllClusters(clusterId)) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { moveMacs.migrateMacsToAnotherMacPoolIfNeeded(cluster, newMacPoolId); clusterDao.update(cluster); } } }
public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetCluster); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged =!(sourceMacPoolId.equals(targetClusterId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToAnotherMacPool = getMacsForClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, commandContext); } }
@org.junit.Test public void testGetMacsFromAllClusters() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = java.util.Arrays.asList(createClusterAndMock(sourceMacPoolId, java.util.Collections.singletonList("mac1")), createClusterAndMock(targetMacPoolId, java.util.Collections.singletonList("mac2")), createClusterAndMock(targetMacPoolId, java.util.Collections.singletonList("mac2")), createClusterAndMockMacs(targetMacPoolId, java.util.Collections.singletonList("mac2")); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = ACTION_TYPE_FAILED_CANNOT_MIGRATE_MACS_DUE_TO_DUPLICATES; java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.getListVariableString>(java.util.Collections.singletonList(engineMessage, java.util.Collections.singletonList(engineMessage, java.util.Collections.singletonList(engineMessage, java.util.Collections.singletonList(macPoolId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(engineMessage, replacements)); }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public void executed(org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork) { org.ovirt.engine.core.common.businessentities.network.Network oldSelectedNetwork = ((org.ovirt.engine.core.common.businessentities.network.Network) (returnValue)); org.ovirt.engine.core.common.businessentities.network.Network newNetwork = networks.getNetwork().getSelectedItem(); getNetwork().setItems(networks); updateNetworks(networks); if (oldSelectedNetwork!= null) { org.ovirt.engine.core.common.businessentities.network.Network newSelectedNetwork = networks.stream().filter(((network) -> null) (getNetwork().getId()))); if (!(getNetwork().getSelectedItem().getId().equals(newSelectedNetwork.getId()))) { getNetwork().setSelectedItem(newSelectedNetwork); } } })); }
protected void addAdditionalInfoPanel() { addAdditionalInfoPanel(org.ovirt.engine.ui.uicompat.ConstantsManager.getCustomAdditionalInfo().getCustomProperties()); addAdditionalInfoPanel.add(createDetailAdditionalInfo()); addAdditionalInfoPanel.add(createStatisticsAdditionalInfo()); }
@java.lang.Override public void restoreStateFromViewItem(org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView.Widget<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> originalViewItem) { org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListView itemModel = ((org.ovirt.engine.ui.webadmin.widget.hosts.HostNetworkInterfaceListView) (originalViewItem)); setVlanExpanded(originalViewItem); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { descriptionHeader.getElement().setInnerHTML(header); descriptionHeader.add(createLinkStatusPanel(isInterfaceUp())); createAdditionalInfoPanel(); return bodyPanel; }
@java.lang.Override protected void hideAllDetails() { detailExpand.toggleExpanded(false); statisticsExpand.toggleExpanded(false); }
public boolean getStatisticsState() { return statisticsExpand.isActive(); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel entity) { com.google.gwt.user.client.ui.IsWidget result = super.createBodyPanel(header, entity); statusPanel.add(getInterfaceNamesPanel(entity.getInterfaces())); return result; }
private com.google.gwt.user.client.ui.IsWidget createStatisticsAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_CHECK_CHECK_INFO_ITEM); statisticsExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListView(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListView.constants.statistics(), null); getClickHandlerRegistrations().add(statisticsExpand.addClickHandler(this)); panel.add(statisticsExpand); return panel; }
private java.lang.String createActiveBondTooltipMessage(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { java.util.List<java.lang.String> bondProperties = new java.util.ArrayList<>(); java.lang.String adPartnerMac = java.util.Objects.toString(bond.getAdPartnerMac(), ""); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.hosts.HostNetworkInterface.messages.bondAdPartnerMac(adPartnerMac)); java.lang.String adAggregatorId = java.util.Objects.toString(bond.getAdAggregatedMac(adPartnerMac)); for (org.ovirt.engine.ui.webadmin.widget.hosts.HostInterfaceBondedList<java.lang.String> lineModel : lineModel.getInterfaces()) { java.lang.String nicName = nic.getName(); java.lang.String nicName = nic.getName(); java.lang.String nicName = java.util.Objects.toString(nic.getInterface().getAdAggregatedAdAggregatedAdAggregatedAdAggregatorId(nicName, nicName)); bondProperties.add(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListViewItem.messages.bondSlaveAdAggregatedAdAggregatorId(nicName, nicName)); } return org.ovirt.engine.ui.uicompat.external.StringUtils.join(bondProperties, "\n"); }
private boolean isAdPartValid(org.ovirt.engine.core.common.businessentities.network.Bond bond, org.ovirt.engine.core.common.businessentities.VDS vds) { java.lang.String partnerMac = bond.getAdPartialMac(); boolean isAdPartnerMacEmpty = ((part.getStatistics().getStatus())!= (org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListModel.INVALID_AD_PARTER)); boolean isIfcUp = interfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = interfaceStatus.UP.equals(bond.getStatistics().getStatus()); boolean isBond4 = BondMode.BOND4.equals(org.ovirt.engine.core.common.businessentities.network.BondMode.parseBondMode(bond.getBondOptions())); boolean isBond4 = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.AdPartitionModeSupported, vds.getClusterCompatibilityVersion().getValue()))); return (((!isAdPartnerMacEmpty) || (!isBondSupportedForCluster) || (!isBondSupportedForCluster); }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.ovirt.engine.core.common.businessentities.network.InterfaceStatus interfaceStatus = getEntity().getInterface().getStatistics().getStatus(); com.google.gwt.safehtml.shared.SafeHtml bondPropertiesMessage = createBondTooltipMessage(getEntity(), interfaceStatus); com.google.gwt.safehtml.shared.SafeHtml bondMessage = org.ovirt.engine.ui.common.widget.host.HostNetworkInterfaceBondedListView.templates.italicompatWrap(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.constants.bondProperties(), bondPropertiesMessage); com.google.gwt.safehtml.shared.SafeHtml bondTooltip = org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip.Widget.Widget.templates.italicompatWrap(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListBoxedListBoxedListView.constants.bondedTitle(), bondPropertiesMessage); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltipIconTooltipIcon = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(new org.ovirt.engine.ui.common.widget.uicommon.network.BondedNetworkIcon(getEntity())); iconTooltip.add(iconTooltip); return iconPanel; }
protected org.ovirt.engine.ui.common.widget.table.column.ColumnSize getColumnSize(int itemCount) { if ((itemCount %4) == 3) { return org.ovirt.engine.ui.common.widget.table.column.ColumnSize.MD_2; } return org.ovirt.engine.ui.common.widget.table.column.ColumnSize.MD_2; }
void initTable() { pfActionPanel.addButtonToActionGroup(table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel>(org.ovirt.engine.ui.webadmin.section.main.view.host.SubTabHostInterfaceView.constants.setupNetworksInterface()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getSetupNetworksCommand(); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createBodyPanel(java.lang.String header, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { descriptionHeaderPanel.getElement().setInnerHTML(header); statusPanel.add(createLinkStatusPanel((networkInterface!= null? networkInterface.isLinked() : false))); statusPanel.add(createLinkedStatusPanel((networkInterface!= null? networkInterface.isPlugged() : false))); createAdditionalInfoPanel(); return bodyPanel; }
private void updateInfoPanel() { if ((getModel().getItems()) instanceof java.util.List) { clearClickHandlers(); selectionModel.clear(); org.ovirt.engine.ui.common.widget.list.PatternView item = new java.util.ArrayList<>(); int i = 0; java.util.List<org.ovirt.engine.ui.common.widget.list.Pattern, java.util.List<T>> new java.util.List<> newList<>(); for (T item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.list.Pattern item : getModel().getItems()) { org.ovirt.engine.ui.common.widget.list.Pattern.addClickHandler(this)); if (i < (currentState.size())) { restoreState(currentState.get(i), newItem); if (i == (selectedIndex)) { newItem.addStyleName(Styles.ACTIVE); } } newCurrentState = newCurrentState; if ((org.ovirt.engine.ui.common.widget.listgroup.PatternCountView.getWidgetCount()) == 0) { org.ovirt.engine.ui.common.widget.list.Pattern.addStyleName(Styles.LIST_GROUP_ITEM_HEADING); } } currentState.clear(); currentState.clear(); currentState.clear(); currentState.setText(org.ovirt.engine.ui.common.widget.listgroup.Pattern.noItemsToDisplay()); noItems.add(noItems); noItems.setText(org.ovirt.engine.ui.common.widget.list.Pattern.noItemsToDisplay()); add(noItems); } }
public void setStatisticsExpanded(boolean value) { statisticsExpander.toggleExpanded(value); toggleExpanded(); }
private boolean isInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails) { return networkImplementationDetails.isInSync(); }
public boolean getVlanState() { return detailExpand.isActive(); }
protected com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }
private com.google.gwt.user.client.ui.IsWidget createDetailAdditionalInfo() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.addStyleName(PatternflyConstants.PF_LIST_CHECK_INFO_ITEM); detailExpand = new org.ovirt.engine.ui.common.widget.listgroup.ExpandableListView(org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceListView.constants.details(), null); getClickHandlerRegistrations().add(detailExpand.addClickHandler(this)); panel.add(detailExpand); return panel; }
private void setIcon(java.lang.String iconCss) { if (!(org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(iconCss))) { org.ovirt.engine.ui.common.widget.table.SpanIcon iconPanel = new org.ovirt.engine.ui.common.widget.table.Span(); iconPanel.addStyleName(getBaseStyle(iconCss)); iconPanel.addStyleName(iconPanel); } }
public void setVlanExpanded(boolean value) { detailExpander.toggleExpanded = toggleExpanded; }
private com.google.gwt.user.client.ui.IsWidget createLinkStatusPanel(boolean isLinked) { return new org.ovirt.engine.ui.common.widget.uicommon.vm.LinkStatusPanel(isLinked); }
private com.google.gwt.user.client.ui.IsWidget getInterfaceNamesPanel(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface> bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel interfaceNamesPanel = new com.google.gwt.user.client.ui.FlowPanel(); interfaceNamesPanel.addStyleName(PatternflyConstants.PF_LIST_LIST_DESCRIPTION); for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface : bondInterfaces) { com.google.gwt.user.client.ui.FlowPanel hostInterfacePanel = new com.google.gwt.user.client.ui.FlowPanel(); hostInterfacePanel.getElement().setInnerSafeHtml(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(hostInterface.getName())); interfaceNamesPanel.add(createLinkStatusPanel(((org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP) (hostInterface.getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP)))); interfaceNamesPanel.add(hostInterfacePanel); } return interfaceNamesPanel; }
private void updateProperties() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getEntity(); setImage(disk.getDiskStorageType().isInternal()); setLun(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN))); setAlias(disk.getDiskAlias()); setDescription(disk.getDiskDescription()); setDiskId(disk.getId().toString()); if ((disk.getLastAlignmentScan())!= null) { java.lang.String lastScanDate = com.google.gwt.i18n.client.DateTimeFormat.getFormat("yyyyyy-MM-dd:mm"); setAlignment(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().diskAlignment(disk.getAlignment().toString(), lastScanDate)); } else { setAlignment(disk.getAlignment().toString()); } setWipeAfterDelete(disk.isWipeAfterDelete()); if (isImage()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); setDiskProfileName(safeJoin(safeSchedule(diskImage.getQuotaNames())); setQuotaName(safeJoin(safeJoinDisk.getQuotaNames())); setQuotaAvailable((!(diskImage.getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))); } else if (isLun()) { org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (disk)); setLunId(lunDisk.getLun().getLUNId()); } }
@java.lang.Override public java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel> getWindow() { if (super.getWindow().getWindow().getWindow()) { return new org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_SWOW, getDiskWindow()); } return map; }
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ((Model.PROP_WINDOW.equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }
@java.lang.Override public void setWindowPropertyChanged(java.lang.String propName) { if (org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.DISK_WITHOUT_DISK.equals(propName)) { setDiskWindow(value); } else { super.setWindow(propName, value); } }
public void addDialogModelListener(final M model) { init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (windowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, windowPopupInstances.get(propName), false); } else if (confirmWindowPropertyNames.contains(propName)) { handleWindowModelChange(model, propName, confirmWindowPopupInstances.get(propName), true); } } }); }
@java.lang.Override protected void onReveal() { org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> entityChangedEvent = getModel().getDiskViewType().getEntityChangedEvent(); if (!(entityChangedEvent.getListeners().contains(getView().getDiskTypeChangedEventListener()))) { entityChangedEvent.addListener(getView().getDiskContentTypeChangedEventListener()); } super.onReveal(); getView().handleQuotaColumnVisibility(); }
void initTableOverhead() { disksViewRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewRadioGroup(); disksViewRadioButtonRadioButton.setClickHandler(clickHandler); disksContentTypeRadioGroup = new org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup(); disksContentTypeRadioGroup.setClickHandler(((com.google.gwt.user.client.ui.RadioButton) (event.getSource())).getValue())); }
public void setClickHandler(com.google.gwt.event.dom.client.ClickHandler clickHandler) { for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.addClickHandler(clickHandler); } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); com.google.gwt.user.client.ui.RadioButton allButton = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { com.google.gwt.user.client.ui.RadioButton buttonToType = new com.google.gwt.user.client.ui.RadioButton("diskContentTypeView"); buttonToType.getElement().getStyle().setProperty("marginRight", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); for (com.google.gwt.user.client.ui.RadioButton button : buttonToType.keySet()) { button.getElement().getStyle().setMarginRight(20, Style.Unit.PX); buttonsPanel.add(button); } setDiskContentType(null); localize(); return buttonsPanel; }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = ((org.ovirt.engine.core.common.businessentities.storage.Disk) (getSelectedItem()))); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems())!= null)? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = (!(disk!= null)? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getSelectedItems())) : null; boolean shouldAllowEdit = (!(disk!= null) && (!(isDiskLocked(disk)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks!= null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable())) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getResumeCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveAndMoveCommandAvailability(disks); getResumeCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); getResumeCommand().setIsExecutionAllowed(false); getResumeUploadCommand().setIsExecutionAllowed(isExportCommandAvailable()); getResumeUploadCommand().setIsExecutionAllowed(false); getResumeCommand().setIsExecutionAllowed(false); getResumeCommand().setIsExecutionAllowed(isExecutionAllowed(disks); getResumeCommand().setIsExecutionAllowed(false); getResumeCommand().setIsExecutionAllowed(false); getResumeCommand().setIsExecutionAllowed(false); getResumeCommand().setIsExecutionAllowed(false); getResumeCommand().setIsExecutionAllowed(false
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewCommand())) { newEntity(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getCopyCommand())) { copy(); } else if (command == (getExportCommand())) { export(); } else if ((RemoveAlignmentCommand())) { export(); } else if ((RemoveDiskModel.CANCEL_REMOVE.equals(command.getName())) || ("Cancel".equals(command.getName()))) { cancelConfirm(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if ("CancelConfirm".equals(command.getName())) { cancelConfirm(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } else if (command == (getCancelCommand())) { cancelConfirm(); } else if ("OnCancelUpload".equals(command.getName())) { cancelUpload(); } else if ("OnCancelUpload".equals(command.getName())) { cancelUpload(); } else if (command == (getResumeUploadCommand())) { pauseUpload(); } else if (command == (getResumeUploadCommand())) { resumeUpload(); } }
private void download() { if (((getSelectedItem()) == null) || (!((getSelectedItem()) instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage))) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.DownloadImageModel(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getSelectedItem()))); model.start(); }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); parameters.setForce(isForce()); if (isForce()) { return performAction(ActionType.RemoveProvider, parameters); } else { return performAction(ActionType.RemoveProvider, parameters); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(FixturesTool.GLUSTER_BRICK_UUID1); brick1.setBrickDirectory("/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(FixturesTool.GLUSTER_VOLUME_ID1); brick2.setBrickDirectory("/test-test-vol1"); brick2.setServerId(GlusterStatus.UP); brick2.setStatus(GlusterStatus.UP); bricks2.add(brick2); return bricks; }
private void onRemove(boolean force) { java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameterList = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.Provider provider : providers) { providerListModel.setForce(force); } sourceListModel.selectNextItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleActions(ActionType.RemoveProvider, parameterList, (result) { sourceListModel.getSearchCommand().execute(); } }
private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar!= null)? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); }
private boolean isSelectedProvidersOfType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return ((getSelectedItems()) == null) && (provider.getType().stream().allMatch(((org.ovirt.engine.ui.uicommonweb.models.vms.VmModel.getSelectedItems())).isEmpty(((org.ovirt.engine.ui.uicommonweb.models.vms.VmModel.getSelectedItem())).getSelectedItem())); }
@java.lang.Override protected void executeCommand() { setStoragePoolId(getNetwork().getDataCenterId()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() { @java.lang.Override public void runInNewTransaction() { setStoragePoolId(getNetwork().getId()); networkDao.remove(getNetwork().getId()); networkDao.remove(getNetwork().getId()); getCompensationContext().stateChanged(); return null; } if (getNetwork().isExternal()) { if (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.shouldRemoveNetworkFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); } if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().isRemoveFromHostUponNetworkRemoval(getNetwork())) { removeNetworkFromHosts(); } org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.setSucceeded(true); }
private void setVdsmNamesInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToUpdate = new java.util.LinkedList<>(); interfaces.add(iface); interfacesToUpdate.add(iface); iface.setNetworkName(network.getVdsmName()); interfacesToUpdate.add(iface); } interfaceDao.massUpdateInterfacesForVds(interfacesToUpdate); }
public void setVdsmNameInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.compat.Guid clusterId) { setVdsmNameInVdsInterfaces(network, interfaceDao.getAllInterfacesByClusterId(clusterId)); }
public void setVdsmNameInVdsInterfaces(org.ovirt.engine.core.common.businessentities.network.Network network) { setVdsmNamesInVdsInterfaces(network, interfaceDao.getAllInterfacesByDataCenterId(network.getDataCenterId())); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsOnlyOnStorageDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVmsRelatedToSD = vmDao.getAllForStorageDomain(getStorageDomainId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisksOnMultipleStorageDomain = vmDao.getAllVmsWithDisksOnOtherStorageDomain(getStorageDomainId()); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsWithDisksOnMultipleStorageDomain = vmDao.getAllVmsWithDisksOnOtherStorageDomain(getStorageDomainId()); if (vmsWithDisksRelatedToSD.isEmpty()) { return newVmsRelatedToSD(); } else { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsWithDisksOnMultipleStorageDomain) { if (vmsWithDisksOnOtherStorageDomain = getVmsWithDisksWithSameStorageDomain(getStorageDomainId()); } } } return vmsRelatedToSD; }
private java.util.Set<org.ovirt.engine.core.compat.Guid> findNonResponsiveHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.Set<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)) { nonResponsiveHosts.add(host.getId()); } if ((((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) || ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && (host.isInFenceFlow())) { host.setStatus(VDSStatus.NonResponsive); nonResponsiveHosts.add(host.getId()); } } return nonResponsiveHosts; }
public void setInFence(java.lang.String isInFenceCommand) { this.inFence = isInFenceCommand; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, buildName, cpuCores, cpuFlagsSet, cpuFlags, cpuFlags, cpuFlags, cpuFlags, cpuFlags, cpuSpeedMh, guestOverhead, activeCpuPermission, physicalMemMb, cpuFlags, hardFree(), guestVersion, hardCommited, netConfigDirty, netConfigDirty, vdsGroup, memCommited, vdsCpuLevel, pendingMemMb, pendingMemMb, pendingMemMb, concurrentVersion, vmsCpuLevel, concurrentVersion, vmsCpuLevel, vmsCpuLevel, vmsCpuLevel, graphicsVersion, vmsCpuLevel, graphicsTypes, vmsCpuSharesCount, vmsCpuSharesCount, vmsCoresCount, vmsCpuSharesCount, vmsCpuSharesCount, vwPinning.getEnabledStatus, vmsCpuSharesCount, vmsCpuSharesCount, highManagementControlledByPolicy, speed, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, hardwareSuspended_Suspended_FenceEnabled, kernelArgs, hostDevicePassthroughEnabled, kernelArgs, hostDevicePassthroughEnabled, hardwareArgs, hostDevicePassthroughEnabled, hardwareArgs, hostedEngineConfiguredNumaEnabled, isInFenceEnabled, hostDeviceEnabled, hostedEngineConfiguredNumaNode); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.Boolean> getInFence() { return isInFenceExecution()? org.ovirt.engine.ui.uicommonweb.models.EntityModel.getInstance().getFenceAgent() : null; }
private void setInFence(org.ovirt.engine.core.common.businessentities.VDS host, boolean isInFencePolicy) { org.ovirt.engine.core.common.businessentities.VDSDynamic vdsDynamic = vdsDynamic.get(hostId); if (vdsDynamic.getSucceeded()) { org.ovirt.engine.core.common.businessentities.VDSDynamic vdsDynamic = vdsDynamic.get(hostId); vdsDynamic.setInFence(isInFenceAgent); vdsDynamicDao.update(vdsDynamic); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = org.ovirt.engine.core.di.Injector.injectMembers(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); eventFloodRegulator.evict.evict.ev(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
public static org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getDefaultFirewallType(org.ovirt.engine.core.compat.Version clusterCompatibilityVersion) { return clusterCompatibilityVersion.isEmpty(Version.v4_2)? org.ovirt.engine.core.bll.network.host.GlusterVolumeHelperTest.HOST_2 : org.ovirt.engine.core.bll.network.host.GlusterVolumeHelperTest.DEFAULT_NETWORK_SHOULD_BE_WITH_FAILED_NETWORK_IS_NOT_FOUND; }
public static org.ovirt.engine.core.common.businessentities.network.FirewallType valueOf(int value) { return org.ovirt.engine.core.common.network.fire.FirewallType.map.get(value); }
@org.ovirt.api.metamodel.annotations.Link types.DiskSnapshot diskSnapshot();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(imageTransfer.getSnapshot().id()); }
protected boolean checkDisksNotInBackupStorage() { for (org.ovirt.engine.core.bll.DiskImage disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic destDomain = storageDomainStaticDao.get(diskImage.getStorageIds().get(0)); if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().stream().stream().stream().stream().any(org.ovirt.engine.core.bll.DiskImageDiskImage) { return false; } } } return true; }
protected void updateStaticDataDefaults() { updateStorageDomainWipeAfterDelete(); updateStorageDomainBackup(); }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.AuditLog)) { return false; } org.ovirt.engine.core.common.businessentities.AuditLog other = ((org.ovirt.engine.core.common.businessentities.AuditLog) (obj)); return ((((((((((((auditLogId) == (other.auditLogId)) && (java.util.Objects.equals(logTime))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && (java.util.Objects.equals(storagePoolId, other.storagePoolId))) && (java.util.Objects.equals(userId, other.vmTemplateId))) && (java.util.Objects.equals(vdsId, other.vmTemplateId))) && (java.util.Objects.equals(vmTemplateId, other.vdsId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && (java.util.Objects.equals(vmTemplateId, other.vmTemplateId))) && (java.util.Objects.equals(vmTemplateId, other.correlationId))) && ((processed) == (other.processed))) && (java.util.Objects.equals(correlationId, other.customEventId))) && ((eventFloodInSec) == (other.eventFloodInSec) && ((eventFloodInSec) == (other.eventFloodInSec))) && ((eventFloodInSec) == (other.external))) && ((eventFloodInSec) == (other.external))) && ((external) == (other.external))) && ((external) == (other.external))) && ((external) == (other.external))) && ((external) == (other.external))) && ((external) == (other.external) == (other.external))) && ((external) == (
@java.lang.Override public org.ovirt.engine.api.resource.HostNicSynronResource getNeborResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendHostNicSynronServiceResource(guid, parent.getHostId())); }
@org.junit.Before public void setupEnvironment() { org.ovirt.engine.core.utils.CorrelationIdTracker.clean(); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.remove(anyLong())).thenReturn(1); org.ovirt.engine.core.bll.CommandBaseTest.mockConfigValue(ConfigValues.UserSessionTimeOutInterval, 30); sessionDataContainer.setUser(session, user); }
@org.junit.Test public void testBlockUseHostCpuWithPPCArch() { when(cpuFlagsManagerHandler.getCpuId(anyString(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.CPU_ID); when(osRepository.isCpuSupported(anyInt(), any(org.ovirt.engine.core.compat.Version.class), anyString())).thenReturn(true); doNothing().when(cmd).initTemplateDisks(); cmd.setEffectiveCompatibilityVersion(Version.v4_0); doReturn(java.util.Collections.emptyList()).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).validateAddVmCommand(); doReturn(true).when(cmd).isVmNameValidLength(any(org.ovirt.engine.core.common.businessentities.VM.class)); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(ArchitectureType.ppc64); cmd.getParameters().getVm().setUseHostCpuFlags(ArchitectureType.ppc64); cmd.init(); java.util.Map<java.lang.String, java.lang.String> migrationMap = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.bll.ValidateTest.log.debug("Ignore", java.lang.String>() { { put("undefined", "true"); when(osRepository.getArchitectureFromOS(anyInt())).thenReturn(OsType.Other.other.other.numOf(org.ovirt.engine.core.common.businessentities.VM.class)); doReturn(ConfigValues.IsMigrationSupported, cmd).when(cmd).getEffectiveCompatibilityVersion(); cmd.init(); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateTestValidateTest(cmd, java.lang.String.format("$clusterName %1$s", "true"); } }; mcr.mockConfigValue = new java.util.HashMap<java.lang
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); mcr.mockConfigValue(ConfigValues.MaxIoThreadsPerVm, 64); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, 64); mcr.mockConfigValue(ConfigValues.MaxVmNameLength, new java.util.HashSet(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Version(3, 2), new org.ovirt.engine.core.compat.Version(3, 0)))); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.ConsoleReleaseCursorKeys, "shift+f11"); mcr.mockConfigValue(ConfigValues.ConsoleReleaseCursorKeys, "shift+f12"); mcr.mockConfigValue(ConfigValues.RemapCtrlAltDelDefault, true); mcr.mockConfigValue(ConfigValues.FullScreenWebAdminDefault, false); mcr.mockConfigValue(ConfigValues.FullScreenWebAdminDefault, true); }
@org.junit.Test public void testNameNotChanged() { prepareVmToPassValidate(); vm.setName("vm1"); mockUniqueNameQuery(true); mockVmValidator(); command.initCompatibilityVersion(); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getCompatibilityVersion(), migrationMap); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getCompatibilityVersion(), version); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfCpuPerSocket, command.getCompatibilityVersion(), version); org.ovirt.engine.core.bll.UpdateVmCommandTest.mcr.mcr.mockConfigValue(ConfigValues.MaxNumOfCpu, command.getEffectiveCompatibilityVersion(), version); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.MaxNumOfCpus, command.getEffectiveCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.MaxNumOfVmSockets, command.getCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.VM32BitMaxMemorySizeInMB, command.getCompatibilityVersion(), 16); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getCompatibilityVersion(), 4); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.VM64BitMaxMemorySizeInMB, command.getCompatibilityVersion(), 4); org.ovirt.engine.core.bll.UpdateVmCommandTest.mockConfigValue(ConfigValues.VMP64BitMaxMemorySizeInMB, command.getCompatibilityVersion(), 4); org.ovirt.engine.core.
@org.junit.Before public void setUp() { when(vmDao.get(vm.getId())).thenReturn(vm); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); cluster.setCpuName("converter"); cluster.setArchitecture(ArchitectureType.x86_64); cluster.setId(vm.getStoragePoolId()); cluster.setStoragePoolId(vm.getStoragePoolId()); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); when(clusterDao.get(vm.getClusterId())).thenReturn(cluster); mockOsRepository(); doNothing().when(cmd).separateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class)); doReturn(getDisksList(vm.getStoragePoolId())).when(cmd).getVmDisksFromDB(); doReturn(vmDeviceUtils).when(cmd).getVmDeviceUtils(); org.ovirt.engine.core.bll.AddVmTemplateCommandTest.mcr.mockConfigValue(ConfigValues.VmPriorityMaxValue, 100); cmd.init(); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mcr.mockConfigValue(ConfigValues.OvirtIsoPrefix, "0.8"); mcr.mockConfigValue(ConfigValues.OvirtIsoPrefix, "rhevhh"); mcr.mockConfigValue(ConfigValues.OvirtNodeOS, "^ovirt-engine/ui/uicompat.externalNodeOS, "^(org.ovirt.engine.core.common.config.ConfigValues.OvirtNodeOS, "^")); }
private java.lang.String renderPortMirroring(boolean portMirroring) { if (portMirroring == null) { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.getVmInterfaceList().getNo(); } else { return org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.isVmInterfacePresenter(vmInterfaceList, false); } }
@java.lang.Override public void setEnabled(boolean enabled) { this.enabled = enabled; nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }
@java.lang.Override protected void init() { setNetworkFilterParameterWidgetContainerWidget(true); setNetworkFilterParameterWidget(returnValue); postNicInit(); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { driver.edit(iface); networkFilterParameterWidget.edit(iface.getNetworkFilterParameterListModel()); networkFilterParameterWidget.setEnabled(iface.isNetworkFilterParameterVisible()); networkFilterParameterWidget.setVisible(iface.isNetworkFilterParameterWidgetVisible()); hideMacWhenNotEnabled(iface); iface.getMAC().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.PropertyChangedEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, sender, args) { if ("IsAvailable".equals(args.propertyName)) { hideMacWhenNotEnabled(iface); } }); }
protected void postOnSave() { stopProgress(); }
protected void onSave() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic = createBaseNic(); if ((getProgress())!= null) { return; } if (!(validate())) { return; } nic.setName(getName().getEntity()); org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile = getProfile().getSelectedItem(); nic.setNetworkName(profile.getNetworkName()); nic.setLinked(getNetworkName()); nic.setLinked(getLinked().getEntity()); if ((getNicType().getSelectedItem()) == null) { nic.setType(null); } else { nic.setType(getNicType().getSelectedItem().getValue()); } onSaveMAC(nic); nic.setPlugged(getPlugged().getEntity()); startProgress(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getActionReturnValue(); if ((returnValue!= null) && (returnValue.getSucceeded())) { java.lang.Object actionReturnValue = returnValue.getActionReturnValue(); saveSuceeded = true; if ((actionReturnValue!= null) && (actionReturnValue.getSucceeded())) { java.lang.Object actionReturnValue = returnValue.getActionReturnValue(); saveNicFilterParameters(((org.ovirt.engine.core.compat.Guid) (actionReturnValue))); } else { postOnSave(); } } }
@java.lang.Override protected void init() { super.init(); setNetworkFilterParameterWidgetWidget(true); super.init(); }
private void postNicInit() { getName().setEntity(getNic().getName()); initMAC(); initLinked(); initLinked(); initNic(); getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setEntity(getNic().isPlugged()); if (!(allowPlug())) { getPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().nicHotPlugNotSupported(getClusterCompatibilityVersion().toString())); } getPlugged().setIsChangeable(allowPlug()); initCommands(); }
public org.ovirt.engine.core.common.businessentities.network.VmNicFilter parameter flush() { getEntity().setName(name.getEntity()); getEntity().setValue(value.getEntity()); return getEntity(); }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeRuntimeProperties(com.woorea.openstack.quantum.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups())!= null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(port.getSecurityGroups(), ',')); } java.lang.String pluginType = getProvider().getAdditionalProperties().getPluginType(); if (pluginType == null) { pluginType = ""; } runtimeProperties.put("plugin_type", pluginType); return runtimeProperties; }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterWithFeatureDisabled(this, clusterId, guid); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performAction(ActionType.UpdateCluster, param); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ClusterFeature feature) { validateParameters(feature, null); org.ovirt.engine.core.common.businessentities.AdditionalFeature featureEntity = map(feature, null); org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.api.restapi.resource.BackendClusterFeatureHelper.getClusterEntity(this, clusterId); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature supportedFeature = new org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature(); supportedFeature.setFeature(featureEntity); supportedFeature.setClusterId(clusterId); cluster.getAddtionalFeaturesSupported().add(supportedFeature); org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters param = new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(cluster); return performCreate(ActionType.UpdateCluster, param, new org.ovirt.engine.core.common.action.ManagementNetworkOnClusterOperationParameters(clusterId, featureEntity.getId())); }
@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures(); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, VdcQueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures!= null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }
public static org.ovirt.engine.core.common.businessentities.Cluster getClusterEntity(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.businessentities.Cluster cluster = resource.getEntity(org.ovirt.engine.core.common.businessentities.Cluster.class, SearchType.GetClusterById, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), null); return cluster; }
public static org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature getEnabledFeature(org.ovirt.engine.api.restapi.resource.BackendResource resource, org.ovirt.engine.core.compat.Guid clusterId, org.ovirt.engine.core.compat.Guid id) { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = resource.getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature feature = addlFeatures.stream().filter((fFeatures.getId().equals(id)) && (f.isEnabled())).findFirst().orElse(null); return feature; }
public static java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> getClusterFeatures(org.ovirt.engine.api.restapi.resource.BackendResource resource, java.lang.String version) { java.util.Set<org.ovirt.engine.core.common.businessentities.AdditionalFeature> addlFeatures = new java.util.HashSet<>(); addlFeatures(java.util.Set.class, QueryType.GetClusterFeaturesByVersionAndCategory, new org.ovirt.engine.core.common.queries.GetClusterFeaturesByVersionParameters(new org.ovirt.engine.core.compat.Version(version), resource.getCurrent().getApplicationMode()), ("version " + version)); return addlFeatures; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageFileType.class, to = org.ovirt.engine.api.model.ImageFileType.class) public static org.ovirt.engine.api.model.ImageFileType map(org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, org.ovirt.engine.api.model.ImageFileType template) { switch (imageFileType) { case Unknown : return org.ovirt.engine.api.model.ImageFileType.UNKNOWN; case ISO : return org.ovirt.engine.api.model.ImageFileType.DISK; case Floppy : return org.ovirt.engine.api.model.ImageFileType.DISK; case Floppy : return org.ovirt.engine.api.model.ImageFileType.DISK; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; case Disk : return org.ovirt.engine.api.model.ImageFileType.DISK; default : throw new java.lang.IllegalArgumentException(("Missing disk: " + (org.ovirt.engine.api.model.ImageFileType.None))); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.storage.RepoImage.class, to = org.ovirt.engine.api.model.Image.class) public static org.ovirt.engine.api.model.Image map(org.ovirt.engine.core.common.businessentities.storage.RepoImage entity, org.ovirt.engine.api.model.Image template) { org.ovirt.engine.api.model.Image model = (template!= null)? template : new org.ovirt.engine.api.model.Image(); model.setId(entity.getRepoImageId()); model.setName(entity.getRepoImageName()); if ((entity.getSize())!= null) { model.setSize(entity.getSize().intValue()); } if ((entity.getFileType())!= null) { model.setFileType(org.ovirt.engine.api.restapi.types.ImageMapper.map(entity.getFileType(), null)); } return model; }
@java.lang.Override protected boolean validateImageTransfer() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = getDiskValidator(diskImage); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = getDiskImagesValidator(diskImage); return ((((validate(diskValidator.isDiskExists())) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(diskValidator.isDiskPluggedToAnyNonDownVm(false)))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotIllegal()))) && (validate(diskImagesValidator.diskImagesNotLocked()))) && (validate(storageDomainValidator.diskImagesNotLocked())); }
protected org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImage() { if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { return super.getDiskImage(); } return ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageGroupID()))); }
@java.lang.Override public void init() { super.init(); setImageId(org.ovirt.engine.core.bll.storage.disk.image.MoveImageCommand.getParameters().getImageId()); setImageGroupId(org.ovirt.engine.core.bll.storage.disk.image.MoveImageCommand.getParameters().getImageGroupID()); }
public void proceedCommandExecution(org.ovirt.engine.core.compat.Guid childCmdId) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = imageTransferDao.get(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); if ((entity == null) || ((entity.getPhase()) == null)) { log.error(("Can't missing or missing from database + " '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); setCommandStatus(CommandStatus.FAILED); return; } if ((entity.getDiskId())!= null) { setImageId(entity.getDiskId()); } else { setImageId(null); } if ((entity.getDiskId())!= null) { setImageId(entity.getDiskId()); } executeStateHandler(entity, ts, childCmdId); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getVmsListForDisk(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId()))) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getVmsListForDisk(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getImageGroupId(), true); vms.put(vm.getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED); } return locks; }
@java.lang.Override public javax.ws.rs.core.Response addForSnapshot(org.ovirt.engine.api.model.Image transfer) { org.ovirt.engine.core.common.action.ImportDiskImageParameters params = new org.ovirt.engine.core.common.action.ImportDiskImageParameters(); params.setImageId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(imageTransfer.getDiskSnapshot().getId())); return performCreate(image, params); }
@java.lang.Override public javax.ws.rs.core.Response toResponse(org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { org.ovirt.engine.api.restapi.resource.validation.MalformedIdExceptionMapper.log.error("Malformed id detected while processing " + request for path \"{}\" "iInfo.getPath()); org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Exception", exception); final org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Exception", exception); return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build(); }
private void disableAnyUsb(org.ovirt.engine.core.common.businessentities.VmBase oldVm, org.ovirt.engine.core.common.businessentities.VmBase newVm) { final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> usbControllers; if ((((((org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED) == (oldVm.getVmType())) && ((org.ovirt.engine.core.common.businessentities.VmType.HighTPS) == (oldVm.getVmType()))) && ((usbControllers.size()) == 1)) && ((usbControllers.size()) == 1)) && (UsbControllerModel.NONE.equals(getUsbPolicyModelName(getUsbPolicyModelName(usbControllers.get(0))))) { return; } if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED) == (oldVm.getId())) { disableSpiceUsb(newVm.getId()); } else if ((org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED) == (org.ovirt.engine.core.compat.Guid.newGuid())) { disableNormalUsb(newVm.getId()); } addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), newVm.getId()), VmDeviceGeneralType.CONTROLLER, createUsbPolicyParams(Usbll.getId()), true, false, false); }
public org.ovirt.engine.core.common.businessentities.VmDevice getVmDevice() { java.util.Map<java.lang.String, java.lang.Object> specParams = new java.util.HashMap<>(); specParams.put("action", action.name()); specParams.put("model", model.getName()); return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), id), VmDeviceGeneralType.WATCHDOG, VmDeviceType.WATCHDOG, "", specParams, true, true, null); }
public void vmTypeChanged(org.ovirt.engine.core.common.businessentities.VmType vmType) { if (basedOnCustomInstanceType()) { getModel().getIsSoundcardEnabled().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); } getModel().getAllowConsoleReconnect().setEntity((vmType == (org.ovirt.engine.core.common.businessentities.VmType.Server))); if (vmType == (org.ovirt.engine.core.common.businessentities.VmType.Hightenance)) { getModel().getIsHeadlessModeEnabled().setEntity(true); getModel().getIsConsoleDeviceEnabled().setEntity(true); getModel().getUsbPolicy().setSelectedItem(UsbPolicy.DISABLED); getModel().getUsbPolicy().setSelectedItem(null); } }
private void onDestroy() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress())!= null) { return; } if (!(model.validate())) { return; } org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getSelectedItem(); model.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.ForceRemoveStorageDomain, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.ActionParametersBase[]{ new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(storageDomain.getId()) })), (result) -> result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }
@org.junit.Test public void testRemoveWithDestroy() throws java.lang.Exception { setUpGetEntityExpectations(); javax.ws.rs.core.UriInfo uriInfo = setUpActionExpectations(ActionType.ForceRemoveStorageDomain, org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters.class, new java.lang.String[]{ "StorageDomainId", "VdsId" }, new java.lang.Object[]{ GUIDS[0], GUIDS[1] }, true, true, false); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(BackendStorageDomainResource.HOST, GUIDS[1].toString()); parameters.put(BackendStorageDomainResource.DESTROY, java.lang.Boolean.TRUE.toString()); uriInfo = addMatrixParameterExpectations(uriInfo, parameters); setUriInfo(uriInfo); verifyRemove(resource.remove()); }
@java.lang.Override protected boolean validate() { boolean returnValue = ((super.validate()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if ((!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) && (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds()))) { returnValue = false; addValidationMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType())!= null)) { returnValue = false; } if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType())!= null) &&
@java.lang.Override public javax.ws.rs.core.Response remove() { java.lang.String host = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Reason: parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(fault).build()); } get(); org.ovirt.engine.core.compat.Guid hostId = getHostId(host); boolean destroy = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.DESTROY, true); boolean format = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true); if (destroy) { org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.ForceRemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
protected boolean isDetachAllowed() { if ((getStoragePoolIsoMap()) == null) { return failValidation(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = storageDomainDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.getStoragePool().getId()); if (((storageDomains.size()) > 1) && (isMaster())) { return failValidation(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } return true; }
private void detachStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { log.info("Host '{}' is already attached to a different storage pool, clean the storage domain metadata."); org.ovirt.engine.core.common.vdscommands.StorageDomainVdsReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); if (ret.getSucceeded()) { log.info("Waiting clean metadata for storage domain '{}'.", storage domain '{}'."); } else { log.warn("Failed to clean metadata for storage domain '{}'.", storage domain '{}'.", storageDomainId); } }
private void cleanDirtyMetaDataIfNeeded() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Maintenance)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { detachStorageDomain(storageDomainId); } } } }
@java.lang.Override public javax.ws.rs.core.Response remove() { boolean destroy = false; boolean destroy = false; if (destroy) { org.ovirt.engine.core.common.action.StorageDomainParametersBase parameters = new org.ovirt.engine.core.common.action.StorageDomainParametersBase(guid); return performAction(ActionType.ForceRemoveStorageDomain, parameters); } else { java.lang.String host = org.ovirt.engine.api.restapi.util.BackendStorageDomainParametersBase.getParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.HOST); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Reason"); if (host == null) { org.ovirt.engine.api.model.Fault fault = new org.ovirt.engine.api.model.Fault(); fault.setReason("Reason: parameter is missing"); throw new javax.ws.rs.WebApplicationException(javax.ws.rs.core.Response.status(HttpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.FORMAT, true); } get(); boolean format = org.ovirt.engine.api.restapi.util.BackendResource.getBooleanParameter(host); org.ovirt.engine.core.common.action.RemoveStorageDomainParameters parameters = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); parameters.setVdsId(hostId); parameters.setDoFormat(format); return performAction(ActionType.RemoveStorageDomain, parameters); } }
public void setWidgetColSize(org.ovirt.engine.ui.common.widget.table.ColumnSize size) { if ((sizeContainer)!= null) { sizeContainer.addStyleName(widget.getCssName()); } else { sizeContainer.removeStyleName(widgetCollections.emptyList()); } widgetColSize = size; }
public void setLabelColSize(org.ovirt.engine.ui.common.widget.table.ColumnSize columnSize) { if ((labelColSize) == null) { labelColSize = 0; } labelColumnLabel.removeStyleName(labelColSize.getCssName()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(Mandatory(storageDomain().id()), mandatory(storageDomain.name())); optional(storageDomain.getStorage().name())); optional(storageDomain.getStorage().force()); }
@javax.annotation.PostConstruct private void init() { int quotaCacheIntervalInMinutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheIntervalInMinutes); org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCacheRetries); org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCache.MINUTES); org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCache.MINUTES); java.util.concurrent.TimeUnit.MINUTES = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCache.MINUTES); java.util.concurrent.TimeUnit.minutes = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.QuotaCache.MINUTES); java.util.concurrent.TimeUnit.scheduleAFixedDelay(new java.util.concurrent.TimeUnit.MINUTES); }
public void performLoadBalancing() { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.debug("Initializing Balancer timer entered."); java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnit = policyUnits.get(policy.getBalance()); java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.BalanceResult> balanceResult = java.util.Optional.emptySet(); if (policyUnit.getPolicyUnit().isEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = getVdsDao().getAllForClusterWithoutMigrating(cluster.getId()); if (policyUnit.getPolicyUnit().isInternal()) { balanceResult = internalRunBalance(policyUnit, cluster, hosts); } else if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.ExternalSchedulerEnabled)) { balanceResult = externalRunBalance(policyUnit, cluster, hosts); } } if ((balanceResult.isPresent()) && (balanceResult.get().isValid())) { migrationHandler.migrateVM(balanceResult.get().getCandidateHosts(), balanceResult.getVmToMigrate(), org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getMessage(AuditLogType.MIGRATION_REASON_LOAD_BALANCING)); } } }
private void enableLoadBalancer() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableVdsLoadBalancing)) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); scheduler.scheduleWithFixedDelay(getValue(VdsLoadBalancingIntervalInMinutes), java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.info("Finished scheduling to enable vds load balancer"); } }
private void updateVmVersion() { for (org.ovirt.engine.core.compat.Guid vmId : vmDao.getVmIdsForVersionUpdate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId())) { if (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmsJobMap().containsKey(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()))) { break; } org.ovirt.engine.core.common.action.UpdateVmVersionParameters params = new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(vmId); params.setSessionId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.getBackend().runInternalAction(ActionType.UpdateVmVersion, params, org.ovirt.engine.core.bll.AddVmTemplateCommand.cloneContextAndDetachFromParent()); } org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId()); }
public void scheduleJobs() { int refreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VdsRefreshRate)) * 1000; registeredJobs.add(getRefreshRateWithFixedDelay(this.getId()))); vmsRefresher = getRefresherFactory().create(this); vmsRefresher.startMonitoring(); hostRefresher.startMonitoring(); hostRefresher.startMonitoring(); hostRefresher.start(); }
public void refresh() { log.debug("Refresh Rules Enforcement Manager interval reached."); final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmCandidates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusterDao.getWithoutMigratingVms()) { if (!(cluster.isInUpgradeMode())) { final org.ovirt.engine.core.common.businessentities.VM candidate = rulesEnforcer.chooseNextVmToMigrate(cluster); if (candidate!= null) { vmCandidates.add(candidate); } } } for (org.ovirt.engine.core.common.businessentities.VM vm : vmCandidates) { migrateVM(vm); } }
public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Startup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Startup check completed."); } finally { lock.unlock(); } } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); when(arem.getExecutor()).thenReturn(java.util.concurrent.Executor.newScheduledThreadPool(1)); arem.wakeup(); }
@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); scheduler.scheduleWithFixedDelay(this, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void pmHealthCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start Management Health Check started."); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isPmEnabled()) { pmHealthCheck(host); } } } finally { lock.unlock(); } } }
private void endDefaultOperations() { endUnlockOps(); if (isTemplateVersion()) { java.util.concurrent.ScheduledFuture job = schedulerService.schedule(this, new java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.AddVmTemplateCommand.updateVmsJobMap.put(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getBaseTemplateId(), job); } }
public void triggerPoolMonitoringJob() { try { poolMonitoringJob.cancel(true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.debug("Failed cancelling existing job: {}", org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); } poolMonitoringJob = schedulerService.scheduleWithFixedDelay(this, 0, vmPoolMonitorIntervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct public void scheduleJob() { double interval = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.CertificationValidationCheckTimeInHours); final int intervalInMinutes = java.lang.Math.round((interval * HOURS_TO_MINUTES)); scheduler.scheduleWithFixedDelay(new java.lang.Math.round((interval * HOURS_TO_MINUTES)); java.util.Calendar scheduler.scheduleAFixedDelay(in, intervalInMinutes, java.util.concurrent.TimeUnit.MINUTES); }
public void checkCertificationValidity() { try { if ((!(checkCertificate(org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKICACert()), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_ABLED, AuditLogType.ENGINE_CERTIFICATION_IS_ABOUT_TO_EXIST); return; } if (!(checkCertificate(((java.security.cert.X509Certificate) (org.ovirt.engine.core.utils.crypt.EngineEncryptionUtils.getCertificate())), AuditLogType.ENGINE_CERTIFICATION_HAS_EXPIRED, AuditLogType.ENGINE_CERTIFICATION_IS_TO_EXIS_ALERTIFICATION, AuditLogType.ENGINE_CERTIFICATION_IS_TO_EXIST_EXIST))) { return; } if (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))) { return; } hostDao.getAll().stream().stream().stream().filter((host) -> ((host.getStatus()) == VDSStatus.NonOperational)).forEach(this::checkHostCertificateValidity); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Failed to check certification valid validation validation validation validation validation: {}", e.getMessage()); org.ovirt.engine.core.bll.CertificationValidityChecker.log.error("Exception", e); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Initial DWH Heart Beat"); heartBeatVar = new org.ovirt.engine.core.common.businessentities.DwhHistoryTimekeeping(); heartBeatVar.setVariable(DwhHistoryTimekeepingVariable.HEART_BEAT); scheduler.scheduleWithFixedDelay(engineTimeZone.getFirst()); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.info("Finished HA Beat initialized"); }
public synchronized void fetchIsoDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repofileList = repoFileMetaDataDao.getAllRepoFilesForAllStoragePools(StorageDomainType.ISO, StoragePoolStatus.Up, StorageDomainStatus.Active, VDSStatus.Up); resetProblematicList(); java.util.List<java.util.concurrent.Callable<java.lang.Void>> tasks = new java.util.ArrayList<>(); for (final org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage : repofileList) { if (shouldRefreshIsoDomain(repoImage.getLastRefreshed())) { tasks.add(new org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer().log.debug(("Failed refresh process for '{}' file type in storage domain id '{}' was not completed.", repoImage.getRepoDomainId()); } } else { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(tasks); handleErrorLog(new java.util.ArrayList(problematicRepoFileList)); } }
@javax.annotation.PostConstruct public void scheduleJob() { double availableUpdatesRefreshRate = org.ovirt.engine.core.common.config.Config.<java.lang.Double>getValue(ConfigValues.HostPackagesUpdateTimeInHours); if (availableUpdatesRefreshRate > 0) { final int rateInMinutes = java.lang.Math.round((availableUpdatesRefreshRate * HOURS_TO_MINUTES)); scheduler.scheduleWithFixedDelay(availableUpdatesRefreshRate, 15, rateInMinutes, java.util.concurrent.TimeUnit.MINUTES); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Initializing initializing {}", getClass().getSimpleName()); isoDomainRefreshRate = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoRepoDomainRefreshTime)) * (org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.MIN_TO_MILLISECONDS); scheduler.scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.MILLISECONDS); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Finished initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Finished initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.storage.domain.IsoDomainListSynchronizer.log.info("Finished initializing {}", getClass().getSimpleName()); }
private void scheduleJobs(long regularInterval, long initialInterval) { getExecutor().scheduleWithFixedDelay(new org.ovirt.engine.core.common.businessentities.VDSUnit(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.V4V4, initialInterval, regularInterval, java.util.concurrent.TimeUnit.MINUTES); }
@javax.annotation.PostConstruct private void initialize() { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Initializing {}", getClass().getSimpleName()); java.lang.Integer backupCheckPeriodInHours = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupCheckPeriodInHours); if (backupCheckPeriodInHours > 0) { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Finished initializing {}", getClass().getSimpleName()); } }
public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug("Quota cache Quota cache: " + getQuotaDao().getAllQuotaIncludedConsumption(); if (allQuotaIncludedConsumption.isEmpty()) { return; } java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuota.containsKey(quota.getStoragePoolId()))) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota); } } lock.writeLock().lock(); try { storagePoolQuotaMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid>(); } catch (java.lang.Exception e) { log.error("Error updating. Exception: {}", e); } finally { lock.writeLock().unlock(); } }
public void availableUpdates() { hostDao.getAll().stream().stream().stream().stream().stream().stream.select(this.getStatus().stream().filter((h) -> closeAvailable())).forEach(this.submitCheckupdatesForHost); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Initializing initializing {}", getClass().getSimpleName()); scheduler.scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.DAYS); org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.DataCenterCompatibilityVersion.log.info("Initializing {}", getClass().getSimpleName()); }
public void triggerNow() { if ((updateTimerJob)!= null) { try { updateTimerJob.cancel(true); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.storage.OvfDataUpdater.log.error("Failed cancelling existing job: {}", e); } } updateTimerJob(scheduleWithFixedDelay(this, 0, org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(t)); }
public void onTimer() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(java.util.Comparator. naturalOrder()); if (retVal.isPresent()) { org.ovirt.engine.core.compat.Version version = retVal.get(); storagePoolDao.getAll().stream().filter((storagePool) -> (version.compareTo(storagePool.getCompatibilityVersion())) > 0).forEach((storagePool) -> logAlert(version, storagePool)); } }
@java.lang.Override public java.util.Date getNextRunTime(javax.enterprise.concurrent.LastExecution lastExecution, java.util.Date date) { java.util.Date nextExecutionDate = generator.next(); return nextExecutionDate; }
@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Initializing initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); getClass().scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
private void managePrestartedVmsInAllVmPools() { try { vmPoolDao.getAll().stream().filter((pool) -> (pool.getPrestartedVms()) > 0).forEach(this::managePrestartedVmsInPool); } catch (java.lang.Throwable t) { org.ovirt.engine.core.bll.VmPoolMonitor.log.error("Exception", t); } }
public void engineIsRunningNotification() { try { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Heartbeat - Start-Start - Start"); dwhHistoryTimekeepingDao.save(heartbeatVar); org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.debug("Heartbeat - End-End"); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.dwh.DwhHeartBeat.log.error("Exception", ex); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Initializing {}", getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format("%1$d %d * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * cronExpression); schedonExpression.scheduleJobExecution.schedule(new org.ovirt.engine.core.common.utils.EngineCronTrigger(cronExpression)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncCommandPollingLoopInSeconds); initCommandExecutor(); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.executor.scheduleWithFixedDelay(this, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void update() { try { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> storagePools = storagePoolDao.getAllByStatus(StoragePoolStatus.Up); updateOvfData(storagePools); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.storage.OvfStoreDiskDataUpdater.log.error("Error updating ovf data: {}", e); org.ovirt.engine.core.bll.storage.OvfDataUpdater.log.error("Exception", t); } }
private void doCleanup() { try { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start deleteAgedOutCommand Entities"); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start deleteAgedOutCommand Entities"); org.ovirt.engine.core.bll.CommandEntityCleanupManager.removeAllCommandsBeforeDate(latestTimeToKeep); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished deleteAgedOutCommand Entities"); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("DeleteAgedOutCommand failed with exception", e); } }
public void cleanCompletedJob() { java.util.Date succeededJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(succeededJobTime, java.util.concurrent.TimeUnit.MINUTES)))); java.util.Date failedJobsDeleteTime = new java.util.Date(((java.lang.System.currentTimeMillis()) - (java.util.concurrent.TimeUnit.MILLISECONDS.convert(failedJobTime, java.util.concurrent.TimeUnit.MINUTES)))); try { jobDao.deleteCompletedJobs(succeededJobsDeleteTime, failedJobsDeleteTime); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.error("Failed to delete completed jobs: {}", e.getMessage()); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.debug("Exception", e); } }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); scheduler.scheduleWithFixedDelay(new java.util.concurrent.TimeUnit.SECONDS); }
public org.ovirt.api.metamodel.concepts.Method createMethod(com.thoughtworks.qdox.model.JavaClass java.util.List<java.lang.String> method) { org.ovirt.api.metamodel.concepts.Method method = new org.ovirt.api.metamodel.concepts.Method(); analyzeName(javaClass, method); if (org.ovirt.api.metamodel.metamodel.analyzer.Method method = method.getMethods().getMethod(); if (method!= null) { addFollowParameter(method); } analyzeAnnotations(javaClass, method); javaClass.getMethods().forEach((x) -> analyzeMethodMember(x, method)); method.setDeclaringService(service); createSignature(javaClass, service); return method; }
private void registerIfaceInMacPool(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reassignMac) { iface.setMacAddress(macPool.allocateNewMac()); } else { if (!(macPool.addMac(iface.getMacAddress()))) { auditLogMacInUse(iface); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.MAC_ADDRESS_IS_IN_USE); } }
@org.junit.Test public void add() { runAddAndVerify(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), false, times(0)); }
@org.junit.Test public void addWithExistingMacAddressSucceeds() { org.ovirt.engine.core.common.businessentities.network.VmNic iface = org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(); runAddAndVerify(iface, true, times(1)); }
@org.junit.Test public void removeAll() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = java.util.Arrays.asList(org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface(), org.ovirt.engine.core.bll.network.VmInterfaceManagerTest.createNewInterface()); when(vmNicDao.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.removeAll(org.ovirt.engine.core.compat.Guid.newGuid()); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface); } }
public org.ovirt.engine.core.bll.network.macpoolmanager.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engine.core.utils.MacAddressRangeUtils.macToAllocate(macPool.getId())); return macPoolUsingRanges; }
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.export.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.export.ImportVmCommandBase.getCurrentUser()); boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.export.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.export.ImportVmCommandBase.getCompensationContext(), reconstructMac); }
private void allocateMacsMissingInMacPool(org.ovirt.engine.core.bll.network.macpoolmanager.MacPool macPool, java.util.Map<java.lang.String, java.lang.Long> preexistingMacsUsageFrequency) { java.util.List<java.lang.String> macsToAcquire = new java.util.LinkedList<>(); for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry : macsFromRequestUsageFrequency.entrySet()) { java.lang.String mac = entry.getKey(); java.lang.Long currentUsage = entry.getValue(); java.lang.Long currentUsage = entry.getValue(); java.lang.Long currentUsage = entry.getValue(); java.lang.Long currentUsage = preexistingMacsUsageFrequency.get(mac); long macToAcquire = (currentUsage == null)? targetUsage : targetUsage)? targetUsage : targetUsage; java.util.stream.Long currentMacsUsage = (currentUsage == null)? targetUsage : targetUsage)? targetUsage : targetUsage; java.util.stream.Long currentMacs = (currentUsage == null)? targetUsage : macsToAcquire.add(mac)); } macPool.addMacs(macsToAcquire); }
protected void runAddAndVerify(org.ovirt.engine.core.common.businessentities.network.VmNic iface, boolean reserveExistingMac, org.mockito.verificationMode addMacVerificationMode addMacVerification) { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(vmInterfaceManager.getOsRepository()).thenReturn(osRepository); when(osRepository.hasNicHotplugSupport(anyInt(), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(true); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.context.NoOpCompensationContext.getInstance(), reserveExistingMac); if (reserveExistingMac) { verify(macPool, times(1)).forceAddMac(iface.getMacAddress()); } else { verifyZeroInteractions(macPool); } verifyAddDelegatedCorrectly(iface, addMacVerification); }
@javax.interceptor.AroundInvoke public java.lang.Object manageTransaction(javax.interceptor.InvocationContext ctx) throws java.lang.Exception { long start = java.lang.System.currentTimeMillis(); try { return ctx.proceed(); } catch (java.lang.Exception e) { throw e; } finally { org.ovirt.engine.core.common.interfaces.LoggingInterceptor.logger.debug("Logging {}", e.getMethod().getName(), e.getParameters(), ((java.lang.System.currentTimeMillis()) - start)); } }
@java.lang.Override public org.ovirt.engine.core.common.queries.QueryReturnValue runQuery(org.ovirt.engine.core.common.queries.QueryType actionType, org.ovirt.engine.core.common.queries.QueryParametersBase parameters) { return runQueryImpl(actionType, parameters, true, null); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionReturnValue runAction(org.ovirt.engine.core.common.action.ActionType actionType, org.ovirt.engine.core.common.action.ActionParametersBase parameters) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = notAllowToRunAction(actionType); if (returnValue!= null) { return return return returnValue; } return runActionImpl(actionType, parameters, false, null); }
private void changeScsiDeviceToVirtioScsi(java.util.Map<java.lang.String, java.lang.Object> vmStruct) { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.Object>[] devices = ((java.util.Map<java.lang.String, java.lang.Object>) (vmStruct.get(VdsProperties.Devices))); java.util.Map<java.lang.String, java.lang.Object>[] devices = ((java.util.Map<java.lang.String, java.lang.Object>[]) (vmStruct.get(VdsProperties.Devices))).filter((device) -> VdsProperties.Scsi.equals(device.get(VdsProperties.Device))).filter((device) -> VdsProperties.VirtioScsi.equals(device.get(VdsProperties.Device))).filter((device) -> device) -> { device.put(VdsProperties.Device, VdsProperties.VirtioScsi); device.remove(VdsProperties.Model); } }
protected void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.RegisterEntityInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
private void resizeToFullHeight() { scrollPanel.setHeight(((org.ovirt.engine.ui.common.widget.form.VisibleSizeConverter.PX.getType()))); }
private void resizeGridToFullHeight() { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int windowHeight = com.google.gwt.user.client.Window.getClientHeight(); int contentHeight = this.getTableHeaderElement().getOffsetHeight(); if (contentHeight == 0) { contentHeight += scrollbar; } else { contentHeight += getGridHeaderHeight(); } if (isHorizontalScrollbarness && ((top > 0) && (top; maxGridHeight += org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACTIVACT; if ((top > 0) && (top; maxGridHeight += (top > 0)) { super.setHeight(((java.lang.Math.min(maxGridHeight, contentHeight)) + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public static int determineScrollbarThickThickThick() { com.google.gwt.user.client.ui.FlowPanel panel = new com.google.gwt.user.client.ui.FlowPanel(); panel.getElement().getStyle().setWidth(100, Unit.PX); panel.getElement().getStyle().setHeight(100, Unit.PX); panel.getElement().getStyle().setOverflow(100); com.google.gwt.dom.client.Element id scrollbarHeight = (panel.getOffsetHeight()) - (panel.getElement().getClientHeight()); com.google.gwt.dom.client.Element id scrollbarHeight = (panel.getOffsetHeight()) - (panel.getElement().getClientHeight()); com.google.gwt.dom.client.Element idScrollbarsHeight = (panel.getOffsetHeight()) - (panel.getElement().getClientHeight()); com.google.gwt.dom.client.Element id = scrollbar.getElement(); return scrollbarHeight; }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, true); appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.addColumn(appNameColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotInfoPanel.constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
protected static com.google.gwt.user.client.ui.Widget createDefaultLoadingIndicator(org.ovirt.engine.ui.common.widget.table.resources.ImagesLoadingIndicator(org.ovirt.engine.ui.common.widget.table.resources.Resource resources) { com.google.gwt.resources.client.ImageResource loadingImgwt = org.ovirt.engine.ui.user.widget.table.cell.VolumeLoadingIndicator(resources.dataFromLoading(); if (loadingImgwt == null) { return null; } com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(loadingImgwt.resources.clientImage(LoadingImgwt.ui.AbstractImage.resources.p(LoadingImgwt.clientImage.ui.Image.IN_COL_PX)); if (image!= null) { return image; } com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(loadImage(loadingImage); image.getElement().getStyle().setMargin(0, org.ovirt.engine.ui.userportal.widget.table.cell.VolumeCell.resources.pgwt.client.ui.ImageHtml image.from(org.ovirt.engine.ui.webadmin.widget.table.column.VolumeCell.resources.pgwt.client.ui.ImageHtmlUtils.from(org.ovirt.engine.ui.user.widget.table.table.column.VolumeImageStatusColumn.resources.p) { return image; }
public void switchTab(org.ovirt.engine.ui.webadmin.TabListItem tabItem) { boolean found = false; for (int i = 0; i < (abs.getWidgetCount()); i++) { org.gwtbootstrap3.client.ui.TabListItem tabListItem = ((org.gwtbootstrap3.client.ui.TabListItem) (navTabs.getWidget(i))); if (tabItem.getText().equals(tabListItem.getText())) { tabListItem.showTab(); org.gwtbootstrap3.client.ui.TabPanel panel = ((org.ovirt.engine.ui.webadmin.section.main.view.TabPane) (tabContent.getWidget(i))); tabContent.remove(tabVlanHeaderContainer, 0); tabContent.add(tabPane); } else { org.gwtbootstrap3.client.ui.TabPane tabPane = ((org.ovirt.engine.ui.webadmin.plugin.ui.TabPanel) (tabPane.getWidget(i))).insert(0); } else { org.gwtbootstrap3.client.ui.TabPanel panel = ((org.ovirt.engine.ui.webadmin.plugin.ui.TabPanel) (tab.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tab.getWidget(i))); ((com.google.gwt.user.client.ui.FlowPanel) (tab.getWidget(i))); found = true; } else { org.gwt.client.ui.TabPanel panel = ((org.ovirt.engine.ui.common.widget.table.TabPanel) (tabContent.getWidget(i))); ((com.google.gwt.user.client.ui.TabPanel) (tab.getWidget(i))).remove(tabHeaderContainer); tabPaste.setActive(false); } } if ((!found) && ((org.gwt.user.client.ui.TabPanel) (tab.getWidget().getWidget(0))).showTab(); org.ovirt.engine.ui.web.plugin.TabListItem = ((org.ovirt.engine.ui.common.utils.Tab
private void initNetworksTable() { networksTable.enableColumnResizing(); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> nameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return network.getName(); } }; networksTable.addColumn(nameColumn, org.ovirt.engine.ui.common.widget.uicommon.popup.pool.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.network.Network> descriptionColumn = new org.ovirt.engine.ui.common.widget.uicommon.popup.popup.IscsiBondPopupWidget.constants.name(), "40%"); org.ovirt.engine.ui.common.widget.uicommon.popup.popup.IscsiBondPopupWidget.constants.description(), "60%"); org.ovirt.engine.ui.common.widget.uicommon.popup.popup.network.IscsiBondPopupWidget.constants.description(), "60%"); }
public void enableColumnResizing() { if (isTableHeaderVisible()) { table.enableColumnResizing(); } else { enableColumnResizing(); } enableColumnResizing(); }
void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel model) { java.lang.String width = "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.client.Data.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.popup.utils.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.elementName(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomain(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.storageDomain(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), org.ovirt.engine.ui.common.widget.uicommon.popup.quota.ChangeQuotaView.constants.quota(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setRowData(new java.util.ArrayList()); listHeaderPanel.setWidget(listHeader); }
private static java.util.List<org.ovirt.engine.api.model.BaseResource> getInlineResources(java.lang.Object obj) { java.util.ArrayList<org.ovirt.engine.api.model.BaseResource> ret = new java.util.ArrayList<>(); for (java.lang.reflect.Method method : org.ovirt.engine.api.util.LinkHelper.getRelevantMethods(obj.getClass())) { java.lang.Object inline = null; try { if (inline!= null) { if (inline!= null) { if (inline!= null) { if (inline.getName().equals(getClass())) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { ret.add(((org.ovirt.engine.api.model.BaseResource) (inline))); } else if (inline!= null) { if (inline instanceof org.ovirt.engine.api.model.BaseResource) { org.ovirt.engine.api.model.BaseResources entities = ((org.ovirt.engine.api.model.BaseResource) (inline)); java.lang.reflect.Method getter = org.ovirt.engine.api.utils.EntityHelper.getCollectionGetter(entities); try { java.util.List<org.ovirt.engine.api.model.BaseResource> entitiesList = ((java.util.List<org.ovirt.engine.api.model.BaseResource>) (getter.invoke(entities))); for (org.ovirt.engine.api.model.BaseResource entity : entitiesList) { ret.add(entity); } } } } catch (java.lang.Exception e) { } } else { ret.addAll(org.ovirt.engine.api.restapi.util.LinkHelper.getInlineResources(inline)); } } } return ret; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public <T> T getValue(org.ovirt.engine.core.common.config.ConfigValues name, java.lang.String version) { java.util.Map<java.lang.String, java.lang.Object> values = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(name.toString()); if ((values!= null) && (values.containsKey(version))) { throw new java.lang.IllegalArgumentException(("Unsupported value has value for version: " + version)); } throw new java.lang.IllegalArgumentException(("Unsupported value: " + version)); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllFromDisksIncludingSnapshotsByDiskId(org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered()); if (((disks.size()) == 1) && ((disks.get(0)) instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage) { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(disks.get(0)); return; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = new java.util.ArrayList<>(); disks.stream().filter((disk) ->!(disk instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).forEach((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).map((disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).getActive())); activeDisk = disk; activeDisk.getSnapshots().addAll(snapshots); } else { snapshots.add(disk); } }
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(1); }
@java.lang.Override protected void setUpEntityQueryExpectations(java.lang.String query) throws java.lang.Exception { setUpEntityQueryExpectations(1); }
private void setUpEntityQueryExpectations(int times, java.lang.Object failure) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(QueryType.GetAllDisks, org.ovirt.engine.core.common.queries.GetAllDisksResourceTest.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, getEntityList(), failure); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> getEntityList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities = new java.util.ArrayList<>(); for (int i = 0; i < (NAMES.length); i++) { entity.add(getEntity(i)); } return entities; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(imagesHandler.fillSnapshotsToDiskImages(diskImages)); } }
@java.lang.Override public org.ovirt.engine.api.model.Disks list() { return mapCollection(getBackendCollection(QueryType.GetAllDisks, new org.ovirt.engine.core.common.queries.QueryParametersBase())); }
@java.lang.Override public void onBind() { super.onBind(); registerHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverridePresenterWidget.ViewDef) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverriddenContentWidget.getView())).getCloseButton().addClickHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverrideContentEvent.getView())).getCloseButton().addClickHandler(((org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractOverrideContentEvent.constants) (getView())).getCloseButton().addClickHandler(new com.google.gwt.event.shared.RevealOverrideContentEvent(null)))); }
private void activateDataCenter() { org.ovirt.engine.core.common.businessentities.StorageDomain masterDomain = storageDomainDao.getStorageDomains(org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.getStoragePool().getId(), StorageDomainType.Master).stream().findFirst().orElse(null); org.ovirt.engine.core.bll.storage.FenceVdsManualyCommand.calcStoragePoolStatusByDomainsStatus(); log.info("Waiting domain id '{}' Host id '{}' (masterDomain!= null? masterDomain.getId() : null), (masterDomain!= null), (masterDomain.getStatus()) : null)); if ((((masterDomain!= null) && ((((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) || ((masterDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Inactive)))) { resetSPM(); } }
public void refresh() { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.clear(); java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list = org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.getAll(); for (org.ovirt.engine.core.common.businessentities.VdcOption option : list) { try { if (((!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()))) || (!(org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName())))) || (org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils._vdcOptionCache.get(option.getOptionName()))) { updateOption(option); } } catch (java.lang.NoSuchFieldException e) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.error("Error refreshing field '{}': {}", option.getOptionName(), org.ovirt.engine.core.common.config.ConfigValues.class.getSimpleName()); } } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> moveDependentToEnd(java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> list) { java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> isDependent = (o.getOptionName()); if (parsed!= null) { org.ovirt.engine.core.dal.dbbroker.generic.EnumValue parsed = parseEnumValue(o.getOptionName()); if (paavior == null) { return false; } return false; } java.util.List<org.ovirt.engine.core.common.businessentities.VdcOption> optionsList = list.stream().filter(isDependent.gate()).collect(java.util.stream.Collectors.toList()); optionsList.addAll(list.stream().filter(java.util.stream.Collectors.toList()); return optionsList; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { addCustomValue("Source IP", org.apache.commons.lang.StringUtils.isEmpty(sourceIp)? UNKNOWN : org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_LOGOUT_FAILED : org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_LOGOUT_FAILED : org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_LOGOUT_FAILED : org.ovirt.engine.core.bll.aaa.LogoutLogCommand.getSucceeded())); return org.ovirt.engine.core.bll.aaa.LogoutLogCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_LOGOUT_FAILED : org.ovirt.engine.core.bll.aaa.LogoutLogoutLogCommand.getSucceeded(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = sessionDataContainer.getProfile(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.AuthenticationProfileCommand.setSucceeded(true); } else { sourceIp = sessionDataContainer.getSourceIp(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); sessionDataContainer.setSessionValid(org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.aaa.LogoutSessionCommand.setSucceeded(true); } }
public int getTotalNumberOfMacs() { return totalNumberOfMacs; }
public int getTotalNumberOfMacs() { int count = 0; for (org.ovirt.engine.core.bll.network.macpoolmanager.Range range : ranges) { count += range.getTotalMacs(); } return count; }
private void updateBackup() { if (((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((getCurrentStorageItem().getRole()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) { isBackup().setIsAvailable(false); return; } boolean backupSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.BackupSupported, getDataCenter().getCompatibilityVersion().toString()))); isBackup().setIsAvailable(false); if (isNewStorage()) { isBackup().setEntity(false); } else { isBackup().setEntity(getStorage().isBackup()); } }
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.isBackup().getEntity()); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> isBackup() { return backup; }
private void writeMemoryBacking() { if (!(org.ovirt.engine.core.common.utils.HugePagesUtils.isBackedByHugepages(vm.getStaticData()))) { return; } writer.writeStartElement("hugepages"); writer.writeStartElement("hugepages"); int hugepageSize = java.lang.Integer.parseInt(org.ovirt.engine.core.common.utils.HugePagesUtils.getHugePagesSize(vm.getStaticData())); java.util.List<java.lang.Integer> hugepages = hostStatisticsSupportsCpu(); if ((hugepagesSessions.size()) > (java.util.stream.Collectors.size()) { switch (hugepageSizes.size()) { case x86 : 0; break; case 1 : case x86_ : throw new java.lang.RuntimeException("size", ((hugepageSizes.size()) + 1024)); break; case xc : hugepageSize = 16; break; case 655pageSize = 16; break; case 655pageSize = 16; break; } } writer.writeAttributeString("size", java.lang.String.valueOf(hugepagesSize)); writer.writeEndElement(); }
public java.util.concurrent.Future<org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse> call(org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest req, org.ovirt.vdsm.jsonrpc.client.BrokerCommandCallback callback) throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final org.ovirt.vdsm.jsonrpc.client.internal.Call call = new org.ovirt.vdsm.jsonrpc.client.internal.Call(req, executor.getMessage()); this.tracker.registerCall(jsonToByteArray(req.toJson())); this.tracker.registerCall(jsonToByteArray(req.toJson())); } finally { this.getClient().sendMessage(jsonToByteArray(req.toJson())); } return call; }
public void setExecutorService(java.util.concurrent.Executor<java.lang.Boolean> executeCommand) { this.executor = executor.getExecutor(); }
public void processResponse(org.ovirt.vdsm.jsonrpc.client.JsonRpcResponse response) { org.codehaus.jackson.JsonNode id = response.getId(); if ((org.codehaus.jackson.node.NullNode.class.isInstance(id)) || (id == null)) { this.tracker.processIQ(response); return; } org.ovirt.vdsm.jsonrpc.client.internal.JsonRpcCall call = this.tracker.removeCall(response.getId()); if (call == null) { this.log.error("Exception while to update response for {}", response.getId()); return; } call.addResponse(response); if (((call.getCallback())!= null) && ((call.getExecutor())!= null)) { call.getExecutor().submit(java.util.Collections.emptyMap())); } }
void onFailure(java.lang.Throwable t);
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); pollingRate = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AsyncTaskInSeconds); initCommandExecutor(); schedulerUtil.scheduleAFixedDelayJob(this, "invokeCallbackMethods", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pollingRate, pollingRate, java.util.concurrent.TimeUnit.SECONDS); org.ovirt.engine.core.bll.tasks.CommandCallbacksPoller.log.info("Start initializing {}", getClass().getSimpleName()); }
@org.junit.Before public void setUp() { injectorRule.bind(org.ovirt.engine.core.dao.provider.ProviderDao.class, providerDao); inject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.class, auditLogDirector); provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setId(org.ovirt.engine.core.bll.network.external.ExternalNetworkManagerTest.PROVIDER_ID); provider.setUrl(java.lang.String.format("https://%s/", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_IP)); when(provider.getProviderProxyLocator().getProviderType(ProviderType.EXTERNAL_NETWORK)).thenReturn(java.util.Arrays.asList(provider)); when(providerDao.getAllByTypes(org.ovirt.engine.core.bll.network.external.ExternalNetworkManagerTest.PROVIDER_ID)).thenReturn(java.util.Arrays.asList(createNetwork())); }
public boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = vmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
public boolean isOsTypeSupportedForVirtioScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion, java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isDiskInterfaceSupportedByOs(osId, clusterVersion, DiskInterface.VirtIO_SCSI); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI.name()); } return result; }
public java.util.Set<org.ovirt.engine.core.compat.Guid> fetchVmDisks(org.ovirt.engine.core.utils.ovf.xml.XmlDocument xmlDocument) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksIds = new java.util.HashSet<>(); XmlNode references = xmlDocument.selectSingleNode("//*/References"); for (XmlNode file : references.selectNodes("File")) { disksIds.add(org.ovirt.engine.core.compat.Guid.createGuidFromString(file.attributes.get("ovf:href").getValue().substring(0, org.ovirt.engine.core.utils.OvfUtils.GUID_LENGTH))); } return disksIds; }
public boolean isOsTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.ArchitectureType architectureType, java.util.List<java.lang.String> reasons) { boolean result = vmValidationUtils.isOsTypeSupported(osId, architectureType); if (!result) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_NOT_SUPPORTED_BY_ARCHITECTURE_TYPE.toString()); } return result; }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator())!= null)? org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable.getLoadingIndicator()) : NO_HEIGHT; if (rowCount > (ROW_HEIGHT) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
@java.lang.Override public void onLoad() { super.onLoad(); int rowCount = org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable.getLoadingIndicator())!= null)? loaded : NO_ITEMS_HEIGHT; if (rowCount > (ROW_HEIGHT)) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
private void resizeGridToContentHeight(int height) { int top = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getAbsoluteTop(); int maxGridHeight = ((com.google.gwt.user.client.Window.getClientHeight()) - (org.ovirt.engine.ui.common.widget.table.ActionCellTable.GRID_SUBTRACT); int contentHeight = org.ovirt.engine.ui.common.widget.table.ActionCellTable.determineBrowserHeightAdjustment(height); if (contentHeight > maxGridHeight) { contentHeight += scrollbar; } if (contentHeight > maxGridHeight) { contentHeight += scrollbar; } if (contentHeight > maxGridHeight) { super.setHeight((contentHeight + (Unit.PX.getType()))); } org.ovirt.engine.ui.common.widget.table.ActionCellTable.redraw(); }
public void updateGridSize() { int rowCount = org.ovirt.engine.ui.common.widget.table.ActionCellTable.getRowCount(); int height = ((org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator())!= null)? org.ovirt.engine.ui.common.widget.table.ActionCellTable.getLoadingIndicator())!= null : NO_ITEMS_HEIGHT; if (rowCount > (ROW_HEIGHT)) { height = rowCount * (ROW_HEIGHT); } updateGridSize(height); }
public static boolean isHighPerCoreTypeSupported(org.ovirt.engine.core.compat.Version version) { return java.lang.Boolean.parseBoolean(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.IsHightenanceTypeSupported, version.getValue())); }
@org.junit.Test public void testGetAllClustersByDefaultNetworkProviderId() { assertThat(dao.getAllClustersByDefaultNetworkProviderId(FixturesTool.DEFAULT_NETWORK_PROVIDER_ID).size(), is(3)); }
public void setVmsInHours(long expired) { this.restarted = expired; }
public long getMaxFence() { return expired; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn getImageTicket(java.lang.String ticketId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.get_image_ticket_id", ticketId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("ticketInfo", ticketInfo).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("ticketInfo", new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn(response); return new org.ovirt.engine.core.vdsbroker.vdsbroker.ImageTicketInformationReturn(response); }
private boolean isReduceVolumeSupported() { return org.ovirt.engine.core.common.FeatureSupported.isReduceVolumeSupported(org.ovirt.engine.core.bll.ReduceImageCommand.getStoragePool().getCompatibilityVersion()); }
@java.lang.Override public void setupCompensationDataAfterSuccess() { macPool.freeMacs(macsToReleaseOnCommit); log.debug(("Failed successfully executed, releasing macs: {0}", (macsToReleaseOnCommit))); }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macPool.freeMacs(macs); log.debug("Unable non-compensation state, never releasing macs", macs); }
@org.junit.Test public void testReactionToDuplicatesWhenDuplicatesDuring() throws java.lang.Exception { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges macPoolUsingRanges = createMacPoolDisallocateWithEmpty(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolWithRangesTest.MAC_ADDRESS, org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolWithExistCommandTest.MAC_ADDRESS_NO_DUPLICATES_SETTING); verify(auditLogDirector).log(any(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl.class), eq(AuditLogType.MAC_ADDRESS_NO_DUPLICATES_SETTING, anyString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Snapshot s1, org.ovirt.engine.core.common.businessentities.Snapshot s2) { if (((s1.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.ACTIVE)) || ((s.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return -1; } if (((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW)) || ((s2.getType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.PREVIEW))) { return java.util.Collections.singletonList().compareTo(s1.getCreationDate()); } return s2.getCreationDate().compareTo(s1.getCreationDate()); }
@java.lang.Override public void setItems(java.util.Collection value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = (value!= null)? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Snapshot>cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = new java.util.ArrayList<>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> sortedSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = snapshotsMap.get(snapshot.getId()); if (snapshotModel == null) { snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); snapshotsMap.put(snapshot.getId(), snapshotModel); } snapshotModel.setEntity(snapshot); if (((snapshot.getType())!= (org.ovirt.engine.core.common.businessentities.Snapshot.Snapshot.SnapshotType.PREVIEW)) || ((getInPreviewSnapshots()) == null)) { sortedSnapshots.add(snapshot); } } else { updatePreviewedDiskSnapshots(sortedSnapshots); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.api.model.VmType type) { if (type == null) { return null; } switch (type) { case DESKBALL : return org.ovirt.engine.api.model.UnsupportedType(type); throw new java.lang.IllegalArgumentException((("Illegal exception \"\" type \"" + "\"") + "\"")); } }
public static org.ovirt.engine.api.model.VmType mapVmType(org.ovirt.engine.core.common.businessentities.VmType type) { if (type == null) { return null; } switch (type) { case Server : return org.ovirt.engine.api.model.VmType.DESK; default : throw new java.lang.IllegalArgumentException((("Unknown virtual machine type \"" + type) + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.core.common.businessentities.VmType incoming) { switch (type) { case Desktop : return org.ovirt.engine.api.model.VmType.DESKTOP; case Server : return org.ovirt.engine.api.model.VmType.DESKTOP; case Advanced : return org.ovirt.engine.api.model.VmType.HIGH_PERCENT; default : return null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.VmType.class, to = org.ovirt.engine.api.model.VmType.class) public static org.ovirt.engine.api.model.VmType map(org.ovirt.engine.api.model.VmType type, org.ovirt.engine.core.common.businessentities.VmType incoming) { switch (type) { case DESKTOP : return org.ovirt.engine.api.model.VmType.HOSType.get(0).getHKey(); case OPEN_PERFOR_MANFOR_MANFOR_MANCE : return org.ovirt.engine.api.model.KatelloVmType.HOSType.get(0).getHOSType().getHighly(); default : return null; } }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmtGuid())) { return failValidation(EngineMessage.VM_POOL_CANNOT_CREATE_FROM_BLANK_TEMPLATE); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.High Performance)) && (!(org.ovirt.engine.core.common.FeatureSupported.isHigh PerformanceTypeSupported(org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_HIGH_PERFORMANUAL_IS_NOT_SUPPORTED, java.lang.String.format("$VmLargeIcon %s", org.ovirt.engine.core.bll.AddVmPoolCommand.getEffectiveCompatibilityVersion())); } if (((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon())!= null) && (!(validate(org.ovirt.engine.core.bll.validator.IconValidator.validate(IconValidator.DimensionsType.LARGE_CUSTOM_ICON, org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmLargeIcon()))))) { return false; } if ((org.ovirt.engine.core.bll.AddVmPoolCommand.getParameters().getVmStaticData().getNumOfIoThreads()) > 1) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NUM_OF_IO_THREADS_CANNOT_EXCEED); } return true; }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds().isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } if (((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }
@java.lang.Override protected void executeCommand() { createSnapshots(); }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmWithWait() { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(); liveStorageMigrationEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.LIVE_STORAGE_MIGRATION, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED))); lockManager.acquireLockWait(liveStorageMigrationEngineLock); return liveStorageMigrationEngineLock; }
@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid storageDomainId = getStorageDomainId(action); org.ovirt.engine.api.model.Disk disk = get(); org.ovirt.engine.core.compat.Guid imageId = getDiskImageId(disk.getImageId()); org.ovirt.engine.core.compat.Guid sourceStorageDomainId = getSourceStorageDomainId(disk); org.ovirt.engine.core.common.action.MoveDiskParameters params = new org.ovirt.engine.core.common.action.MoveDiskParameters(imageId, sourceStorageDomainId, storageDomainId); params.setImageGroupID(asGuid(disk.getId())); return doAction(ActionType.MoveDisks, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionList = new java.util.ArrayList<>(); permissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.CONFIGURE_DISK_STORAGE)); return permissionList; }
@org.junit.Test public void testMoveById() throws java.lang.Exception { setUpEntityQueryExpectations(QueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID }, getEntity(1)); setUriInfo(setUpActionExpectations(ActionType.MoveDisks, org.ovirt.engine.core.common.action.MoveDiskParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, null, null, null, null, null, null, null)); verifyActionResponse(resource.move(setUpParams(false)), "disks/" + (org.ovirt.engine.api.restapi.resource.BackendDiskResourceTest.DISK_ID)), false); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskImageDao.get(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskVmElements = diskVmElementDao.getAllDiskVmElementsByDiskId(diskImage.getImage().getDiskId()); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.cloneContextAndDetachFromParent()); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); engineLock = lockVmWithWait(vmId); actionReturnValues.add(org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters(), vmId), org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.cloneContextAndDetachFromParent()); } else { org.ovirt.engine.core.compat.Guid vmId = diskVmElements.get(0).getVmId(); if (actionType == null) { lockReturnValue.add(org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, createLiveMigrateDiskParameters(org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.get
protected org.ovirt.engine.core.common.action.ActionType getMoveActionType(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskVmElement) { if (diskVmElement.isEmpty()) { return org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; } org.ovirt.engine.core.common.action.VdcActionType actionType = org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk; }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), moveDiskParameters.getDiskProfileId(), org.ovirt.engine.core.bll.storage.disk.MoveDisksCommand.getParameters().getImageGroupID()); }
@java.lang.Override public java.lang.String toString() { java.util.Map<java.lang.String, java.lang.String> result = new java.util.LinkedList<>(); for (java.lang.String job : entry) { threadStateMap.entrySet().entrySet().stream().forValue(entry.getValue(), entry.getKey().name()))); } }
private void processThread(java.lang.Thread poolInfo) { java.util.Arrays.asList(threadsInfo); }
private void processThreads(java.lang.Long threadInfo) { if (threadInfo.startsWith("e)) { java.lang.String[] threadName = threadInfo.getThreadName().split("-"); if ((threadPoolInfo.length) > 2) { threadPoolInfoMap.putIfAbsent(threadPoolInfo.get(threadName[2], new org.ovirt.engine.core.bll.utils.ThreadPoolInfo(threadPoolInfo[2])); } } }
@javax.annotation.PostConstruct public void init() { try { threadManager.getThreadPoolBean(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException(("Initializing Thread monitoring service"); } org.ovirt.engine.core.utils.ThreadPoolMonitoringUtil.log.info("Initializing Thread monitoring service"); }
private void monitorEngineThreadPool() { try { threadPoolInfoMap.clear(); java.util.Arrays.asList(threadPoolBeList(threadPoolBean.getAllThreads()).stream().forEach((threadPoolBean.getThreads()))); java.util.List<java.lang.String> info = new java.util.ArrayList<>(); for (java.lang.String entry : org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringUtils.log.info("\n", "ThreadPoolsInfo: '{}'", ""); threadPoolInfoMap.entrySet().stream().forValue(entry.getValue().toString())); org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Exception", ex); } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.utils.ThreadPoolMonitoringService.log.info("Exception", ex); } }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix(org.ovirt.engine.core.utils.NetworkUtils.getInstance().getPrefix(org.ovirt.engine.core.utils.Network.class).getPrefix("ovf", "http://http://http://http://http://")); }
@java.lang.Override public org.ovirt.engine.api.model.SystemOption get() { try { org.ovirt.engine.core.common.config.ConfigValues config = org.ovirt.engine.api.restapi.util.ParametersHelper.getConfigValues(id); java.lang.String version = org.ovirt.engine.api.restapi.util.ParametersHelper.getParameter(httpHeaders, uriInfo, "version"); if ((version!= null) && (!(version.isEmpty()))) { parameters.setOptionVersion(version); } org.ovirt.engine.core.common.queries.QueryReturnValue result = runQuery(QueryType.GetSystemOption, parameters); if ((result!= null) && (!(result.getReturnValue().isEmpty()))) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(org.ovirt.engine.api.restapi.types.SystemOptionsMapper.map(id), true); } catch (java.lang.IllegalArgumentException ex) { return handleError(new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(id), true); } } }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHostTooSmall() { vds.setMemFree(8835L); boolean vmPassedMemoryRequirement = isHighMemoryRequirement = (vmPassedMemoryRequirement.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsTooLowOverhead() { vds.setMemFree(8835L); doReturn(0laValidator).when(vmOverheadCalculator).getEnumsThreshold(any()); org.ovirt.engine.core.common.businessentities.VM vmPassedMemoryRequirement = vmPassedEngine.getEmulatedMachine().getEnum(); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = isSwapValid(vds, vm, 64); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Before public void prepareTest() { vds = basicHost(); vm = basicVm(); doReturn(0).when(vmOverheadCalculator).getEnumsuredOverhead(any()); doReturn(org.ovirt.engine.core.bll.storage.CpuManager.getInstance().getPropertiesUtils().getPossibleOverhead(any()); when(vmOverheadCalculator.getTotalRequiredMemoryInMb(vm)).thenCallRealMethod(); when(vmOverheadCalculator.getOverheadMb(vm)).thenCallRealMethod(); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsSmallHost() { vds.setPhysicalMemMb(5000); boolean vmPassedMemoryRequirement = isHighMemoryRequirement = (vmPassedMemoryRequirement.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = islaValidatedMemoryRequirement = islaValidatedMemoryRequirement(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); vds.setPhysicalMemMb(15); boolean vmPassedMemoryRequirement = isHighMemoryRequirement; }
@org.junit.Test public void testBalanceCpuLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_cpu_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "600"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNILIZED.getDbName(), "1000"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertNotNull(result); assertNotNull(result); assertEquals(result.getSecond()); assertEquals(result.getSecond()); assert
@org.junit.Test public void validateVmMemoryCanRunOnVdsHighMemLowOverhead() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); doReturn(vmPassedMemoryRequirement).when(vmOverheadCalculator).getEnum(); vmPassedMemoryRequirement = java.util.Collections.singletonList(vmPassedMemoryRequirement, true); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsVmTooOverhead() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = java.util.Collections.singleton(vmPassedMemoryRequirement, true); assertEquals(vmPassedMemoryRequirement, true); }
public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if ((curVds.getMemFree())!= null) { double vmMemRequired = (vm.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("vm '{}'; free memory is : {} MB pending memory is: {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, requiredMemory, requiredMemory, curVds.getName(), vdsMemRequired, pendingMemory, curVds.getSwapFree(), vmMemRequired, curVds.getSwapFree(), vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired); return vmMemRequired <= vdsMemLimit; } else { return false; } }
public boolean hasOvercommitMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm) { double vmMemRequired = vmOverheadCalculator.getTotalRequiredMemoryInMb(vm); double vdsMemLimit = curVds.getMaxSchedulingMemory(); org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasMemory"); max scheduling memory : {} MB; required memory is {} MB; Guest overhead {} MB curVds.getName(), vdsMemLimit, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemRequired, vmMemLimit); return vmMemRequired <= vdsMemLimit; }
@org.junit.Test public void validateVmMemoryCantStartOnVdsDue() { boolean vmPassedMemoryRequirement = islaValidedMemoryRequirement = islaValidatedMemoryRequirement(vds, vm, 64); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsDue() { doReturn(256).when(vmOverheadCalculator).getEnumsuredOverhead(any()); boolean vmPassedMemoryRequirement =slaValidator.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void testBalanceCpuAndMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_cpem_load.cpemem_cpem_load.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "150"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNIT_UNILIZED.getDbName(), "1000"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertResult == null; }
@org.junit.Test public void validateVmMemoryCantRunOnVdsHighly() { doReturn(1024).when(vmOverheadCalculator).getEnumsuredOverhead(any()); boolean vmPassedMemoryRequirement =slaValidator.hasOvercommitMemoryToRunVM(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCanStartOnVdsDueOfLowGuestOverhead() { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.memory.StartOnVdsCommandTest.hasPhysMemoryToRunVM(vds, vm, 64); boolean vmPassedMemoryRequirement = java.util.Arrays.hasPhysMemoryToRunVM(vds, vm, 64); assertEquals(vmPassedMemoryRequirement, true); }
@org.junit.Test public void validateVmMemoryCantRunOnVdsNotEnoughMem() { vm.setMinAllocatedMem(10000); vm.setVmMemSizeMb(10000); boolean vmPassedMemoryRequirement = isVmMemSizeMb(vds, vm); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsVmTooBigSize() { vm.setMinAllocatedMem(8865); vm.setVmMemSizeMb(8865); boolean vmPassedMemoryRequirement = java.lang.String.format("$memPassedMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, false); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = isSwapValid(vds, vm, 64); assertEquals(vmPassedMemoryRequirement, true); }
public void setVmOverheadCalculator(org.ovirt.engine.core.bll.utils.VmOverheadCalculator vmOverheadCalculator) { this.vmOverheadCalculator = vmOverheadCalculator; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm()); } if ((org.ovirt.engine.core.bll.snapshots.LiveSnapshotsFromVmCommand.getParameters().isSaveMemory()) && (isLiveSnapshotApplicable())) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getCluster(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationHostList(), new java.util.ArrayList(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this, splaValidator), org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this, SchedaValidator), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn!= null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.VmHandler.getRunVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn!= null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }
@org.junit.Test public void validateVmMemoryCanRunOnVds() { boolean vmPassedMemoryRequirement = islaValidMemoryRequirement(vds, vm); assertEquals(vmPassedMemoryRequirement, true); }
protected boolean getVdsToRunOn() { org.ovirt.engine.core.compat.Guid vdsToRunOn = schedulingManager.schedule(org.ovirt.engine.core.bll.RunVmCommand.getCluster(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getVm(), org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList(), getVdsWhiteList(), getPredefinedVdsIdListToRunOn(), new java.util.ArrayList(), org.ovirt.engine.core.bll.RunVmCommand.getCorrelationId()); setVdsId(vdsToRunOn); if ((vdsToRunOn!= null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.RunVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); org.ovirt.engine.core.bll.RunVmCommand.setVdsName(null); if (org.ovirt.engine.core.bll.RunVmCommand.getVdsId().equals(Guid.Empty)) { org.ovirt.engine.core.bll.RunVmCommand.log.error("Couldn't find VDS to run the VM '{}' on, this VM will not be run.", org.ovirt.engine.core.bll.RunVmCommand.getVds()); return false; } if ((org.ovirt.engine.core.bll.RunVmCommand.getVds()) == null) { org.ovirt.engine.core.common.errors.EngineException outEx = new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.RESOURCE_MANAGER_VDS_NOT_FOUND); org
@org.junit.Test public void testBalanceNoLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_save_save.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_save_save_save_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "1024"); parameters.put(org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList()); org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.bll.scheduling.PolicyUnitCommand.getReturnValue().getSucceeded(true);
@org.junit.Test public void testBalanceCpuAndMemLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_save_save_percent_cpus_cpem_load", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_save_save_save_vms_percent", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UN_UTILIZED.getDbName(), "1024"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UTILIZED.getDbName(), "128"); parameters.put(unit).setDbName(null); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.compat.Guid.class), anyList(), anyList()); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid> result = new java.util.Array
@org.junit.Test public void testBalanceMediumLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_power_saving_hosts", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_power_save_save_save.csv_percent", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "1024"); parameters.put(org.ovirt.engine.core.bll.scheduling.policyunits.PowerSavingBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts); doReturn(null).when(unit).evaluatePowerManagementSituation(any(org.ovirt.engine.core.common.businessentities.Cluster.class), anyList(), anyList(), anyList()); org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> command = new java.util.ArrayList<>(); org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine
protected int calcEvenDistributionScore(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { int score = (MaxSchedulerWeight) - 1; java.lang.Integer effectiveCpuCores = slaValidator.getEffectiveCpuCpuCpuCpuCores(vds, countThreadsAsCores); if ((effectiveCpuCores!= null) && ((vds.getUsageCpuPercent())!= null)) { score = java.lang.Math.min((((int) (java.lang.Math.round(calcDistributeMetric(vds, vm, effectiveCpuCores)))) + 1), org.ovirt.engine.core.bll.scheduling.policyunits.MaxSchedulerWeight); } score -= (vds.getMaxSchedulingMemory()) / 100; return score; }
@org.junit.Test public void testBalanceCpuAndHighMemoryLoad() throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache = newCache(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDS> hosts = loadHosts("basic_balancing_cpum_limit.csv", cache); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = loadVMs("basic_balancing_vms.csv", cache); org.ovirt.engine.core.common.businessentities.Cluster cluster = new org.ovirt.engine.core.common.businessentities.Cluster(); java.util.Map<java.lang.String, java.lang.String> parameters = new java.util.HashMap<>(); parameters.put(PolicyUnitParameter.HIGH_MEMORY_LIMIT_FOR_UNDER_UTILIZED.getDbName(), "150"); parameters.put(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UN_UTILIZED.getDbName(), "00000000"); java.util.ArrayList<java.lang.String> messages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.scheduling.policyunits.EvenDistributionBalancePolicyUnit unit = mockUnit(policyUnit, cluster, hosts, vms); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> result = unit.balance(cluster, new java.util.ArrayList(hosts.values()), parameters, messages); assertResult == null; }
public void updatePendingData(int pendingMemory, int pendingCpuCount) { synchronized(this) { cachedVds.setPendingVmemSize(pendingCpuCount); cachedVds.setPendingVmemSize(pendingMemory); org.ovirt.engine.core.vdsbroker.Monitoring.refresh.refreshCommitedMemory(cachedVds, vmDao.getAllRunningForVds(getVdsId()), resourceManager); updateDynamicData(cachedVds.getDynamicData()); }
public void setLastVmsList(java.util.List<org.ovirt.engine.core.common.businessentities.VM> lastVmsList) { this.lastVmsList = lastVmsList; }
@java.lang.Override protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.vdsbroker.VmStatisticsFetcher.log(dbVm, java.util.Map<java.lang.String, java.lang.String> vdsmVm) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, vdsmVm)); if (org.ovirt.engine.core.vdsbroker.Monitoring.log.isDebugEnabled()) { logBuilder.append(java.lang.String.format("$VmName %s", vdsmVm.getVmDynamic().getId().toString().substring(0, 8), vdsmVm.getVmDynamic().getStatus())); } }
public static boolean refreshCommitedMemory(org.ovirt.engine.core.common.businessentities.VDS host, java.util.Collection<org.ovirt.engine.core.common.businessentities.VM> vms, org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { boolean memoryUpdated = host.getGuestOverhead(); int vmsCoresCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm!= null) && ((vm.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.WaitForLaunch))) && ((vm.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { final org.ovirt.engine.core.vdsbroker.VmManager vmManager = resourceManager.getVmManager(vm.getId()); memCommited += resourceManager.computeCommitedMemoryInMb(vm); vmsCoresCount += vmManager.getNumOfCpus(); } } if (memCommited!= null) { host.setMemCommited(memCommited); memoryUpdated = true; } return memoryUpdated; }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> dbVms) { for (org.ovirt.engine.core.common.businessentities.VM dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
protected void gatherChangedVms(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVdsmVmVm, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVmVmVmVm) { if (statusChanged(dbVm, vdsmVm.getVmDynamic())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vmStats = getResourceManager().runVdsCommand(VDSCommandType.GetVmStats, new org.ovirt.engine.core.common.vdscommands.GetVmStatsVDSCommandParameters(vdsManager.getVdsId(), vdsmVm.getVmDynamic().getId())); if (vmStats.getSucceeded()) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVdsm) (vmStats.getReturnValue())))); } else { if (dbVm!= null) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher.log.error("Failed to fetch VM '{}' stats. status remain unchanged ({})", dbVm.getId(), dbVm.getStatus()); } } } }
public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getLastVmsList() { return lastVmsList; }
@org.junit.Before public void setup() { org.mockito.MockitoAnnotations.initMocks(this); when(dbFacade.getVmDao()).thenReturn(vmDao); when(dbFacade.getVmDao()).thenReturn(vmDao); org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(VmTestPairs.SRC_HOST_ID); when(vdsManager.getCopyVds()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds); when(vdsManager.getVdsId()).thenReturn(vds); }
private boolean isVmDown(org.ovirt.engine.core.common.businessentities.VM dbVm, org.ovirt.engine.core.common.businessentities.VmDynamic vdsmVm) { return ((dbVm.getDynamicData()) == null) || ((dbVm.getStatus())!= (vdsmVm.getStatus())); }
@org.junit.experimental.theories.Theory public void changedVms(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); org.ovirt.engine.core.common.businessentities.VM oldVm = ((data.dbVm) == null)? null : new org.ovirt.engine.core.common.businessentities.VM(data.dbVm.getStaticData(), data.dbVm.getStatisticsData()); assertTrue(vms.fetch()); assertTrue(((data.dbVm())!= null)); assertTrue(((data.vdsmVm())!= null)); assertTrue(((oldVm.getStatus())!= (data.vdsmVm.getVmDynamic().getStatus()))); assertEquals(1, vmsListFetcher.getChangedVms().size()); assertSame(vmsListFetcher.getChangedVms().size()); }
protected void filterVms() { for (org.ovirt.engine.core.vdsbroker.auditloghandling.VmVmVm : vdsmVms.values()) { org.ovirt.engine.core.common.businessentities.VM dbVms = dbVms.get(vdsmVm.getVmDynamic().getId()); gatherChangedVms(dbVm, vdsmVm); } }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assertTrue(vms.fetch()); assertTrue(((data.dbVm())!= null)); assertTrue(((data.dbVm())!= null)); verify(vdsManager).setLastVmsList(vdsManager).getLastVmsList(vdsManagerCaptor.capture()); assertEquals(data.vdsManager.getInstance().getVmDynamic(), vdsManagerCaptor.getValue().get(0)); }
private void saveLastVmsList(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.vdsbroker.VmChangedVmChangedVm> vdsmVms) { vdsmVmsList = vdsmVms.values().map(vdsmVm.getVmDynamic().getVmDynamic().get(id)); }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmDynamic, org.ovirt.engine.core.vdsbroker.vdsbroker.VmChangedVm>> getChangedVms() { return changedVms.stream().map(r.getFirst().getDynamicData(), r.getSecond())).collect(java.util.stream.Collectors.toList()); }
protected void onFetchVms() { dbVms = getVmDao().getAllRunningForVds(vdsManager.getVdsId()).stream().collect(java.util.stream.Collectors.toMap(VM.getVdsId())); changedVms = new java.util.ArrayList(); filterVms(); gatherNonRunningVms(dbVms); }
public org.ovirt.engine.core.dao.VmDao getVmDao() { return dbFacade.getVmDao(); }
private void stubCalls(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { when(resourceManager.runVdsCommand(eq(VDSCommandType.List), any(org.ovirt.engine.core.common.vdscommands.VdsIdAndVDSCommandParametersBase.class))).thenReturn(getVdsReturnValue(data.vdsmVmTest.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.getVm())); if ((data.vmDao.getAllRunningForVds(VmTestPairs.SRC_HOST_ID)).thenReturn(java.util.Collections.singletonList(data.dbVm())); } if ((data.vdsmVm())!= null) { when(resourceManager.runVdsCommand(eq(VDSCommandType.GetVmStats), any(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase.class))).thenReturn(getStatsReturnValue(data.vdsmVm())); } }
void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall);
private boolean shouldReReinstallVds() { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.bll.hostdeploy.UpdateVdsCommand.getParameters().getVdsStaticData(); org.ovirt.engine.core.common.businessentities.VdsStatic oldVdsStatic = oldHost.getStaticData(); return ((vdsStatic.isVdsNeedsReinstall()) && (!(vdsStatic.isPmKdumpDetection())) && (!(java.util.Objects.equals(vdsStatic.getCurrentKernelCmdline(), oldVdsStatic.getCurrentKernelCmdId()))); }
private void updateHosts() { for (org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic : vdsStaticDao.getAllForCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId())) { if (!(vdsStaticDao.getAllForCluster(vdsStatic.getId()))) { org.ovirt.engine.core.bll.UpdateClusterCommand.log.info("Update cluster {0} has failed: '{}'", vdsStatic.getName(), true); } } }
protected void markVdsReinstalled() { org.ovirt.engine.core.bll.VdsCommand.getVdsStaticDAO().update(org.ovirt.engine.core.bll.VdsCommand.getVds().getStaticData().getId(), false); }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { vdsStatic.setVdsNeedsReinstall(vdsNeedsReinstall); }
@java.lang.Override public void updateVdsNeedsReinstall(org.ovirt.engine.core.compat.Guid vdsStaticId, boolean vdsNeedsReinstall) { getCallsHandler().executeModification("UpdateVdsNeedsReinstall", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VDS_ID, new org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Boolean>() { @java.lang.Override public void update(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String vdsId) { getCallsHandler().executeUpdateVdsReinstall(vdsNeededHostNeeded, vdsStaticId); } }); }
public boolean isVdsNeedsReinstall() { return vdsNeedsReinstall; }
public void setVdsNeedsReinstall(boolean vdsNeedsReinstall) { this.vdsNeedsReinstall = vdsNeedsReinstall; }
private void readCpuItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualQuantity = selectSingleNode(node, "rasd:VirtualQuantity", _xmlNS); if (virtualQuantity!= null) { vmBase.setNumOfSockets(java.lang.Integer.parseInt(virtualQuantity.innerText)); vmBase.setCpuPerSocket(1); } else { vmBase.setNumOfSockets(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:num_of_sockets", _xmlNS).innerText)); vmBase.setCpuPerSocket(java.lang.Integer.parseInt(selectSingleNode(node, "rasd:cpu_per_socket", _xmlNS).innerText)); vmBase.setThreadsPerCpu(parseNodeInteger(node, "rasd:threads_threads_per_cpu", 1)); } }
@java.lang.Override protected void executeCommand() { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_VM_NAME, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmName()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VAR_MEMORY_SIZE_MB); addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_VAR_VAR_DEVICE_ID, org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getParameters().getDeviceId().toString()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.HotUnplugMemory, new org.ovirt.engine.core.bll.HotUnplugMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getRunOnVds(), getDeviceToHotUnplug(), org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem()); if (!(vdsReturnValue.getSucceeded())) { addCustomValue(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VDS_ERROR_MESSAGE, vdsReturnValue.getVdsError().getMessage()); setReturnValueFailure(vdsReturnValue); return; } if (((org.ovirt.engine.core.bll.HotUnplugMemoryCommand.AUDIT_LOG_VDS) == (getUnpluggedDeviceSize())) { updateVm(); } org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().setVdsError(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getMinAllocatedMem()); setReturnValueFailure(vdsReturnValue); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getBroker().hotUnplugMemory(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createHotplugMemoryParamsMap(org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.getMemoryDeviceToUnplug(), true, org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.getParameters().getMinAllocatedMem())); org.ovirt.engine.core.vdsbroker.HotUnplugMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.HotUnplugVDSCommand.getVDSReturnValue().setExceptionString(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), createMemoryDevice()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.EngineFault fault = new org.ovirt.engine.core.common.errors.EngineFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias, int minAllocatedMem) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memGuaranteedSize", minAllocatedMem); data.put("memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }
@org.ovirt.api.metamodel.annotations.Link types.HostExternalNetworkProvider[] externalNetworkProviders();
@org.ovirt.api.metamodel.annotations.Link types.OpenStackNetworkProvider defaultNetworkProvider();
@org.ovirt.api.metamodel.annot input[] inputDetail() { mandatory(cluster().name()); or (Mandatory(cluster().name())) || (Mandatory(cluster().name()))) { mandatory(cluster().serializationType.minor()); optional(cluster().serialize()); optional(cluster().cpu().type()); optional(cluster().cpu().type()); optional(cluster().cpu().architecture()); optional(cluster().cpu().architecture()); optional(cluster().cpu().image_architecture()); optional(cluster().display().type()); optional(cluster().errorHandling().enableIfConnectivityBroken().enableIfSdActive().enabled()); optional(cluster().errorsHandling().transportMirroring().enableIfSdActive().enabled()); optional(cluster().errorsRequired(clusterPolicy.masterNetwork().incrementThreshold()); optional(cluster().scheduleOverCommit().transparentAcrossClusterPolicyRequired()); optional(clusterPolicy.masterNetwork().incrementRequired()); optional(clusterPolicy.master().trustedServiceRequired()); optional(cluster().trustedServiceRequired()); optional(clusterPolicy.master().trustedServiceRequired()); optional(clusterPolicy); optional(cluster().tunnelMigration()); optional(clusterPolicy); }
@java.lang.Override public org.ovirt.engine.api.resource.HostExternalNetworkProvidersResource getExternalProvidersResource() { return null; }
protected void syncChildCommandList(org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = commandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskCommandBase.getCommandId()); if ((childCommandIds.size())!= (parameters.getChildCommands().size())) { for (org.ovirt.engine.core.compat.Guid id : childCommandIds) { if (!(parameters.getChildCommandStep().containsValue(id))) { parameters.getChildCommands().put(parameters.getCommandStep(), id); } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().getImageGroupId())); java.util.List<org.ovirt.engine.core.compat.Guid> failedGuids = getFailedVolumeIds(); if (failedGuids.isEmpty()) { log.info("No images were successfully removed: {}", failedGuids); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = getParameters().getParentCommand(); if (org.ovirt.engine.core.bll.DestroyImageCheckCommand.getParameters().isEmpty()) { failedGuids = true; } else { log.error("Remove following images were not removed: {}", failedGuids); } } else { log.error("Remove disk from database: {}", org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getParentCommand()); } }
protected void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); }
protected void logTimeoutException(java.util.concurrent.TimeoutException e, org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { log.error("Timeout waiting for VDSM response: {}", e.getMessage()); log.debug("Exception", e); }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("mdev_types", entity.getIommuGroup()).addValue("mDevu_group", entity.getIommuGroup()).addValue("product_id", entity.getProductName()).addValue("product_id", entity.getProductName()).addValue("vendor_name", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("network_iface_name", entity.getNetworkInterfaceName()).addValue("network_iface_name", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_SIZE", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"))); }
protected void markImagesIllegalIfNotInDb(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid snapshotId) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDb = diskImageDao.getAllSnapshotsForVmSnapshot(snapshotId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesInDbMap = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDiskImagesByIdMap(imagesInDb); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage fromConfigImg : vm.getImages()) { if (((fromConfigImg.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (!(imagesInDbMap.containsKey(fromConfigImg.getImageId())))) { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper.log.debug("Image '{}' of Disk '{}' cannot be found in database. This image will be returned as ILLEGAL from the query", fromConfigImg.getImageId(), fromConfigImg.getId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInDb = imagesInDbMap.get(fromConfigImg.getImageId()); fromConfigImg.setImageStatus(ImageStatus.ILLEGAL); } }
private org.ovirt.engine.core.common.AuditLogType attemptToAttachDisksToImportedVm(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.Disk> disks) { java.util.List<java.lang.String> failedDisks = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : disks) { org.ovirt.engine.core.common.businessentities.storage.DiskImage dve = disk.getDiskVmElements().iterator().next(); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskToVmParameters(dve, disk.getPlugged()); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskToVmParameters(dve, disk.getPlugged()); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskToVmParameters(dve, vm.getPlugged()); if (!(returnVal.getSucceeded())) { failedDisks.add(disk.getDiskAlias()); } } if (!(failedDisks.isEmpty())) { org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_ATTACH_SUCCUTED_SUCCESSFULLY; } return org.ovirt.engine.core.common.AuditLogType.VM_IMPORT_FROM_CONFIGURATION_SUCCESSFULLY; }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = null; if (diskAttachments.isSetDiskAttachments()) { diskToImageIds = diskAttachments.getDiskAttachments().stream().stream().map(java.util.Objects.getDiskId(), null); } return diskToImageIds; }
private java.lang.String maskPassword(java.lang.String queryString) { return queryString.replaceAll("password=[&&]+", "password=" + password=") + password=") + password = password=")"; }
types.ResumeBehavior();
private void onUpgrade() { if ((getProgress())!= null) { return; } org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(host.getId(), getLatch().getEntity().getEntity().getEntity().getEntity().booleanValue()); invokeHostUpgrade(params); }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansibleCommandBuilder().hostnames(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DELEVEL_DIRECTORY).logFilePrefix("ovirt-host-mgmt-ansible").logFileName(host.getHostName()).logFileName("ovirt-host-mgmt-assible").log(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbookmark(org.ovirt.engine.core.common.utils.CorrelationIdTracker.getCorrelationId()).playbookmark(org.ovirt.engine.core.common.utils.CorrelationIdTracker.getCorrelationId()).playbookmark(org.ovirt.engine.core.common.utils.AnsibleReturnCode.OK)) { throw new java.lang.RuntimeException("Failed to update host '{}'.", host.getName()); } } catch (java.lang.InterruptedException | java.io.IOException ex) { throw new java.lang.RuntimeException(ex); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(Mandatory(Mandatory(cluster().id()), mandatory(configuration); }
@org.ovirt.api.metamodel.annotations.In services.RegistrationConfiguration registrationConfiguration();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or (Mandatory(cluster().id())) { or(clone()); optional(clone()); optional(template.name()); optional(template.name()); optional(template.get().name()); }
protected boolean validateNetworkProviderConfiguration(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { if (provider == null) { return true; } org.ovirt.engine.core.common.businessentities.Provider provider = providerDao.get(providerId); if (provider == null) { return false; } if (((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OPENSTACK_NETWORK)) || ((provider.getType()) == (org.ovirt.engine.core.common.businessentities.ProviderType.OpenstackNetworkProviderType.OPENSTACK_NETWORKS_NAME)) || (!(validateOpenstackNetworkProviderProperties(provider.getType()))) { return false; } return true; }
private boolean validateOpenstackNetworkProviderProperties(org.ovirt.engine.core.compat.Guid providerId, java.lang.String networkMappings) { org.ovirt.engine.core.bll.provider.NetworkProviderValidator validator = new org.ovirt.engine.core.bll.provider.NetworkProviderValidator(providerDao.get(providerId)); return ((validate(validator.providerIsSet())) && (validate(validator.providerTypeIsOpenstack()))) && (validate(validator.providerTypeIsOpenstack()))) && (validate(validator.networkMappingsProvided(networkMappings)))) && (validate(validator.providerMappingsProvided())); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getTxTotal())!= null? totalRenderer.render(hostInterface.getTxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.constants.notAvailableLabel(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterface hostInterface) { return (hostInterface.getRxTotal())!= null? totalRenderer.render(hostInterface.getRxTotal()) : org.ovirt.engine.ui.webadmin.widget.host.HostNetworkInterfaceBondedListView.constants.notAvailableLabel(); }
@java.lang.Override public javax.ws.rs.core.Response upgrade(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters params = new org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters(guid); if (action.isSetImage()) { params.setoVirtIsoFile(action.getImage()); } return doAction(ActionType.UpgradeHost, params, action); }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOvf(java.lang.String ovf) { try { return ovfHelper.readVmFromOvf(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.export.ConvertVmCommand.log.debug(("Failed to parse a given ovf configuration: " + ovf), e); throw new org.ovirt.engine.core.common.errors.EngineException(); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()); vm.setClusterArchitecture(ovf.getOvfData()); vm.setClusterArch(ovf.getArchitecture()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error(("Failed to parse a given ovf configuration: " + (e.getOvfData())), e.getMessage()); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setExceptionString(vmList); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }
@java.lang.Override protected void executeQueryCommand() { if (ConfigurationType.OVF.equals(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getConfigurationType())) { try { org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setReturnValue(ovfHelper.readVmFromOvf(org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration()); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setSucceeded(true); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error(("Failed to parse a given ovf configuration: " + (org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e); org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getQueryReturnValue().setExceptionString(((org.ovirt.engine.core.bll.GetVmFromConfigurationQuery.getParameters().getVmConfiguration())), e.getMessage()); } } }
public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmTemplate, org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData> readVmTemplateFromOvf(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplate(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData) { template.getDiskTemplateMap().put(disk.getId(), disk); } return new org.ovirt.engine.core.common.utils.Pair(template, fullEntityOvfData); }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getVmConfigurationInStatelessSnapshotOfVm(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = snapshotDao.get(vmId, SnapshotType.STATELESS); if (snapshot == null) { return java.util.Optional.empty(); } try { return java.util.Optional.of(ovfHelper.readVmFromOvf(snapshot.getVmConfiguration()).getFirst(); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { throw new java.lang.RuntimeException(e); } }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error(("Failed to parse a given ovf configuration: " + (e.getOvfData())), e.getMessage()))); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(((("Failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> templateDisksMap = new java.util.HashMap<>(); for (java.lang.String ovf : ovfList) { try { if (ovfHelper.isOvfTemplate(ovf)) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = ovfHelper.readVmTemplateFromOvf(ovf); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDisksMap = new java.util.ArrayList(vmTemplate.getDiskTemplateMap().values()); templateDisksMap.put(vmTemplate, templateDisks); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return templateDisksMap; }
private boolean validateMemoryTakenInSupportedVersion() { org.ovirt.engine.core.common.businessentities.VM vmFromSnapshot = null; try { vmFromSnapshot = ovfHelper.readVmFromOvf(getDstSnapshot().getVmConfiguration().getVmConfiguration().getVmConfiguration().getVmConfiguration().getFirst()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error("Failed to parse a given ovf configuration: {}", e.getMessage()); return false; } org.ovirt.engine.core.compat.Version originalClusterVersion = vmFromSnapshot.getClusterCompatibilityVersionOrigin(); if (org.ovirt.engine.core.compat.Version.getLow().greater(originalClusterVersion)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_MEMORY_TOO_OLD, java.lang.String.format("$%s %s", org.apache.commons.lang.StringUtils.join(originalClusterVersion))); } return true; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.getStorageDomainIds(), org.ovirt.engine.core.bll.export.memory.MemoryCommand.getParameters().getStorageDomainId()).setStoragePoolId(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); } java.util.Set<java.lang.String> allMemoryVolumes = org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryVolumesFromSnapshots(getVm().getSnapshots()); for (java.lang.String memoryVolumes : allMemoryVolumes) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(memoryVolumes); org.ovirt.engine.core.common.businessentities.storage.DiskImage metadataDisk = createMemoryDisk(guids.get(2), guids.get(4), GUIDS.get(5)); images.add(memoryDisk); } } removeVmImages(images); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); disk.setId(diskId); disk.setImageId(imageId); disk.setStoragePoolId(imageId); disk.setStoragePoolId(org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()); disk.setWipeAfterDelete(false); disk.setActive(false); disk.setActive(true); return disk; }
public void setRoleMap(java.util.Map<java.lang.String, java.lang.Object> roleMap);
public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap();
public java.util.Map<java.lang.String, java.lang.Object> getRoleMap();
public java.util.Map<java.lang.String, java.lang.Object> getAffinityLabelMap();
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); java.util.Map<java.lang.String, java.util.Map> registrationMap = getRegistrationMappings(map); params.setClusterMap(reg registrationMap.get(ExternalRegistrationConfigurationMapper.get(ExternalRegistrationConfigurationMapper.KEY)); params.setContainerId(guid); params.setStorageDomainId(getClusterId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action.isAllowPartialImport()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap);
public java.util.Map<java.lang.String, java.lang.Object> getDomainMap() { return org.ovirt.engine.core.common.businessentities.StorageDomainType.DISKsmHook; }
@java.lang.Override public void setAffinityGroupId(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap) { getAffinityGroupMapDao().update(getParameters().getClusterId()); }
public void setVmSnapshotMap(java.util.Map<java.lang.String, java.lang.Object> domainMap);
public void setClusterMap(java.util.Map<java.lang.String, java.lang.Object> clusterMap) { this.clusterMap = clusterMap; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap() { return getAffinityGroupMap().get(getParameters().getClusterId()); }
public java.util.Map<java.lang.String, java.lang.Object> getClusterMap() { return clusterMap; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.Object> getAffinityGroupMap() { return getAffinityGroupMap().get(clusterId); }
public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap) { this.userMap = domainMap; }
@java.lang.Override public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabel) { getAffinityGroupMapDao().update(getParameters().getId()); }
public java.util.Map<java.lang.String, java.lang.Object> getDomainMap();
public void setAffinityGroupMap(java.util.Map<java.lang.String, java.lang.Object> affinityGroupMap);
public java.util.Map<java.lang.String, java.lang.Object> getExternalLunMap();
public void setClusterId(java.util.Map<java.lang.String, java.lang.Object> clusterMap);
public void setExternalLunMap(java.util.Map<java.lang.String, java.lang.Object> externalLunMap);
public java.util.Map<java.lang.String, java.lang.Object> getClusterMap();
private void mapCluster(java.lang.String clusterName) { if ((org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVmMap())!= null) { java.lang.String cluster = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getVmMap().get(clusterName); org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().setClusterId(cluster.getId()); org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().setClusterId(cluster.getId()); } }
private java.lang.String generateMetaDataFile(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); addCustomValue(vmAndTemplatesIds, data); addCustomValue(data, true); return buildJson(data, true); }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(action); validateClusterMappings(action); validateClusterMappings(action); validateAffinityGroupMappings(action); validateAffinityGroupMappings(action); org.ovirt.engine.core.common.action.ImportVmFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmFromConfParameters(getVnicProfileMappings(action), getReassignBadMacs(action)); org.ovirt.engine.api.restapi.types.ExternalProviderConfigurationMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(parent.getStorageDomainId()); params.setClusterId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } if (action.isSetAllowPartialImport()) { params.setAllowPartialImport(action); } return doAction(ActionType.ImportVmFromConfiguration, params, action); }
private void validateRoleMappings() { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetRoleMappings())) && (action.getRegistrationConfiguration().getRoleMappings().isSetRegistrationRoleMappings())) { action.getRegistrationConfiguration().getRoleMappings().getRoleMappings().getRoleMappings().get(this.getId()).getRoleMapping(); } }
private void validateRoleMapping(org.ovirt.engine.api.model.RegistrationRole role) { if (!(mapping.isSetFrom())) { validRequest("Role name is missing from destination."); } }
private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetDomainMappings())) { action.getRegistrationConfiguration().getDomainMappings().getRegistrationDomainMappings().getRegistrationDomainMappings().getRegistrationDomainMappings().get(this.getId().getName())); } }
private void validateAffinityGroupMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityGroupMappings())) && (action.getRegistrationConfiguration().getAffinityGroupMappings().isSetRegistrationAffinityGroupMappings())) { action.getRegistrationConfiguration().getAffinityGroupMappings().getRegistrationAffinityGroupMappings().getRegistrationAffinityGroupMappings().getId().getValue().getValue().getAffinityGroupMappings().getId().getId().isSetAffinityGroupMappings()); } }
private void validateLunMapping(org.ovirt.engine.api.model.RegistrationLunMapping mapping) { if (!(mapping.isSetFrom())) { throw new java.lang.IllegalArgumentException("Lun name is missing from source."); } if (!(mapping.isSetTo())) { badRequest("Lun name is missing from destination."); } }
private void validateAffinityLabelMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetAffinityLabelMappings())) { action.getRegistrationConfiguration().getAffinityLabelMappings().getLabelMappings().getLabelMappings().getLabelMappings().getLabelMappings().getLabelMappings()); } }
private void validateClusterMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetConfiguration())) && (action.getRegistrationConfiguration().getRegistration().getRegistration().isSetRegistration())) { action.getRegistrationConfiguration().getRegistration().getRegistrationClusterMappings().getRegistration().getRegistrationClusterMappings().getRegistration().forEach(this::validateClusterMapping); } }
private void validateLunMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetLunMappings())) && (action.getRegistrationConfiguration().getLunMappings().isSetRegistrationLunMappings())) { action.getRegistrationConfiguration().getLunMappings().getRegistrationLunMappings().getRegistrationLunMappings().getRegistrationLunMappings().getRegistrationLunMappings().get(this::validateLunMapping()); } }
private void writeCpuTune() { writer.writeStartElement("cput"); @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void writeStartElement("unchecked") @java.lang.Override public void writeStartElement("unchecked") java.util.Map<java.lang.String, java.lang.Object> cpuPinning = ((java.util.Map<java.lang.String, java.lang.Object>) (createInfo.get(VdsProperties.cpuPinning))); if (cpuPinning!= null) { writer.writeStartElement("vcpupin"); writer.writeAttributeString("vcpuset", vcpu); writer.writeElement("cpuset", ((java.lang.String) (cpuset))); writer.writeElement("shShares", java.lang.String.valueOf(vm.getCpuShares())); } } if ((vm.getCpuShares()) > 0) { writer.writeElement("shShares", java.lang.String.valueOf(vm.getCpuShares())); } java.lang.String ioCpus = ((java.lang.String) (createInfo.get(VdsProperties.ioThreadsPinning))); if (ioCpus!= null) { for (int i = 0; i < (vm.getNumOfIoThreads()); i++) { writer.writeElement("ioth"); writer.writeElement("i], java.lang.String.valueOf((i + 1))); writer.writeElement(); } } java.lang.String emulatorCpus = ((java.lang.String) (createInfo.get(VdsProperties.emulated))); if (emulatedMachinePinned) { writer.writeStartElement("emulated"); writer.writeElement(); } }
@java.lang.Override public void search() { if ((getEntity())!= null) { boolean getRunningVms = (viewFilterType.isRunningOnHost)); boolean getPinnedVms = (viewFilterType.isRunningOnHost()); boolean getPinnedVms = (viewFilterType.equals(HostVmFilter.all)) || (viewFilterType.equals(HostVmFilter.canRunOnHost)); new org.ovirt.engine.ui.uicommonweb.models.hosts.HostVmListModel.SearchQuery(getRunningVms(), getPinnedVms(), new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery(getRunningVms(), getPinnedVms(), new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsAsyncQuery(getRunningVms(), getPinnedVms(), new org.ovirt.engine.ui.uicommonweb.models.hosts.SetRawItemsModel()).execute(); } else { setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>()); } startGridTimer(); }
private void cancel() { org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel windowModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel) (getWindow())); setWindow(null); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.FenceProxyModel> currentModels = currentProxies.getItemsAsList(); currentModels.remove(java.util.Collections.emptyList()); currentProxies.setItems(java.util.Collections.emptyList()); currentProxies.setItems(currentModels); }
public static org.ovirt.engine.core.common.businessentities.storage.DiskContentType for (int value) { if (value.get(value)) { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); } else { return org.ovirt.engine.core.common.businessentities.storage.DiskContentType.storageMappings.get(value); } }
@org.junit.Test public void testStorageNameLength() { for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType d : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (d!= (Disk.getStorageValue().length()) { assertEquals(4, d.getStorageValue().length()); } } }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { buttonToType = new java.util.LinkedHashMap(); org.gwtbootstrap3.client.ui.RadioButton allButton = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); buttonToType.put(allButton, null); allButton.setText(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.constants.allDisksLabel()); for (org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType : org.ovirt.engine.core.common.businessentities.storage.DiskContentType.values()) { if (contentType!= (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.LEGACY)) { org.ovirt.engine.ui.webadmin.widget.dialog.RadioButton button = new org.gwtbootstrap3.client.ui.RadioButton(org.ovirt.engine.ui.common.widget.uicommon.disks.DisksContentTypeRadioGroup.LABEL_GROUP_NAME); buttonToType.put(button, contentType); } } org.gwtbootstrap3.client.ui.ButtonGroup buttonGroup = new org.gwtbootstrap3.client.ui.ButtonGroup(); buttonGroup.setDataToggle(Toggle.getKey()); buttonToType.entrySet().addClickHandler(((e.getValue()))); buttonGroup.getKey().addClickHandler((event) -> fireChangeHandlers(null); return buttonGroup; }
private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic!= null) && ((vmDynamic.getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("Skip VM id '{}' with status: '{}' with status: '{}'", vmId, vmId, vmDynamic.getStatus()); } else { log.debug("Import entity '{}' with status: '{}' with status: '{}'", vmId, vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.VM); java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { org.ovirt.engine.core.common.businessentities.VM vm = ovfHelper.readVmFromOvf(ovf.getOvfData()).getVm(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageOvfExtraData = storageOvfExtraDataDao.get(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), vm.getId()); if (!(storageOvfExtraData.isEmpty())) { vm.setStatus(org.ovirt.engine.core.common.businessentities.VMStatus.valueOf(storageOvfExtraData.get(0).getEntityValue())); } vm.setClusterArchitecture(ovf.getLowVersion()); vm.setClusterArch(ovf.getArchitecture()); vmList.add(vm); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error(("Failed to parse a given ovf configuration: " + (e.getOvfData())), e.getMessage()); vmList.add(vm); } } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setSucceeded(true); }
private static void initStorageOvfExtraData(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map.Entry<java.lang.String, java.lang.Object> fileEntry) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap = new java.util.HashMap<>(); org.ovirt.engine.core.utils.JsonHelper.log.info("Start to analyze metadata file '{}'.", fileEntry.getKey()); java.lang.String storageDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.getInstance().get(storageMetaData); try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(storageMetaData); } catch (java.io.IOException e) { org.ovirt.engine.core.utils.OvfUtils.log.error("Failed to convert storage ovf extra data from json to map: '{}'.", fileDescriptionMap.getKey()); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadata file '{}' to map: {}", fileEntry.getKey()); } org.ovirt.engine.core.utils.OvfUtils.fetchStorageStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.fetchVmsStatus(storageDomainId, storageExtraData, diskDescriptionMap); org.ovirt.engine.core.utils.OvfUtils.log.info("Finish to analyze metadata file '{}'", fileDescriptionMap.getKey()); }
private void registerOvfStoreDisks() { for (final org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { if (storageDomainStaticDao.get(storageDomainId).getStorageDomainType().isDataDomain()) { org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoredDisksCommand.resetOvfStoreAndUnregisteredDisks(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() { @java.lang.Override public void executeOvfStoreDiskImages() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() { @java.lang.Override public java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData.getEntityId(), storageDomainId); for (java.lang.Object ovf : entitiesFromStorageOvfDisk) { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntityData = ((org.ovirt.engine.core.common.businessentities.OvfEntityData) (ovf)); unregisteredOVFDataDao.removeEntity(ovfEntityData); unregisteredOVFDataDao.saveOVFData(ovfEntityData); org.ovirt.engine.core.bll.storage.pool.log.info("OvfEntityData of entity id '{}' and entity name '{}'", ovfEntityData.getEntityName()); } initUnregisteredDisksToDB(storageDomainId); return null; } } } } }
private void removeEntitiesFromStorageDomain(final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplatesForStorageDomain, final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksForStorageDomain, final org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.String>() { @java.lang.Override public java.lang.Void runInTransaction() { if (((!(vmsForStorageDomain.isEmpty())) || (!(disksForStorageDomain.isEmpty()))) || (!(disksForStorageDomain.isEmpty()))) { for (org.ovirt.engine.core.common.businessentities.VmTemplate vm : vmsForStorageDomain) { removeEntityLeftOver(vm.getId(), vm.getName(), storageDomainId); unregisteredOVFDataDao.saveOVFData(new org.ovirt.engine.core.common.businessentities.OvfEntityData(vm.getId(), vm.getName(), VmEntityType.VM, vm.getClusterArch(), storageDomainId, null, null)); } } for (org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate : vmTemplate.getId(), vmTemplate.getName(), null, null)); } } }
protected void resetOvfStoreAndUnregisteredDisks() { ovfDisks = null; unregisteredDisks = new java.util.ArrayList(); storageOvfExtraData = new java.util.ArrayList(); storageOvfExtraData = new java.util.ArrayList(); }
private static void fetchStorageStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageDomainSharedStatus> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus storageStatus = ((org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus) (diskDescriptionMap.get(OvfInfoFileConstants.DomainStatus))); org.ovirt.engine.core.utils.OvfUtils.log.debug("Storage domain status '{}' fetchedchedched from metadata file for metadata file for metadata file id '{}'.", storageDomainId, storageDomainId); if (storageStatus!= null) { storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageDomainOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.Storage, storageDomainId, storageDomainId, storageDomainId, storageDomainId); } }
private static void fetchVmsStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { java.util.Map<java.lang.String, java.lang.String> vmsStatus = ((java.util.Map<java.lang.String, java.lang.String>) (diskDescriptionMap.get(OvfInfoFileConstants.VmStatus))); if (vmsStatus == null) { org.ovirt.engine.core.utils.OvfUtils.log.error("VM '{}' fetched from metadata file for metadata file '{}'.", vmsStatus.get(vmId), storageDomainId, vmsStatus.get(vmId), storageDomainId, vmsStatus.get(vmId), storageDomainId, vmsStatus.get(vmId), storageDomainId, storageDomainId); storageExtraData.add(new org.ovirt.engine.core.common.utils.OvfHelper(storage.getOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.VM, storageDomainId, vmsStatus.get(vmId), storageDomainId, storageDomainId, storageDomainId); } } }
private void updateCurrentConfiguration(org.ovirt.engine.core.common.businessentities.UpdatedMemory updatedMemory) { final org.ovirt.engine.core.common.businessentities.VmStatic updatedVmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVm().getStaticData()); updatedVmStatic.setMemSizeMb(updatedMemory.getMinAllocatedMem()); updatedVmStatic.setMinAllocatedMem(updatedMemory.getMinAllocatedMem()); org.ovirt.engine.core.bll.HotUnplugMemoryCommand.getVmManager().update(updatedVmStatic); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.StoragePoolParametersBase parameters = new org.ovirt.engine.core.common.action.StoragePoolParametersBase(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getContext()); java.util.HashSet<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (!(proccessedDomains.isEmpty())) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
private void onReplaceConfirmation() { cancelConfirmation(); org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel replaceBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.ReplaceBrickModel) (getWindow())); if (replaceBrickModel == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity volumeEntity = getEntity(); if (volumeEntity == null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity existingBrick = getSelectedItem(); if (existingBrickModel == null) { return; } org.ovirt.engine.core.common.businessentities.VDS server = replaceBrickModel.getServers().getSelectedItem(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity newBrick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); newBrick.setVolumeId(volumeEntity.getId()); newBrick.setServerId(server.getId()); newBrick.setServerName(server.getHostName()); newBrick.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrickModel.getBrickDirectory().getEntity()); newBrickModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeReplaceBrickActionParameters(volumeEntity.getId(), existingBrick, newBrickModel.getBrickDirectory().getEntity()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.ReplaceGlusterVolumeBrick, parameter, (result) { } }
private void invokeHostUpgrade(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.hostdeploy.UpgradeHostParameters parameters) { stopGlusterServices(parameters.getVdsId()); }
private void synchronizeSelection() { if (isSingleSelectionOnly()) { setSelectedItem(selectedItem.asSingleSelectionModel().getSelectionModel()); } else { java.util.List<T> selectedItems = selectionModel.asList(); setSelectedItems(selectedItems.size()); if ((selectedItems.size()) == 1) { setSelectedItem(selectedItems.get(0)); } } }
public void setSelectionModel(org.ovirt.engine.ui.uicommonweb.models.OvirtSelectionModel<T> selectionModel) { this.selectionModel = selectionModel; if (!(selectionModel.isSingleSelectionOnly())) { selectionModel.asMultiSelectionModel().setDataDisplay(this); selectionModel.asMultiSelectionModel().setMultiSelectEnabled(true); } }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getSource()) instanceof org.ovirt.engine.ui.common.widget.list.PatternItem) { org.ovirt.engine.ui.common.widget.list.PatternflyListViewItem = null; for (org.ovirt.engine.ui.common.widget.listgroup.PatternflyListView item : currentState) { if ((item.asListGroupItem()) == (event.getSource())) { clickedItem = item; break; } } if (clickingItem!= null) { selectionModel.clear(); selectionModel.setSelected(clickingItem.getEntity(), true); selectionModel.clear(); } } }
private void processSelectionChanged() { java.util.List<T> selectedItems = getSelectedItems(); selectedIndexes.clear(); model.getItems().addAll(((item) -> { if (selectedItems.contains(item)) { selectedIndexes.add(model.getItemsAsList().indexOf(item)); } } updateInfoPanel(); }
public void setModel(M model) { this.model = model; getModel().getItemsChangedEvent().addListener(this, sender, args) { if ((selectionChangedHandler)!= null) { selectionChangedHandler.removeHandler(); } getModel().getSelectionModel().clear(); }
@java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ISO_PREFIX) + (super.transform(repoImage)); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.lang.String> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.ISO_PREFIX) + (super.transform(repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
public void addMainContentView(java.lang.String label, java.lang.String contentUrl, int priority, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, historyToken); dynamicUrlContentProxyFactory.create(historyToken, contentUrl); }
@java.lang.Deprecated public void addMainTab(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addMainContentView(label, historyToken, contentUrl, options.getPriority().intValue(), options.getIsDefaultPlace().intValue()); }
@java.lang.Override public void onUserLoginChange(org.ovirt.engine.ui.common.auth.UserLoginChangeEvent event) { final com.gwtplatform.mvp.shared.proxy.PlaceRequest requestRequest = getPlaceFromFragment(); if (fragmentRequest!= null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(fragmentRequest); } else { revealPlace(getDefaultMainSectionPlace()); } }
public java.lang.Boolean getIsDefaultPlace() { return getValueAsDefaultPlacePlacePlace(isDefaultPlacePlacePlacePlace, false); }
private boolean isColdReboot() { boolean hotReboot = ((org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunConfigurationExists()) && (!(org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunConfigurationExists()))) || (org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); log.info("Running on performing {} reboot; run once: '{}', running as well", hasNextRunConfiguration: '{}' (Cold), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isRunOnce(), org.ovirt.engine.core.bll.RebootVmCommand.getVm().isNextRunConfigurationExists()); return false; }
private java.lang.Integer getQosBandwidth(org.ovirt.engine.core.compat.Guid clusterId) { final org.ovirt.engine.core.common.businessentities.network.HostNetworkQos migrationHostNetworkQos = org.ovirt.engine.core.bll.network.host.HostNetworkQosDao.getHostNetworkQosDao().getHostNetworkQosOfMigrationNetworkByClusterId(clusterId); if (migrationHostNetworkQos == null) { return null; } if ((migrationHostNetworkQos.getOutAverageRealtime())!= null) { return migrationHostNetworkQos.getOutAverageRealtime(); } return migrationHostNetworkQos.getOutAverageUpperlimit(); }
protected org.ovirt.engine.api.model.Disk addLinks(org.ovirt.engine.api.model.Disk model, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParent, java.lang.String... subCollectionMembersToExclude) { if ((model.isSetQuota()) && (model.getQuota().isSetId())) { org.ovirt.engine.core.common.businessentities.Quota quota = getEntity(org.ovirt.engine.core.common.businessentities.Quota.class, Quota.getQuotaByQuotaId(), "quota"); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(quota.getStoragePoolId().toString()); } org.ovirt.engine.api.model.Disk disk = super.addLinks(model, suggestedParent, subCollectionMembersToExclude); if (disk.isSetStorageDomains()) { disk.getStorageDomains().getStorageDomains().forEach(( storageDomain) -> org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(storageDomain, null, false)); } return disk; }
protected org.ovirt.engine.api.model.Disks mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> entities) { org.ovirt.engine.api.model.Disks collection = new org.ovirt.engine.api.model.Disks(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : entities) { org.ovirt.engine.api.model.Disk model = populate(map(map(disk), disk); if ((model.isSetQuota()) && (disk instanceof org.ovirt.engine.core.common.businessentities.storage.DiskImage)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); model.getQuota().setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getQuota().getDataCenter().setId(image.getStoragePoolId().toString()); } collection.getDisks().add(addLinks(model)); } return collection; }
private void selectRow(int shift) { if ((selectedSet.isEmpty()) || ((dataDisplay) == null)) { return; } int shiftSelectedRow = (lastSelectedRow) + shift; int nextRow = (lastSelectedRow < (dataDisplay.getRowCount())? 0 : shiftSelectedRow + (dataDisplay.getRowCount()); if (disabledRows.contains(nextRow)) { selectRow((shift > 0? 0 : shift - 1)); return; } setSelected(visibleItemsAsList().get(nextRow), true); }
public org.ovirt.engine.core.bll.ValidationResult networkNameNotUsedAsVdsmName() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> conflictingNetworks = getDbFacade().getNetworkDao().getAllForDataCenter(network.getId()); org.ovirt.engine.core.common.businessentities.network.Network network = getDbFacade().getNetworkDao().getAllForDataCenter(network.getId()); if (conflictNetworks.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.Collection<java.lang.String> nameReplacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("ConflictNetworks", conflictNetworks); nameReplacements.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_NAME_USED_INTERFACE_NAME, nameReplacements); }
@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(java.util.Arrays.asList(network, network2)); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_INTERFACE_NAME)); }
@java.lang.Override protected java.lang.String getColorByProgress(int progress) { return org.ovirt.engine.ui.common.widget.table.column.RepoImageProgressColumn.asCode(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.bll.storage.domain.UpdateOvfUpdateForStorageDomainCommand.getStorageDomainId(); org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters parameters = new org.ovirt.engine.core.common.action.ProcessOvfUpdateForStorageDomainCommandParameters(org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStoragePoolId(), org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.getStorageDomainId()); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.ProcessOvfUpdateForStoragePool, parameters, org.ovirt.engine.core.bll.storage.domain.UpdateOvfUpdateForStorageDomainCommand.getContext()); java.util.Set<org.ovirt.engine.core.compat.Guid> proccessedDomains = actionReturnValue.getActionReturnValue(); if (((actionReturnValue.getSucceeded()) && (proccessedDomains!= null)) { runInternalActionWithTasksContext(ActionType.ProcessOvfUpdateForStorageDomain, createProcessOvfUpdateForDomainParams()); } else { log.info("ProcessOvfUpdate update was ignored - nothing to update for storage domain '{}'", storageDomainId); } org.ovirt.engine.core.bll.storage.domain.UpdateOvfStoreForStorageDomainCommand.setSucceeded(true); }
protected void proccessDomainsForOvfUpdate(org.ovirt.engine.core.common.businessentities.StoragePool pool) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool = storageDomainDao.getAllForStoragePool(pool.getId()); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domainsInPool) { if ((!(domain.getStorageDomainType().isDataDomain())) || (!(domain.getId().equals(org.ovirt.engine.core.bll.storage.domain.ProcessOvfStoreCount); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.lang.Integer ovfStoresCountForDomain = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.StorageDomainOvfStoreCount); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> storageDomainOvfStoresCountForDomain = storageDomainOvfInfoDao.getAllForDomain(domain.getId()); if ((storageDomainOvfStoresCountForDomain) < ovfStoresCountForDomain) { proccessedDomains.add(domain.getId()); continue; } for (org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo storageDomainOvfInfo : storageDomainOvfInfos) { proccessedDomains.add(domain.getId()); break; } } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.api.model.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case ACTIVE_RESUME : return org.ovirt.engine.api.model.Action.isSetActionFence(null); case NON_PAUSED : return org.ovirt.engine.api.model.Host.isNotPause(); case NON_PAUSED : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + "\"") + "\"")); } }
public static org.ovirt.engine.api.model.ResumeBehavior mapResumeBehavior(org.ovirt.engine.core.common.businessentities.ResumeBehavior resumeBehavior) { if (resumeBehavior == null) { return null; } switch (resumeBehavior) { case ACTIVE_RESUME : return org.ovirt.engine.api.model.ResumeBehavior.KILL; case LEAVE_PAUSED : return org.ovirt.engine.api.model.ResumeBehavior.KILL; default : throw new java.lang.IllegalArgumentException((("Unknown resume behavior \"" + "\"") + "\"")); } }
private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty())? org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_HOT_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_NEW_MEMORY_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); final java.lang.String unplugOptions = vmMemoryDevices.filter(((org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_LOG_MES_MES_GB, java.lang.String.format("%dMB (%dMB %dMB)", deviceSize, memoryAfterHotUnplug(originalMemoryMb, deviceSize))).collect(java.util.Collections.singleton(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_MEMORY_HOT, java.lang.String.format("$%dMB %d", deviceSize))).collect(java.util.Collections.singleton(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_HOT_HOT_HOT_
public static boolean isMemoryDeviceHotUnpluggable(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isMemory(memoryDevice))) { throw new java.lang.RuntimeException((("Memory device expected but device " + " acquired."), "received.")); } return (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()) && (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSpecParamsIntValue(memoryDevice, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE).isPresent()); }
private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final org.ovirt.engine.core.common.businessentities.VM vmFromDb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceType.MEMORY); final org.ovirt.engine.core.common.businessentities.VmDevice memoryDeviceToHotUnplug = computeMemoryDeviceToHotUnplug(vmMemoryDevices); final int oldMemoryMb = vmFromDb.getMemSizeMb(); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldMemoryDevices); newVmStatic.setMinAllocatedMem(oldMemoryDevices); newVmStatic.setMinAllocatedMem(oldMemoryMb); newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMemSizeMb((hotMemSizeMb(hotReturnValue.getSucceeded()? memoryFromHost() : oldMemoryMb.getSucceeded()))); newVmStatic.setMemSizeMb((hotUnplugMb) (hotReturnValue.getSucceeded()? memoryFromHosted() : oldMemoryMb.getSucceeded())); newVmStatic.setMemSizeMb((hotUnplugMb) (hotReturnValue.getSucceeded()? memoryFromHotUnplugMb : oldMemoryMb)); newVmStatic.setMemSizeMb((hotUnplugMb) (hotReturnValue.getSucceeded()? memoryFromHotUnplugMb : oldMemoryMb)); newVmStatic.setMemSizeMb((hotMemoryMb) (memoryFromMemoryMb))); newVmStatic.setMem
@java.lang.Override public void runForS390() { diskIndex = 0; }
@java.lang.Override public void runForS390() { hasMaximum = (org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCWITH_DISKS) == (CountDisks(org.ovirt.engine.core.bll.VmCommand.MAX_VIRTIO_CCWITH_DISKS); }
void runForS390();
@java.lang.Override public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return org.ovirt.engine.core.bll.gluster.UpdateGlusterArchCommand.getInstance().getArchitecture(); }
@java.lang.Override public <T extends org.ovirt.engine.core.utils.archstrategy> T runForSynchronous(T c) { c.runForSatellite(c); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null? "" : java.lang.String.valueOf(object.getMdevTypes())); }
public static java.lang.Double percent2bits(java.lang.Integer speedValueInMegaBits, java.lang.Double rxTxValueInPrecent) { if ((speedValueInMegaBits == null) || (rxTxValueInPrecent == null)) { return 0.0; } return (speedValueInMegaBits * rxTxValueInPrecent) / 100; }
@org.junit.Test public void testDefaultRouteWhenOutOfSyncOnOlderCluster() { cluster.setCompatibilityVersion(Version.v4_1); network.setDnsResolverConfiguration(sampleDnsResolverConfiguration); assertThat(createTestedInstance(true, sampleDnsResolverConfiguration).isNetworkInSync(), is(false)); }
public static boolean defaultRouteSupported(org.ovirt.engine.core.compat.Version version) { return Version.v4_2.isEmptyOrEquals(version); }
@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { org.ovirt.engine.core.compat.Version clusterVersion = clusterNetworkModel.getCluster().getCompatibilityVersion(); boolean defaultRouteSupported = Version.v4_2.isAttached(); return (defaultRouteSupported && (!(clusterNetworkModel.isAttached())) && (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.isManagement()))) || (!(clusterNetworkModel.getOriginalNetworkCluster().isDefaultRoute()))); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass())!= (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(message, other.message))) && ((type) == (other.type))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(vdsId, other.vmId))) && (java.util.Objects.equals(imageUri, other.imageUri))) && (java.util.Objects.equals(proxyUri, other.proxyUri))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }
private void pollDownloadStatus(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId())); if ((returnValue!= null) && (returnValue.getSucceeded())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer imageTransfer = returnValue.getActionReturnValue(); if ((((imageTransfer.getBytesTotal())!= null) && (imageTransfer.getActive()))) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updated = new org.ovirt.engine.core.common.businessentities.storage.ImageStorageImageTransfer(); updates.setStage(Image.getId()); org.ovirt.engine.core.common.action.TransferImageStatusParameters parameters = new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); parameters.setUpdates(updates); runInternalAction(ActionType.CopyImageStatus, parameters); } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass())!= (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer other = ((org.ovirt.engine.core.common.businessentities.storage.ImageTransfer) (obj)); return (((((((((java.util.Objects.equals(commandId, other.commandId)) && (java.util.Objects.equals(management, other.message))) && ((type) == (other.type))) && (java.util.Objects.equals(message, other.lastUpdated))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(message, other.message))) && (java.util.Objects.equals(vdsId, other.vdsId))) && (java.util.Objects.equals(imageUri, other.imagedTicketId))) && (java.util.Objects.equals(imageUri, other.imageUri))) && (java.util.Objects.equals(proxyUri, other.imageUri))) && (java.util.Objects.equals(bytesTotal, other.bytesTotal)); }
private void handleTransferring(final org.ovirt.engine.core.bll.storage.disk.Command<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Waiting transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendEntity(context.entity); if (extendSucceeded) { extendEntity(context.entity); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(ImageTransferPhase.PAUSED_SYSTEM); org.ovirt.engine.core.bll.storage.disk.image.Command.getParameters().setExtendTicketFailed(false); } org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setExtendTicketFailed(false); } else { log.debug("Updated client: Acquing to refresh ticket for {}", getTransferDescription()); } resetPeriodicPauseLogTime(0); }
public boolean isExtendedFailed() { return extendTicketFailed; }
public void setExtendTicketFailed(boolean extendFailed) { this.extendedTailed = extendTicketFailed; }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> getVmInitParameters() { return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private void storeNetwork() throws java.io.UnsupportedEncodingException { if (sourceProtocol.equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA)) { networkData = new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInitToOpenStackMemoryMetadata(vmInit); } else { storeNetworkAsEni(); } }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IFACE_NAME); underTest.setIpv6BootProtocol(int i = 0; for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); vmInit.setNetworks(java.util.Arrays.asList(underTest)); }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> getName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataTest.IFACE_NAME, java.lang.String name) { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataTest.IFACE_NAME); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getVdsName(underTest)); assertEquals(org.ovirt.engine.core.common.businessentities.VmInit vmInit.setNetworks(java.util.Arrays.asList(underTest)); }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> getName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IFACE_NAME, java.lang.String name) { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IFace_NAME); underTest.setIpv6Address(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getVdsName(underTest)); java.lang.String expectedOutput = ":\n" + ((((((((((((((("\" + ":\n") + "\n") + "\"\n") + "\"\n") + "\"\n") + "\" Network name \"iface name\"\n") + "\" \"iface name\" \"") + "\" \"iface name\" \"iface name\" \"\n") + "\" \"iface name\" \"\n") + "\" \"iface name\" \"\n") + "\" \"iface name\" \"\n") + "\" \"\n") + "\" \"{}\" \"{}\" \"\n") + "\" \"{}\"\n") + "\" \"{}\"\n") + "\" \"{}\"}\"\n") + "\"}\"\n") + "\n") + "\n") + "\n")); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
@org.junit.Test public void test() throws java.io.IOException { org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler underTest = new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler(vmInit, org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.NetConfigSourceProtocol.OPENSTACK_METADATA); final java.util.Map<java.lang.String, java.lang.Object> actualNetworkData = parseResult(actual); java.util.Map<java.lang.String, java.lang.Object> expectedNetworkData = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(expected); assertEquals(expectedNetworkData, actualNetworkData); }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IFACE_NAME); underTest.setBootProtocol(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerTest.IFACE_NAME); underTest.setBootProtocol(org.ovirt.engine.core.common.utils.ObjectUtils.getNetworks(underTest.VM_NAME)); java.lang.String expectedOutput = "${(((((((((("\" networks \n" + "\n") + "\n") + "\"\n") + "\"\n") + "\" Network name\" \"not") + "\" Network name \"not") + "\" Network name \"not") + "\" \"{}\" Networkworks\": \"{}\"}\" \"{}\"not") + "\" Networkworks\": \"{}\"}\"\n") + "\"not") + "\"Networkworks\": \"{}\"}\"\n") + "\"}\"\n") + "\"not") + "\"Network:\n") + "\"not")); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private static org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> getName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataTest.IFACE_NAME, java.lang.String name) { final org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest.setName(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandlerMetadataTest.IFACE_NAME); underTest.setBootProtocol(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getVmInitNetworkName(underTest)); assertEquals(org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.getVmInitIds(underTest)); }
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); vmInit.setDnsSearch("search2"); vmInit.setDnsServers(constants.search2hostsSearch("search2"); vmInit.setDnsServers(constants.search2hostsServer()); java.lang.String expectedOutput = "(((((((((((((("service:\n") + "\n") + "\n") + "hostserver1})erver3server2"), org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VmInit, org.ovirt.engine.core.common.businessentities.VmInit> expectedOutput); java.lang.String expectedOutput = org.ovirt.engine.core.common.utils.PairQueryable.getInstance().getDao().get(agentId(), expected, "hostserver2server2server2server2server2", null, java.lang.String.format("host_name", "n") + "test2\", \"hostserver3})", org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VmInit, expectedOutput); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
protected void addUserDomainToVm() { if ((dbUser)!= null) { vmUser.getUserName().forValue("user"); } }
protected void readUserDomainsSection(org.ovirt.engine.core.utils.ovf.xml.XmlNode section) { }
protected java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> mapDbUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.aaa.DbUser> dbUsers = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getDbUsers(); org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = dbUserDao.getDbUsersByUser(dbUser.getDb()); if (userDomainsMap!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.get(dbUser.getDomain()); if (userDomainsMap!= null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getLoginName(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getUser()); } } }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData)) { return false; } org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData other = ((org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData) (obj)); return ((((((super.equals(obj)) && (java.util.Objects.equals(diskImages, other.diskImages))) && (java.util.Objects.equals(lunDisks, other.vmBase))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(vmBase, other.vmBase))) && (java.util.Objects.equals(clusterName, other.clusterName))) && (java.util.Objects.equals(affinityGroups, other.vmUsers)); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, vmBase, clusterName, affinityGroups); }
@java.lang.Override protected void executeCommand() { affinityGroupDao.update(getParameters().getAffinityGroup()); vmStaticDao.incrementDbGenerationForVms(getAffinityGroup().getVmIds()); setSucceeded(true); }
@java.lang.Override public void addVmToAffinityLabels() { mapAffinityLabels.getVms().add(getParameters().getVm().getId()); }
@java.lang.Override public void buildVirtualSystem() { org.ovirt.engine.core.utils.ovf.xml.XmlNode virtualSystem = selectSingleNode(_document, "//*/Content"); consumedReadProperty(virtualSystem, org.ovirt.engine.core.utils.ovf.NAME, (val) -> fullEntityOvfData.getVmBase().setName(val)); fullEntityOvfData.getVmBase().setOvfVersion(getVersion()); org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(virtualSystem, "Section"); if (node!= null) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = selectNodes(list, "xistingEntitySection_type", "Section"); if (node!= null) { readOsSection(node); if ((!(osRepository.isLinux(fullEntityOvfData.getOsId()))) || ((fullEntityOvfData.getVmBase().getDefaultDisplayType())!= (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))) { fullEntityOvfData.getVmBase().setSingleQxlPci(false); } } node = getNode(list, "xsd:VirtualHardwareSection_Type"); if (node!= null) { readHardwareSection(node); } } node = getNode(list, "xsi: type", "ovf: AffinityGroupsSection_Type"); if (node!= null) { readManagementNetwork(node); } node = getNode(list, "xity-Type"); if (node!= null) { readAffinityGroupsSection(node); } node = getNode(list, "ovf:AffinityGroupsSection_Type"); if (node!= null) { readAffinityGroupsSection(node); } }
@java.lang.Override protected void executeCommand() { labelDao.update(getParameters().getLabel()); setActionReturnValue(getParameters().getLabel()); setSucceeded(true); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.Label> mapAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabel = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.lang.String> affinityLabelMap = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getAffinityLabelMap(); org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getAffinityLabel(); org.ovirt.engine.core.common.businessentities.Label originalAffinityLabel = labelDao.getByName(affinityLabel); if (affinityLabel!= null) { java.lang.String destName = affinityLabelMap.get(affinityLabel); if (affinityLabel!= null) { org.ovirt.engine.core.common.businessentities.Label destAffinityLabel = labelDao.getByName(destLabel); addBusinessEntityToList(affinityLabel, originalAffinityLabel, originalAffinityLabel, originalAffinityLabel); } else { addBusinessEntityToList(affinityLabel, originalAffinityLabel, null); } else { addBusinessEntityToList(affinityLabel, originalAffinityLabel, null); } } return affinityLabels; }
@java.lang.Override protected void mapDbUsers() { java.util.Map<java.lang.String, java.lang.String> userDomainsMap = org.ovirt.engine.core.bll.export.ImportVmTemplateFromConfigurationCommand.getParameters().getDomainMap(); org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = getParameters().getDbUsers(); org.ovirt.engine.core.common.businessentities.aaa.DbUser originalDbUser = getParameters().getDbUsers().getDbUsers().get(dbUser.getLoginName(), dbUser.getDomain()); if (userDomainsMap!= null) { java.lang.String destDomain = userDomainsMap.get(dbUser.getDomain()); if (org.ovirt.engine.core.common.businessentities.aaa.DbUser destDbUser = dbUserDao.getByUsernameAndDomain(dbUser.getId(), org.ovirt.engine.core.bll.export.ImportVmTemplateFromConfigurationCommand.getParameters().getUserToRoles()); } else if (originalDomain!= null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } } else if (originalDbUser!= null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } else if (originalDbUser!= null) { addPermissionsForUser(originalDbUser, getParameters().getUserToRoles()); } else { org.ovirt.engine.core.common.businessentities.aaa.DbUser newDbUser = new org.ovirt.engine.core.common.businessentities.aaa.DbUser(); newDbUser.setLoginName(dbUser.getLoginName()); newDbUser.setDomain(dbUser.getUser()); } }
private void writeAffinityLabels() { java.util.List<java.lang.String> affinityLabelsNames = fullEntityOvfData.getAffinityLabels(); if ((affinityLabelsNames == null) || (affinityLabelsNames.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:AffinityLabelsSection_TYPE"); affinityLabelsNames.forEach((typeName) -> { _writer.writeStartElement(OvfProperties.AFFINITY_GROUP); _writer.writeEndElement(); } _writer.writeEndElement(); }
public void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enableElements); selectDestinationHostEditor.setEnabled(enableElements); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> canSchedule(org.ovirt.engine.core.common.businessentities.Cluster cluster, org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<org.ovirt.engine.core.compat.Guid> vdsWhiteList, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = vdsDao.getAllForClusterWithStatus(cluster.getId(), VDSStatus.Up); vdsList = removeBlacklists(vdsList, vdsBlackList); vdsList = removeBlacklist; org.ovirt.engine.core.common.scheduling.ClusterPolicy policy = policyMap.get(cluster.getClusterPolicyId()); java.util.Map<java.lang.String, java.lang.String> parameters = createClusterPolicyParameters(cluster); vdsList = runFilters(policy.getFilters(), cluster, vdsList, vm, parameters, policy.getFilterPositionMap(), messages, noWaitingVmDelayer, false, null); return vdsList!= null? vdsList : java.util.Collections.emptyList(); }
void localize() { selectHostAutomaticallyEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupSelectHostAutomaticallyLabel()); selectDestinationHostEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.vmMigratePopupHostsListLabel()); hostsListEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopupHostsListLabel()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.constants.hostClusterVmPopup()); clustersEditor.setLabel(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateHostDisabledVMsInServerClusters()); message2.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateSomeVMsInAvailableOnHost()); message3.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHost()); message4.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.vm.VmMigratePopupView.messages.migrateNoAvailableHost()); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); enableSelectionElements(object.getEnableSelectionElements()); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { enableSelectionElements(object); enableSelectionElements(object.getEnableSelectionElements()); } }); }
private void updateMessages(org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { message1.setVisible((!(object.getVmsOnSameCluster()))); message2.setVisible(object.getIsSameVdsMessageVisible()); message3.setVisible(object.getIsSameVdsMessageVisible()); message4.setVisible(object.getNoSelectedItem()); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid runOnSameCluster, boolean hostedEngineOnlyMigration) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } if (hostedEngineOnlyMigration) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> nonHEHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.isHostedEngineDeployed())) { nonHEHosts.add(host); } } hosts.removeAll(nonheHosts); } }
@java.lang.Override protected void onReveal() { super.onReveal(); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMaintenance.TYPE_SetPanel, searchPanelPresenterWidget); setInSlot(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMaintenance.TYPE_SetBREADCUM, breadCUMBPresenterWidget); }
@java.lang.Override protected boolean validate() { boolean returnValue = (((super.validate()) && (validate(org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.createStoragePoolValidator())))) && (org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.initializeVds())) && (checkStorageDomainsInPool()); return returnValue; }
public static boolean isVmLeaseBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return!(java.util.Objects.equals(source.getLeaseStorageDomainId(), destination.getLeafVolumeId())); }
private void setAuthenticatedUser(org.ovirt.engine.api.model.Api api) { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = runQuery(QueryType.GetUserBySessionId, new org.ovirt.engine.core.common.queries.IdQueryParameters(user)); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = getDbUser(); user.setId(user.getId().toString()); org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User(); user.setId(user.getId().toString()); org.ovirt.engine.api.model.User user = new org.ovirt.engine.api.model.User(); user.setAuthenticatedUser(user); api.setAuthenticatedUser(user); }
@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds(); if (host == null) { return failValidation(EngineMessage.VDS_INVALID_SERVER_ID); } if (host.isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } return super.validate(); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(dataCenter().getId()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.userNameAboutLabel()); }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.NotePopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.NotePopupView.constants.userNameAboutLabel()); }
public java.lang.Boolean getCpuMemory() { return hotUnplugMemory; }
public void setHotUnplugMemory(java.lang.Boolean hotUnplugMemory) { this.hotUnplugMemory = hotUnplugMemory; }
void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.NotePopupView.constants.versionAboutLabel()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.host.HostName.noteLabel()); vendorUrl.setText(dynamicMessages.vendorUrl()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(path()); or (Mandatory(host().id())) { mandatory(Mandatory(host().name())); }
@org.ovirt.api.metamodel.annotations.Injectations.In java.lang.String path();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(network.comment()); optional(network.address()); optional(network.address()); optional(network.ip().address()); optional(network.ipu()); optional(network.ipu()); optional(network.ipu()); optional(network.trim()); optional(network.stp()); optional(network.stp()); optional(network.vlan.idstp()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void input() { or (network().comment())) { or (network().comment()); required(network.address()); optional(network.address()); optional(network.address()); optional(network.ip().address()); optional(network.ipu()); optional(network.ipu()); optional(network.trim(); optional(network.trim()); optional(networkRequired); optional(network.stp()); optional(network.stp()); optional(network.vlan().id()); optional(network.vlan.id()); }
@org.ovirt.api.metamodel.annotations.Link types.Network provider;
public void setClientIp(java.lang.String clientIp) { this.clientIp = clientIp; }
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { org.ovirt.engine.core.aaa.servlet.SsoLoginServlet.log.debug("SsoLoginServlet Optional"); java.lang.String scope = java.lang.String.format("%ovirt-app_portal ovirt=auth: auth:auth:auth:auth:auth:authz=%s%s", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(authSequencePriorityPriorityPropertyName)); java.lang.String redirectUri = java.lang.String.format("%s://%s:%s:%s:%s%s%s%s%s", request.getScheme(), postActionUrl); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineSsoUrl(request), "/oauth/authorize").addParameter("client_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(request), "application_id", org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(request), "response_url", request.getParameter("app_url")).addParameter("app_url", request.getParameter("app_url")); org.ovirt.engine.core.bll.network.filters.FiltersHelper urlBuilder = new org.ovirt.engine.core.common.action.URLBuilder(org.ovirt.engine.core.aaa.filters.FiltersHelper.getEngineUrl(request)).addParameter("error", request.getParameter("sso_token")); if (org.apache.commons.lang.StringUtils.isNotEmpty(request.getParameter("sso_token")) { urlBuilder.addCustomValue("sso_token", request.getParameter("sso_token
private static java.lang.String mapPluginType(java.lang.String entity, org.ovirt.engine.api.model.OpenStackNetworkProviderType type) { if ((type == (org.ovirt.engine.api.model.OpenStackNetworkProviderType.EXTERNAL_VSWITCH.name().equals(entity))) || (OpenstackNetworkPluginType.OPEN_VSWITCH.name().equals(entity))) { return entity; } throw new java.lang.IllegalArgumentException((("Unsupported plugin plugin plugin type \"" + entity) + "\"")); }
@java.lang.Override protected org.ovirt.engine.api.model.OpenStackNetworkProvider postPopulate(org.ovirt.engine.api.model.OpenStackNetworkProvider model) { model.setType(OpenStackNetworkProviderType.NEUTRON); model.setPluginType(OpenStackEnum.OPEN_VSWITCH.toString()); org.ovirt.engine.api.model.AgentConfiguration agentConfiguration = model.getAgentConfiguration(); agentConfiguration.setBrokerType(org.ovirt.engine.api.model.MessageBrokerType.class); return model; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ArchitectureType.class, to = org.ovirt.engine.api.model.Architecture.class) public static org.ovirt.engine.api.model.Architecture map(org.ovirt.engine.core.common.businessentities.ArchitectureType model, java.lang.String template) { if (model == null) { switch (model) { case undefined : return org.ovirt.engine.api.model.Architecture.UNDEFINED; case x86_64 : return org.ovirt.engine.api.model.Architecture.Kernel.PPC64; case s86_64 : return org.ovirt.engine.api.model.Architecture.SENSE; case s390 : return org.ovirt.engine.api.model.Architecture.SIBLE; default : return null; } } return null; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model!= null) { switch (model) { case UNDEFAULT : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.startsWith(org.ovirt.engine.core.common.businessentities.ArchitectureType.valueOf(org.ovirt.engine.core.common.businessentities.ArchitectureType.valueOf(org.ovirt.engine.core.common.businessentities.ArchitectureType.valueOf(architectureType)); case SPC64 : return null; } } return null; }
@java.lang.Override protected void onHide() { getTable().hideContextMenu(); }
protected void popuplateSwappedList() { java.lang.String swappedColumnKey = getSwapItemListKey(); if (swappedColumnKey!= null) { java.lang.String swapColumns = getSwappedColumnListKey(); if (swachedColumns!= null) { java.lang.String[] split = null; java.lang.String[] split = swap.split(","); for (int i = 0; i < (split.length); i++) { java.lang.String[] tup = split[i].split("="); if ((tup.length) == 2) { realToSwappedIndexes.put(java.lang.Integer.valueOf(tupel[1])); maxSelectedIndex = java.lang.Math.max(maxSwappedIndex, java.lang.Integer.valueOf(tupel[0])); } } } } }
java.lang.String parseVolumeIdFromPath(java.lang.String path) { if (org.apache.commons.lang.StringUtils.isEmpty(path)) { return org.apache.commons.lang.StringUtils.join(path, ","); } return path.substring(((urlIndex + 1)) + "\"")); }
private boolean isDomainXmlEnabledForVds() { return ((org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DomainXML, vmDao.get(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVmId()).getCompatibilityVersion().toString())) && ((vmDao.get(org.ovirt.engine.core.bll.MergeStatusCommand.getParameters().getVmId()).getCompatibilityVersion().toString()))); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.ImageTransfer.class, to = org.ovirt.engine.api.model.ImageTransfer.class) public static org.ovirt.engine.api.model.ImageTransfer map(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, org.ovirt.engine.api.model.ImageTransfer template) { org.ovirt.engine.api.model.Image copyImage = (template!= null)? template : new org.ovirt.engine.api.model.ImageTransfer(); if ((entity.getId())!= null) { model.setHost(new org.ovirt.engine.api.model.Host()); model.getHost().setId(entity.getVdsId().toString()); } if ((entity.getDiskId())!= null) { model.setImage(new org.ovirt.engine.api.model.Host()); model.getImage().setId(entity.getDiskId().toString()); } if (((entity.getProxyUri())!= null) && ((entity.getImagedTicketId())!= null)) { model.setProxyUrl(entity.getClientURLForTransfer()); } if ((entity.getSignedTicket())!= null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getSignedTicket())!= null) { model.setSignedTicket(entity.getSignedTicket()); } if ((entity.getPhase())!= null) { model.setPhase(org.ovirt.engine.api.restapi.types.ImageMapper.mapPhase(entity.getPhase())); } if ((entity.getActive())!= null) { model.setActive(entity.getActive()); } if ((entity.getType())!= null) { model.setActive(org.ovirt.engine.api.restapi.types.ImageMapper.mapType(entity.getType())); } return model; }
private static org.ovirt.engine.api.model.ImageTransferDowntime mapType(org.ovirt.engine.core.common.businessentities.storage.TransferType type) { switch (type) { case Download : return org.ovirt.engine.api.model.ImageTransferDowntime.class; default : return null; } }
private void storeSwappedIndexMap() { java.lang.String value = ""; int i = 0; for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry : realToSwappedIndexes.entrySet()) { if (entry.getValue()) { java.lang.String widget = null; java.lang.String swapColumnKey = entry.getValue(); if (entry.getValue()) { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (entry.getKey()); } } if (!("".equals(value))) { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (swappedColumnKey!= null) { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (swappedColumnKey!= null) { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (swappedColumnKey!= null) { java.lang.String swapColumnKey = getSwappedColumnListKey(); if (swappedColumnKey!= null) { java.lang.String swapColumn = getSwappedColumnValueKey(); if (swappedColumnKey!= null) { java.lang.String swapColumn = getSwappedColumnValueKey(); if (swappedColumn!= null) { java.lang.String swapColumn.value = getSwappedColumnValue(swappedColumnKey, value); } } } } } } }
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery((pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter())!= null) && ((getDataCenter().getItems())!= null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.Cpu newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor!= null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendorChanged(); cpuVendorChanged(); cpuVendorChanged(); cpuChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getDefaultNetworkProviderId()); }
public void setDefaultProviderById(org.ovirt.engine.core.compat.Guid defaultProviderId) { org.ovirt.engine.core.common.businessentities.Provider updatedDefaultProvider = getNetworkProviders().getItems().stream().filter(((org.ovirt.engine.core.common.businessentities.Provider) (provider))); if (defaultProvider == null) { getProviderProviders().setSelectedItem(updatedDefaultProvider); } }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(cluster()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(template.name()); optional(template.name()); optional(template.name()); optional(template.name()); optional(vm().diskAttachments()[COLlections].id()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(cluster()); optional(vm.name()); optional(vm.name()); optional(vm.name()); optional(vm.get().name())); optional(vm().diskAttachments()).disk().format()); optional(vm().diskAttachments()).disk().schema()).disk().schema(Collections.diskAttachments.disk().sparse()); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { optional(cluster()); optional(cluster()); optional(template.name()); optional(template.name()); optional(reg registrationConfiguration); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), GUIDS.get(0), GUIDS.get(4), GUIDS.get(4), GUIDS.get(4), GUIDS.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), GUIDS.get(4)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setStoragePoolIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(true); return memoryDisk; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(0), GUIDS.get(2), GUIDS.get(0), GUIDS.get(3)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(2), GUIDS.get(3)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, sdOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(3)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(true); return memoryDisk; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getSnapshotType()) == (org.ovirt.engine.core.common.businessentities.Snapshot.Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.StatelessSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription(), false)); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> getLuns(boolean selectedLuns, boolean includedLuns) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> luns = new java.util.ArrayList<>(); if ((getItems())!= null) { if (getIsGrouppedByTarget()) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel>) (getItems())); for (org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel item : items) { aggregatedAddedLuns(item.getLuns(), selectedLuns, existingLuns); } } else { java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> items = ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>) (getItems())); aggregatedAddedLuns(items, selectedLuns, addedLuns); } } return luns; }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadaaDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.utils.GuidUtils.getGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(0), GUIDS.get(4), GUIDS.get(5), GUIDS.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), GUIDS.get(5)); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createMetadataDisk(); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStoragePoolIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream.filterImageStream); return memoryDisk; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; case END_FAILED : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; default : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; } }
private void onMaintenance() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(); parameters.setStorageDomainId(getEntity().getId()); parameters.setForceMaintenance(confirmModel.getForce().getEntity()); if ((item.getStoragePoolId())!= null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.DeactivateStorageDomainWithOvfUpdate, list, (result) { confirmationModel.stopProgress(); setWindow(null); }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { boolean forceMaintenance = (action.isForce()) == null)? false : action.isForce(); return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(guid, dataCenterId, action); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId()))!= (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(StorageDomainStatus.Active, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId()))!= (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getReturnValue().setEndActionTryAgain(false); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Active, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(false); } }
private void onMaintenance() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain item : getSelectedItems()) { org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters parameters = new org.ovirt.engine.core.common.action.DeactivateStorageDomainWithOvfUpdateParameters(getEntity().getId()); parameters.setForceMaintenance(false); if ((item.getStoragePoolId())!= null) { parameters.setStoragePoolId(item.getStoragePoolId()); } list.add(parameters); } final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); confirmationModel.startProgress(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.DeactivateStorageDomainWithOvfUpdate, list, (result) -> failureModel.stopProgress(); setWindow(null); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getActionState()) { case END_FAILURE : return org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getSucceeded()? org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED : return org.ovirt.engine.core.common.AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_FAILED; } }
private void handlePaused(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { periodicPauseLog(context.entity, context.iterationTimestamp); if ((context.entity.getImportedTicketId())!= null) { extendTicketIfNecessary(context); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T> state) { if ((((context.entity.getVdsId()) == null) || (!(org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.getVdsId()).getClusterCompatibilityVersion())))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTransferupUpDateImageTransfer = updateTransferStatusWithImageTicket(context.entity); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToDateImageTransfer); } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateTransferStatusWithImageTicket(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer oldImageTransfer) { org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo ticketInfo = null; org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo ticketInfo = null; if (runVdsCommand(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.vdscommands.GetImageTicketVDSCommandParameters(oldImageTransfer.getVdsId(), oldImageTransfer.getImageId())).getReturnValue())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updatedFromTicket = new org.ovirt.engine.core.common.businessentities.storage.ImageTicket(); updatesFromTicket.setBytesSent(ticketInfo.getTranslated()); updateRepoImageTransfer(new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.image.TransferImageCommand.getCommandId(), updatesFromTicket)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { log.debug("Failed to update transfer status."); return oldImageTransfer; } } return oldImageTransfer; }
java.lang.String VdcQueryType_TYPE_FAILED_PROVIDER_TYPE_FAILED_PROVIDER_TYPE();
java.lang.String VdcQueryType.String ACTION_TYPE_FAILED_PROVIDER_USED_IN_CLUSTER_ONCE();
public org.ovirt.engine.core.bll.ValidationResult providerIsNoDefaultProvider() { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllClustersByDefaultNetworkProviderId(provider.getId()); return clusters.isEmpty()? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(getProviderUsbricksInClusterValidationMessage(clusters.size()), org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("CLUSTER_NAMES", clusters)); }
private org.ovirt.engine.api.model.IscsiDetails mapLogicalUnitToIscsiDetails(org.ovirt.engine.api.model.LogicalUnit logicalUnit) { org.ovirt.engine.api.model.IscsiDetails iscsiDetails = new org.ovirt.engine.api.model.IscsiDetails(); iscsiDetails.setAddress(logicalUnit.getAddress()); return iscsiDetails; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.Image copyDiskImage, org.ovirt.engine.core.common.action.ImportDiskImageParameters params) { org.ovirt.engine.core.common.action.ImportDiskImageParameters params = org.ovirt.engine.core.common.action.ImportDiskImageParameters params; if (imageTransfer.isSetHost()) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(image.getHost().getId())); } return performCreate(ActionType.CopyDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskForVolumeInfo(org.ovirt.engine.core.common.businessentities.storage.DiskImage disk) { return diskImage.getSnapshotId(); }
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = getDisks(); if ((disks == null) || (!(org.ovirt.engine.core.bll.storage.DiskImageCommand.getParameters().getDisks()))) { disks = getDisks(); } else { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImageDao().get(diskImage.getId()); } }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int additionalAvailableSize = value.getAdditionalAvailableSize(); java.lang.String additionalAvailableSize = org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.messages.additionalAvailableSizeInGB(additionalAvailableSize); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input = null; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledDown(input); } else if (!(value.getIsIncluded())) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.getIsIncluded(); } else if (value.isGrayed()) { input = templates.getIsIncluded())) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunAddOrExtendColumn.constants.notAvailableLabel(), "color:gray", inputId); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledDown(inputId, additionalAvailableSizeString); } else if (value.isAdditionalAvailableSizeSelected()) { input = templates.toggledUp(inputId, additionalAvailableSizeString); } else { input = templates.span(inputId, additionalAvailableSizeString); } sb.append(templates.span(inputId, additionalAvailableSizeString); }
java.lang.String addOrExtendSanStorage();
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskVmElement> diskVmElements = diskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters().getImageGroupID()); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = getMoveActionType(diskVmElements); if (actionType == (org.ovirt.engine.core.common.action.ActionType.MoveOrCopyDisk)) { org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters = org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getParameters(); moveDiskParameters.setCommandId(null); actionReturnValue = runInternalAction(actionType, moveDiskParameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), vmId), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext(org.ovirt.engine.core.bll.storage.disk.MoveDiskCommand.getContext(), engineLock)); } handleChildReturnValue(); org.ov
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, getMandatoryParameters()); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(cluster); org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProvider = getDataCenter(cluster); externalProviderIdCompleter.complete(cluster, getCluster()); return performCreate(ActionType.AddCluster, createAddCommandParams(cluster, dataCenter), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Host host) { validateParameters(host, "name", "address"); org.ovirt.engine.core.common.businessentities.VdsStatic staticHost = getMapper(org.ovirt.engine.api.model.Host.class, org.ovirt.engine.core.common.businessentities.VdsStatic.class).map(host, null); staticHost.setClusterId(getClusterId(host)); org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.externalhostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); externalNetworkProviderIdCompleter.complete(host.getExternalNetworkProviderConfigurations()); org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters addParams = new org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters(staticHost, host.getRootPassword()); if (host.isSetOverrideIptables()) { addParams.setOverrideFirewall(host.isOverrideIptables()); } addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.restapi.resource.HostResource.getHostedEngineDeployConfiguration(this)); addParams = ((org.ovirt.engine.core.common.action.hostdeploy.AddVdsActionParameters) (getMapper(org.ovirt.engine.api.restapi.resource.QueryType.GetVdsByVdsId, org.ovirt.engine.core.common.queries.IdQueryParameters.class).map(host, addParams))); return performCreate(ActionType.AddVds, addParams, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries
@java.lang.Override public org.ovirt.engine.api.model.Host update(org.ovirt.engine.api.model.Host incoming) { org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> hostResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(); org.ovirt.engine.core.common.businessentities.VDS entity = getEntity(hostResolver, true); org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderConfigurationIdCompleter externalNetworkProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.ExternalNetworkProviderIdCompleter(this); externalNetworkProviderConfigurationIdCompleter.complete(incoming.getExternalNetworkProviderConfigurations()); if ((incoming.getAgents()) == null) { entity.setFenceAgents(null); } if ((incoming.isSetCluster()) && ((incoming.getCluster().isSetId()) || (incoming.getCluster().isSetName()))) { org.ovirt.engine.core.compat.Guid clusterId = lookupClusterId(incoming); if (!(clusterId.equals(entity.getClusterId()))) { performAction(ActionType.ChangeVDSCluster, new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(clusterId, guid)); } } org.ovirt.engine.api.model.Host host = performUpdate(incoming, entity, map(entity), hostResolver, actionType.UpdateVds, new org.ovirt.engine.api.restapi.resource.BackendHostResource.UpdateParametersProvider()); return host; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Cluster update(org.ovirt.engine.api.model.Cluster incoming) { org.ovirt.engine.api.restapi.resource.ExternalProviderIdCompleter externalProviderIdCompleter = new org.ovirt.engine.api.restapi.resource.QueryIdResolver(this); externalProviderIdCompleter.complete(incoming.getExternalNetworkProviders()); return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.QueryType.GetClusterById, org.ovirt.engine.core.common.queries.IdQueryParameters.class), ActionType.UpdateCluster, new org.ovirt.engine.core.common.queries.IdQueryParametersProvider()); }
@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { validateParameters(action, "host.id|name", "path"); org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntityId(guid); params.setProxyHostId(getHostId(action)); params.setPath(action.getPath()); return doAction(ActionType.ExportOva, params, action); }
protected org.ovirt.engine.ui.uicommonweb.models.vms.VmModel getOva() { return vm; }
@java.lang.Override protected void exportOva() { super.exportOva(); if ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getWindow())!= null) { return; } org.ovirt.engine.core.common.action.ExportOvaParameters parameters = new org.ovirt.engine.core.common.action.ExportOvaParameters(); parameters.setEntity(VmEntityType.VM); parameters.setEntityId(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.VMListModel.getWindow()); parameters.setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVmFromOvaForOva(vmEntityType.getId())); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<org.ovirt.engine.core.common.businessentities.VM> vmList = new org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel(); parameters.setEntity(vmId); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setEntity(vmListModel.getWindow()); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.this.setEntity(vmListModel.getWindow()); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.this.setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); setWindow(vm); }
public boolean isUsingDistinct(java.lang.String obj) { if ((org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj instanceof org.ovirt.engine.core.searchbackend.SearchObjectAutoCompleter.getEntitySearchInfo(obj).distinct; } return false; }
@org.ovirt.engine.ui.common.Source("images/prepare_maintenance.png") com.google.gwt.resources.client.ImageResource prepareToMaintenance();
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer!= null) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values!= null)? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) && (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdIdentityChecker.log.warn("Host '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }
public boolean createOvfStoreDisks(int missingDiskCount) { boolean allOvfStoreDisksCreated = true; for (int i = 0; i < missingDiskCount; i++) { org.ovirt.engine.core.common.action.CreateOvfVolumeForStorageDomainCommandParameters parameters = createCreateOvfVolumeForStorageDomainParams(); org.ovirt.engine.core.common.action.VdcReturnValue returnValue = runInternalAction(ActionType.CreateOvfVolumeForStorageDomain, parameters, org.ovirt.engine.core.bll.storage.ProcessOvfUpdateForStorageDomainCommand.getContext().clone().withoutLock()); if (!(returnValue.getSucceeded())) { allOvfStoreDisksCreated = false; } } return allOvfStoreDisksCreated; }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.compat.Guid clusterId = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmTemplateParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateParameters(parent.getDataCenterId(destStorageDomainId), parent.getStorageDomainId(), destStorageDomainId, getEntity()); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive()? action.isExclusive() : false)); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetTemplate()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } return doAction(ActionType.ImportVmTemplate, params, action); }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = null; if (action.isSetCluster()) { clusterId = getClusterId(action); } org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), clusterId); params.setForceOverride((action.isExclusive()? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
public void updateVDSInterfaceList(java.util.Collection<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> pairCollection) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.stream().map(pair); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.getSecond(); if (pair!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairCollection.getSecond(); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairVdsList.getSecond(); if (vdsList!= null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = pairVdsList.getSecond(); java.util.List<org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface, org.ovirt.engine.core.common.businessentities.VDS>> vdsList = pairVdsList.getSecond(); if (vdsList!= null) { vdsList.add(vdsList.getSecond()); } else { org.ovirt.engine.core.common.businessentities.VDS vdsList = pair.getSecond(); if (result!= null) { vdsList.add(vdsList.getSecond()); } } } }
public void updateVDSInterfaceList(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList, java.lang.Runnable<org.ovirt.engine.core.common.businessentities.VDS> vdsList) { java.util.List<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> ids = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.queries.VdcQueryParametersBase> ids = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.VdcQueryParametersBase> ids : vdsList) { types.add(QueryType.getVdsInterfacesByVdsId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleQueries(types, ids, (result) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleQueries(types, ids, (result) { org.ovirt.engine.core.common.queries.QueryReturnValue interfaceQueryReturnValue = values.getReturnValues(); for (int i = 0; i < (result) { if (((i.getReturnValue())!= null) { vdsList.get(i).getInterfaces().addAll(interfaceQueryValue); callback.run(); } } } else { callback.run(); } } }
private java.util.Optional<org.ovirt.engine.core.common.businessentities.storage.DiskImage> traceConfigurationDisk(org.ovirt.engine.core.compat.Guid spId, org.ovirt.engine.core.compat.Guid sdId, java.util.List<org.ovirt.engine.core.compat.Guid> diskIds) { if (diskIds == null) { return java.util.Optional.empty(); } return diskIds.stream().map((diskId) -> new org.ovirt.engine.core.bll.host.Pair<>(diskId, ((org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.GetVolumesList, new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(spId, sdId)).getReturnValue())))).flatMap((diskToVolumes) -> diskToVolumes.getSecond().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().filter(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskImageCallback.getReturnValue()))).map(java.util.Objects.getReturnValue()))).map(java.util.Objects.nonNullOrNull).findAll(); }
private boolean isHostedEngineConfigVolume(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { final java.lang.String strConfigImageId = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.HostedEngineConfigurationVolumeGuid); if (configImageId!= null) { return org.ovirt.engine.core.compat.Guid.Empty; } return org.ovirt.engine.core.bll.hostedEngineConfigFetcher.HOSTED_ENGINE_CONFIGURATION_IMAGE.equals(getParameters().getDescription()); }
private void addImportedDevices(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vm.getStaticData(); vmStatic.setImages(new java.util.ArrayList()); vmStatic.setInterfaces(new java.util.ArrayList()); importUtils.updateGraphicsDevices(vmStatic, ConvertVmCommand.getStoragePool().getCompatibilityVersion()); ConvertVmCommand.getVmDeviceUtils().addImportedDevices(vmStatic, false, null); saveDiskVmElements(vm); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public boolean null) { org.ovirt.engine.core.bll.export.vmHandler.AddToDB(getVmTemplate().getVmInit()); return null; } boolean doesVmTemplateContainImages =!(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.export.ImportVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.export.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false, getImages()); if (doesVmTemplateContainImages && (org.ovirt.engine.core.bll.export.ImportVmTemplateCommand.getParameters().isImportAsNewEntity())) { endMoveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.export.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.export.ImportVmTemplateCommand.setSucceeded(true); } discardHelper.logIfDisksWithDisksWithInvalidCommand(); org.ovirt.engine.core.bll.export.ImportVmTemplateCommand.setSucceeded(true); }
public void attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, org.ovirt.engine.core.compat.Guid activeSnapshotId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user, boolean withMemory) { boolean vmUpdatedFromConfiguration = false; if ((snapshot.getVmConfiguration())!= null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, snapshot.getVmConfiguration()); if (images!= null) { vmUpdatedFromConfiguration = updateVmFromConfiguration(vm, images); } } if (!vmUpdatedFromConfiguration) { if (images == null) { images = diskImageDao.getAllSnapshotsForVmSnapshot(snapshot.getId()); } vmDynamicDao.update(vm.getId()); } vmDynamicDao.update(vm.getDynamicData()); vmDynamicDao.update(vm.getDynamicData()); vmDynamicDao.update(vm.getStaticData()); vmStaticDao.update(vm.getStaticData()); boolean macsInSnapshotAreNotExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); if (vmDynamicDao.get(vm.getStaticData()); boolean macsInSnapshotAreNotExpectedToBeAlreadyAllocated = SnapshotType.STATELESS.equals(snapshot.getType()); syncNics(vmDevice, compensationContext, macsInSnapshotAreNotExpectedToBeAlreadyAllocated); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDeviceDao.getVmDeviceByVmId(vm.getId())) { if (deviceCanBeRemoved(vmDevice)) { vmDeviceDao.remove(vmDevice.getId()); } } vmDeviceUtils.addImportedDevices(vmDevice.getId()); } vmDevice
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()).executeInNewTransaction() { @java.lang.Override public void runVmDisks() { addVmExternalLuns(); addMemoryImages(); updateMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } getVmDeviceUtils().addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity(), false); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm().getId()); setVmId(getVm().getId()); } return null; } }); }
public void addImportedDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, boolean isImportAsNewEntity, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToImport) { if (isImportAsNewEntity) { setNewIdInImportedCollections(vmBase); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToAdd = new java.util.ArrayList<>(); addImportedDiskDevices(vmBase, vmDevicesToUpdate); addImportedInterfaces(vmBase, vmDevicesToUpdate); addImportedInterfaces(vmBase, vmDevicesToAdd, withMemory); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.saveAll(vmDevicesToAdd); vmDeviceDao.saveAll(vmDevicesToUpdate); }
private void addImportedDiskDevices(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate, java.util.List<org.ovirt.engine.core.compat.Guid> diskIdsToUpdate) { final org.ovirt.engine.core.compat.Guid vmId = vmBase.getId(); for (org.ovirt.engine.core.common.businessentities.storage.BaseDisk disk : getDisks(vmBase.getImages())) { org.ovirt.engine.core.compat.Guid deviceId = disk.getId(); if ((diskIdsToImport!= null) && (!(diskIdsToImport.contains(deviceId)))) { continue; } org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = addDiskDevice(vmId, deviceId, getVmDeviceAddress(vmBase, vmId, getVmDeviceAddress(vmBase, vmId)); updateImportedVmDevice(vmBase, vmDevice, deviceId, vmDevicesToUpdate); } }
@java.lang.Override public javax.ws.rs.core.Response register(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name"); validateVnicMappings(guid); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters params = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); org.ovirt.engine.api.restapi.types.ExternalVmTemplateFromConfParametersMapper.mapFromModel(action.getRegistrationConfiguration(), params); params.setContainerId(guid); params.setStorageDomainId(getClusterId(action)); params.setImagesExistOnTargetStorageDomain(true); params.setExternalVnicProfileMappings(org.ovirt.engine.api.restapi.types.ExternalVnicProfileMapper.mapFromModel(action.getVnicProfileMappings())); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getTemplate().isSetName())) { params.getVmTemplate().setName(action.getTemplate().getName()); } } if (action.isSetAllowPartialImport()) { params.getAllowPartialImport()) { params.getVmTemplate().setName(action.getTemplate().getName()); } return doAction(ActionType.ImportVmTemplateFromConfiguration, params, action); }
private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null? "" : macRange.getMacs().getMacTo())); rightBound.setEntity(((macRange.getMacTo()) == null? "" : macRange.getMacTo())); rightBound.getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void onSuccess(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().addListener(macToAddMacRangeChange()); } }); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel model) { driver.edit(model); }
private static org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable createAuditLogableForHost(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.setVdsName(host.getName()); return logable; }
private static void createAuditLog(java.util.List<java.lang.String> guids, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.AuditLogType type, org.ovirt.engine.core.common.businessentities.VDS vds) { if (guids.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase.createAuditLogableForHost(vds); logable.addCustomValue("M path GUIDS", guid); org.ovirt.engine.core.vdsbroker.vdsbroker.MultipathHealthHandler.auditLogDirector.log(logable, type); }
private void processHeartbeat() { int incoming = (this.policy.getIncomingHeartbeat()) / 2; if (((this.policy.isIncomingHeartbeat()) / 2) && ((getHeartbeatTime()) > incoming)) && (this.half)) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(((("Units was no massege from " + (getHostname())) + ") + ") + (this.halfgoing) + ") + (this.halfHeartbeatExeeded()))); this.half = false; } if (((!(this.isIncomingHeartbeatExeeded())) && (this.policy.isIncomingHeartbeatExeeded())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(("Reactor exceeded for " + (getHostname())) + " milliseconds ago.")); this.disconnect("Incoming message was " + (getHeartbeatTime())) + " milliseconds ago."); this.disconnect("connect("expected message was " + (getHeartbeatTime())) + " milliseconds ago.")); this.disconnect("connect("connect", exceeded"); } }
private void processHeartbeat() { if (((this.isIncomingHeartbeatExeeded()) && (this.policy.isIncomingHeartbeatExeeded())) && (this.isIncomingHeartbeatExeeded())) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(("Heartbeat for " + (getHostname())) + " last response was ") + (getHeartbeatTime())) + " seconds.")); } }
@java.lang.Override protected void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getDisks(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> diskIdToPath = prepareImages(disks); fillDiskAppropriate(disks); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.CreateOvaCommand.getParameters().getVm(); vmHandler.updateNetworkInterfacesFromDb(vm); vmHandler.updateVmInitFromDB(vm); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(vm.getStaticData()); org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData fullEntityOvfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(vm); fullEntityOvfData.setDiskImages(vm.getInterfaces()); java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getInterfaces()); java.lang.String ovf = ovfManager.exportOva(vm, fullEntityOvfData, vm.getCompatibilityVersion()); log.debug("Exception", ovf: {} ovf); boolean succeeded = runAnsiblePackOva(succeeded); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("OperatingSystemSection"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", getOsId(vmBase.getOsId())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, org.ovirt.engine.core.utils.ovf.OVF_URI, "required", "false"); _writer.writeElement("Info", "False"); _writer.writeElement("Info", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
private java.lang.String runAnvaInfoPlaybook() { org.ovirt.engine.core.common.utils.ansibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansibleCommandBuilder().hostnames(vdsStaticDao.get(org.ovirt.engine.core.bll.GetVmFromOvaQuery.getParameters().getVdsId()).getHostName()).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(false).enableLogging(error); org.ovirt.engine.core.common.utils.ansibleReturnValue accumibleReturnValue = null; try { ansibleReturnValue = (oaibleReturnValue.getAnsibleReturnCode()) == (org.ovirt.engine.core.common.utils.ansible.AnsibleReturnCode.OK); } catch (java.io.IOException | java.lang.InterruptedException e) { log.error("Failed to query OVA info. Error: {}", command.logFile()); return null; } return result; }
private org.ovirt.engine.core.common.businessentities.VM readVmFromOva(java.lang.String ovf) { if (ovfHelper.readVmFromOva(ovf)) { return null; } try { return ovfHelper.readVmFromOva(ovf); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.error(("failed to parse a given ovf configuration: \n" + ovf), e); return null; } }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VM vm = getOvaInfoUsingAnsible(); setReturnValue(vm); org.ovirt.engine.core.bll.GetVmFromOvaQuery.getQueryReturnValue().setSucceeded(vm); }
private java.lang.String parseOvfFromStdout(java.lang.String stdout) { if (stdout == null) { return null; } java.util.regex.Matcher m = org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVF_P_PATTERN.matcher(stdout); if ((m.matches()) && ((m.groupCount()) > 0)) { java.lang.String ovf = ovf.group(1); ovf.setVmName(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVF_P_PATTERN.matcher(0)); log.error("Failed to parse OVF from:\n{}", stdout, java.lang.String ovf.format("$v.group_id %s", "\"%s", stdout)); log.info("Failed to parse OVF from:\n{}", stdout.getVmName(), ovf.getUserName()); return null; }
private void setCookie(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response, final java.util.Locale userLocale) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.LocaleFilter.LOCALE, userLocale.toString()); cookie.setSecure(true); cookie.setPath(org.ovirt.engine.core.utils.servlet.LocaleFilter.ROOT_PATH); cookie.setMaxAge(java.lang.Integer.MAX_VALUE); cookie.setMaxAge(true); response.addCookie(cookie); }
private java.lang.String authenticateUser(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, org.ovirt.engine.core.utils.Credentials userCredentials) throws java.io.IOException, javax.servlet.ServletException { if ((userCredentials == null) || (!(org.ovirt.engine.core.utils.sso.SsoUtils.areCredentialsValid(request, userCredentials, true)))) { throw new org.ovirt.engine.core.utils.AuthenticationException(ssoContext.getLocalizationUtils().localize(SsoConstants.APP_ERROR_INVALID_CREDENTIALS, ((java.util.Locale) (request.getAttribute(SsoConstants.LOCALE))))); } try { org.ovirt.engine.core.sso.servlet.InteractiveAuthServlet.log.debug("skipping user using credentials"); javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie("profile", userCredentials.getProfile()); cookie.setSecure(("https".equals(request.getScheme()))); response.addCookie(cookie); org.ovirt.engine.core.utils.servlet.AuthenticationUtils.handleCredentials(ssoContext, request, userCredentials); return (request.getContextPath()) + (org.ovirt.engine.core.sso.utils.AuthenticationUtils.INTERACTIVE_REDIRECTIRECTIRECTIRECTIRECTIRECTIRECT_URI); } catch (java.lang.Exception ex) { throw ex; } } catch (java.lang.Exception ex) { org.ovirt.engine.core.sso.InteractiveAuthServlet.log.error("Exception: {}", ex.getMessage()); org.ovirt.engine.core.sso.InteractiveAuthServlet.log.debug("Exception", ex); throw new java.lang.RuntimeException("Exception", ex); throw new java.lang.RuntimeException(("Exception", ex); }
private void setLangPageShown(final javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, boolean value) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(org.ovirt.engine.core.utils.servlet.DocsServlet.LANG_PAGE_SHOWN, java.lang.Boolean.toString(value)); cookie.setSecure(getServletContext().getContextPath()); cookie.setHttpOnly(true); response.addCookie(cookie); }
@org.junit.Test public void networkNameNotTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_NETWORK_NAME); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void networkNameTakenByVdsmName() { when(network.getName()).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.DEFAULT_GUID); org.ovirt.engine.core.common.businessentities.network.Network network2 = new org.ovirt.engine.core.common.businessentities.network.Network(); network2.setVdsmName("vdsm-name"); network2.setName("vdsm-name"); network2.setName("vdsm-name"); network2.setId(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); when(networkDao.getAllForDataCenter(any())).thenReturn(org.ovirt.engine.core.bll.validator.NetworkValidatorTest.OTHER_GUID); assertThat(validator.networkNameNotUsedAsVdsmName(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NAME_USED_AS_VDSM_NETWORK_NAME)); }
public org.ovirt.engine.core.common.utils.ansibleReturnValue runCommand(org.ovirt.engine.core.common.utils.ansibleCommandBuilder command, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>... env) throws java.io.IOException { return runCommand(command, org.ovirt.engine.core.common.utils.ansibleExecutor.ANSIBLE_PLAYBOOK_TIMEOUT, env); }
@java.lang.Override public javax.ws.rs.core.Response iscsiLogin(org.ovirt.engine.api.model.Action action) { validateParameters(action, "iscsi.address", "iscsi.target"); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = new org.ovirt.engine.api.model.IscsiDetails(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); org.ovirt.engine.api.model.IscsiDetails iscsiDetails = action.getIscsi(); cnx.setConnection(iscsiDetails.getTarget()); cnx.setIqn(iscsiDetails.getTarget()); if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPort().toString()); } else { cnx.setPortal(iscsiDetails.getPortal().toString()); } if (iscsiDetails.isSetPort()) { cnx.setPort(iscsiDetails.getPortal().toString()); } if (iscsiDetails.isSetPort()) { cnx.setPassword(iscsiDetails.getPassword()); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase connectionPars = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(cnx, guid, false); return doAction(ActionType.ConnectStorageToVds, connectionPars, action); }
private void handleFinalizingFailure(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContextContext context) { log.error("Error failed transfer. {}", getTransferDescription()); stopImageTransferSession(context.entity); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageGroupID()))) { setImageStatus(((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Upload)? org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK : org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK)); } if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.Download)) { tearDownImage(context.entity.getVdsId()); } updateEntityPhase(ImageTransferPhase.FINISHED_FAILURE); setAuditLogTypeFromPhase(Image.FINISHED_FAILURE); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterHookAdd(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookAdd").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
java.lang.String GlusterUpdateWebhookException();
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebHelper.getBroker().glusterWebhookAdd(org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebGlusterWebInterfaceVDSCommand.getParameters().getWebhookUrl(), null); org.ovirt.engine.core.vdsbroker.gluster.AddGlusterWebTaskVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookDelete(java.lang.String url) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookDelete").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
java.lang.String GlusterSyncWebWebWebhookException();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterWebhookSync() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookSync").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
java.lang.String GlusterAddWebhookException();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn glusterHookUpdate(java.lang.String url, java.lang.String bearerToken) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterEvent.webhookUpdate").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
java.lang.String GlusterDeleteWebhookException();
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (!(validateExternalVnicProfileMapping())) { return false; } org.ovirt.engine.core.bll.validator.ImportVmFromConfigurationCommand.getImportValidator().validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { org.ovirt.engine.core.bll.validator.ImportVmFromConfigurationCommand.getImportValidator().validateUnregisteredEntity(vmFromConfiguration, ovfEntityData)))) { return false; } if (!(validate(importValidator.validateStorageExistForUnregisteredEntity(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getImages(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), imageToImportVmEntityMap, failedDisksToImportForAuditLog)))) { return false; } if (!(validate(importValidator.validateStorageExistsForMemoryDisks(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVm().getSnapshots(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().isAllowPartialImport(), failedDisksToImportForAuditLog)))) { return false; } setImagesWithStoragePoolId(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getVm().getImages()); } return true; }
types.VnicProfileMapping[] vnicProfileMappings();
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("free_text_comment", network.getComment()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("vdsm_name", network.getName()).addValue("gateway", network.getGateway()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("provider_network_provider_id", network.getProvidedBy().getProviderId()).addValue("provider_network_external_id", ((network.getProvidedBy()) == null? null : network.getProvidedBy().getExternalId())).addValue("provider_external_id", ((network.getProvidedBy().getExternalId()) == null? null : network.getProvidedBy().getExternalId()).addValue("label", network.getQosId()).addValue("label", network.getQosId()).addValue("label", network.getLabel()).addValue("label", network.getLabel()).addValue("label", network.getLabel()).addValue("label", network.getLabel()).addValue("label", network.getLabel()).addValue("dns_resolver_id", getDnsResolverConfigurationId(network)); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.NetworkProviderProxy proxy = providerProxyFactory.create(getProvider()); org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork().getProvidedBy().setExternalId(proxy.add(org.ovirt.engine.core.bll.provider.network.AddNetworkOnProviderCommand.getNetwork())); org.ovirt.engine.core.bll.provider.network.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.bll.provider.network.network.AddNetworkOnProviderCommand.getNetwork().setVlanId(null); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() { @java.lang.Override public void executeCommand() { super.executeCommand(); getReturnValue().setActionReturnValue(getNetwork().getId()); return null; } }); }
private void loadPhysicalNetworkProviderParameters(org.ovirt.engine.core.common.businessentities.network.Network network) { org.ovirt.engine.core.common.businessentities.network.Network physicalProviderNetwork = networkDao.get(network.getProviderPhysicalNetworkId()); network.setVlanId(physicalProviderNetwork.getVlanId()); network.setLabel(physicalProviderNetwork.getVdsmName()); }
private java.lang.String getAlertTooltipText(org.ovirt.engine.core.common.businessentities.VDS vds) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.host.gluster.GlusterVolumePopupView.constants.notAvailableLabel()); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.equals(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatus())); case 1 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatusTooltipText(vds.getStatus())); } } return null; }
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.column.ColumnResizeCellTable.addColumnSortHandler((event) (lastModel)).setSort(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> event) { org.ovirt.engine.ui.common.widget.table.column.ColumnResizeCellTable.addColumnSortHandler(event, sortableModel)); }
@org.junit.Test public void passDiscardsNotSupported() { testDiscardsFieldParsing(Version.v4_0, null); }
@org.junit.Test public voiddiscardsFieldIsParsed() { testDiscardsFieldParsing(Version.v4_1, 1024L); }
@org.junit.Test public void sparsifyNotSupportedWipeAfterDeleteIsOn() { createStorageDomainForDisk(StorageType.ISCSI); disk.setWipeAfterDelete(true); assertThat(validator.isSparsifySupported(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_DISK_SPARSIFY_NOT_SUPPORTED_BY_UNDERLYING_WITH_STORAGE_WHENABLED)); }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?,?> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); org.ovirt.engine.ui.uicommonweb.models.MainModelSelectionChangeEvent.fire(((com.google.gwt.event.shared.HasHandlers) (org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMaintenanceChangeEvent.getEventBus())), listModel); } } }
private boolean isBookmarkForCurrentPlace(org.ovirt.engine.core.common.businessentities.Bookmark bookmark, org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMaintenancePresenter<?,?> currentPlacePresenter) { java.lang.String[] split = bookmark.getValue(); if (searchString!= null) { java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result = null; if ((split.length) > 0) { java.lang.String defaultSearchString = split[0]; result.placeMatches(defaultSearchString); } } if ((currentPlacePresenter!= null) && (currentPlacePresenter.placeMatches(result))) { return true; } } return false; }
private java.lang.String getSegmentFromSearchString(java.lang.String searchString) { java.lang.String[] split = searchString.split(":"); java.lang.String result = null; if ((split.length) > 0) { java.lang.String defaultValue = null; if ((split.length) > 0) { java.lang.String defaultValue = null; } java.lang.String defaultValueMapping.searchToPlaceMap.get(defaultSearchString); if (((split.length) > 1) && (result!= null)) { result += "; search="; search="; search="; search="; search=" + searchQuery); } } return result; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.column.Context context, org.ovirt.engine.ui.uicommonweb.models.storage.LunModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { int availableSizeToAdd = value.getAdditionalAvailableSize(); java.lang.String availableSizeToAdd = org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.messages.additionalAvailableSizeInGB(availableSizeToAdd); boolean isGrayedOut = value.getIsGrayedOut(); java.lang.String inputId = id + "_input"; com.google.gwt.safehtml.shared.SafeHtml input; if ((!isGrayedOut) && (!(value.getIsSelected()))) { input = templates.toggledUp(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.addSanStorage()); } else if (!(value.getIsIncluded())) { input = templates.toggledDown(inputId, org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.notAvailableLabel(), "color:gray", inputId); } else if (availableSizeToAdd == 0) { input = templates.getIsIncluded()? 0 : 0; input = templates.noButton(org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn.constants.notAvailableLabel(), "color:gray", inputId); } else if (value.isAdditionalAvailable()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else if (value.isAdditionalAvailable()) { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.toggledAvailableSize(inputId, availableSizeToAddString); } else { input = templates.toggledDownSize(input); } else { input = templates.toggledDown(inputId, availableSizeToAddString); } else { input = templates.
private boolean validateStoragePropertiesUpdate() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(); if (((checkStorageDomainValidatorNotEqual(StorageDomainStatus.Locked))) || (!(validateDiskOnBackupDomain()))) || (!(validateDiskOnBackupDomain()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("storageName"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("warningLowSpaceIndicator"); props.remove("backup"); if (!(props.isEmpty())) { log.warn("Can't been an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean validateDiskOnBackupDomain() { return validate(new org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getStoragePoolId(), java.util.stream.concat(org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getVm().getDiskMap().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().transaction(java.util.Objects.stream.toSet())).stream().stream().toLowerCase(); }
java.lang.String storageIscsiYouCanPerformActionsLabel();
java.lang.String storageIscsiCanRemoveLUNsLabel();
@java.lang.Override public final com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { org.ovirt.engine.ui.common.widget.table.cell.ScrollableTextCell.Cell.CellTemplate template = com.google.gwt.core.client.GWT.create(ScrollableTextCell.class); java.lang.String color = ""; if (object!= null) { if (object.getIsIncluded()) { boolean = ""; if (object.getIsSelected()) { boolean = "gray"; } else if (object.getIsSelected()) { org.ovirt.engine.ui.common.widget.table.column.VDS.constants.fire(object), ("object.getIsAccessible())); } else if ((!(object.getIsAccessible())) && (!(object.getIsScrolled()))) { return "gray"; } else { color = "black"; } } return template.input(getRawValue(object), ("color:" + color), com.google.gwt.user.client.DOM.createUniqueId()); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn addOrExtendColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }; addOrExtendColumn.makeSortable(); table.addColumn(addOrExtendColumn, headerString, "95px"); }
private void addAbstractLunAddOrExtendColumn(org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>> table, java.lang.String headerString) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractLunActionsColumn() { @java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.storage.LunModel getValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel object) { return object; } }, headerString, "85px"); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.IscsiStorageModel object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(((object); object.propertyName = args.propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } else if (propName.equals("IsGrouppedByTarget")) { updateListByGropping(object); } else if (propName.equals("IsGrouppedByTarget")) { iscsiLunTab.disableItemsUpdate(); object.setIsGrouppedByTarget(true); } lunToTargetsTab.addClickHandler((object.getIsGrouppedByTarget()? targetsToLunTab : lunToTargetsTab)); dialogTabPanel.switchTab((object.getIsGrouppedByTarget()? targetsToLunTab : lunToTargetsTab)); dialogTabPanel.switchTabPanel.switchTab((object.getIsGrouppedByTarget()? targetsToLunTab : lunToTargetsTab)); updateListByGropping(object); if (!(object.getContainer().isNewStorage())) { mainLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiCanPerformActionsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiCanPerformActionsLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiCanDoActionLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.uicommon.storage.IscsiStorageView.constants.storageIscsiCanDoActionLabel()); subLabel.setText(org.ovirt.engine.ui.common.widget.u
private java.net.HttpURLConnection getProxyConnection(java.lang.String url) { org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder builder; java.net.HttpURLConnection connection; try { builder = new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder().setURL(url); builder.setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStore().getAbsolutePath()).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ExternalCommunicationProtocol)); connection = builder.create(); connection.setDoOutput(true); return connection; } catch (java.lang.Exception ex) { throw new java.lang.RuntimeException(java.lang.String.format("Failed to communicate with ovirt-imageio-proxy: %s", ex.getMessage())); } }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskUuidMap(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskUuid = new org.ovirt.engine.core.common.action.VdcReturnValueBase(org.ovirt.engine.core.bll.storage.DiskImageCommand.getParameters().getStoragePoolId()); diskUuid.setStorageId(diskImage.getStoragePoolIds().get(0)); diskUuid.put("domainID", diskImage.getStorageIds().get(0)); diskUuid.put("imageID", diskImage.getId()); diskUuid.put("imageID", diskImage.getImageId()); diskUuid.put("volumeID", diskImage.getImageId()); return diskUuid; }
@java.lang.Override protected boolean validate() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((isoDomainListSynchronizer.findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failValidation(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
private void setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError expectedError) { org.ovirt.engine.core.compat.Guid validator = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.VDS validVds = new org.ovirt.engine.core.common.businessentities.VdsNetworkInterface(); validVds.setId(validGuid); if (expectedError == (org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED)) { validVds.setClusterCompatibilityVersion(Version.v4_1); } else { validVds.setClusterCompatibilityVersion(Version.v4_2); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mac0 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); mac0.setName(vdsInterfacesNames[1]); when(getQueryParameters().getId()).thenReturn(validVds); when(interfaceDao.getAllInterfacesForVds(eq(validGuid))).thenReturn(java.util.Arrays.asList(eth0, mac1)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mac1 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); macPool.setName(hostInterfacesNames[1]); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface mac1 = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); macPool.setName(hostInterfacesNames[1]); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface macPool = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); returnValue.setId(vdsInterfacesMap.getId()); if
private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> createEmptyResponse() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = getNetworkInterfaceDao().getAllInterfacesForVds(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId()); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LdapPldapPlvPldapPlvInfo> result = new java.util.HashMap<>(); if ((ifaces!= null) && (!(ifaces.isEmpty()))) { ifaces.add(iface); } return result; }
@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldapPldapPldapPldapPldapPools> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertTrue(checkEmptyValuesForIfaces(returnValue)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getParameters().getId(); org.ovirt.engine.core.common.businessentities.VDS vds = vds.get(vdsId); if ((vds!= null) && (org.ovirt.engine.core.common.FeatureSupported.isLdsmVdsNetworkInterfaceSupported(vds.getClusterCompatibilityVersion()))) { java.lang.String[] names = new java.lang.String[0]; org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.GetLldap, ldapProviderParameters); org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(createEmptyResponse()); } else { org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdQuery.getQueryReturnValue().setReturnValue(createEmptyResponse()); } }
private void addGlusterWebhook(org.ovirt.engine.core.common.businessentities.VDS vds) { try { backend.runInternalAction(VdcActionType.AddGlusterWebhookInternal, new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(vds.getClusterId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not refresh storage devices from gluster host '{}'", vds.getName()); } }
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue())!= null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterStorageDevices(vds, addedServerUuid); return false; } refreshGlusterPeerProperties(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds); glusterServerDao.updatePeerStatus(vds); return ret; }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Refreshing that status of brick '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, fetchedStatus.toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); put("source", "cli"); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditMessageDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession getGeoRepSession(org.ovirt.engine.core.compat.Guid masterVolumeId, java.lang.String slaveHostName, java.lang.String slaveVolumeName) { return getCallsHandler().executeRead("GetGlusterGeoRepSessionBySlaveHostAndVolume", org.ovirt.engine.core.dao.gluster.GlusterGeoRepDaoImpl.georepSessionRowMapper, getCustomMapSqlParameterSource().addValue("volume_volume_id", masterVolumeId).addValue("slave_name", slaveVolumeName).addValue("slave_name", slaveVolumeName)); }
private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity vol, org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick) { logUtil.logAuditMessage(vol.getClusterId(), vol, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, status.toString()); put(GlusterConstants.OPTION_NEW_VALUE, "gluster event"); } }); }
public boolean isDummyProvider() { return ((type) == (ProviderType.EXTERNAL_NETWORK)) && (((url.isEmpty())) || (url.isEmpty()))); }
public org.ovirt.engine.core.bll.ValidationResult cpuTypeSupportsVirtService() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CPU_NOT_FOUND).when(((cluster.supportsVirtService()) && ((cluster.getCpuName())!= null)) && (!(cpuExists())))); }
@java.lang.Override protected void executeCommand() { int missingDiskCount = getMissingDiskCount(); if (missingDiskCount <= 0) { setOvfUpdateStep(OvfUpdateStep.OVF_UPLATE); updateOvfUpdateStep(OvfUpdateStep.OVF_STORAGES); } else { setOvfUpdateStep(OvfUpdateStep.OVF_STORES_CREATION); org.ovirt.engine.core.bll.storage.OvfUpdateForStorageDomainCommand.setSucceeded(createOvfStoreDisks(getMissingDiskCount())); } }
protected void selectPhysicalDatacentNetwork();
private void onPhysicalRadioButtonChange(java.lang.Object sender) { if (sender == (getPhysicalNetworkDatacentreRB())) { getNeutronPhysicalNetwork().setIsChangeable(false); } else if (sender == (getPhysicalNetworkCustomNetworkCustomRB())) { getNeutronNetwork().setIsChangeable(true); } else if (sender == (getPhysicalNetworkCustomNetworkCustomRB())) { getNeutronNetworkCustomProhibitionReasons().setIsChangeable(true); } else if (sender == (getPhysicalNetworkCustomProhibitionReasons().equals(getPhysicalNetworkDatacentre), false); } else if (sender == (getPhysicalNetworkDatacentre())) { boolean datacentre = getPhysicalNetworkCustomProhibitionReasons().getEntity(); getPhysicalNetworkCustomRB().setEntity((!datacentreviouslyre) (datacentre, false)); } }
public void setPhysicalNetworkDatacentrebalance(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacenters) { this.physicalNetworkDatacentrebalance = physicalNetworkDatacentrebalance; }
private boolean isConnectedToPhysicalNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networkAttachment = getNetworkInterfacesByNetwork(getNetwork().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networkAttachment = getNetworkInterfacesByNetwork(network); if (network!= null) { result.add(network); } return false; }
@java.lang.Override public void updateVisibility() { messageLabel.setVisible(false); externalLabel.setVisible(false); externalLabel.setVisible(false); }
@java.lang.Override protected void selectPhysicalDatacentreNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); selectedNetwork.setId(org.ovirt.engine.core.bll.network.host.NetworkHelperTest.getNetworkQosByName(getNetworkName())); }
public void setPhysicalNetworkCustomNetworkCustom(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkCustomB) { this.physicalNetworkCustomBrick = physicalNetworkCustomBondCustom; }
@java.lang.Override protected void selectPhysicalDatacentreNetwork() { getDatacenters().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(getDatacenters())); }
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExternal().getEntity()) { org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); if (getPhysicalNetworkDatacentre().getEntity()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkDatacentreporeporeporeporepore().getEntity()); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetwork() { return physicalNetwork; }
@java.lang.Override protected void onExportChanged() { super.onExportChanged(); if (getExternal().getEntity()) { getHasVLanTag().setIsChangeable(false); getIsVmNetwork().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNetworkLabel().setIsChangeable(false); getNeutronNetwork().setIsChangeable(false); } }
public void setPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetwork) { this.physicalNetwork = physicalNetwork; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkCustomRB() { return physicalNetworkCustomRB; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetworkDatacenters() { return physicalNetworkDatacentreRB; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(getName().getEntity()); network.setStp(getIsStpEnabled().getEntity()); network.setDescription(getDescription().getEntity()); network.setComment(getComment().getEntity()); network.setVmNetwork(getIsVmNetwork().getEntity()); java.lang.String label = getNetworkLabel().getSelectedItem(); if (((label == null) || (!(label.isEmpty()))? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setLabel(((label == null) || (!(label.isEmpty()))? label : null)); network.setMtu(0); if (getMtu().getIsChangable()) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } for (org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel profileModel : getProfiles().flush()) { profileModel.flush(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos().getSelectedItem(); } if (getQos().getIsChangable()) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos().getSelectedItem(); network.setQosId((qos == (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel.EMPTY_HOST_NETWORK_QOS)? null : qos.getId())); } }
protected void onExportChanged() { boolean externalNetwork = getExternal().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronNetwork().setIsChangeable((!externalNetwork)); getQos().setIsChangeable((!externalNetwork)); getQos().setIsExecutionAllowed((!externalNetwork)); getQos().setIsExecutionAllowed((!externalNetwork)); getPhysicalNetworkCustomValues().setIsExecutionAllowed((!externalNetwork)); getPhysicalNetworkCustomValues().setIsChangeable(externalNetwork); getPhysicalNetworkCustomValues().setIsChangeable(externalNetwork); updateMtuSelectorsChangeability(); }
private void updateAvailability() { if (!(org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly))) { getNeutronSpecificNetwork().setIsAvailable(false); getNeutronExternalNetwork().setIsAvailable(false); getCreateSubnet().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getHasVLanTag().setIsAvailable(false); getExternal().setIsAvailable(false); } }
private void initPhysicalNetworkList() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(getSelectedDc().getId()), new org.ovirt.engine.ui.uicommonweb.models.datacenters.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>(((java.util.List<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>) ((result.getReturnValue())!= null)) && (networks.get(0)))); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getDatacenters() { return datacenters; }
public void setPhysicalNetworkDatacent(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkDatacentreRB) { this.physicalNetworkDatacentreRB = physicalNetworkDatacentreRB.getEntity(); }
public void setDatacentrephysicalPhysicalNetwork(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> datacenters) { this.datacenters.datacenters.getPhysicalNetworkQos = datacenters; }
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getComment().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(((getNetwork().getComment())!= null)); getVLanTag().setEntity(((getNetwork().getVlanId())!= null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initMtu(); initIsVm(); initMtu(); initIsVm(); initMtu(); initIsVm(); initMtu(); initMtu(); initIsVm(); getExternalNetworkCustomProhibitionReasons().setEntity(isConnectedToPhysicalNetwork()); getPhysicalNetwork().setIsChangeable(false); if (isConnectedToPhysicalNetwork()) { getPhysicalNetworkDatacenters().setEntity(false); } getPhysicalNetworkDatacenters().setIsChangeable(false); if ((getNetwork().isExternal()) && (isConnectedToPhysicalNetwork())) { getNetworkDatacentronExternalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }
java.lang.String physicalNetworkDatacentreLabel();
private void setQuotaStorage(org.ovirt.engine.core.common.businessentities.Quota quota) { if (quota.isEmptyStorageQuota()) { quota.setGlobalQuotaStorage(new org.ovirt.engine.core.common.businessentities.QuotaStorage(org.ovirt.engine.core.compat.Guid.newGuid(), quota.getId(), null, (-1L), 0.0)); return; } if ((quota.getGlobalQuotaStorage())!= null) { quota.getGlobalQuotaStorage().setQuotaId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaStorageId(quota.getId()); quota.getGlobalQuotaStorage().setQuotaStorageId(org.ovirt.engine.core.bll.quota.QuotaStorageQuotaStorage); } if ((quota.getQuotaStorages())!= null) { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : quota.getQuotaStorages()) { quotaStorage.setQuotaId(quota.getId()); } } }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize())!= 0) && (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferStatus statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.api.model.DiskContentType contentType) { if (contentType == null) { return null; } switch (contentType) { case DATA : return org.ovirt.engine.api.model.storage.DiskContentType; case ISO : return org.ovirt.engine.api.model.ActionType.DISK; case ISO : return org.ovirt.engine.api.model.Action.isUpdateDiskContentType; case ISO : throw new java.lang.IllegalArgumentException((("Unknown disk type \"" + contentType) + "\"") + "\"")); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DiskContentType.class, to = org.ovirt.engine.api.model.DiskContentType.class) public static org.ovirt.engine.api.model.DiskContentType map(org.ovirt.engine.core.common.businessentities.storage.DiskContentType contentType) { switch (contentType) { case DATA : return org.ovirt.engine.api.model.DiskContentType.ISO; case ISO : return org.ovirt.engine.api.model.DiskContentType.ISO; case ISO : return org.ovirt.engine.api.model.DiskContentType.ISO; case ISO : return org.ovirt.engine.api.model.DiskContentType.MEMORY_DUMP_VOLUME_VOLUME_VOLUME; case ISO : return org.ovirt.engine.api.model.DiskContentType.MEMORY_NOT_MODATED_VOLUME_VOLUME; default : org.ovirt.engine.api.model.DiskContentType.OVF_STORE; default : throw new org.ovirt.engine.api.model.DiskContentType.OVF_NOT_OVF_STORE; } }
protected void updateExternalVnicProfilesByTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping> result = new java.util.HashMap<>(); getEntities().getItems().stream().filter().forValue(org.ovirt.engine.ui.uicommonweb.models.vms.Register.VnicProfileMappingEntity.getEntity().getInterfaces(), importTemplateData.getCluster().getSelectedItem(), result); setExternalVnicProfilesPerTargetCluster(result); }
protected void updateExternalVnicProfilesByTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping> result = new java.util.HashMap<>(); getEntities().getItems().stream().iterator().transport().forValue(java.util.Arrays.asList(registerVmData.getEntity())); getEntities().setEntity(org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping.getEntity().getInterfaces()); getExternalVnicProfiles().setEntity(result); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity>> updateExternalVnicProfilesPerTargetCluster(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity>> result) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping> previousClusterVnicProfileMappings = getNewVnicProfileMappings(cluster); if (externalClusterVnicProfileMappingsPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalClusterVnicProfileMappingsPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMapping>(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(interfaces, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); return result; }
public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> cloneExternalVnicProfiles(org.ovirt.engine.core.common.businessentities.Cluster cluster) { if ((externalVnicProfilesPerTargetCluster.get(cluster)) == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping>(); } final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> result = new java.util.ArrayList(externalVnicProfileMappingCluster.get(cluster).size()); externalVnicProfilesPerTargetCluster.get(cluster).stream().forEach((vnicProfileMappingEntity) -> result.add(vnicProfileMappingEntity.getExternalVnicProfileMapping())); return result; }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> getNewVnicProfileMappings(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : interfaces) { final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntityModel(vnic.getNetworkName(), vnic.getVnicProfileName(), null); final org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingEntityModel newMapping = previousClusterVnicProfileMappings.stream().filter(((new org.ovirt.engine.ui.uicommonweb.models.vms.network.VnicProfileMappingsBroker() : existingClusterVnicProfileMappings.getVnicProfileName())).findFirst().orElse(newMapping); result.add(mapping); } return result; }
protected void addVnicProfileMappingCommand() { final org.ovirt.engine.ui.uicommonweb.UICommand vnicProfileMappingCommand = createVnicProfileMappingCommand(); org.ovirt.engine.ui.uicommonweb.models.storage.RegisterEntityModel.getCommands().add(vnicProfileMappingCommand); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if ("OnSave".equals(command.getName())) { onSave(); } if ((command == (getVnicProfileMappingCommand())) && ((org.ovirt.engine.ui.uicommonweb.models.vms.VnicProfileMappingModel.getWindow()) == null)) { updateExternalVnicProfileMapping(); setWindow(vnicProfileMappingModel); } }
protected void updateExternalVnicProfilesByTargetCluster();
public org.ovirt.engine.core.common.action.VdcActionType getCommandType() { return commandType; }
protected org.ovirt.engine.core.bll.context.DefaultCompensationContext createDefaultCompensationContext() { org.ovirt.engine.core.bll.context.CommandContext defaultContext = new org.ovirt.engine.core.bll.context.DefaultCompensationContext(); defaultContext.setCommandType(commandId); defaultContext.setCommandType(CommandType.ActionType()); defaultContext.setBusinessEntitySnapshotDao(businessEntitySnapshotDao); defaultContext.setSnapshotSerializer(org.ovirt.engine.core.utils.SerializationFactory.getSerializer()); return defaultContext; }
@java.lang.Override public java.util.List<org.apache.commons.collections.KeyValue> getAllCommands() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("Get_all_commands", (rs, "command_id")); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); entitySnapshot.setId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", entitySnapshot.getId()).addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntityType()).addValue("snapshot_type", entitySnapshot.getEntitySnapshotType()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
@org.junit.Test public void testInsertSnapshot() { org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot snapshot = new org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot(); org.ovirt.engine.core.compat.Guid commandId = org.ovirt.engine.core.compat.Guid.newGuid(); snapshot.setCommandId(commandId); snapshot.setCommandType(ActionType.UpdateVds); snapshot.setEntityId(org.ovirt.engine.core.compat.Guid.newGuid().toString()); snapshot.setEntityType("org.ovirt.engine.core.common.businessentities.VdsStatic"); snapshot.setEntityType("someClass"); snapshot.setSnapshotClass("someClass"); dao.save(snapshotsFromDb); java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> snapshotsFromDb = dao.getAllForCommandId(commandId); assertNotNull(snapshotsFromDb); assertEquals(1, snapshotsFromDb.get(0)); }
boolean validateCluster() { if ((org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getCluster()) == null) { return failValidation(EngineMessage.VDS_CLUSTER_IS_NOT_VALID); } return true; }
public void compensate() { java.util.List<org.apache.commons.collections.KeyValue> commandSnapshots = businessEntitySnapshotDao.getAllCommands(); for (org.ovirt.engine.core.compat.KeyValue commandSnapshot : commandSnapshots) { try { compensate(((org.ovirt.engine.core.compat.Guid) (commandSnapshot.getKey()))); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Failed to run compensation on startup for Command '{}': {}", commandSnapshot.getValue(), e.getMessage()); org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Failed to run compensation on startup for Command '{}', Command Id '{}': {}", commandSnapshot.getKey(), commandSnapshot.getKey()); org.ovirt.engine.core.bll.OnStartupCompensation.log.error("Running compensation on startup for command '{}', Command Id '{}'", commandSnapshot.getValue(), commandSnapshot.getKey()); } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot> getAllForCommandId(org.ovirt.engine.core.compat.Guid commandID) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", commandID); return getCallsHandler().executeReadList("get_entity_snapshot_by_command_id", (rs, rowNum) -> result.setCommandId(getGuidDefaultEmpty(rs, "command_id")); }
private void initDefaultNetworkProvider() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.uicommonweb.models.clusters.AsyncQuery((result) (result)); providers.add(0, getNoDefaultNetworkProvider()); getDefaultNetworkProvider().setItems(providers); org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = getEntity(); if (cluster!= null) { org.ovirt.engine.core.common.businessentities.Provider defaultNetwork = providers.stream().filter(( provider) -> provider.getDefault(((provider.getId()))).findFirst().orElse(null)); } } }), ProviderType.OPENSTACK_NETWORK, ProviderType.EXTERNAL_NETWORK); }
public void selectProviderById(org.ovirt.engine.core.compat.Guid providerId) { if ((getNetworkProviders().getItems())!= null) { org.ovirt.engine.core.common.businessentities.Provider provider = getNetworkProviders().getItems().stream().filter((candidate.getItems().filter((candidate.getId()? providerId : null)); getNetworkProviders().setSelectedItem(provider); } }
protected boolean canDiskBeMoved() { return validate(createDiskValidator(getImage()).diskCanBeCopied(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getDiskImage().getQCowCompat())); }
@java.lang.Override protected boolean validate() { return ((((((((((super.validate()) && (canDiskBeMoved())) && (isImageExist())) && (checkOperationIsCorrect())) && (checkOperationIsCorrect())) && (checkOperationAllowedOnDiskContentType())) && (isSourceAndDestTheSame())) && (validateDestStorage())) && (validateDestStorage())) && (validateDestStorage())) && (validateDestStorage())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (checkTemplateInDestStorageDomain())) && (checkIfNeedToBeOverride())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())) && (setAndValidateDiskProfiles())) && (validatePassDiscoredSupportedForDestinationStorageDomain()); }
public org.ovirt.engine.core.bll.ValidationResult diskCanBeCopied(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage, org.ovirt.engine.core.common.businessentities.storage.QCowCompat compat) { if (QCowCompat.QCOW2.equals(compat)) { if (!(Guid.Empty.equals(diskImage.getParentId()))) { return new org.ovirt.engine.core.common.businessentities.storage.Image parent = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().get(diskImage.getParentId()); if ((parent.getSize()) < (diskImage.getSize())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_MOVE_DISK_TES_NOT_SUPPORTED); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void update(final org.ovirt.engine.core.common.businessentities.VDS host) { try { org.ovirt.engine.core.common.utils.ansibleCommandBuilder command = new org.ovirt.engine.core.common.utils.ansible.Ans(host.getHostName()).logFileDirectory(host.getHostName()).logFileDirectory(VdsDeployBase.HOST_DEFAULT_DIRECTORY).logFilePrefix("ovirt-host-mgmt-mgmt-ansible").logFileName(host.getHostName()).logFileSuffix(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbookmark(org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId()).playbookmark(AnsibleConstants.HOST_UPGRADE_PLAYBOOK_PLAYBOOK); if ((ansibleExecutor.runCommand(command, org.ovirt.engine.core.bll.host.HostUpgradeManager.UPDATE_PACKAGES_TIMEOUT).getAns())!= (org.ovirt.engine.core.common.errors.VdcBllErrors.UPDATE_PACKAGE_TIMEOUT)) { java.lang.String error = java.lang.String.format("$s to update host '%1$s'. '%1$s'. '%1$s'.", host.getHostName()); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error(error); throw new java.lang.RuntimeException(ex); } } catch (java.lang.InterruptedException | java.lang.Exception ex) { throw new java.lang.RuntimeException(ex); } }
@java.lang.Override protected void endSuccessfully() { if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getActive()) { updateRelevantVms(); } else if (org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().hasRawBlock()) { refreshVolume(); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImageInfo(); if ((diskImage!= null) && ((org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getImage().getSize())!= (diskImage.getSize()))) { org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.getReturnValue().setActionReturnValue(diskImage.getSize()); imageDao.updateImageSize(diskImage.getImageId(), diskImage.getSize()); } org.ovirt.engine.core.bll.storage.disk.image.ExtendImageSizeCommand.setSucceeded(true); }
protected void addDbUsers() { org.ovirt.engine.core.common.businessentities.DbUser dbUser = dbFacade.getDbUserDao().getDbUserDao().getDbUser(org.ovirt.engine.core.common.action.VdcActionParametersBase.getParameters().getUserId()); if (((org.ovirt.engine.core.common.action.VdcActionParametersBase) == null) || (returnValue.getSucceeded())) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbUser = new java.util.HashSet<org.ovirt.engine.core.common.businessentities.VdsGroup>(); for (org.ovirt.engine.core.common.businessentities.VmPool domain : getClusters()) { if (((org.ovirt.engine.core.common.businessentities.VmPool) (result.getReturnValue())) == null) { result = result.getDbFacade().getVdsGroupDao().get(clusters.getId()); } } if (((clusters.getId()) == null) || (clusters.isEmpty())) { org.ovirt.engine.core.common.businessentities.DbUser dbUser = getDbFacade().getVdsGroupDao().get(clusters.getId()); if (((org.ovirt.engine.core.common.businessentities.DbGroup) (result.getId())); } else { result = result.getDbUserId(); } } }
private void addPermissions(org.ovirt.engine.core.bll.storage.disk.drapi.DrMappingHelper.PermissionsParam permissions, java.util.List<java.lang.String> missingRoles, java.util.List<org.ovirt.engine.core.common.businessentities.Permission> permissionsToAdd) { java.util.Map<java.lang.String, java.util.Set<java.lang.String> userToRoles = permissionsParams.userToRoles; userToRoles.getOrDefault(permissionsParams.dbUser.getLoginName(), java.util.Collections.emptySet()).forEach((roleName) -> { org.ovirt.engine.core.common.businessentities.Permission permission = null; org.ovirt.engine.core.common.businessentities.Role originalRole = null; org.ovirt.engine.core.common.businessentities.Role originalRole = roleDao.getByName(roleName); if (permissionsParams.roleMap!= null) { org.ovirt.engine.core.common.businessentities.Role destRole = roleDao.getByName(roleMap.get(roleName))); if (originalRoleName!= null) { org.ovirt.engine.core.common.businessentities.Role destRole = roleDao.getByName(destRole.getId(), org.ovirt.engine.core.common.businessentities.Role.dbUser.getId(), originalRole.getId()); permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), permissionsParams.objectType); } else if (originalRole!= null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissionsParams.dbUser.getId(), originalRole.getId(), originalRole.getId(), permissionsParams.objectType); } } else if (originalRole!= null) { permission = new org.ovirt.engine.core.common.businessentities.Permission(permissions.dbUser.getId(), originalRole.getId(), originalRole.getId(), original
protected void addDbUsers() { drMappingHelper.mapDbUsers(org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getDomainMap(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getDbUsers(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getUserToRoles(), org.ovirt.engine.core.bll.export.ImportVmFromConfigurationCommand.getParameters().getRoleMap()); }
@java.lang.Override protected void executeVmCommand() { try { addVmToDb(); addVmToAffinityGroups(); processImages(); processImages(); processImages(); processImages(); processImages(); processImages(); processImages(); processImages(); } catch (java.lang.RuntimeException e) { macPool.freeMacs(macsAdded); throw e; } org.ovirt.engine.core.bll.export.ImportVmCommandBase.setSucceeded(true); org.ovirt.engine.core.bll.export.ImportVmCommandBase.getReturnValue().setActionReturnValue(getVm()); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } registerHovfUpdate(); }
private void registerKeoVfUpdate() { if (!(shouldUpdateHostedEngineFvf())) { return; } org.ovirt.engine.core.bll.VmCommand.registerRollbackHandler(new org.ovirt.engine.core.utils.transaction.TransactionCompletionListener() { @java.lang.Override public void onSuccess(org.ovirt.engine.core.utils.transaction.TransactionSupport.TransactionSupport.executeInTransaction() { ovfDataUpdater.trigger(); } }); }
private java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> getNameServers(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration dnsResolverConfiguration) { if (dnsResolverConfiguration == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.Name> nameServers = dnsResolverConfiguration.getNameServers(); if ((nameServers == null) || (nameServers.isEmpty())) { return java.util.Collections.EMPTY; } return nameServers; }
private void dataCenter_SelectedItemChanged() { if ((getCurrentStorageItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getCurrentStorageItem())); sanStorageModel.updateRemovableLuns(getDataCenter().getSelectedItem().getCompatibilityVersion()); sanStorageModel.getRequiringLuns().setEntity(null); } updateItemsAvailability(); behavior.updateDataCenterAlert(); }
public void updateRemovableLuns(org.ovirt.engine.core.compat.Version dcCompatibilityVersion) { setReduceDeviceSupported(((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.ReduceDeviceFromStorageDomain, dcCompatibilityVersion.toString())))); }
@org.junit.Test public void testReadBooleanList() { java.util.List<java.lang.Boolean> expected = java.util.Arrays.asList(true, false); org.ovirt.api.metamodel.xml.XmlRpcReader reader = new org.ovirt.engine.api.metamodel.xml.XmlRpcReader(openstackValue); java.util.List<java.lang.Boolean> errors = reader.readBoolean(); assertEquals(expected, booleans); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.xml.XmlReader reader = openReader(getValue("value=true</value></value); reader.readBoolean(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals(("values", reader.getLocalName()); }
@org.junit.Test public void testReadStringListEndElement() { org.ovirt.api.metamodel.xml.XmlReader reader = openReader(getValue("1$value><value></value); reader.readStrings(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals(("values", reader.getLocalName()); }
public java.util.List<java.lang.String> readStrings() { java.util.List<java.lang.String> values = new java.util.ArrayList<>(); java.lang.String currentLocalName = currentLocalName; while (forward()) { currentLocalName = currentLocalName; break; } while (forward()) { currentLocalName = reader.getLocalName(); if (currentLocalName.equals(startingLocalName)) { skip(); } else { values.add(readString); } } return values; }
@org.junit.Test public void testReadStringList() { java.util.List<java.lang.String> expected = java.util.Arrays.asList("1", "2"); org.ovirt.api.metamodel.xml.XmlRpcReader reader = new java.util.Arrays.asList("1", "2<value); java.util.List<java.lang.String> strings = reader.readStrings(); assertEquals(expected, strings); }
private static java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> mapVnicProfilesMapping(org.ovirt.engine.api.model.Network.ExternalVnicProfileMappings model) { java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> result = new java.util.ArrayList(model.getRegistrationVnicProfileMappings().size()); model.getRegistrationVnicProfileMappings().forValue(rs.getName())); return result; }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource bs, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); bs.validateParameters(mappings, "reg registrationVnicProfileMappings"); for (org.ovirt.engine.api.model.RegistrationVnicProfile mapping : mappings.getRegistrationVnicProfileMappings()) { bs.validateParameters(mapping, "from"); if ((mapping.getFrom().getName()) == null) { bs.validateParameters(mapping, "from"); } if ((mapping.getFrom().getNetwork().getName()) == null) { bs.validateParameters(mapping, "from"); } if ((mapping.getFrom().getNetwork().getName()) == null) { bs.validateParameters(mapping, "from.network"); } if ((mapping.getFrom().getNetwork().getName()) == null) { org.ovirt.engine.api.model.Configuration vmFromConfiguration = new org.ovirt.engine.api.model.Network(); map.setName(mapping, "from.network"); if ((mapping.getFrom().getNetwork().getName()) == null) { asGuid(mapping.getTo().getId()); } if ((mapping.isSetTo()) && (mapping.getTo().isSetId())) { asGuid(mapping.getTo().getId()); } } } }
public static void validateVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (action.isSetVnicProfileMappings()) { fr.validateParameters(action.getVnicProfileMappings(), "vnicProfileMappings"); for (org.ovirt.engine.api.model.VnicProfile mapping : action.getVnicProfileMappings().getVnicProfileMappings()) { if ((mapping.getSourceNetworkName()) == null) { continue; } if ((mapping.getSourceNetworkProfileName()) == null) { throw new org.ovirt.engine.api.model.VnicProfileMappingException(mapping, "sourceNetworkName"); } if ((mapping.getSourceNetworkProfileName()) == null) { mapping.setSourceNetworkName(null); } if ("".equalsIgnoreCase(mapping.getSourceNetworkName())) { mapping.setSourceNetworkName(null); } if ((mapping.isSetTargetVnicProfile()) && (mapping.getTargetVnicProfile().isSetId())) { asGuid(mapping.getTargetVnicProfile().getId()); } } } }
private java.lang.String formatKernelFeatures(java.util.Map<java.lang.String, java.lang.Object> kernelFeatures) { if (kernelFeatures == null) { return null; } final int vdsmNotAvailable = -1; final java.lang.String concatenatedPairs = kernelFeatures.entrySet().filter(((vdsmNotAvailable, pair.getValue()) + (org.ovirt.engine.core.common.utils.Objects.equals(vdsmNotAvailable, pair.getValue()))))).map(((pair.getValue()) == null? java.util.Objects.equals(vdsmNotAvailable, pair.getValue())))) : java.lang.String.format("%s: %s", pair.getKey(), pair.getValue())).collect(java.util.Objects.collect(", ")); if (concatenatedPairs.isEmpty()) { return org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel.constants.notAvailableLabel(); } return concatenatedPairs; }
protected java.lang.String getBookContentPath(java.lang.StringbookPath, java.util.Locale locale) { return ((((("/" + (bookale.toString())) + "/") + (bookPath) + "/") + contentPath) + "/html/") + contentPath; }
public java.lang.String getDocsSectionTemplate(java.util.Locale locale) { java.lang.String result = ""; try { java.lang.String docSectionTemplatePath = getDocsSectionTemplateTemplateTemplateTemplatePath(filePath, locale); java.io.File file = new java.io.File(docsSectionTemplatePathTemplatePath); if (((doc.exists()) && (!(docs.getFile()))) { result = new java.io.File(docsSectionTemplatePathTemplatePath); if (((doc.exists()) && (file.canRead())) { result = new java.io.File(docsSectionTemplatePathTemplatePath); } } if (((file.exists()) && (file.canRead())) { result = new java.io.FileFallbackTemplatePath(filePathTemplatePath); } } catch (java.io.FileException file) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Error loading documentation file", e); } if (((file.exists()) && (file.canRead())) && (file.canRead())) { result = readTemplateFile(docsSectionTemplatePath); } } catch (java.io.FileException e) { org.ovirt.engine.core.branding.BrandingTheme.log.error("Error loading documentation file", e); } if (result.isEmpty()) { org.ovirt.engine.core.branding.BrandingTheme.log.warn("Code error code: error for any locale or fallback"); } } return result; }
protected java.lang.String getBookPdfPath(java.lang.StringbookPath, java.util.Locale locale) { return ((((("/" + (bookale.toString())) + "/") + directoryPath) + "/") + directoryPath) + "/") + directoryPath) + "/")); }
protected java.io.File getBookContentFile(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String contentPath, java.util.Locale locale) { java.io.File file = null; file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(getBookContentPath(bookPath, contentPath, locale), base); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(file))) { file = org.ovirt.engine.core.utils.servlet.ServletUtils.makeFileFromSanePath(file, filePath, DEFAULT_US_LOCALE); if (!(org.ovirt.engine.core.utils.servlet.ServletUtils.canReadFile(file))) { file = null; } } return file; }
@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String url = request.getPathInfo(); java.util.Locale locale = getLocaleFromRequest(request); java.util.regex.Matcher m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.lang.StringbookPath = m.group(1); file = getBookIndexFile(request, response,bookPath, locale); } else { m = org.ovirt.engine.docs.utils.servlet.DocsServlet.bookHtmlContentPattern.matcher(url); if (m.matches()) { java.lang.String contentPath = m.group(1); file = getBookContentFile(request, response, resource, resourcePath, contentPath, contentPath, locale); } else { m = org.ovirt.engine.core.utils.servlet.DocsServlet.bookPREFIX.matcher(request, response, resource, resource, bundle, resourcePath, resourcePath, locale); } } } if (file == null) { response.sendError(HttpServletResponse.SC_NOT_FOUND); } else { org.ovirt.engine.core.utils.servlet.ServletUtils.sendFile(request, response, file, type); } }
protected java.lang.String getBookIndexPath(java.util.Locale locale) { return ((("/" + (bookName)) + "/") + "/bookPath) + "/bookPath) + "/bookPath) + "/bookPath) + "/bookPath) + "/html/html/html/html/html/html/html/html"); }
@java.lang.Override protected void executeVdsBrokerCommand() { if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollTechnique().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.SPREP)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBound(); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPollternatibility().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSCommand.getParameters().getPollternECTED)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPoll2(2, java.util.concurrent.TimeUnit.SECONDS); } else if (org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getParameters().getPolltenConnectivity().equals(org.ovirt.engine.core.vdsbroker.vdsbroker.CONFIRM_CONNECTIVITY)) { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().timeBoundPollConfirmConnectivity(2, java.util.concurrent.TimeUnit.SECONDS); } }
private org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> invokeSetupNetworksCommand(int timeout) { final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters parameters = createSetupNetworksParameters(timeout); org.ovirt.engine.core.common.interfaces.FutureVDSCall<org.ovirt.engine.core.common.vdscommands.VDSReturnValue> setupNetworksTask = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsBroker().runFutureVdsCommand(FutureVDSCommandType.HostSetupNetworks, parameters); if (parameters.isRollbackOnFailure()) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollPollOUTPOUPS = (org.ovirt.engine.core.common.FeatureSupported.isConfirmConnectivitySupportedByVdsm(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getClusterCompatibilityVersion()))? connection.getSecond().getSecond() : cocoFIRSTORLY; org.ovirt.engine.core.bll.network.host.HostPoller poller = new org.ovirt.engine.core.bll.network.host.HostPoller(new org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsId(), pt)? connection.getId() : null; poller.poll(); } return setupNetworksTask; }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.TimeBoundPollVDSCommandParameters.Polling pt = (org.ovirt.engine.core.common.FeatureSupported.isPing2SupportedByVdsm(host.getClusterCompatibilityVersion()))? org.ovirt.engine.core.bll.network.host.HostPoller.log.debug("Pending VM '{}' at this point '{}' : org.ovirt.engine.core.bll.network.host.HostPoller.VDSCommandParameters.nanoTime(); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NON_NIC)) { if (poller.poll(pci.getName(), host.getHostName(), host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Finished managed to communicate with VDSM agent on host '{}' ('{}') host.getName(), host.getId()); return true; } } return false; }
private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String, java.lang.Object> map, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); if (diskDevName == null) { diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEVICE))); } switch (diskDevName) { case "sd" : dve.setDiskInterface(DiskInterface.IDE); break; case "sd" : default : default : dve.setDiskInterface(DiskInterface.IDE); break; case "sd" : default : default : dve.setDiskInterface(DiskInterface.IDE); break; } return dve; }
public java.lang.String generateEngineXmlRpc(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String cpuId, java.lang.String emulatedMachine) { vm.setCpuName(vmId); vm.setEmulatedMachine(vm.getName()); vm.setEmulatedMachine(vm.getCpuName()); return new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcBuilder(vm, vmInfoBuilder); }
private long getTransferSize(org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid domainId) { if ((TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { org.ovirt.engine.core.common.businessentities.storage.DiskImage imageInfoFromVdsm = imagesHandler.getVolumeInfoFromVdsm(image.getStoragePoolId(), domainId, image.getImageId()); return imageInfoFromVdsm.getApparentSizeInBytes(); } else { if ((TransferImageCommand.getParameters().getTransferSize())!= 0) { return org.ovirt.engine.core.bll.storage.disk.image.AbstractDiskCommand.getDiskImage().getStorageTypes().get(0).isBlockDomain(); } else { boolean isOnBlock = org.ovirt.engine.core.bll.storage.disk.image.Translator.getDiskImage().getStorageTypeFrom(0).isBlockDomain(); return org.ovirt.engine.core.bll.storage.disk.ImageHandler.getDiskImage().getStorageTypes().get(0).isBlockSizeInBytes(); } } }
@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); if (!(vmDeviceUtils.hasCdDevice(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()))) { vmDeviceUtils.addCdDevice(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getVirtioIsoName()); } } }
public org.ovirt.engine.core.bll.ValidationResult providerTypeIsNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK).when((!(isNetworks(provider.getType())))); }
@org.junit.Test public void openstackIsValidNetworkProviderType() { when(provider.getType()).thenReturn(ProviderType.OPENSTACK_NETWORK); assertThat(validator.providerTypeIsNetwork(), isValid()); }
@org.junit.Test public void invalidNetworkProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsNetwork(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_NOT_NETWORK)); }
java.lang.String VdcQueryType.GetProvidersByProviderType_TYPE_FAILED_PROVIDER_TYPE_NETWORK();
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.isInternalExecution()) { return null; } return networkLocks; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters parameters = new org.ovirt.engine.core.common.action.InternalImportExternalNetworkParameters(getProvider().getName(), getNetwork(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isPublicUse(), org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.getParameters().isAttachToAllClusters()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = runInternalAction(ActionType.InternalImportExternalNetwork, parameters); if (!(returnValue.getSucceeded())) { propagateFailure(runInternalAction(ActionType.InternalImportExternalNetwork, parameters)); } org.ovirt.engine.core.bll.network.dc.ImportExternalNetworkCommand.setSucceeded(true); }
public void setFragmentParameters(java.util.Map<java.lang.String, java.lang.String> params, boolean newItem) { currentEntityParams.clear(); currentEntityParams.putAll(params); java.util.Set<org.ovirt.engine.ui.common.presenter.TagsParams> paramNames = new java.util.HashSet<>(); paramNames.addAll(org.ovirt.engine.ui.common.presenter.AGEMENTParams.getParams(currentEntityParams.keySet())); com.gwtplatform.mvp.shared.PlaceRequest request = new com.gwtplatform.mvp.shared.PlaceRequest.Builder().nameToken(getCurrentPlaceRequest().getNameToken()).with(currentEntityParams).build(); if (newItem) { com.google.gwt.user.client.History.newItem(buildHistoryToken(request), false); } else { com.google.gwt.user.client.History.replaceItem(buildHistoryToken(request), false); } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.String> event) { super.onValueChange(event); if (clientAgentType.isFirefox()) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.getElementById("id-link-favax.client.SUB_TAB_PREFIX))) { com.google.gwt.dom.client.Element favicon = com.google.gwt.dom.client.ElementId.getParentElement(); if (favicon!= null) { com.google.gwt.dom.client.Element parent = com.google.gwt.dom.client.ElementId.getParentNode(); if (favax.dom.client.removeFromParent(favicon); } } } }
protected java.util.Map<java.lang.String, java.lang.String> getSegmentParamsFromEntity(T item) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); result.put( FragmentParams.NAME.getName(), ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); result.put(org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); result.put(org.ovirt.engine.core.common.businessentities.Nameable) { result.put(Groups.NAME, ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName()); result.put(org.ovirt.engine.core.common.businessentities.Nameable.name()); result.put(org.ovirt.engine.core.common.businessentities.Nameable.class, result.getName()); result = result.getMessage(); result.put(VdcQueryType.GetVmName, result); result.put(result); result.put(result); result.put(result, result); }
public void applySearchString(java.lang.String searchString) { if ((modelProvider.getModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?,?> listModel = modelProvider.getModel(); if ((org.ovirt.engine.core.compat.StringHelper.isNotNullOrEmpty(searchString)) && (searchString.startsWith(listModel.getDefaultSearchString()))) { placeManager.setSearchString(getSearchSearchString()); } listModel.setSearchString(searchString); listModel.getSearchCommand().execute(); } }
private java.util.Map<java.lang.String, java.lang.String> getSegmentParams(java.lang.String searchString) { java.util.Map<java.lang.String, java.lang.String> result = new java.util.HashMap<>(); if (searchString.startsWith(modelProvider.getModel().getDefaultSearchString())) { result.put(SearchParams.getName(), searchString); } result.put(SearchParams.SEARCH.getName(), searchString); return result; }
private static boolean canExecute(org.ovirt.engine.core.common.businessentities.BusinessEntityWithStatus<?,?> entity, java.lang.Class type, org.ovirt.engine.core.common.action.ActionType action) { java.util.Set<org.ovirt.engine.core.common.action.ActionType> actions = org.ovirt.engine.core.common.action.ActionUtils._matrix.get(type).get(entity.getStatus()); if ((action!= null) && (action.contains(action))) { return false; } return true; }
void onRollback() { if (((getCannot()) == null) || ((getCannot()) == null)) { return; } else { cancel(); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (((result.getError()) == null) || ((result.getError()) == null)) { return; } else { stopProgress(); } }
@org.ovirt.api.metamodel.annotations.In java.lang.Boolean restoreLease();
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(snapshot().id()); optional(restoreMemory()); optional(restoreCluster()); optional(disks()).append(", Disks()).imageId()); optional(disks()).snapshot().getSnapshot().id()); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity, org.ovirt.engine.core.bll.context.CommandContext cmdContext) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } persistCommand(cmdEntity); if (cmdContext!= null) { contextsCache.get().put(cmdEntity.getId(), cmdContext); } }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get().get(cmdId); if ((((cmdEntity!= null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdEntity.getRootCommandId())))) && (cmdEntity.getRootCommandId().equals(cmdEntity.getRootCommandId())))) { return true; } } return false; }
public void removeCommand(org.ovirt.engine.core.compat.Guid commandId) { commandsCache.get().remove(commandId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> getCommandAssociatedEntities(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.get().getCommandAssociatedEntities(cmdId); }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getCommands(boolean onlyWithCallbackEnabled) { java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> cmdEntities = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get().get(cmdId); if ((!onlyWithCallbackEnabled) || (commandsCache.get().get(cmdId).isCallbackEnabled())) { cmdEntities.add(cmdEntity); } } return cmdEntities; }
public java.util.List<org.ovirt.engine.core.common.businessentities.CommandEntity> getChildCmdsByParentCmdId(org.ovirt.engine.core.compat.Guid cmdId) { return commandsCache.getChildCmdsByParentCmdId(cmdId); }
public void updateCommandExecuted(org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.bll.VmHandler.updateCommandExecuted(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsByEntityId(org.ovirt.engine.core.compat.Guid entityId) { return commandsCache.getCommandIdsByEntityId(entityId); }
public void updateCallbackNotified(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.bll.VmHandler.updateAsyncTasksNotified(command, command); }
public void persistCommand(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getId())) { return; } org.ovirt.engine.core.common.businessentities.CommandEntity existingCmdEntity = commandsCache.get(cmdEntity.getId()); if (existingCmdEntity!= null) { cmdEntity.setExecuted(existingCmdEntity.isExecuted()); cmdEntity.setCallbackNotified(existingCmdEntity.isCallbackNotified()); } commandsCache.get().put(cmdEntity); if ((cmdEntity.isCallbackEnabled()) || (((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getParentCommandId()))) && ((commandsCache.get(cmdEntity.getParentCommandId()))!= null)) && (commandsCache.get(cmdEntity.getParentCommandId()).isCallbackEnabled()))) { buildCmdHierarchy(cmdEntity); if (!(cmdEntity.isCallbackNotified())) { addToCallbackMap(cmdEntity); } } }
public org.ovirt.engine.core.bll.CommandBase<?> retrieveCommand(org.ovirt.engine.core.compat.Guid commandId) { return retrieveCommand(commandsCache.get(commandId), retrieveCommandContext(commandId)); }
public void persistCommandAssociatedEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CommandAssociatedEntity> cmdAssociatedEntities) { commandsCache.persistCommandAssociatedEntities(cmdAssociatedEntities); }
public org.ovirt.engine.core.bll.context.CommandContext retrieveCommandContext(org.ovirt.engine.core.compat.Guid cmdId) { return contextsCache.get(cmdId); }
public void updateCommandData(org.ovirt.engine.core.compat.Guid commandId, java.util.Map<java.lang.String, java.lang.String> data) { commandsCache.get().updateCommandData(commandId, data); }
public org.ovirt.engine.core.common.businessentities.CommandEntity getCommandEntity(org.ovirt.engine.core.compat.Guid commandId) { return org.ovirt.engine.core.compat.Guid.isNullOrEmpty(commandId); }
public java.util.List<org.ovirt.engine.core.compat.Guid> getCommandIdsBySessionSeqId(long engineSessionSeqId) { java.util.List<org.ovirt.engine.core.compat.Guid> cmdIds = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.get().keySet()) { cmdEntity = commandsCache.get(cmdId); if (((cmdEntity!= null) && ((cmdEntity.getEngineSessionSeqId())!= (org.ovirt.engine.core.bll.aaa.SsoSessionUtils.EMPTY_SESSION_ID))) && ((cmdEntity.getEngineSessionSeqId()) == engineSessionSeqId)) { cmdIds.add(cmdId); } } return cmdIds; }
public void handleUnmanagedCommands() { java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTask> asyncTasks = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTaskDao.getAll(); java.util.Set<org.ovirt.engine.core.compat.Guid> asyncTaskManagerManagedCommands = asyncTasks.stream().filter((x) -> (x.getVdsmTaskId())!= null).map((x.getVdsmTaskId())!= null).collect(java.util.stream.Collectors.toSet()); asyncTaskManagerManagedCommands.addAll(asyncTasks.stream().filter((xyncTasks.toSet())!= null).map(java.util.stream.Collectors.toSet())); getCommands(false).stream().updateCommandStatus(asyncTaskManager.get().updateCommandStatus(x.getId()))).map(java.util.stream.Collectors.toSet())); getCommands(false).stream().updateCommandStatus(x.getId(), CommandStatus.ACTIVE).filter((x) -> commandsCache.getCommandStatus()) == (org.ovirt.engine.core.common.businessentities.storage.LdsmTaskStatus.ACTIVE_WITH_FAILURE)); getCommands(false).stream().updateCommandStatus(x.getId(), CommandStatus.Mocks); }
public void removeAllCommandsBeforeDate(final org.ovirt.engine.core.compat.DateTime cutoff) { cmdCache.get().removeAllCommandsBeforeDate(stop); }
public org.ovirt.engine.core.compat.CommandStatus getCommandStatus(final org.ovirt.engine.core.compat.Guid commandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = commandsCache.get(commandId); if (cmdEntity!= null) { return cmdEntity.getCommandStatus(); } return org.ovirt.engine.core.compat.CommandStatus.UNKNOWN; }
public void updateCommandStatus(final org.ovirt.engine.core.compat.Guid commandId, final org.ovirt.engine.core.compat.CommandStatus status) { commandsCache.get().updateCommandStatus(commandId, status); }
private java.lang.String renderGibobytesSize(long size) { long sizeInGB = ((unit) == (org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit.GiB))? size : org.ovirt.engine.core.common.utils.SizeConverter.convert(size, unit, SizeUnit.GiB).longValue(); return org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer.messages.gibobytes((sizeInGB >= 1? java.lang.String.valueOf(sizeInGB) : " 1)); }
protected boolean isLunsAlreadyInUse(java.util.Set<java.lang.String> lunIds) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb = lunDao.getAll(); java.lang.StringBuilder lunsUsedBySDs = new java.lang.StringBuilder(); java.lang.StringBuilder lunsFromDb = new java.lang.StringBuilder(); java.lang.StringBuilder lunsFromDb.stream().filter(( lun) -> lunIds.contains(lun.getLUNId())).forEach(( lun) -> { if ((lun.getStorageDomainId())!= null) { addFormattedLunId(lunsUsedBySDs, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs.getStorageDomainName()); } if ((lun.getDiskId())!= null) { addFormattedLunId(lunsUsedBySDs, lun, org.ovirt.engine.core.common.businessentities.storage.LUNs.getDiskAlias()); } if ((lunsUsedBySDs.length())!= 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedBySDs.toString()); } if ((lunsUsedByDisks.length())!= 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.addValidationMessageVariable("lunIds", lunsUsedByDisks.toString()); } if ((lunsUsedByDisks.length())!= 0) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_USED_BY_DISKS); org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBase.
protected void addFormattedLunId(java.lang.StringBuilder s, org.ovirt.engine.core.common.businessentities.storage.LUNs lun, java.util.Function<org.ovirt.engine.core.common.businessentities.storage.LUNs, java.lang.String> nameGetter) { if ((sb.length())!= 0) { sb.append(java.lang.String.format("$storage_LUNs (%2$s)", lun.getLUNId(), nameGetter.apply(lun))); } sb.append(java.lang.String.format("$%1$s %2$s", lun.getLUNId(), nameGetter.apply(lun))); }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmHavingDeviceSnapshotsPluggedToOtherVmsThatAreNotDown() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN)).when(diskValidator).isDiskPluggedToAnyNonDownVm(anyBoolean()); org.ovirt.engine.core.bll.storage.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); }
@java.lang.Override protected boolean validate() { boolean validate = super.validate(); if (!(super.validate())) { auditLogDirector.log(this, AuditLogType.USER_MOVED_FINISHED_FAILED_DISK_FINISHED_FAILURE); return false; } if (!(getVm().isRunningAndQualifyForDisksMigration())) { return failValidation(EngineMessage.CANNOT_LIVE_MIGRATE_VM_SHOULD_BE_IN_PAUSED_OR_UP_STATUS); } setStoragePoolId(getVm().getStoragePoolId()); if (!(validateDestDomainsSpaceRequirements())) { return false; } org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().setValid(((isDiskNotShareable(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageId())))); if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getReturnValue().isValid())) { return false; } if (!(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.setAndValidateDiskProfiles())) { return false; } return (validateCreateAllSnapshotsFromVmCommand()) && validate; }
@org.junit.Test public void validateCantLiveMigrateToBackupDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(srcStorageId); dstStorageDomain.setBackup(true); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_VM_DISKS_ON_BACKUP_STORAGE); }
@org.junit.Test public void validateInvalidDestinationDomain() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.StorageDomain dstStorageDomain = initStorageDomain(dstStorageId); dstStorageDomain.setStatus(StorageDomainStatus.Active); dstStorageDomain.setStorageDomainType(StorageDomainType.ISO); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }
@org.junit.Test public void validateVmShareableDisk() { initStorageDomain(srcStorageId); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getVDSCommandCallback()); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = result.get("result"); refreshRefreshVdsStats(true); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoVDSCommand.getBroker().getHardwareInfo(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getParameters().getHardwareInfo().getHardwareInfo().getHostId()); }
@java.lang.Override protected void executeVdsBrokerCommand() { try { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getBroker().getVdsStats(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getVDSCommandCallback()); } catch (java.lang.Throwable t) { org.ovirt.engine.core.vdsbroker.vdsbroker.GetStatsAsyncVDSCommand.getParameters().getCallback().onFailure(t); } }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getParameters().getCapabilitiesVDSCommandCallback()); }
@java.lang.SuppressWarnings("incomplete-switch") private void executeNextOperation() { switch (org.ovirt.engine.core.bll.exportimportimport importVmFromExternalProviderCommand.getParameters().getPhase()) { case CreateCommand : convert(); break; case NETWORK : convert(); break; } }
protected void convert() { org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.freeLock(); runInternalAction(ActionType.ConvertVm, buildConvertVmParameters()); }
@java.lang.Override protected void convert() { boolean useVirtV2V2V = (org.ovirt.engine.core.bll.export.ImportVmFromOvaCommand.getParameters().getVm().getOrigin())!= (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtVirtVmFromengineVm) { org.ovirt.engine.core.bll.export.ImportVmFromOvaCommand.freeLock(); } else { runInternalAction(ActionType.ExtractOva, buildExtractOvaParameters()); } }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if (org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getPhase()) { org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.persistCommand(); executeNextOperation(); } else if (org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getPhase().isEmpty()) { return false; } org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.persistCommandIfNeeded(); executeNextOperation(); }
protected org.ovirt.engine.core.common.action.AddDiskParameters buildAddDiskParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { image.setDiskAlias(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.renameDiskAlias(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVm().getOrigin(), image.getDiskAlias())); org.ovirt.engine.core.common.action.AddDiskParameters diskParameters = new org.ovirt.engine.core.common.action.AddDiskParameters(image.getDiskVmElementForVm(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()), image); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getStorageDomainId()); diskParameters.setParentCommand(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getActionType()); diskParameters.setShouldRemainIllegalOnFailedExecution(true); diskParameters.setStorageDomainId(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getDestDomainId()); diskParameters.setEndProperties(true); return diskParameters; }
protected org.ovirt.engine.core.bll.context.CommandContext createConversionStepContext(org.ovirt.engine.core.common.job.StepEnum step) { org.ovirt.engine.core.bll.context.CommandContext commandCtx = null; try { java.util.Map<java.lang.String, java.lang.String> values = java.util.Collections.singletonMap(VdcObjectType.VM.name().toLowerCase(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmName()); org.ovirt.engine.core.common.job.Step removeVmStep = executionHandler.addSubStep(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getExecutionContext(), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getExecutionContext().getJob().getStep(StepEnum.EXECUTING), step, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(step, values)); org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(removeVmStep); ctx = org.ovirt.engine.core.bll.job.ExecutionContext(); ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); ctx.setStep(removeVmStep); ctx = org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.cloneContext().withoutCompensationContext().withExecutionContext(ctx).withoutLock(); } catch (java.lang.RuntimeException e) { log.error("Failed to create command from converter VM '{}': {}", org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmName(), e.getMessage()); log.debug("Exception", e); } return command; }
@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return ((logicalNetworkModel.getNetwork().getCluster())!= null) && (logicalNetworkModel.getNetwork().getCluster().isRequired()); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesByGuid = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks())!= null) { for (org.ovirt.engine.core.compat.Guid guid : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = diskImageDao.getSnapshotById(guid); imagesByGuid.add(image); } imagesToPreview = imagesByGuid; } else { imagesToPreview = disksByGuid; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = getParent().mapDisks(action.getDisks()); if (disksGuid = disks.isRestoreMemory()) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = getParent().mapDisks(action.getDisks()); if (disksGuid!= null) { disksGuid = disksGuid.stream().map(diskImage.getImageId).collect(java.util.stream.Collectors.toSet()); } tryBackParams.setDisks(java.util.Collections.singletonList(getParent().getImageId())); } catch (java.lang.Exception e) { org.ovirt.engine.api.model.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; } } return response; }
private void runTryBackToAllSnapshotsOfVm(final org.ovirt.engine.ui.uicommonweb.models.Model model, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot, boolean memory, java.util.Set<org.ovirt.engine.core.compat.Guid> disks) { if (model.getProgress().isEmpty()) { model.startProgress(); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId(), memory, disks, disks, disks, disks, disks, disks, disks, disks, disk, disks, disk, disks, disk.getDiskProfile().getSucceeded()); if (result.getReturnValue().getSucceeded()) { cancel(); } }
private void onCustomPreview() { org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel previewSnapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.PreviewSnapshotModel) (getWindow())); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = previewSnapshotModel.getSnapshotModel().getEntity(); boolean memory = java.lang.Boolean.TRUE.equals(previewSnapshotModel.getSnapshotModel().getMemory().getEntity()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = previewSnapshotModel.getSelectedDisks(); java.util.List<org.ovirt.engine.core.compat.Guid> diskImages = disks.getSelectedDisks(); java.util.List<org.ovirt.engine.core.compat.Guid> diskImages = disks.getSelectedDisks(); java.util.List<org.ovirt.engine.core.compat.Guid> diskImages = disks.getSelectedDisks(); runTryBackToAllSnapshotsOfVm(previewSnapshotModel, vm, snapshot, disks, disk, diskImage); }
private void onPreview() { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if (snapshot == null) { cancel(); return; } org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (getWindow())); boolean memory = false; java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks; java.util.Set<org.ovirt.engine.core.compat.Guid> diskImages = new java.util.HashSet<>(); if (snapshotModel.isShowPartialSnapshotOptions()) { switch (snapshotModel.getPartialPreviewSnapshotOptions().getSelectedItem()) { case preserveActiveDisks : disks = snapshotModel.getDisks(); disks.addAll(org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel.imagesSubtract(getVmDisks(), disks)); diskImages = disks.getDisks(); break; case openCustomPreviewDialog : setWindow(null); getCustomPreviewCommand().execute(); return; } } if (snapshotModel.isShowMemorySnapshotWarning()) { memory = snapshotModel.getMemory().getEntity(); } runTryBackToAllSnapshotsOfVm(snapshotModel, vm, snapshot, memory, diskImages); }
@java.lang.Override public javax.ws.rs.core.Response restore(org.ovirt.engine.api.model.Action action) { action.setAsync(false); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(parentId, guid); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { java.util.Set<org.ovirt.engine.core.compat.Guid> disksGuid = new java.util.HashSet<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks = collection.mapDisks(action.getDisks()); if (disksGuid!= null) { disksGuid = disksGuid.stream().map(diskImage.getImageId).collect(java.util.stream.Collectors.toSet()); } tryBackParams.setDisks(org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT); } catch (java.lang.Exception e) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action, PollingType.JOB); if ((response.getStatus()) == (Response.Status.JOB) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters(parentId, org.ovirt.engine.api.restapi.resource.BackendSnapshotResource.RESTORE_SNAPSHOT_CORRELATION_ID); if ((response.getStatus()) == (Response.Status.OK.getStatusCode())) { org.ovirt.engine.core.common.action.RestoreAllSnapshotsParameters restoreParams = new org.ovirt.engine.engine
private boolean updateLeaseInfo(org.ovirt.engine.core.compat.Guid snapshotLeaseDomainId) { if (snapshotLeaseDomainId == null) { vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), null); } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = null; try { retVal = runVdsCommand(VDSCommandType.GetVmLeaseInfo, new org.ovirt.engine.core.common.vdscommands.VmLeaseVDSParameters(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getStoragePoolId(), snapshotLeaseDomainId, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId())); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Failure in the VM {}, message: {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), e.getMessage()); return false; } vmStaticDao.updateVmLeaseInfo(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String, java.lang.String>) (retVal.getReturnValue()))); } if (!(retVal.getSucceeded())) { log.error("Failed to get info on the lease of VM {}", org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getVmId(), ((java.util.Map<java.lang.String, java.lang.String>) (retVal.getReturnValue()))); return true; }
private boolean isRemoveLeaseNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) { return ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.COMMIT)) || ((srcLeaseDomainId == null) && (dstLeaseDomainId!= null)) && (!(dstLeaseDomainId.equals(dstLeaseDomainId)))) || ((srcLeaseDomainId!= null) && (!(dstLeaseDomainId!= null)); } return false; }
private boolean isLeaseInfoUpdateNeeded(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { return ((org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getParameters().getSnapshotAction()) == (org.ovirt.engine.core.common.businessentities.SnapshotActionEnum.UNDO)) && (!((srcLeaseDomainId == null)) && (dstLeaseDomainId == null))); }
private org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction determineLeaseAction(org.ovirt.engine.core.compat.Guid srcLeaseDomainId, org.ovirt.engine.core.compat.Guid dstLeaseDomainId) { if ((srcLeaseDomainId!= null) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getVm().getStaticData().getLeaseInfo())!= null)) { return srcLeaseDomainId!= null? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.CREATE_UPDATE_LEASE; } } return dstLeaseDomainId!= null? org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE : org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_NEW_LEASE; }
private boolean isLeaseInfoUpdateNeeded() { return ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_FREE_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO)); }
public static org.ovirt.engine.core.compat.Guid fetchLeaseDomainId(java.lang.String ovfData) { int beginIndexOfEntityLeaseDomainLeaseDomainLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.ENTITY_LEASE_DOMAIN_ID); if (beginIndexOfEntityLeaseDomainLeaseDomainId!= (-1)) { int endOfEntityLeaseDomainLeaseDomainLeaseDomainLeaseDomainId = ovfData.indexOf(org.ovirt.engine.core.utils.OvfUtils.END_ENTITY_LEASE_DOMAIN_ID, endIndexOfEntityLeaseDomainId); return null; } return null; }
protected boolean validateSourceStorageDomain() { org.ovirt.engine.core.compat.Guid sourceDomainId = org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getSourceDomainId(); if ((sourceDomainId == null) || (Guid.Empty.equals(sourceDomainId))) { sourceDomainId = getImage().getStorageIds().get(0); org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().setSourceDomainId(sourceDomainId); } else { if (!(getImage().getStorageIds().contains(sourceDomainId))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); } } org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomainDao.getForStoragePool(sourceDomainId, getImage().getStoragePoolId())); return validate(validator.isDomainExistAndActive()); }
protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$diskAlias %2$s", "diskAlias", getImage().getDiskAlias())); } if (isMoveOperation()) { if (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId())) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); } } return true; }
@org.junit.Test public void validateSourceDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); disk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(org.ovirt.engine.core.compat.Guid.newGuid()))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_SOURCE_STORAGE_DOMAIN_IS_NOT_VALID); }
java.lang.String ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID();
java.lang.String VdcQueryType.GetSourceDomainByStorageDomainId(org.ovirt.engine.core.common.businessentities.SourceDomainId actionType, org.ovirt.engine.core.common.businessentities.StorageDomainType.StorageDomainType.ISCSI_ID_ISCSI_NOT_VALID);
@org.junit.Test public void validateDestinationDomainValid() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); initializeCommand(disk, VmEntityType.VM); disk.getStorageIds().add(destStorageId); initSrcStorageDomain(); initDestStorageDomain(StorageType.NFS); command.getParameters().setStorageDomainId(destStorageId); command.getStorageDomain().setId(destStorageId); command.getStorageDomain().setId(destStorageId); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID); }
@java.lang.Override public void runningSucceded() { try { queryDowntime(); vmDynamicDao.clearMigratingToDifferentCluster(); vmDynamicDao.clear(); } finally { super.runningSucceded(); } }
public static java.lang.String decrypt(java.lang.String password) { byte[] r = new byte[0]; char[] temp = new char[0]; org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.cryptMD5.SECON_MAX_LENGTH; char[] tempVar = new char[r.length]; org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.cryptMD5.nextBytes(r); for (int i = 0; i < (r.length); i++) { if (!(i] > (org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.cryptMD5.length)) { } } return org.ovirt.engine.core.uutils.crypt.crypt.crypt.crypt.crypt.crypt.crypt(password, new java.lang.String(salt)); }
public double getActualDiskSize() { if ((cachedActualSize) == 0.0.0.0") { cachedActualSize = getDiskImageMap().values().stream().map(DiskImage.getActualSize).sum(); } return cachedActualSize; }
private void processUnmanagedVm() { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vdsmVm.getVmDynamic(); if ((vmDynamic.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { destroyVm = true; return; } unmanagedVm = true; vmDynamic.setRunOnVds(vdsManager.getVdsId()); saveDynamic(vmDynamic); }
protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { if ((stage == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM)) && ((pausedBySystemReason)!= null)) { auditLog(this, pauseBySystemReason); } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(Phase); return updateEntity(updates); }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepalanceInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepalance().getTime())) < ts)) { log.warn("starting pending due to no updated due to {} seconds.", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(Image); return true; } return false; }
private void extendTicketIfNecessary(final org.ovirt.engine.core.bll.storage.disk.Command<T>.StateContext context) { if ((context.iterationTimestamp) >= ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.getSessionExpiration()) - (getHostTicketRefreshAllowance()))) { log.info("Waiting transfer ticket for {}", getTransferDescription()); boolean extendSucceeded = extendImageTransferSession(context.entity); if (!extendSucceeded) { log.warn("Failed to renew transfer ticket for {}", getTransferDescription()); if (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().isRetryExtendExtendTicket()) { org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().setRetryExtendTicket(false); } else { prousedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFERENCESSAGE; updateEntityPhase(ImageTransferPhase); } } } else { log.debug("Trying to refreshing transfer ticket for {}", getTransferDescription()); } }
private void pollTransferStatus(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context) { if ((((context.entity.getVdsId()) == null) || (!(org.ovirt.engine.core.common.FeatureSupported.getVdsId()))) { return; } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInformation ticketInfo; try { ticketInfo = ((org.ovirt.engine.core.common.FeatureSupported.getImageTicketSupported(vdsDao.get(context.getVdsId()).getClusterCompatibilityVersion())))) { return; } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Could not get image ticket '{}' from vdsm state: '{}' from vdsm", e.getImportedTicketId(), e); } } org.ovirt.engine.core.common.businessentities.storage.ImageTicketInfo entityInfo = getParameters(VDSCommandType.GetImageTicket, new org.ovirt.engine.core.common.AuditLogType(context.getImageTicketId(), null); if (!(org.ovirt.engine.core.common.errors.EngineMessage.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_MISSING_TICKET; updateEntityPhase(ImageTransferPhasePhasePhase); } org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer = updateTransferStatusWithTicketInformation(context.entity, ticketInfo); if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { finalizeDownloadIfNecessary(context, upToNecessary); } }
private org.ovirt.engine.core.common.action.ImportDiskImageParameters createInitParams() { org.ovirt.engine.core.common.action.CopyDiskImageParameters parameters = new org.ovirt.engine.core.common.action.ImportDiskImageParameters(); parameters.setCopyType(TransferType.Download); parameters.setImageGroupID(diskImage.getId()); java.lang.String fileExtension = ((diskImage.getVolumeFormat()) == (org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW))? ".qCow2" : ".raw"; parameters.setDownloadfilename(((diskImage.getDiskAlias()) + fileExtension)); parameters.setTransferSize(diskImage.getActualSizeInBytes()); parameters.setKeepalanceInterval(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDownloadImageUiInactivityTimeoutInSeconds()); return parameters; }
private boolean stopTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.CopyImageCommand.getParameters().getKeepalance()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepalance().getTime())) < ts)) { java.lang.String action = "paused"; org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhasePhasePhase = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.PAUSED_SYSTEM; if ((org.ovirt.engine.core.bll.storage.disk.image.ImageCommand.getParameters().getCopyType()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferType.Download)) { action = org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.CANCE; } log.warn("Waiting to {} due to no updates in {}", action, (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(Phase); return true; } return false; }
@java.lang.Override protected boolean validate() { final boolean result = validateImpl(); if (((!result) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.isInternalExecution()))) && (!(org.ovirt.engine.core.bll.RunVmCommandBase.getParameters().isRerun()))) { logValidationFailed(); } return result; }
private boolean isLeaseInfoUpdateNeeded() { return (org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().isRestoreLease()) && ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.CREATE_UPDATE_LEASE)) || ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getLeaseAction()) == (org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters.LeaseAction.UPDATE_LEASE_INFO))); }
@java.lang.Override public javax.ws.rs.core.Response previewSnapshot(org.ovirt.engine.api.model.Action action) { validateParameters(action, "snapshot.id"); org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters tryBackParams = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(guid, asGuid(action.getSnapshot().getId())); if (action.isSetRestoreMemory()) { tryBackParams.setRestoreMemory(action.isRestoreMemory()); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetDisks()) { tryBackParams.setDisks(getParent().mapDisks(action.getDisks())); } if (action.isSetRestoreAllSnapshots()) { try { if (action.isSetRestoreAll()) { tryBackParams.setRestoreCase(action.isRestoreAllSnapshots()); } javax.ws.rs.core.Response response = doAction(ActionType.TryBackToAllSnapshotsOfVm, tryBackParams, action); return response; } catch (javax.ws.rs.core.Response response) { if (action.isRestoreAllSnapshotsOfVm, action); } return response; }
private boolean isSortedAndMaxResults() { java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, modelType); int max = org.ovirt.engine.api.restapi.util.QueryHelper.getIntegerParameter(httpHeaders, uriInfo, (-1), (-1)); return (((searchConstraint!= null) && (!(searchConstraint.isEmpty()))) && (max!= 0); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVMs() { int maxResults = org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getParameters().getMaxResults(); int pageNum = org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getParameters().getUserID(); int pageNum = org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getParameters().getPageNumOfVms(); int limit = org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getParameters().getPageNumOfVms(); int limit = org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getParameters().getUserID(); int limit = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getUserID(); int limit = org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getParameters().getUserID(); if (isFiltered) { return vmDao.getAllSortedVmsByVmsId(org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getUserID(), offset); } else if (org.apache.commons.lang.StringUtils.isEmpty(vmId)) { return vmDao.getAll(org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getUserID(), offset); } return vmDao.getAllSortedVmsByVmsId(org.ovirt.engine.core.bll.GetAllVmsFilteredAndSortedQuery.getUserID(), org.ovirt.engine.core.bll.GetAllVmsFilteredQuery.getUserID(), vmId); }
@java.lang.Override public org.ovirt.engine.api.model.Vms list() { if (isFiltered()) { if (isFiltered()) { return getVmsFilteredAndSorted(); } else { return mapCollection(getBackendCollection(SearchType.VM), false); } } else { return mapCollection(getBackendCollection(SearchType.VM), false); } }
private org.ovirt.engine.api.model.Vms getVmsFilteredAndSorted() { int max = org.ovirt.engine.api.model.VmsFilteredAndSortedAndSortedParameters.get(httpHeaders, uriInfo, (-1), (-1)); org.ovirt.engine.core.common.queries.GetAllVmsFilteredParameters params = new org.ovirt.engine.core.common.queries.GetAllVmsFilteredAndSortedParameters(max); java.lang.String searchConstraint = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.getConstraint(httpHeaders, uriInfo, "", modelType); java.lang.Integer pageNum = org.ovirt.engine.api.restapi.util.QueryHelper.parsePage(searchConstraint); params.setPageNum(((org.ovirt.engine.api.restapi.util.QueryHelper.getAllVmsFilteredAndSortedAndSorted, params), true); return mapCollection(getBackendCollection(QueryType.GetAllVmsFilteredAndSorted, params), true); }
public static java.lang.Integer parsePageNumOf(java.lang.String searchStr) { if (searchStr.toLowerCase().indexOf(" page ")) { return org.ovirt.engine.ui.frontend.server.gwt.Application.Cannotations.forInstance(org.ovirt.engine.ui.frontend.server.gwt.Application.Application.CachedPage.class, new org.ovirt.engine.ui.frontend.server.gwt.ApplicationConverter() { @java.lang.Override public int result = org.ovirt.engine.ui.frontend.Frontend.getInstance().RunQuery(); if (searchStr.isValid()) { return org.ovirt.engine.ui.frontend.server.gwt.GlusterBondManager.getInstance().getBondString(c); } } int result = (org.ovirt.engine.ui.frontend.server.gwt.Application.CachedProfile.isDigit(c)) && (c.getCdss().isEmpty()))? 1 : java.lang.Integer.valueOf(c); if (c == null) { c = java.lang.Integer.valueOf(c.toString()); return pageNum; } } }
public static long subtractCommonDivisor(long a, long b) { while (b!= 0) { long c = a; b = a %s; b = a %s; } return a; }
public org.ovirt.engine.core.bll.ValidationResult canVnicWithExternalNetworkBePlugged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.PLUGGED_UNLINKED_VM_INTERFACE_WITH_EXTERNAL_NETWORK_IS_NOT_SUPPORTED).when(((((org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.PLUG) == (getRequiredAction())) && (!(nic.isLinked()))) && (org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.isVnicAttachedToExternalNetwork()))); }
@org.junit.Before public void setUp() { prepareNetwork(commandNoCluster.getParameters().getExternalNetwork()); prepareNetwork(commandCluster.getParameters().getExternalNetwork()); when(backend.runInternalAction(eq(ActionType.AddNetwork), any(), any())).thenReturn(getAddNetworkReturnValue()); when(networkHelper.createVnicProfile(any())).thenReturn(new org.ovirt.engine.core.common.businessentities.network.VnicProfile()); org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); returnValue.setSucceeded(true); when(networkHelper.attachNetworkToClusters(eq(Network_ID), any())).thenReturn(returnValue); org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = new org.ovirt.engine.core.common.queries.QueryReturnValue(); queryReturnValue.setReturnValue(getClusters()); queryReturnValue.setSucceeded(true); when(backend.runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any())).thenReturn(queryReturnValue); }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any(), anyBoolean()); org.mockito.verificationMode expectedNumberOfCalls = (attachToAllClusters)? times(1) : never(); verify(backend, expectedNumberOfCalls).executeInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(QueryType.GetClustersByStoragePoolId), any()); }
public org.ovirt.engine.core.common.action.VnicProfileParameters addVnicProfile(org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, boolean publicUse) { org.ovirt.engine.core.common.action.VnicProfileParameters parameters = new org.ovirt.engine.core.common.action.AddVnicProfileParameters(vnicProfile); parameters.setPublicUse(publicUse); return backend.runInternalAction(ActionType.AddVnicProfile, parameters); }
public static boolean isMemoryDisksOnDifferentDomainsSupported(org.ovirt.engine.core.compat.Version version) { return org.ovirt.engine.core.common.FeatureSupported.supportedInConfig(ConfigValues.IsMemorySnapshotSupported, version); }
public java.util.Map<java.lang.String, java.lang.String> build() { if (((((poolId) == null) || ((domainId) == null)) || ((imageGroupId) == null)) || ((imageGroupId) == null)) || ((imageGroupId) == null)) { throw new java.lang.IllegalArgumentException("One or more of the PDIVIDS is null"); } java.util.Map<java.lang.String, java.lang.String> pdsmMap = new java.util.HashMap<>(); pdiv pdiv.put(poolId, poolId.toString()); pdiv map.put("domainID", domainId.toString()); pdiv map.put("imageID", volumeId.toString()); return pdivMap; }
private boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && ((getFlow()) == (org.ovirt.engine.core.common.action.RunVmFlowVmFlow.RESUME_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getMemoryVolume()))) && (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) && (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) && (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) && (org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryVolume()))) { return true; }
private void handleRefreshCapabilitiesResponse(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.vdscommands.VDSReturnValue capabilities) { try { invokeGetHardwareInfo(vds, caps); processRefreshCapabilitiesResponse(vds.getDynamicData()); updateNumaData(vds); resourceManager.getEventListener().handleVdsVersion(vds.getId()); } finally { if (vds!= null) { updateNumaData(vds); monitoringStrategy.processHardwareCapabilities(vds.getId()); } } } }
public void refreshHostSync(org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue res = resourceManager.runVdsCommand(VDSCommandType.GetCapabilitiesByCapabilities, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVDSCommandParametersBase(vds.getId())); handleRefreshCapabilitiesResponse(vds, true); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue rs = ((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result"))); handleRefreshCapabilitiesResponse(vds, caps); } catch (java.lang.Throwable t) { onFailure(t); } }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); if (!(isVdsUpOrGoingToMaintenance)) { vdsManager.setStatus(VDSStatus.Up, vds); } refreshVdsRunTimeInfo(vds); } catch (java.lang.Throwable t) { onFailure(t); } }
public void setSourceProfileName(java.lang.String name) { source.setName(name); }
public boolean isSameSourceProfile(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic) { return (java.util.Objects.equals(getSourceNetworkName(), vnic.getNetworkName())) && (java.util.Objects.equals(getSourceProfileName(), vnic.getVnicProfileName())); }
public java.lang.String getSourceProfileName() { return source.getName(); }
@org.junit.Test public void testFindMappingEntry() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> actual = underTest.findMappingWithMappingWithMapping(vnic, externalVnicProfileMappings); assertThat(actual.get(), sameInstance(externalVnicProfileMapping1)); }
public void setSourceNetworkName(java.lang.String name) { if ((source.getCustomProperties()) == null) { java.util.Map<java.lang.String, java.lang.String> props = new java.util.HashMap<>(new java.lang.String, java.lang.String>(); } source.getCustomProperties().put("networkName", name); }
@org.junit.Test public void testFindMappingEntryNotFound() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(("not" + (org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME))); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE2); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> actual = underTest.findMappingWithMappingWithMapping(vnic, externalVnicProfileMappings); assertThat(actual, is(java.util.Optional.EMPTY_NAME)); }
public static void validateRegistrationVnicMappings(org.ovirt.engine.api.restapi.resource.BackendResource br, org.ovirt.engine.api.model.Action action) { if (!(action.isSetRegistrationConfiguration())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); if (!(action.getRegistrationConfiguration().isSetVnicProfileMappings())) { return; } org.ovirt.engine.api.model.RegistrationVnicProfileMappings mappings = action.getRegistrationConfiguration().getVnicProfileMappings(); if (org.ovirt.engine.api.model.RegistrationVnicProfileMapping mapping : mappings.getRegistrationVnicProfileMappings()) { org.ovirt.engine.api.restapi.resource.BackendVnicProfileHelper.validateTargetVnicProfile(br, model); } }
@org.junit.Test public void testFindMappingEntryEmptyInput() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> actual = underTest.findMappingWithMappingWithMapping(vnic, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.EMPTY_NIC_PROFILE1)); }
public org.ovirt.engine.core.compat.Guid getTargetProfileId() { return target.getId(); }
@org.junit.Test public void testFindMappingEntryEmptySourceVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(null); final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile> actual = underTest.findMappingWithMappingWithMapping(vnic, java.util.Collections.singletonList(emptySourceMapping)); assertThat(actual.get(), sameInstance(nullSourceMapping)); }
@org.junit.Test public void testFindMappingEntryEmptyExternal() { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.export.ExternalVnicProfileMappingTest.VNIC_PROFILE1); assertFalse(actual.isPresent()); }
private void updateVnicFromMapping(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic, org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfile map) { if ((mapping.getTargetProfileId())!= null) { updateVnicProfileId(vnic, mapping.getTargetProfileId()); } else { updateVnicProfile(vnic); } }
public java.lang.String getSourceNetworkName() { return (source.getCustomProperties())!= null? source.getCustomProperties().getCustomProperties().get("networkName") : null; }
public void setTargetProfileId(org.ovirt.engine.core.compat.Guid vnicProfileId) { this.setId(vnicProfileId); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { dataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getCluster()))) { cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } else if ((ev.matchesDefinition(HasEntity.entityChangedEventDefinition)) && (((((sender == (getKernelCmdlineBlacklistNuma()))) || (sender == (getKernelCmdlineKvmNuma()))) || (sender == (getKernelCmdlineKvmNics()))) || (sender == (getKernelCmdlinePciReasons()))) || (sender == (getKernelCmdlinePciRaised()))) || (sender == (getKernelCmdlineParsable()))) { if (isKernelCmdlineParsable()) { updateKernelCmdlinePriority(); } } }
public void setCacheSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> cacheSize) { this.cacheSize = cacheSize; }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDevice> getStorageDeviceList() { return storageDevicePathTypeList; }
public void setCacheSize(java.lang.String cacheSize) { this.cacheSize = cacheSize; }
@java.lang.Override protected void executeCommand() { try { runAnsibleLvmCache(); } catch (java.io.IOException | java.lang.InterruptedException e) { e.printStackTrace(); } }
@org.junit.Test public void validateFailsForNoStorageDevice() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.emptyList(), org.ovirt.engine.core.common.businessentities.CacheModeType.sslSelected, "10")).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateSucceeds() { doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(getStorageDevice("sda"))), org.ovirt.engine.core.common.businessentities.StorageDevicePathType.SDAO, org.ovirt.engine.core.common.businessentities.CacheModeType.Sla, org.ovirt.engine.core.common.businessentities.CacheModeType.SDAOONLY, org.ovirt.engine.core.common.businessentities.CacheModeType.getCache(getStorageDevice("sda"), org.ovirt.engine.core.common.businessentities.CacheModeType.SDAOvdsStatus.Up); assertTrue(cmd.validate()); }
public org.ovirt.engine.core.common.businessentities.StorageDevice getStorageDeviceType() { return storageDevicePath; }
public java.lang.String getCacheSize() { return cachedSize; }
public void setCacheDevicePathTypeList(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StorageDevice> cacheDevicePathTypeList) { this.storageDevicePathTypeList = cacheDevicePathTypeList; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getCacheSize() { return cacheSize; }
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheMode>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.generic.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheMode>()); }
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sDA"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2))); when(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(storageDevice1, org.ovirt.engine.core.common.businessentities.CacheModeType.sdf, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10")).thenReturn prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void validateFailsForDeviceAlreadyInUse() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = getStorageDevice("sda"); storageDevice.setCanCreateBrick(false); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Collections.singletonList(storageDevice))); when(storageDevice.getParameters().getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
public void setCacheDevicePath(org.ovirt.engine.core.common.businessentities.StorageDevice deviceDevicePath) { this.cacheDevicePath = cacheDevicePath; }
@org.junit.Test public void testExecuteQueryCommand() { org.ovirt.engine.core.common.queries.GetDiskImageByDiskAndImageIdsParameters params = getQueryParameters(); when(params.getDiskId()).thenReturn(diskId); when(params.getImageId()).thenReturn(imageId); when(diskImageDao.getDiskImageByDiskIds(diskId, imageId)).thenReturn(diskImage); org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery = query.getQueryReturnValue().getReturnValue(); assertTrue(returnValue.getQueryReturnValue().getReturnValue()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskImageByDiskIdAndImageIds(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid imageId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("disk_id", diskId).addValue("image_id", imageId); return getCallsHandler().executeRead("GetDiskImageByDiskIds", org.ovirt.engine.core.dao.DiskImageDaoImpl.DiskImageRowMapper.instance, parameterSource); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.image.GetDiskImageByDiskAndImageIdsQuery.getQueryReturnValue().setReturnValue(getQueryReturnValue().getQueryReturnValue().setReturnValue(getReturnValue().getReturnValue()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (!(getGlusterVolume().getVolumeType().isReplicatedType())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_TYPE); return false; } if (!(getGlusterVolume().isOnline())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getGlusterVolume().getAsyncTask())!= null) && (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.REMOVE_BRICK))) || (((getGlusterVolume().getAsyncTask().getType()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED)) || ((getGlusterVolume().getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.FINISHED)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_RUNNING_TASKS); return false; } if ((getParameters().getExistingBrick()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_REQUIRED); return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterHook getCluster() { org.ovirt.engine.core.common.businessentities.gluster.GlusterServer gluster = new org.ovirt.engine.core.common.businessentities.gluster.GlusterServer(); cluster.setId(clusterId); cluster.setVirtService(false); cluster.setGlusterService(true); return cluster; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeBrick, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeBrickActionVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getExistingBrick().getQualifiedName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { glusterBrickDao.resetBrick(getParameters().getExistingBrick()); } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_RESET_BRICK_FAILED, returnValue.getVdsError().getMessage()); return; } }
@org.junit.Before public void prepareMocks() { doReturn(getVds(VDSStatus.Up)).when(cmd).getUpServer(); doReturn(getDistributedVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getDistributedVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getReplicatedVolume(volumeId3, 2)).when(volumeDao).getById(volumeId3); doReturn(getReplicatedVolume(volumeId4, 4)).when(volumeDao).getById(volumeId4); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(vdsStaticDao).get(serverId); doReturn(getCluster()).when(cmd).getCluster(); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickStart(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); status = org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getBroker().glusterVolumeResetBrickCommitForce(org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.getParameters().getExistingBrickDir()); org.ovirt.engine.core.vdsbroker.gluster.ResetGlusterVolumeBrickVDSCommand.proceedProxyReturnValue(); }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.base.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.base.BaseNetworkProviderProxy.log.error("Exception error code error code: {}", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.provider.network.openstack.BaseNetworkProviderProxy.log.error("Exception", e.getCause().getMessage()); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e.getCause().getMessage()); } }
@org.junit.Test public void canCopyDiskFails() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = createStorageDomainForDisk(StorageType.ISCSI); domain.setStorageFormat(StorageFormatType.V3); disk.setSize(1000); org.ovirt.engine.core.common.businessentities.storage.DiskImage child = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); child.setSize(1000); child.setStorageIds(java.util.Collections.singletonList(domain.getId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage parent = org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createDiskImage(); parent.setId(domain.getId())); parent.setStorageIds(java.util.Collections.singletonList(domain.getId())); child.setParentIds(java.util.Collections.singletonList(domain.getId())); child.setParentId(parent.getParentId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = new java.util.ArrayList<>(2); diskImages.add(child); when(validator.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId())).thenReturn(diskImages); assertThat(validator.childDiskWasExtended(domain), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.CANNOT_MOVE_DISK_SNAPSHOTS)); }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).childDiskWasExtended(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
@java.lang.Override public void addMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String href) { if (primaryMenuId!= null) { addSecondaryMenuItem(index, href, primaryMenuId); } else { org.gwtbootstrap3.client.ui.ListGroup newMenuItem = new org.gwt.brandstrap3.client.ui.Anchor(hashCode(href, href); if (index < 0) { index = 0; } else { org.gwtbootstrap3.client.ui.gwt.client.ui.Anchor.Anchor menuAnchor = new org.gwtbootstrap3.client.ui.Anchor(hashCode(href, null)); if (index < 0) { index = 0; } org.gwtbootstrap3.client.ui.HTML iconSpan = new org.gwtbootstrap3.client.ui.gwt.html.shared.Span(); if (iconCssName!= null) { iconSpan.addStyleName(Styles.ACTIVE); newMenuItem.addStyleName(Styles.LIST_GROUP_ITEM_VALUE); } menuAnchor.add(iconAnchor.LIST_GROUP_ITEM_VALUE); menuAnchor.addStyleName(Styles.LIST_GROUP_ITEM_VALUE); menuAnchor.addStyleName(label); menuAnchor.add(label); if (index > (MenuItem.getWidgetCount())) { menuItemLabelMap.add(newMenuItem); } else { linkToGroupLabelMap.put(label, newMenuItem); priorityLabelMap.add(newMenuItem); priorityLabelMap.put(label, newMenuItem); priorityLabelMap.put(newMenuItem); priorityLabelMap.put(label, newMenuItem); priorityLabelMap.put(label); priorityToGroupLabelMap.put(label, newMenuItem); priorityLabelMap.add(newMenuItem); } } else { removeMenuItemLabelMap.put(label, newMenuItem); } }
public java.util.List<java.lang.String> getMenuIds() { return getMenuIds(); }
private void addSecondaryMenuItem(int index, java.lang.String label, java.lang.String label, java.lang.String primaryMenuId) { int primaryMenuIndex = primaryMenuIndex.indexOf(primaryMenuId); if ((primaryMenuIndex > (-1)) && (primaryMenuIndex < (menuListGroup.getWidgetCount()))) { org.gwtbootstrap3.client.ui.ListGroupItem primaryMenuItem = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.FlowPanel secondaryMenuPanel = null; if ((primaryMenuItem.getWidgetCount()) > 2) { com.google.gwt.user.client.ui.IsWidget widget = primaryMenuItem.getWidget(2); if (widget instanceof com.google.gwt.user.client.ui.FlowPanel) { secondaryMenuFlowPanel = ((com.google.gwt.user.client.ui.FlowPanel) (widget)); } } else { secondaryMenuFlowPanel = createSecondaryMenuItem(defaultMenuItem); primaryMenuItem.addStyleName(PatternflyStyles.SECONDARY_NAV_ITEM); for (int i = 0; i < (primaryMenuItem.getWidgetCount()); i++) { com.google.gwt.user.client.ui.Anchor labelAnchor = ((org.gwtbootstrap3.client.ui.Anchor) (widget.asWidget())); labelAnchor.setHref(org.ovirt.engine.ui.webadmin.section.main.view.view.popup.Anchor.Anchor.Javax.client.Anchor.Javax.Anchor.Javax.client.ui.Anchor) { org.gwt.client.Anchor labelAnchor.Hibern.setHref(label, href), (index + 1)); } } } if (secondaryMenuFlowPanel!= null) { secondaryMenuFlowPanel.add(createSecondaryMenuItem(label, href), (index + 1)); } else { secondaryMenuFlowPanel.add(createSecondaryMenuItem(label, href), (index + 1)); } }
void addMenuItem(int index, java.lang.String label, java.lang.String href, java.lang.String iconName, java.lang.String iconCssName);
public void addContentView(java.lang.String label, java.lang.String contentUrl, java.lang.String contentUrl, java.lang.String content, java.lang.String iconCssName, boolean defaultPlace) { menuPresenterWidget.addMenuItem(priority, label, historyToken, defaultMenuId, defaultMenuId, defaultConfigurationVersion); dynamicUrlContentProxyFactory.setDefault(historyToken); }
java.util.List<java.lang.String> getMenuIds();
public void addSecondaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, options.getIcon(), options.getIcon(), options.getIcon(), options.getDefaultPlace().intValue(), options.getDefaultPlace().intValue()); }
public void addPrimaryMenu(java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl, org.ovirt.engine.ui.webadmin.plugin.api.TabOptions options) { addContentView(label, historyToken, contentUrl, options.getIcon(), options.getIcon(), options.getDefaultPlace().intValue(), options.getDefaultPlace().intValue(), options.getDefaultPlace().intValue()); }
public java.lang.String[] listPrimaryMenuIds() { if (!(getSelectedItemIds().isEmpty())) { return false; } java.util.List<java.lang.String> ids = menuPresenterWidget.getSelectedItemIds(); if (!(ids.isEmpty())) { return false; } if (!(ids.isEmpty())) { return false; } else { return false; } }
public java.util.List<java.lang.String> getSelectedMenuIds() { return getView().getSelectedItemIds(); }
public void addMenuItem(int index, java.lang.String historyToken, java.lang.String historyToken, java.lang.String historyToken, java.lang.String iconToken, java.lang.String iconCssName) { getView().addMenuItem(index, historyToken, iconCssName, iconCssName); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, null)); }
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required,()).getProxyContextServersByName(id); super.remove(id); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, null)); }
@java.lang.Override protected void writeFileForLunDisk(org.ovirt.engine.core.common.businessentities.storage.LunDisk lun) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "id", lun.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createLunFile(lun)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.OVF_URI, "disk_storage_type", lun.getDiskStorageType().name()); }
@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI.getValue(ConfigValues.VdcVersion)); }
protected void writeHeader() { _instanceId = 0; _writer.writeStartDocument(false); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSSHD_URI); _writer.setPrefix(org.ovirt.engine.core.utils.ovf.XSI_PREFIX, org.ovirt.engine.core.utils.ovf.XSI_URI); writeHeaderWithEnvelope(); }
protected void writeHeaderWithEnvelope() { _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSHASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSHASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.VSSHASD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_URI); }
@java.lang.Override protected void startVirtualSystem() { _writer.writeStartElement("Content"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "type", ((OVF_PREFIX) + ": VirtualSystem_Type")); }
@java.lang.Override protected void writeFile(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "href", org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(image)); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", image.getImageId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "description", java.lang.String.valueOf(image.getActualSizeInBytes())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "description", org.apache.commons.lang.StringUtils.defaultString(image.getDescription())); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "disk_storage_type", image.getDiskStorageType().name()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "disk_storage_type", org.apache.commons.lang.StringUtils.defaultString(image.getCinderVolumeType())); }
@java.lang.Override protected void writeOS() { _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", vmBase.getId().toString()); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "required", ((OVF_PREFIX) + ":OperatingSystemSection_Type")); _writer.writeElement("Info", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeElement("Description", osRepository.getUniqueOsNames().get(vmBase.getOsId())); _writer.writeEndElement(); }
@java.lang.Override protected void writeHeaderWithEnvelope() { _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.OVF_URI, "Envelope"); _writer.writeStartElement(org.ovirt.engine.core.utils.ovf.OVF_OVIRT_URI, "Envelope"); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.OVF_PREFIX, org.ovirt.engine.core.utils.ovf.RASD_OVIRT_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.RASD_PREFIX, org.ovirt.engine.core.utils.ovf.VSSHD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSSHD_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_URI); _writer.writeNamespace(org.ovirt.engine.core.utils.ovf.XSI_URI); }
private void writeDiskParentRef(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { if (image.getParentId().equals(Guid.Empty)) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "parentRef", ""); } else { int i = 0; while (_images.get(i).getImageId().equals(image.getParentId())) { i++; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> res = _images.subList(i, ((_images.size()) - 1)); if ((res.size()) > 0) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } else { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OvfParser.createImageFile(res.get(0))); } } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if (isCopyOperation()) { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getVmTemplateId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.TEMPLATE, getDiskIsBeingMigratedMessage())); } } else { if ((getImage().getContentType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.ISO)) { java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = vmStaticDao.getAllIdsWithSpecificIsoAttached(getImage().getId()); if (!(vmIds.isEmpty())) { return vmIds.stream().collect(java.util.stream.Collectors.toMap(((org.ovirt.engine.core.common.businessentities.VM) (p) -> p) -> p) -> result) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice>> vmsForDisk = getVmsWithVmDeviceInfoForDiskId(getImage().getId()); if (!(vmsForDisk.isEmpty())) { return vmsForDisk.stream().collect(java.util.stream.Collectors.toMap(((vms) -> p) -> vmsForDisk.getId().toString(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyPairQuery.getVmDeviceInfo().toString(), (p) -> return
public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyNonDownVm() { java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_NAME_VARIABLE, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.aaa.GetAnyDbUserByUserIdQuery.getQueryReturnValue().setReturnValue(dbUser.getDbUserId()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.QueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(QueryType.GetAuthzGroupsByUserId, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters()); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.getByExternalId(g.getAuthz(), g.getId()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getUserID(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid currentUserId, java.util.Collection<org.ovirt.engine.core.compat.Guid> groupIds, boolean isFiltered) { int appMode = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ApplicationMode); org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id).addValue("user_ids", createArrayOf("user_groups", createArrayOf("uuid", groupIds.toArray())).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsByAdElementIdAndGroupIds", org.ovirt.engine.core.dao.PermissionDaoImpl.permissionRowMapper, parameterSource); }
java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForAdElementAndGroups(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered);
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port!= null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(vnicProfile); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Network externalNetwork = createNewPortForCreate(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean hostChanged = hostChanged(port, hostId); updatePort(port, hostId); updatePort(port, securityGroupsChanged, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override protected void executeCommand() { if ((getParameters().getRefresh()) || (getSessionDataContainer().isSsoOvirtAppApiEnabled(getParameters().getSessionId()))) { getSessionDataContainer().updateSessionLastActiveTime(getSessionDataContainer().getSessionId()); } if (validateInputs()) { long start = java.lang.System.currentTimeMillis(); try { returnValue.setSucceeded(true); executeQueryCommand(); } catch (java.lang.RuntimeException ex) { returnValue.setSucceeded(false); java.lang.Throwable th = (ex instanceof org.ovirt.engine.core.common.errors.EngineException)? ex : ex.getCause(); if (th instanceof org.ovirt.engine.core.common.errors.EngineException) { org.ovirt.engine.core.common.errors.EngineException vdcExc = ((org.ovirt.engine.core.common.errors.EngineException) (th)); if ((vdcExc.getErrorCode())!= null) && (!(vdcExc.isUseRootCause()))) { returnValue.setExceptionString(vdcExc.getErrorCode().toString()); } else { returnValue.setExceptionString(vdcExc.isUseRootCause()); } log.error("Exception", vdcExc.isUseRootCause()? org.apache.commons.lang.exception.ExceptionUtils.getRootCauseMessage(vdcExc) : vdcExc.getMessage()); } log.error("Exception", vdcExc); } else { returnValue.setExceptionString(ex.getMessage()); log.error("Exception", vdcExc); } log.error("Exception", vdcExc); }
@java.lang.Override public void addSubnet(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(subnet.getExternalNetwork()); com.woorea.openstack.quantum.model.Subnet subnetForCreate = createNewSubnet(subnet, externalNetwork); try { getClient().subnets().create(subnetForCreate).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void removeSubnet(java.lang.String id) { try { getClient().subnets().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.lang.String add(org.ovirt.engine.core.common.businessentities.network.Network network) { com.woorea.openstack.quantum.model.Network networkForCreate = createNewNetworkEntity(network); try { com.woorea.openstack.quantum.model.Network createdNetwork = getClient().networks().create(networkForCreate).execute(); return createdNetwork.getId(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public void testConnection() { try { getClient().execute(new com.woorea.openstack.base.client.OpenStackRequest(getClient(), com.woorea.openstack.base.client.HttpMethod.GET, "", null, org.ovirt.engine.core.bll.provider.network.base.BaseNetworkProviderProxy.ApiRootResponse.class)); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { org.ovirt.engine.core.bll.provider.network.base.BaseNetworkProviderProxy.log.error("Error (OpenStack response error code: {})", e.getMessage(), e.getStatus()); org.ovirt.engine.core.bll.provider.network.base.BaseNetworkProviderProxy.log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
private void removeMemoryFromActiveSnapshot() { if (snapshotDao.getMemorySnapshot().containsMemory(org.ovirt.engine.core.bll.RunVmCommand.getVmId())) { return; } snapshotDao.removeMemoryFromActiveSnapshot(org.ovirt.engine.core.bll.RunVmCommand.getVmId()); if ((snapshotDao.getNumOfDisks(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot())) == 0) { removeMemoryDisks(org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot()); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeExportedWithMemory() { if (org.ovirt.engine.core.bll.export.ExportVmCommand.getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.export.ExportVmCommand.getVmId(), SnapshotType.ACTIVE); return activeSnapshot.containsMemory(activeSnapshot)? java.util.Collections.emptyList(); } else { return snapshotDao.getAll(org.ovirt.engine.core.bll.export.ExportVmCommand.getVmId()).stream().filter((s) -> java.util.Collections.singletonList(activeSnapshot) -> java.util.Collections.singletonList(activeSnapshot)? java.util.Collections.singletonList(activeSnapshot.getId() : java.util.Collections.singletonList(nic) -> s.getMemory().filter(((java.util.Collectors.Collectors.Collectors.Collectors.toList())? java.util.Collections.singletonList(nic)) : java.util.Collections.singletonList(nic))); } }
private void copyAllMemoryImages(org.ovirt.engine.core.compat.Guid containerID) { for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshotsWithMemory) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(ActionType.CopyImageGroup, buildMoveOrCopyImageGroupParametersForMemoryDumpImage(containerID, dumpImage)); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalActionWithTasksContext(VdcRetValue.getVdsmTaskIdList()); org.ovirt.engine.core.bll.export.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); org.ovirt.engine.core.common.businessentities.storage.DiskImage confImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (diskDao.get(snapshot.getImageId()))); vdcRetValue = runInternalActionWithTasksContext(VdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); if (!(vdcRetValue.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(vdcRetValue.getFault().getError(), "Failed during ExportVmCommand"); } org.ovirt.engine.core.bll.export.ExportVmCommand.getTaskIdList().addAll(vdcRetValue.getVdsmTaskIdList()); } }
private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { removedSnapshot = snapshotDao.get(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshot.getId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().removeAllIllegalDisks(removedSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVmId()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCurrentUser(), new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getMacPool()), targetSnapshot.containsMemory()); org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getSnapshotsManager().addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, null, org.ovirt.engine.core.bll.snapshots.RestoreAllSnapshotsCommand.getCompensationContext()); }
@java.lang.Override public int getNumOfSnapshotsByDisks(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("snap_disk_ids", snapshot.getMemoryDiskId(), snapshot.getMetadataDiskId()); return getCallsHandler().executeRead("GetNumOfSnapshotsByMemoryVolume", org.springframework.jdbc.core.SingleColumnRowMapper.instance, parameterSource); }
@java.lang.Override protected void executeCommand() { if (isMemoryRemovable()) { org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMemoryDiskId()); removeMemoryDumpDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryDiskParameters); org.ovirt.engine.core.common.action.RemoveDiskParameters removeMemoryMetadataDiskParameters = new org.ovirt.engine.core.common.action.RemoveDiskParameters(org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.getParameters().getSnapshot().getMetadataDiskId()); removeMemoryMetadataDiskParameters.setShouldBeLogged(false); runInternalAction(ActionType.RemoveDisk, removeMemoryMetadataDiskParameters); } org.ovirt.engine.core.bll.RemoveMemoryVolumesCommand.setSucceeded(true); }
private void removeDiskImages() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.getDisks(getVm().getDiskMap().values(), org.ovirt.engine.core.bll.export.RemoveVmFromImportExportCommand.getStorageDomainId()))); boolean shouldWipe = false; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : images) { image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(org.ovirt.engine.core.bll.memory.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId()))); image.setStoragePoolId(org.ovirt.engine.core.bll.memory.MemoryUtils.getMemoryDiskIdsFromSnapshots(getVm().getSnapshots()); shouldWipe |= image.isWipeAfterDelete(); } java.util.List<org.ovirt.engine.core.compat.Guid> allMemoryDisks = createMemoryDisk(memoryDiskId, shouldWipeAfterDelete(); } removeVmImages(imagesDisk); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template!= null)? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription())!= null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate())!= null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus())!= null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getStatus(), null)); } if ((entity.getType())!= null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if ((entity.getType())!= null) { model.setPersistMemoryState(true); } return model; }
private void writeSnapshotsSection() { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = vm.getSnapshots(); if ((snapshots == null) || (snapshots.isEmpty())) { return; } _writer.writeStartElement("Section"); _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.XSI_URI, "type", "ovf:SnapshotsSection_Type"); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { _writer.writeAttributeString(org.ovirt.engine.core.utils.ovf.OVF_URI, "id", snapshot.getId().toString()); _writer.writeElement("Type", snapshot.getType().name()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("Description", snapshot.getDescription()); _writer.writeElement("CreationDate", org.ovirt.engine.core.utils.ovf.OvfParser.localDateToUtcDateString(snapshot.getCreationDate())); if (snapshot.containsMemory(snapshot.getDescription())) { org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryConf = memoryDisks.get(snapshot.getMemoryDiskId()); org.ovirt.engine.core.utils.ovf.OvfParser.log.debug("%1}", memoryVolume); java.lang.String memoryVolume = java.lang.String.format("%1$s, %3$s", memoryDump.getId(), memoryConf.getImageId(), memoryConf.getImageId(), memoryConf.getImageId()); _writer.writeElement("Memory", memoryVolume); } if ((snapshot.getAppList())!= null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getAppList())!= null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getAppList())!= null) { _writer.writeElement("ApplicationList", snapshot.getAppList()); } if ((snapshot.getAppList())!= null) { _writer.writeElement
@java.lang.Override protected final void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = getStorage(); T returnValue = getAllFromStorage(storage); java.util.List<org.ovirt.engine.core.compat.Guid> imagesList = getAllFromStorage(storage); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid>> idsToAdd = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid image : imagesList) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupVDSCommandParameters getVolumesParameters(storage.getStoragePoolId(), storage.getStoragePoolId(), image); } java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.compat.Guid> volumesList<org.ovirt.engine.core.compat.Guid> volumesList = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid image : imagesList) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBase vdsList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters().getReturnValue())); luns.put(image, volumesList); } org.ovirt.engine.core.bll.export.GetAllFromExportDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMemoryDisk(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMemoryDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMemoryDiskId()); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.VM vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), vmOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, sdOverheadCalculator, org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setImageId(snapshot.getMemoryDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(sd.getId())); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream.stream().stream.stream().stream.Translate(java.util.Arrays.asList(sd.getId())))); return memoryDisk; }
private org.ovirt.engine.core.compat.Guid getMemoryDiskImageId(org.ovirt.engine.core.compat.Guid imageGroupId) { org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.StoragePoolDomainAndGroupIdBaseVDSCommandParameters(org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.export.ImportVmCommand.getParameters().getStorageDomainId(), imageGroupId); java.util.List<org.ovirt.engine.core.compat.Guid> volumesList = ((java.util.List<org.ovirt.engine.core.compat.Guid>) (runVdsCommand(VDSCommandType.GetVolumesList, getVolumesParameters().getReturnValue())); return volumesList.get(0); }
private void addMemoryImages() { org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getSnapshots().stream().filter(( snapshot) ->!(org.ovirt.engine.core.bll.export.ImportVmCommand.getVm().getSnapshots().filter(( snapshot) -> { addDisk(createMemoryDisk(snapshot)); addDisk(createMetadataDisk(getVm(), snapshot)); }); }
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, snapshot.getMetadataDiskId()); if ((sd == null) || (disk!= null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(snapshot.getMetadataDiskId()); memoryDisk.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setStorageIds(org.ovirt.engine.core.bll.export.ImportVmCommand.getStoragePoolId()); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream().stream.stream.Translate(java.util.Arrays.asList(sd.getId())))); return memoryDisk; }
public static java.util.List<org.ovirt.engine.core.compat.Guid> getMemoryDiskIdsFromSnapshots(java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots) { java.util.List<org.ovirt.engine.core.compat.Guid> memoryDiskIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : snapshots) { if (snapshot.containsMemory()) { memoryDiskIds.add(snapshot.getMemoryDiskId()); } } return memoryDiskIds; }
protected boolean shouldRestoreMemory() { return ((!(memoryFromSnapshotUsed)) && (((getFlow()) == (org.ovirt.engine.core.common.action.RunVmParams.RESUME_HIBERNATE_HIBERNATE)) || (org.ovirt.engine.core.common.FeatureSupported.isMemorySnapshotSupportedByArchitecture(org.ovirt.engine.core.bll.RunVmCommand.getVm().getClusterArch(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getCompatibilityVersion())))) && ((org.ovirt.engine.core.bll.RunVmCommand.getActiveSnapshot().getMemoryDiskId())!= null))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, buildName, cpuCores, cpuFlagsSet, cpuFlags, cpuFlags, cpuFlags, cpuFlags, cpuFlags, cpuSpeedMh, guestOverhead, activeCpuPermission, hardLimit, kernelVersion, hardTotalSpeed, kernelVersion, memCommited, netConfigDirty, memCommited, memCommited, netConfigDirty, memCommited, vdsGroup, memCommited, vmsCpuLevel, pendingMemMb, pendingMemMb, concurrentVersion, vmsCpuLevel, pendingMemMb, pendingMemMb, vmsCpuShares, vmsCpuLevel, graphicsTypes, vmsCpuLevel, graphicsTypes, vmsCpuSharesCount, vmsCpuSharesCount, vmsCpuSharesCount, vmsCpuSharesCount, vmsCoresCount, vmsCpuSharesCount, vwPmUUID, HBAs, priority, vmsCpuSharesCount, speed, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, maintenanceReason, hardwareFeatures, hardwareFeaturesFenceEnabled, hardwareFeaturesEnabled, hardwareFeaturesEnabled, kernelFeaturesEnabled, hardwareFeaturesEnabled, kernelFeaturesEnabled, kernelFeaturesEnabled, hardwareFeaturesEnabled, kernelFeaturesEnabled(), kernelFeaturesEnabled, kernelFeaturesEnabled, kernelFeaturesEnabled, kernelFeaturesEnabled(), kernelFeaturesEnabled, kernelFeaturesEnabled, hardwareFeaturesEnabled, kernelFeaturesEnabled, kernelFeaturesEnabled(), hostFeaturesEnabled, hardwareFeaturesEnabled(), kernelFeaturesEnabled, hardwareFeaturesEnabled, kernelFeaturesEnabled, kernelFeaturesEnabled, kernelFeaturesEnabled(), hostFeaturesEnabledEnabledEnabled(), kernelFeaturesEnabledEnabledEnabled, kernelFeaturesEnabledEnabled(), kernelFeaturesEnabledEnabledEnabled, kernelFeaturesEnabledEnabledEnabled, kernelFeaturesEnabled(), kernelFeaturesEnabledEnabledEnabledEnabledEnabled, kernelFeaturesEnabledEnabledEnabledEnabledEnabledEnabledEnabled, kernelFeaturesEnabledEnabledEnabled, kernelFeaturesEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabled(hostFeaturesEnabledEnabledEnabledEnabled, kernelFeaturesEnabledEnabledEnabledEnabled, kernelFeaturesEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabled, kernelEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabled(hostFeaturesEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabledEnabled
public int getAvailableUnitForScsiDisk(java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, boolean reserveForScsiCd) { int cdPayloadUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int cdUnitIndex = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdPayloadDeviceIndex("scsi"); int unit = (reserveFirstDouble)? (reserveForScsiCd? (reserveForScsiCd : 0 : 0; if (vmDeviceUnitMap == null) { return unit; } while (vmDeviceUnitMap == null) { return unit; } while (((reserveForScsiCd && (unit == cdPayloadUnitIndex)) || (reserveForScsiCd && (unit == cdPayloadUnitIndex))) || (vmDeviceUnitMap.containsValue(unit))))) { unit++; } return unit; }
public org.ovirt.engine.core.bll.ValidationResult externalNetworkDetailsUnchanged(org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return (((((java.util.Objects.equals(network.getVlanId(), newNetwork.getVlanId())) && ((network.getMtu()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getMtu()))) && ((network.getStp()) == (newNetwork.getStp()))) && ((network.isVmNetwork()) == (newNetwork.isVmNetwork()))) && (java.util.Objects.equals(network.getProvidedBy(), newNetwork.getProvidedBy()))? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_DETAILS_CANNOT_BE_EDITED); }
protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if (cluster.hasRequired()) { org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface defaultSwitch = org.ovirt.engine.core.bll.network.vm.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequired(defaultChangeProhibitionReason); } }
private org.ovirt.engine.core.common.action.AddNetworkParameters addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); params.setVnicProfileRequired(false); if (attachToAllClusters) { org.ovirt.engine.core.common.queries.QueryReturnValue queryReturnValue = runInternalQuery(QueryType.GetClustersByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId)); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = queryReturnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = queryReturnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = clusters.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = clusters.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = clusters.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = clusters.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> clusters = clusters.getReturnValue(); if (isEmpty()) { params.setNetworkClusterList(networkHelper.createNetworkClusters(clusterIds)); } return runInternalAction(ActionType.AddNetwork, params); }
public void updateHostStatusAfterSuccessfulUpgrade() { org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicHostData = vdsDynamicDao.get(org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVdsId()); dynamicHostData.setUpdateAvailable(false); vdsDynamicDao.update(dynamicHostData); if ((org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.VDSStatus.Maintenance)) { setVdsStatus(VDSStatus.Maintenance); } else { if (org.ovirt.engine.core.bll.hostdeploy.UpgradeHostInternalCommand.getVds().getInitialMaintenanceMode()) { setVdsStatus(VDSStatus.Maintenance); } } }
public static boolean isStatusOk(java.util.Map<java.lang.String, java.lang.Object> response) { if ((response.get("error"))!= null) { java.lang.String errorCode = ((response.get("error_code")) == null)? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error")))); java.lang.String errorDescription = ((response.get("error_description")) == null)? ((java.lang.String) (response.get("error"))) : ((java.lang.String) (response.get("error_description"))); throw new java.lang.RuntimeException(java.lang.String.format("Error %s", errorCode)); } return true; }
private void createVnicProfile() { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = networkHelper.createVnicProfile(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); if (org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().isExternal()) { vnicProfile.setNetworkFilterId(null); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.utils.NetworkUtils.setNetworkVdsmName(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork()); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(()), null); runClusterAttachment(); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getId()); org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.AddNetworkParameters addNetwork(org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.common.businessentities.network.Network network, boolean attachToAllClusters) { org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dataCenterId, network); if (attachToAllClusters) { params.setNetworkClusterList(networkHelper.createNetworkClusters(getAllClusterIdsInDataCenter(dataCenterId))); } return runInternalAction(ActionType.AddNetwork, params); }
void initialize(boolean engineStartup, java.util.List<java.lang.String> macsForMacPool) { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.info("Starting {}", this); this.macsStorage = createMacsStorage(this.rangesBoundaries); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.debug("Mac {} with macs: {}", this, macsForMacPool); java.util.List<java.lang.String> notAddedMacs = addMacs(macsForMacPool); if (!(notAddedMacs.isEmpty())) { if (engineStartup) { java.lang.String auditLogMessage = "Invalid mac MACs violates duplicates, and was added to it:", notAddedMacs; auditLogDirector.log(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableImpl(), AuditLogType.MAC_ADDRESS_NO_DUPLICATE_SETTING, auditLogMessage); forceAddMacs(notAddedMacs); } else { throw new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.info("Invalidizing {}. Available MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); } } org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolUsingRanges.log.info("Initializing {}. Available MACs in pool: {}", this, macsStorage.getAvailableMacsCount()); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return ((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity()))) && (validate(validateDuplicatesConfiguration())); }
@java.lang.Override protected void executeCommand() { registerRollbackHandler(((org.ovirt.engine.core.bll.network.cluster.UpdateVmInterfaceCommand.getParameters().getActionType()) (org.ovirt.engine.core.common.businessentities.VmInterface<java.lang.Void>) (org.ovirt.engine.core.bll.MacPoolPerCluster.getMacPoolEntity()))) { org.ovirt.engine.core.bll.macPoolPerCluster.createPoolPerCluster(oldMacPool); macPoolPerCluster.modifyPool(getMacPoolEntity()); setSucceeded(true); getReturnValue().setActionReturnValue(getMacPoolId()); }
private void setCreateMacPool(org.ovirt.engine.core.common.businessentities.StoragePool macPool) { getMacPool().setId(org.ovirt.engine.core.compat.Guid.newGuid()); }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getParameters().getDescription()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getParameters().getSnapshotType()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getParameters()); createParams.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getActionType()); return createParams; }
public org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { return createSnapshotDescription; }
public void setCreateSnapshotStage(org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotParameters params) { this.createSnapshotDescription = createSnapshotDescription; }
@java.lang.Override public void init() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().setUseCinderCommandCallback(org.ovirt.engine.core.common.VdcObjectType.VM, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId())); setSnapshotName(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()) == null? null : null)); liveSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); setStoragePoolId(((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getStoragePoolId())!= null? org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm().getStoragePoolId() : null)); liveSnapshotIds = getStoragePoolId(); }
public void onSave() { if (((getProgress())!= null) || (!(validate()))) { return; } startProgress(); org.ovirt.engine.core.common.businessentities.VM vm = getVm(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> snapshotDisksIds = null; if ((getSnapshotDisks().getSelectedItems())!= null) { snapshotDisksIds = getSnapshotDisks().getSelectedItems().map(baseDisk.getId(), snapshotDisksIds); } org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters param = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(vm.getId(), getDescription().getEntity(), getMemory().getEntity(), snapshotDisksIds); param.setQuotaId(vm.getQuotaId()); params.setQuotaId(vm.getQuotaId()); params.add(param); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(ActionType.CreateSnapshotForVm, params, (result) { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel) (result.getState())); localModel.stopProgress(); getCancelCommand().execute(); }
private void createSnapshotsForDisks() { org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getDiskIdsToIgnoreInChecks(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks()); }
protected javax.ws.rs.core.Response doAdd(org.ovirt.engine.api.model.Snapshot snapshot, boolean block) { validateParameters(snapshot, "description"); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotParams = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(parentId, snapshot.getDescription()); if (snapshot.isSetPersistMemoryState()) { snapshotParams.setSaveMemory(snapshot.isPersistMemoryState()); } if (snapshot.isSetDiskAttachments()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> diskToImageIds = mapDisks(snapshot.getDiskAttachments()); snapshotParams.setDiskIds(diskToImageIds); } return performCreate(ActionType.CreateSnapshotForVm, snapshotParams, new org.ovirt.engine.api.restapi.resource.BackendSnapshotsResource.SnapshotIdResolver(), block); }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDescription()); result.setSessionId(image.getQuotaId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getNewActiveSnapshotId()); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getParameters().getNewActiveSnapshotId()); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getParameters().getEntityInfo()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getParameters().getDiskIdsToIgnoreInChecks()) { result.setLeaveLocked(true); } return result; }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDiskImagesForVm() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = getDiskImagesDao().getAllForVm(org.ovirt.engine.core.bll.snapshots.CreateSnapshotVolumeCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(getDiskImages(disks)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : disks) { allDisks.addAll(imagesHandler.getCinderLeafLeafLeafLeafLeafLeafImages(disks)); } return allDisks; }
private void createStatelessSnapshot() { warnIfNotAllDisksPermitSnapshots(); org.ovirt.engine.core.bll.RunVmCommand.log.info("Start stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters createAllSnapshotsFromVmParameters = buildCreateSnapshotParameters(); org.ovirt.engine.core.common.action.ActionReturnValue actionReturnValue = runInternalAction(ActionType.CreateSnapshotForVm, createAllSnapshotsFromVmParameters, createContextForStatelessSnapshotCreation()); org.ovirt.engine.core.bll.RunVmCommand.setLock(null); setSucceeded(actionReturnValue.getSucceeded()); if (!(areDisksLocked(actionReturnValue)) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IRS_IMAGE_STATUS_ILLEGAL); } org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().setFault(actionReturnValue.getFault()); org.ovirt.engine.core.bll.RunVmCommand.log.error("Failed to create stateless snapshot for VM '{}' ({})", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RunVmCommand.getVm().getId()); }
private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); result.setSessionId(image.getQuotaId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(newActiveSnapshotId); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }
private void handleVdsLiveSnapshotFailure(org.ovirt.engine.core.common.errors.EngineException e) { handleVmFailure(e, AuditLogType.USER_CREATE_LIVE_SNAPSHOT_FINISHED_FAILURE, ("$commit due to the new created" + " snapshot: {}")); }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters retVal = runInternalAction(ActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }
private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (diskDao.get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setStorageDomainId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); createParams.setSnapshotType(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); return createParams; }
@java.lang.Override protected void endVmCommand() { incrementVmGeneration(); thawVm(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.endActionOnDisks(); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.setSucceeded(((taskGroupSucceeded) && (liveSnapshotSucceeded)))); org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getReturnValue().setEndActionTryAgain(false); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getDisksList() { if ((cachedSelectedDisks) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesAndCinderDisks = getDiskImagesForVm(); if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotCommand.getParameters().getDiskIds()) == null) { cachedSelectedDisks = imagesAndCinderDisks; } else { cachedSelectedActiveDisks = getDiskImagesForVm(); } } return cachedSelectedActiveDisks; }
private org.ovirt.engine.core.bll.memory.MemoryImageBuilder createMemoryImageBuilder() { if (!(isMemorySnapshotSupported())) { return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); } if ((org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType()) == (Snapshot.SnapshotType.STATELESS)) { return new org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), cachedStorageDomainId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getStoragePool(), this, vmOverheadCalculator, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), wipeAfterDelete); } return new org.ovirt.engine.core.bll.memory.NullableMemoryImageBuilder(); }
private org.ovirt.engine.core.common.businessentities.Snapshot addSnapshotToDB(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder) { cachedSelectedActiveDisks = null; return org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getSnapshotsManager().addSnapshot(snapshotId, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription(), Snapshot.SnapshotStatus.LOCKED, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSnapshotType(), org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getVm(), true, memoryImageBuilder.getVolumeStringRepresentation(), null, memoryImageBuilder.getVolumeStringRepresentation(), null, getDisksList(), null, org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getCompensationContext()); }
java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLinkingToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId);
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAllExternalNetworksLockedToPhysicalNetwork(org.ovirt.engine.core.compat.Guid physicalNetworkId) { return getCallsHandler().executeReadList("GetAllExternalNetworksByProviderId", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", networkRowMapper, getCustomMapSqlParameterSource().addValue("network_id", networkId)); }
public org.ovirt.engine.core.bll.ValidationResult notLinkedToExternalNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> linkedExternalNetworks = getNetworkDao().getAllExternalNetworksLockedToPhysicalNetwork(network.getId()); java.lang.String linkedExternalNetworkNames = linkedExternalNetworkNames.stream().map(Network::getName).collect(java.util.stream.Collectors.joining(",")); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_PHASPLACEMENT, linkedExternalNetworkNames); }
@org.junit.Test public void defaultProperties() { try { java.lang.String basedNotNull(java.lang.System.getProperty("basedir"); assumeNotNull(basedir, "). Please set the basedir system system"); org.ovirt.engine.core.utils.osinfo.Osinfo.parse(java.nio.file.Paths.get(base.basedir, "../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../\n")); } catch (java.lang.Exception e) { fail(("Unable to load with a wrong osinfo:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
private static org.ovirt.engine.core.common.utils.Pair dnsServersOnly() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); org.ovirt.engine.core.common.businessentities.VmInitNetwork underTest = new org.ovirt.engine.core.common.businessentities.VmInit(); underTest.setStartOnBoot(true); vmInit.setNetworks(java.util.Arrays.asList(underTest)); vmInit.setDnsSearch(""); vmInit.setDnsServers("{}", vmInit.getDnsServers("{}", org.ovirt.engine.core.utils.servlet.HostUtils.asList(underTest.Arrays.asList(underTest)); return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }
private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> mapServices(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { java.util.List<java.util.Map<java.lang.String, java.lang.Object>> services = new java.util.LinkedList<>(); if (hasDnsServers(vmInit)) { for (java.lang.String dnsServer : vmInit.getDnsServers().split("") { java.util.Map<java.lang.String, java.lang.Object> service = new java.util.HashMap<>(); service.put("type", "dns"); service.put("address", dnsServer); service.put(service); } } return services; }
private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit, java.util.Map<java.lang.String, java.lang.Object> network) { if (network == null) { return; } if (network == null) { network.put("dns_nameservers", java.util.Arrays.asList(vmInit.getDnsServers().split(" "")); } if (hasDnsSearch(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split(" "")); } if (hasDnsSearch(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split(" "")); } }
@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.compat.Guid cmdId = command.getCommandId(); if (status == (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { org.ovirt.engine.core.bll.SerialChildCommand serialChildExecutingCommand = ((org.ovirt.engine.core.bll.SerialChildCommand) (command)); if ((!anyFailed) || (serialChildExecutedCommand.ignoreChildCommandFailure())) { try { boolean endCommand =!(serialChildExecutingCommand.performNextOperation(completedChildren)); if (!(serialChildExecutedCommand.performNextOperation(completedChildren)); if (!endCommand) { return; } } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.error("Error '{}' failed when attempting to perform the next operation, markCommandStatus, e); serialChildExecutingCommand.handleFailure(); anyFailed = true; } } else { org.ovirt.engine.core.bll.SerialChildCommandsExecutionCallback.log.info("Start '{}' id: '{}' execution did not proceeding to perform the next operation", command.getActionType(), cmdId); } setCommandEndStatus(command, status, status, childCmdIds); }
public java.lang.Long getFree() { return free; }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { mandatory(directory()); optional(directory()); optional(directory()); }
public void setProperties(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties brickProperties) { getStatus().setEntity(brickProperties.getStatus()); getPort().setEntity(brickProperties.getPort()); getPort().setEntity(brickProperties.getPort()); getPid().setEntity(brickProperties.getTotalSize()); getTotalSize().setEntity(brickProperties.getTotalSize()); getDevice().setEntity(brickProperties.getFreeSize()); getDevice().setEntity(brickProperties.getBlockSize()); getMountOptions().setEntity(brickProperties.getMntOptions()); getMountOptions().setEntity(brickProperties.getMntOptions()); getMountOptions().setEntity(brickProperties.getMntOptions()); }
public void setConfirmSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getFreeSize() { return freeFreeSize; }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> getConfirmFreeSize() { return freeSize; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> confirmFreeSize) { this.confirmFreeSize = false; }
@java.lang.Override public void setMainSelectedItem(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity selectedItem) { driver.edit(getDetailModel()); replicaFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); stripeFormItem.setIsAvailable(selectedItem.getVolumeType().isStripedType()); balloonCountFormItem.setIsAvailable(selectedItem.getVolumeType().isDispersedType()); java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<java.lang.Long>> volumeCapacityDetails = new java.util.ArrayList<com.google.gwt.user.client.ui.Label<java.lang.Long>>(java.util.Arrays.asList(volumeTotalCapacity, volumeUsedCapacity, volumeFreeCapacity, volumeFreeCapacity)); volumeCapacityDetailsLabel.setValue(volumeCapacityDetails); formBuilder.update(getDetailModel()); }
public void update(org.ovirt.engine.core.compat.Guid vdsId, java.util.Map<java.lang.String, java.lang.Object> values) { org.ovirt.engine.core.common.businessentities.VdsDynamicInterface new org.ovirt.engine.core.common.businessentities.VdsDynamicInterface(); java.lang.String[] bindingIds = new java.lang.String[value.getValue()]; java.lang.String[] bindingIds = new java.lang.String[valueOf(org.ovirt.engine.core.compat.Guid.Empty, java.lang.Object>() { @java.lang.Override public void onValue(java.lang.Object source : values) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", vdsId).addValue("plugin_types", pluginTypes).addValue("provider_binding_host_ids", bindingIds); getCallsHandler().executeModification("UpdateHostProviderBackingVinderConfiguration", parameterSource); } }
public java.lang.String get(org.ovirt.engine.core.compat.Guid vdsId, java.lang.String pluginType) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = createIdParameterMapper(pluginType, vdsId).addValue("plugin_type", pluginType); return getCallsHandler().executeRead("GetHostProviderBacking", org.ovirt.engine.core.dao.provider.HostProviderBINDER, parameterSource); }
private void persistTopology(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> dbNics, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks, org.ovirt.engine.core.common.vdscommands.UserConfiguredNetworkData userConfiguredNics, org.ovirt.engine.core.vdscommands.UserConfiguredNetworkData userConfiguredData) { hostProviderDaoImpl.update(host.getId(), host.getReportedDnsResolverConfiguration()); hostProviderDaoImpl.update(host.getId(), host.getOpenstackNetworkInterfaces()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host.getInterfaces(), userConfiguredNetworkAttachments, userConfiguredData.getUserOverriddenNicValuesByNicName()); networkInterfacesPersister.persistTopology(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); createHostNetworkAttachmentsPersister(host, clusterNetworks, userConfiguredData).persistNetworkAttachments(); }
@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { return (object.getConfirmAvailableDiskSize()) == null? null : java.lang.Long.valueOf(confirmAvailableSize); }
protected java.util.Stack<org.ovirt.engine.core.utils.EngineSSHtml> getAuthSeq(org.ovirt.engine.core.utils.SsoSession ssoSession ssoSession) { java.lang.String scsi = ssoSession.getScope(); java.lang.String appAuthSeq = ssoConfig.getSsoLocalConfig().getProperty("SSO_AUTH_LOGIN_SEQUENCE"); java.lang.String authSeq = null; if (!(scratch.contains("ovirt-ext=auth:auth:auth:sequence-priority="))) { authSeq = "~"; } else { for (java.lang.String scope : org.ovirt.engine.core.sso.utils.SsoUtils.scopeAsList(scratch, authz.auth_id); if (scope.startsWith("===", 3); authSeq = tokens[2]; } } } java.util.List<org.ovirt.engine.core.sso.utils.InteractiveAuth> authSeqList = org.ovirt.engine.core.sso.utils.servlet.AutoAuth.getAuthListForSeq(authSeq); if ((org.apache.commons.lang.StringUtils.isNotEmpty(authSeq)) && (authSeq.startsWith("~"))) { for (int c : appConfigSeq.toCharArray()) { if (!(authSeq.contains(org.ovirt.engine.core.utils.ssh.InteractiveAuth.valueOf(("" + c))))) { if (!(authSeqList.contains(org.ovirt.engine.core.utils.ssh.InteractiveAuth.valueOf(("" + c))))) { authSeqList.add(org.ovirt.engine.core.utils.InteractiveAuthz.getAuthListForSeq(appAuthSeq)); } } java.util.Collections.reverse(authSeqList); java.util.Collections.reverse(authSeqosList); java.util.Collections.reverse(authSeqList); java.util.Collections.reverse(authSeqList); java.util.Collections.reverse(authSeqosList
private void deScheduleTimeout(org.ovirt.engine.core.compat.Guid poolId) { java.util.concurrent.ScheduledTask = nonOperationalPools.get(poolId); if (scheduledTask!= null) { concurrentTask.cancel(true); } }
public void poolStatusChanged(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StoragePoolStatus status) { if ((nonOperationalPools.containsKey(poolId)) && (status!= (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { deactivateTimeout(poolId); nonOperationalPools.remove(poolId); } else if (status == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational)) { nonOperationalPools.put(poolId, scheduleTimeout(getId)); } }
protected boolean perform() { try { org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().setTotalMigrationTime(new java.util.Date()); if (((unplugPassthroughNics()) && (migrateVm())) && (migrateVm())) { org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.MigrateVmCommand.getExecutionContext(), true); return true; } runningFailed(); return false; } catch (java.lang.Exception e) { runningFailed(); throw e; } }
private void handleAuditLog(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { try { java.lang.String clientSecret = request.getParameter("clientSecret"); java.lang.String engineClientSecret = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_CLIENT_SECRET"); if (org.ovirt.engine.core.utils.crypto.EnvelopePBE.check(clientSecret, engineClientSecret)) { java.lang.String loginErrMsg = request.getParameter("loginErrMsg"); java.lang.String userName = request.getParameter("loginErrMsg"); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setUserName(userName); auditLogDirector.log(event, AuditLogType.USER_LOGINTERNAL_ERROR); } } catch (java.lang.Exception ex) { response.setStatus(java.net.HttpURLConnection.HTTP_LOGINTERNAL_ERROR); } finally { response.setStatus(java.net.HttpURLConnection.HTTP_OK); } }
public java.lang.String getUsernameWithProfile() { java.lang.String user = java.lang.String.format("%s%s", org.apache.commons.lang.StringUtils.defaultIfEmpty(username, ""), org.apache.commons.lang.StringUtils.defaultIfEmpty(profile, "")); return "@".equals(user)? "N/A" : user; }
public static void notifyClientOfAuditLogEvent(org.ovirt.engine.core.utils.SsoContext ssoContext ssoContext, java.lang.String clientId, java.lang.String userName, java.lang.String loginErrMsg) throws java.lang.Exception { org.ovirt.engine.core.utils.ClientInfo clientInfo = ssoContext.getClosingName(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotificationCallback() { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> form = new java.util.ArrayList<>(3); form.add(new org.apache.commons.http.http.HttpPost(url)); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> form = new java.util.ArrayList<>(3); form.add(new org.apache.commons.http.http.HttpMethodValuePair(form, "auditLog")); form.add(new org.apache.commons.http.http.HttpMethodValuePair(form, java.nio.charset.StandardCharset.StandardCharset)); request.setEntity(new org.apache.commons.http.http.http.HttpUtils.getBasicNameValuePair())); request.setEntity(new org.apache.commons.http.http.http.http.HttpUtils.getUrlEncoded(form, java.nio.charset.StandardCharset.StandardCharset)); } }
private java.util.List<java.lang.String> checkExternalNetworkConnection(org.ovirt.engine.core.common.businessentities.network.Network network, java.util.List<java.lang.String> hostNetworks) { if (!(network.getProvidedBy().isSetPhysicalNetworkId())) { return java.util.Collections.emptyList(); } org.ovirt.engine.core.common.businessentities.network.Network physicalNetwork = networkDao.get(network.getProvidedBy().getPhysicalNetworkId()); return java.util.Optional.ofNullable((hostNetworks.contains(network.getName())? null : null)); }
protected boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(255), new org.ovirt.engine.ui.uicommonweb.validation.I18NNameValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); getDescription().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); getHostAffinityRule().setIsValid((((getHostAffinityRule().getSelectedItem()) == (org.ovirt.engine.core.common.scheduling.EntityAffinityGroup.DISABLED)) || (!(getHostAffinityGroup().getSelectedHostIds().isEmpty())))); return (getName().getIsValid()) && (getHostAffinityGroup().getIsValid()); }
private java.nio.File createInventoryFile(org.ovirt.engine.core.common.utils.ansibleCommandBuilder command) throws java.io.IOException { java.nio.File inventoryFile = null; if ((command.inventoryFile()) == null) { org.ovirt.engine.core.common.utils.ansibleExecutor.log.debug("There hosts: {}", command.hostnames()); inventoryFile = java.nio.File.createTempFile("ansible-inventory", ""); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("[all]"); sb.append(org.apache.commons.lang.StringUtils.join(command.hostnames(), java.lang.System.lineSeparator())); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); sb.append("[all:vars]"); sb.append(java.lang.System.lineSeparator()); command.append("unknown: /dev/null"); sb.append(java.lang.System.toString(sb.toString()); command.append("exitFile(inventoryFile); } return inventoryFile; }
public org.ovirt.engine.core.common.businessentities.storage.FullEntity readVmTemplateFromOva(java.lang.String ovf) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); org.ovirt.engine.core.common.businessentities.storage.FullEntity ovfData = new org.ovirt.engine.core.common.businessentities.storage.FullEntityOvfData(template); ovfManager.importTemplateFromOva(ovf, fullEntityOvfData); template.setInterfaces(fullEntityOvfData.getInterfaces()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : fullEntityOvfData) { template.getDiskTemplateMap().put(disk.getId(), disk); } return fullEntityOvfData; }
public void importTemplateFromOva(java.lang.String ovfstring, org.ovirt.engine.core.common.businessentities.storage.FullEntity ofData) throws org.ovirt.engine.core.utils.ovf.OvfReaderException { org.ovirt.engine.core.utils.ovf.OvfReader ovf = null; try { ovf = new org.ovirt.engine.core.utils.ovf.OvfTemplateReader(new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(ovfstring), fullEntityOvfData, osRepository); ovf.build(); initIcons(fullEntityOvfData.getVmBase()); } catch (java.lang.Exception ex) { java.lang.String message = generateOvfReaderErrorMessage(ovf, ex); throw new org.ovirt.engine.core.utils.ovf.OvfReaderException(message); } }
@java.lang.Override protected com.google.gwt.user.client.ui.IsWidget createIcon() { org.gwtbootstrap3.client.ui.Span iconSpan = new org.ovirt.engine.ui.common.widget.utils.SpanIcon(); iconSpan.addStyleName(Styles.FONT_AWESOME_BASE); if (SnapshotStatus.IN_PREVIEW.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.BREAK_NAME); } else if (SnapshotStatus.LOCKED.equals(getEntity().getStatus())) { iconSpan.addStyleName(IconType.LOCKED.getCssName()); } else if (SnapshotStatus.LOCKED.equals(getEntity().getCssName())) { iconSpan.addStyleName(IconType.LOCK.CAMIAS.getCssName()); } else { iconSpan.addStyleName(Icon.CHECK_LIST_ICON_SM); iconPanel.addStyleName(iconSpanConstants.PF_LIST_ICON_SM); iconPanel.add(iconSpanConstants.WATCH_LIST_ICON_SM); iconPanel.add(iconSpan); return iconPanel; }
protected void removeVmImages() { commandCoordinatorUtil.executeAsyncCommand(ActionType.RemoveAllVmImages, buildRemoveAllVmImagesParameters(buildRemoveAllVmImagesParameters()), org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.cloneContextAndDetachFromParent()); }
private org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters buildRemoveAllVmImagesParameters() { org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters params = new org.ovirt.engine.core.common.action.RemoveAllVmImagesParameters(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId(), diskDao.getAllForVm(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getVmId()).stream().map(java.util.stream.Collectors.toList())); params.setParentCommand(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getActionType()); params.setEntityInfo(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getEntityInfo()); params.setParentParameters(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters().getEntityInfo()); params.setParentParameters(org.ovirt.engine.core.bll.export.ImportVmFromExternalProviderCommand.getParameters()); return params; }
@org.junit.Test public void testGetSoundDevice() throws java.lang.Exception { assertEquals(org.ovirt.engine.core.utils.OsRepositoryImplTest.SOUND_DEVICE, OsRepository.getSoundDevice(777, null, Devices.iDevice.i18NONLY); }
public org.ovirt.engine.core.common.businessentities.VmDevice addSoundDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusterSupplier) { org.ovirt.engine.core.common.businessentities.VmTemplate setType(vmBase, clusterSupplier); if (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) { return addSoundDevice(vmBase.getId(), vmBase.getOsId(), org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(((org.ovirt.engine.core.common.businessentities.VmBase) (null)), clusterSupplier), chipset); } return addSoundDevice(vmBase.getId(), vmBase.getOsId(), clusterUtils.getCompatibilityVersion(vmBase.getcompatibilityVersion(vmBase)); }
@java.lang.Override public javax.ws.rs.core.Response exportToPathOnHost(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.ExportOvaParameters params = new org.ovirt.engine.core.common.action.ExportOvaParameters(); params.setEntity(VmEntityType.TEMPLATE); params.setProxyHostId(getHostId(action)); params.setDirectory(action.getDirectory()); params.setDirectory(action.getDirectory()); return doAction(ActionType.ExportOva, params, action); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.Cluster cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> hostViolations = getHostViolationCount(false, hosts, vm, new org.ovirt.engine.core.common.scheduling.PerHostMessages()); int currentHostScore = hostViolations.getOrDefault(currentHostId, org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> retList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int score = hostViolations.getOrDefault(host.getId(), org.ovirt.engine.core.bll.scheduling.policyunits.VmToHostAffinityWeightPolicyUnit.DEFAULT_SCORE); if ((score >= currentHostScore) && (!(host.getId().equals(currentHostId))) { score += 1; } } return result; }
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> allocate(org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.VDS host, boolean ignoreSecurityGroupsOnUpdate) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); java.util.List<java.lang.String> securityGroups = getSecurityGroups(vnicProfile); java.lang.String hostId = getHostId(host); if (port == null) { com.woorea.openstack.quantum.model.Network externalNetwork = getExternalNetwork(network.getProvidedBy()); com.woorea.openstack.quantum.model.Network externalNetwork = createNewPortForAll(nic, securityGroups, hostId, externalNetwork); port = getClient().ports().create(portForCreate).execute(); } else { boolean securityGroupsChanged =!ignoreSecurityGroupsOnUpdate) && (securityGroupsChanged(port.getSecurityGroups(), securityGroups)); boolean hostChanged = hostChanged(port, hostId); updatePort(port, securityGroupsChanged, hostId, nic); } java.util.Map<java.lang.String, java.lang.String> runtimeProperties = createPortAllocationRuntimeProperties(host.getId(), port); return runtimeProperties; } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }
protected java.util.Map<java.lang.String, java.lang.String> createPortAllocationRuntimeRuntimeProperties(org.ovirt.engine.core.compat.Guid vdsId, com.woorea.openstack.model.Port port) { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = new java.util.HashMap<>(); runtimeProperties.put("vnic_id", port.getId()); java.lang.String providerType = getProvider().getType().name(); runtimeProperties.put("provider_type", providerType); if (((port.getSecurityGroups())!= null) && (!(port.getSecurityGroups().isEmpty()))) { runtimeProperties.put("security_groups", org.apache.commons.lang.StringUtils.join(getProvider().getPluginType())); } java.lang.String pluginType = org.apache.commons.lang.StringUtils.defaultString(getProvider().getPluginType()); runtimeProperties.put("plugin_id", bindingId); if (bindingId!= null) { runtimeProperties.put("binding:host_id", bindingId); } return runtimeProperties; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(org.ovirt.engine.core.common.businessentities.VDS host, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { long lowMemoryLimit = (parameters.get(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_OVER_UTILIZED.getDbName()))? java.lang.Long value : 0L; long highMemoryLimit = (parameters.containsKey(PolicyUnitParameter.LOW_MEMORY_LIMIT_FOR_UNIT_FOR_UNDER_UTILIZED.getDbName())) : 0L; long highMemoryLimit = (parameters.getMaxMemoryOfVdsInCluster(hosts))? java.lang.Long.MAX_VALUE : getMaxMemoryOfVdsInCluster(hosts); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> scores = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { scores.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), calcHostScore(vds.getMaxSchedulingMemory(), maxMemoryLimit, highMemoryLimit))); } return scores; }
private int calcHostScore(float mem, float highMemoryLimit, float highMemoryLimit, float highMemoryLimit) { if (hostSchedulingMem > highMemoryLimit) { float memOverLimit = java.lang.Math.max(0, (lowMemoryLimit - memOverLimit)); } return ((int) ((hostSchedulingMem / maxMemory) * (maxMemoryWeight) - 1))); }
public javax.ws.rs.core.Response importVmTemplateFromConfiguration(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.api.model.Initialization initialization = template.getInitialization(); org.ovirt.engine.api.model.Configuration config = initialization.getConfiguration(); org.ovirt.engine.core.common.businessentities.VmTemplate templateConfiguration = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, QueryType.GetVmFromConfiguration, new org.ovirt.engine.core.common.queries.GetVmFromConfigurationQueryParameters(org.ovirt.engine.api.restapi.types.VmMapper.map(config.getType(), null), config.getData().trim()), ""); org.ovirt.engine.api.restapi.types.TemplateMapper.map(template, templateConfiguration); org.ovirt.engine.core.compat.Guid clusterId = (namedCluster(template))? getClusterId(template) : asGuid(template.getCluster().getId()); org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters parameters = new org.ovirt.engine.core.common.action.ImportVmTemplateFromConfParameters(); parameters.setVmTemplate(template); parameters.setClusterId(initialization.isRegenerateIds()); if (initialization.isSetRegenerateIds()) { parameters.setImportAsNewEntity(initialization.isRegenerateIds()); } return performCreate(ActionType.ImportVmTemplateFromConfiguration, parameters, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class)); }
private static int setNetworkBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { for (org.ovirt.engine.core.common.businessentities.VmDevice pluggedInterface : org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.sortInterfacesByName(vm, org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getPluggedManagedInterfaces(devices))) { pluggedInterface.setBootOrder((++bootOrder)); } return bootOrder; }
private static int setDiskBootOrder(org.ovirt.engine.core.common.businessentities.VM vm, java.util.Collection<org.ovirt.engine.core.common.businessentities.VmDevice> devices, int bootOrder) { java.util.LinkedList<org.ovirt.engine.core.common.businessentities.VmDevice> diskDevices = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isDisk(device)) { org.ovirt.engine.core.compat.Guid id = device.getDeviceId(); if ((id!= null) && (!(id.equals(Guid.Empty)))) { if ((device.getSnapshotId()) == null) { diskDevices.addFirst(device); } else { diskDevices.addLast(device); } } } } for (org.ovirt.engine.core.common.businessentities.VmDevice device : diskDevices) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getDiskVmElement(vm, device.getDeviceId()); if ((dve!= null) && (dve.isBoot())) { device.setBootOrder((++bootOrder)); } } return bootOrder; }
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections, boolean sendNetworkEventOnFailure) { if (connections == null) { return true; } org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters parameters = new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), storageType, connections); parameters.setSendNetworkEventOnFailure(sendNetworkEventOnFailure); java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.Map<java.lang.String, java.lang.String>) (runVdsCommand(VDSCommandType.ConnectStorageServer, parameters).getReturnValue())); return storageHelperDirector.getItem(storageType).isConnectSucceeded(retValues, connections); }
private boolean connectFileStorageServers(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { java.util.Map<org.ovirt.engine.core.common.businessentities.StorageDomainType, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> connByType = connections.stream().collect(java.util.stream.Collectors.groupingByConnectionId(org.ovirt.engine.core.compat.Guid.createGuidFromString(c.getId())).getStorageDomainType())); boolean connectSucceeded = connectStorageServer(storageType, connByType.get(StorageDomainType.Data), true); try { connectStorageServer(storageType, connByType.get(StorageDomainType.ISO), false); connectStorageServer(storageType, connByType.get(StorageDomainType.ISO), false); } catch (org.ovirt.engine.core.common.errors.EngineException e) { log.error("Ignoring failed connection to domain of type '{}'", e); } return connectSucceeded; }
protected void executeVdsCommandWithNetworkEvent(boolean sendNetworkEvent) { try { executeVdsBrokerCommand(); } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkExceptionBase ex = null; updateNetworkException(ex, ex.getMessage()); if (sendNetworkEvent) { networkError.fire(ex); } throw ex; } catch (org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); throw ex; } catch (org.ovirt.engine.core.vdsbroker.transportRunTimeException ex) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.log.error("Failed to '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getVdsExceptionString(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.printReturnValue(); if (sendNetworkEvent) { networkError.fire(networkException); } throw networkException; } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.log.error("Failed in '{}' method, for vds id: '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), e.getMessage()); } else { log.error("Failed in '{}': {}", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getCommandName(), e.getMessage()); } }
@org.junit.Test public void testExtractIpv4AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(com.google.graphics.client.createAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDRESS, "")), nullValue()); }
@org.junit.Test public void testExtractIpv4SubnetEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractSubnet(com.google.graphics.client.getName()), nullValue()); }
@org.junit.Test public void testExtractIpv4GatewayEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractGateway(com.google.graphics.client.get().getGlusterHibernation(org.ovirt.engine.core.common.utils.customprop.GlusterConstants.glusterConstants.of(VdsProperties.GLOBAL_GATEWAY, "")), nullValue()); }
private static java.lang.String extractIPV6gateway(java.util.Map<java.lang.String, java.lang.Object> effectiveProperties) { java.lang.String gateway = ((java.lang.String) (effectiveProperties.get(VdsProperties.IPV6_GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway); }
private static java.lang.String extractGateway(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String gateway = ((java.lang.String) (properties.get(VdsProperties.GLOBAL_GATEWAY))); return org.apache.commons.lang.StringUtils.isEmpty(gateway); }
static java.lang.String extractSubnet(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String netmask = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.NETMASK_VALUE))); if (netmask == null) { return netmask; } if ((netmask == null) || (netmask.isEmpty())) { return netmask; } return org.apache.commons.lang.StringUtils.isEmpty(netmask); }
@org.junit.Test public void testExtractIpv6AddressEmptyString() { assertThat(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractIpv6Address("", nullValue()); }
private static java.lang.String extractAddress(java.util.Map<java.lang.String, java.lang.Object> properties) { java.lang.String address = ((java.lang.String) (properties.get(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.ADDRESS))); return org.apache.commons.lang.StringUtils.isEmpty(address)); }
@org.junit.Test public void testIsNetworkInSyncWhenIpv4GatewayBothBlank() { initIpv4AddressStaticBootProtocol(Ipv4BootProtocol.STATIC_IP); ipv4Address.setGateway(null); iface.setIpv4Gateway(null); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
private boolean shouldAbortOnClientInClientInject(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts, java.lang.Integer idleTimeFromTicket) { int inactivityTimeout = getTransferImageClientInactivityImageClientInactivityTimeoutInSeconds(); boolean timeoutExceeded = (id.getLastUpdated().getTime()) / 1000)? idleTime : ts > (((entity.getLastUpdated().getTime()) / 1000) + inactivityTimeout); return (((inactivityTimeout > 0) && (entity.getPhase().canBePaused())) && (!(entity.getActive())); }
public static void toStringBuilder(java.util.Map<java.lang.String,?> map, java.lang.StringBuilder builder) { if (map == null) { builder.append("}"); return; } builder.append("{"); java.util.Iterator<? extends java.lang.String> entry = map.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.String> entry = iterator.next(); builder.append(java.lang.String.format("%1$s=" + (entry.getKey())); org.ovirt.engine.core.vdsbroker.ObjectDescriptor.toStringBuilder(entry.getValue(), builder); if (iterator.hasNext()) { builder.append("}"); } } builder.append("}"); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("Private SPM Id=").append(privateSpmId).append(privateSpmId).append("SPM Status=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(privateSpmStatus=").append(", spmStatus=").append(privateSpmStatus=").append(", spmStatus=").append(privateSpmStatus=").append(", spmStatus=").append(", spmStatus=").append(privateSpmStatus=").append(", spmStatus=").append(", sb.getSpmStatus()).append("}"); }
public static void toStringBuilder(java.lang.Object object, java.lang.StringBuilder builder) { if (object == null) { return; } if (object == null) { org.ovirt.engine.core.common.businessentities.AuditLogType object = ((java.lang.Object[]) (object)), builder); } else if ((!(org.ovirt.engine.core.vdsbroker.vdsbroker.ObjectDescriptor.toStringBuilder(((java.util.Map<java.lang.String, java.lang.Object>) (object)), builder); }
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.ImageTransfer> createEntityRowMapper() { return (rs, rowNum) -> { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); entity.setId(getGuidDefaultEmpty(rs, "command_id")); entity.setCommandType(org.ovirt.engine.core.common.action.ActionType.forValue(rs.getInt("command_type"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.forValue(rs.getInt("stage"))); entity.setType(org.ovirt.engine.core.common.businessentities.storage.TransferType.forValue(rs.getInt("type"))); entity.setActive(new java.util.Date(rs.getTimestamp("last_updated").getTime())); entity.setMessage(rs.getBoolean("active")); entity.setMessage(rs.getString("message")); entity.setVdsId(getGuid(rs, "disk_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setDiskId(getGuid(rs, "disk_id")); entity.setDiskId(getGuid(rs, "image_id")); entity.setProxyUri(rs.getString("proxy_ticket_id")); entity.setSignedTicket(rs.getString("proxy_id")); entity.setSignedTicket(rs.getLong("proxy_id")); entity.setBytesTotal(rs.getLong("bytes_total")); entity.setClientInactivity(rs.getLong("client_inactivity_timeout")); return entity; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(image.getHost().getId())); } if (imageTransfer.isSetClientInactivity()) { params.setClientInactivityTimeout(image.getClientInactivity.getClientInactivity().getId()); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.models.vms.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_OF_IOTHREADS); } else { vm.setNumOfSockets(0); } vm.setNumOfSockets(0); }
public void updateDnsResolverConfiguration(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration reportedDnsResolverConfiguration) { if (reportedDnsResolverConfiguration == null) { dnsResolverConfigurationDao.removeByVdsDynamicId(vdsId); } else { if ((reportedDnsResolverConfiguration.getId()) == null) { reportedDnsResolverConfiguration.setId(vdsId); dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } else { dnsResolverConfigurationDao.save(reportedDnsResolverConfiguration); } } }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter((ex) ->!notFound).collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>>))); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.Collections.singletonList(0, NAMES.length); }
protected java.util.Map<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.Collections.singletonList(0, NAMES.length); }
public void createVolumeSnapshot() { if ((getWindow())!= null) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItem(); org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel.createVolumeSnapshotModel(this); setWindow(snapshotModel); snapshotModel.startProgress(); snapshotModel.startProgress(); snapshotModel.getClusterName().setEntity(volumeEntity.getName()); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onCreateSnapshot", this); snapshotModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("Cancel", this); snapshotModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getIsGlusterVolumeSnapshotCliScheduleEnabled(new org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery(((java.util.List<org.ovirt.engine.ui.uicommonweb.models.volumes.AsyncQuery>) (((org.ovirt.engine.ui.uicommonweb.models.volumes.vm.AbstractDiskSnapshotListModel) (getSelectedItem()))).setEntity(isCliScheduleEnabled); snapshotModel.stopProgress(); }
public static org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel createVolumeSnapshotModel(org.ovirt.engine.ui.uicommonweb.models.ICommand commandTarget) { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel(true, true); snapshotModel.setHelpTag(HelpTag.new_volume_snapshot); snapshotModel.setHashName("new_volume_snapshot"); snapshotModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createScheduleVolumeSnapshotTitle()); return snapshotModel; }
public boolean isDefaultMtu() { return (mtu) == 0; }
protected int calcEvenDistributionScore(float maxMemoryOfVdsInCluster, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm, boolean countThreadsAsCores) { java.lang.Integer effectiveCpuCores = splaValidator.getEffectiveCpuCpuCores(vds, countThreadsAsCores); if (((maxSchedulerWeight) == null) || ((vds.getUsageCpuPercent()) == null)) { return (MaxSchedulerWeight) - 1; } int score = ((int) (calcHostLoadPerCore.getUsageCpuPercent()) - 1); return java.lang.Math.min(calculate(calculate, ((maxSchedulerWeight) - 1)); }
public static int getMtuActualValue(org.ovirt.engine.core.common.businessentities.network.Network network) { return (network.getMtu()) == 0? org.ovirt.engine.core.common.businessentities.network.Network.NetworkQoS : network.getMtu(); }
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (returnValue))); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String stdout = runAnvaInfo(runAnvaInfoPlaybook); java.lang.Object result = runAnsWith("{")? parseOvf(stdout); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); org.ovirt.engine.core.bll.GetVmFromOvaQuery.setReturnValue(result); }
private java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> parseOvfs(java.lang.String stdout) { java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.lang.String> parseOvfs(java.lang.String stdout, ((stdout.length()) - 1)); return java.util.Arrays.asList(stdout.split("::")).map(org.ovirt.engine.core.bll.GetVmFromOvaQuery.OVA_TO_OVF_PATTERN.matcher).filter(java.util.stream.Collectors.toMap(((java.util.stream.group(2)), (m.group(2)) -> m.group(1))); }
public java.util.Map<org.ovirt.engine.core.common.businessentities.VM> getVmsUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId).filter((vm) ->!(vm.isStateless())).collect(java.util.stream.Collectors.toMap(VM::getIdsByAllClustersHavingMacPool(macPoolId).stream()), mac); return vmUsingMacId.map(vmsById.keySet().split(vmId).stream(); }
public org.ovirt.engine.core.bll.ValidationResult isMacAssignableValidator() { boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); boolean illegalDuplicateMacUsage = (!allowDupMacs) && (macPool.isExistingMacInUse(macAddress)); if (!(illegalVm(null)) { java.util.Optional.<org.ovirt.engine.core.common.businessentities.VM> optionalVm = macsUsedAcrossAcrossWhole.getVmUsingMac(macPool.getId(), macAddress); if (!(optionalVm.isPresent())) { optionalVm = macsUsedAcrossWhole.getSnapshotUsingMac(macPool.getId(), macAddress); } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_MAC_IN_USE, macAddress), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_IN_USE_BY, (optionalVm.get().getName()? org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.MacAddressValidator.VAR_IN_USE_BY_VM)) : ""))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public java.util.List<java.lang.String> getMacsForMacPool(org.ovirt.engine.core.compat.Guid macPoolId) { java.util.List<org.ovirt.engine.core.compat.Guid> idsOfAllClustersHavingMacPool = getIdsOfAllClustersHavingMacPool(macPoolId); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(idsOfAllClustersHavingClustersHavingMacPool); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vmsById = getAllVmsInSystem(idsOfAllClustersHavingClustersHavingMacPool); java.util.Stream<org.ovirt.engine.core.compat.Guid> idsOfRunningStatelessVMs = getAllStatelessVms(vmsById.values()).map(VM::getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.VM> statelessSnapshotsOfRunningVMs = idsOfRunningStatelessVMs.map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).map(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshotSucceededSnapshotsOfVMs.collectSnapshotsOfVmIds(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshotSucceededSnapshotsOfVmId = statelessSnapshotsOfVmId.collect(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> snapshotInterfacesByVmId = statelessSnapshotsOfVmId.collectSnapshotsByVmId(getVmId(), snapshot.getInterfacesByVmId()); java.
private java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllVmsInSystem(java.util.List<org.ovirt.engine.core.compat.Guid> clustersIds) { return clustersIds.toMap().split(((org.ovirt.engine.core.compat.Guid) (vm_clusterId))); }
public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId).collect(java.util.stream.Collectors.toList()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).map(java.util.stream.Function.toMap(snapshotsManager.getVmConfigurationInStatelessSnapshotOfVm).map(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.toMap(VM.getId(), java.util.function.Function.toMap()), mac); return snapshotUsingMacId.map(snapshotsById, vm.getInterfaces().stream()), mac); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(); if (new org.ovirt.engine.core.bll.network.VmInterfaceManager().tooMorePluggedInterfaceWithSameMac(nic, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_MAC_IN_USE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.VAR_MAC_IN_USE_BY, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected com.google.gwt.user.client.ui.IsWidget createMacColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterface column = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceList.SM_NIC_OVERFLOW); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(networkInterface.getMacAddress()); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macAddress()); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.macAddress()); org.ovirt.engine.ui.common.widget.table.column.VmInterfaceTooltip tooltip = new org.ovirt.engine.ui.common.widget.tool.WidgetTooltip(column); tooltip.setHtml(mac); return tooltip; }
protected com.google.gwt.user.client.ui.IsWidget createIpv6Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.gwtbootstrap3.client.ui.Column column = new org.gwt.user.client.ui.Column(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.SM_NIC_OVERFLOW); column.addStyleName("vm6"); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.get().createDLEElement(); java.util.List<java.lang.String> ipv6AddressExiner = new java.util.String JOINewAddressExiner(); java.util.String JOINiner = com.google.gwt.dom.client.Document.get().createDLEElement(); java.util.String JOINiner ipv6AddressExiner = new java.util.ArrayList<java.lang.String>(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItemListItemList.COMMA_DELIMITER); if ((guestAgentInterface.getIpv6Addresses())!= null) { ipv6Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceList.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv6 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItemList.COMMA_DELIMITER, guestAgentInterface.getIpv6Addresses())); com.google.gwt.safehtml.shared.SafeHtml ipv6 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItemListModel.constants.notAvailableLabel()); return com.google.
protected com.google.gwt.user.client.ui.IsWidget createIpv4Column(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface guestAgentInterface) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterface column = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.SM_NIC_OVERFLOW); column.addStyleName("vm4 address"); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.ElementList(); java.util.List<java.lang.String> com.google.gwt.dom.client.Element> ipv4AddressExiner = new java.util.StringBuilder(); java.lang.String Joiner ipv4AddressExiner = new java.util.StringBuilder(); java.lang.String Joiner ipv4AddressExiner = new java.lang.StringBuilder(); java.lang.String Joiner(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItemListGroupItem.COMMA_DELIMITER, guestAgentInterface.getIpv4Addresses())); if ((guestAgentInterface.getIpv4Addresses())!= null) { ipv4Address = org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItemList.constants.notAvailableLabel(); } com.google.gwt.safehtml.shared.SafeHtml ipv4Address = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItemList.COMMELIMITER, guestAgentInterface.getIpv4Addresses())); com.google.gwt.safehtml.shared.SafeHtml ipv4 = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(org.ovirt
private void applyVmInterfaceSpecificStyles() { mainInfoPanel.getElement().getStyle().setPaddingBottom(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setMarginLeft(0, Style.Unit.PX); detailedInfoContainer.getElement().getStyle().setMarginLeft(0, StylePanel.PX); descriptionHeaderPanel.getElement().getStyle().setWidth(10, Style.PCT); descriptionHeaderPanel.removeStyleName(PatternflyConstants.PF_LIST_DESCRIPTION); descriptionHeaderPanel.removeStyleName(PatternflyConstants.PF_LIST_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.PF_LIST_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.PF_LIST_DESCRIPTION); descriptionPanel.removeStyleName(PatternflyConstants.PF_LIST_NAME); }
protected com.google.gwt.user.client.ui.IsWidget createNetworkNameColumn(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterface column = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListModel.SM_3); column.addStyleName(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListItem.VM_NIC_OVERFLOW); com.google.gwt.dom.client.DListElement dl = com.google.gwt.dom.client.get().createDLEElement(); com.google.gwt.safehtml.shared.SafeHtml name = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(((networkInterface.getNetworkName())!= null? networkInterface.getNetworkName() : org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.unAvailablePropertyLabel())); addBoldReverseDetailItem(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(org.ovirt.engine.ui.common.widget.uicommon.vm.VmInterfaceListGroupItem.constants.networkNameInterface()), name, dl); column.getElement().appendChild(dl); org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip tooltip = new org.ovirt.engine.ui.common.widget.tooltip.WidgetTooltip(column); tooltip.setHtml(name); return tooltip; }
private void updateNics(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel> nics) { nicList.clear(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterface> groups = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterface> groups = new java.util.ArrayList<>(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : nics) { groups.add(new org.ovirt.engine.ui.webadmin.section.main.view.popup.host.host.panels.NetworkGroup(nic, eventBus, style)); } nicList.addAll(groups, (!(rendered))); }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "The NetworkCommand List with more than one Unary Operation menu.add(entry.getKey().getVerb(item), org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command.getKey().getVerb(item), org.ovirt.engine.ui.webadmin.widget.uicommon.popup.ui.VmHostCommand command.getDefaultOkUiCommand(command.getName(), command))); } else { org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu; for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand.getName(), command))); } } return menu; }
@org.junit.Test public void testAdd() { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0000000000", "nics"); javax.ws.rs.core.Response request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("POST correct usage, See: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http.getDetail()); }
@org.junit.Test public void testUpdateWithNonGuidId() { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-00000000", "nics", "nics", "nics", "nics", "nice"); javax.ws.rs.core.Response request = mockRequest("PUT"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("Wrong correct usage, http: http: http: http: http: http: http: http: http: http.getDetail()); }
@org.junit.Test public void testAction() { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0000000000", "freezefilesystems"); javax.ws.rs.core.Response request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("POST correct usage, http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http: http:]); }
protected org.ovirt.engine.core.common.businessentities.VM getVmFromConfiguration() { org.ovirt.engine.core.common.queries.GetVmConfigurationValue queryReturnValue = runInternalQuery(VdcQueryType.GetVmConfigurationBySnapshotId, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getParameters().getSnapshotId())); return queryReturnValue.getSucceeded()? queryReturnValue.getSucceeded() : null; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDb() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = getVmFromConfiguration(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksFromDb = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmFromConfiguration.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(vmFromConfiguration.getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.ONLY_SNAPPLICABLE, org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterCinderDisks(org.ovirt.engine.core.bll.storage.disk.CreateAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.AttachDiskCommand.getVm().getDiskMap().values(), org.ovirt.engine.core.bll.storage.disk.image.AttachAllTemplateDisksFromSnapshotCommand.getVm().getDiskMap(), org.ovirt.engine.core.bll.storage.disk.disk.image.AttachAllTemplateDisksFromSnapshotCommand.getVm().values(), org.ovirt.engine.core.bll.storage.disk.disk.image.AttachAllTemplateDisksFromSnapshotCommand.getVm().getId(), org.ovirt.engine.core.bll.storage.disk.disk.disk.image.AttachDiskCommand.getVm().getDiskMap().values(), org.ovirt
public void loadVmFromOva() { clearForLoad(); if (!(validateOvaConfiguration())) { return; } startProgress(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.AsyncQuery(((java.lang.String) ((returnValue) -> (returnValue.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.uicommonweb.models.vms.Collectors.toMap(((java.lang.String) (returnValue))); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }
private void updateVmDynamicData() { if ((vdsmVm.getVmDynamic().getGuestAgentNicsHash())!= (dbVm.getGuestAgentNicsHash())) { vmGuestAgentNics = vdsmVm.getVmGuestAgentInterfaces(); dbVm.setIp(extractVmIp(vmGuestAgentNics)); } java.util.List<java.lang.String> changedFields = getChangedFields(dbVm, vdsmVm.getVmDynamic()); changedFields.removeAll(org.ovirt.engine.core.vdsbroker.monitoring.VmAnalyzer.UNCHANGEABLE_LIST_VMM); if ((vdsmVm.getVmDynamic().getStatus())!= (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { changedFields.remove(VmDynamic.APPLICATIONS_LIST_NAME); vdsmVm.getVmDynamic().setAppList(dbVm.getAppList()); } if (!(changedFields.isEmpty())) { dbVm.updateRuntimeData(dbVm.getVmDynamic(), vdsManager.getVdsId()); saveDynamic(dbVm); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> filterGuestAgentInterfaces(java.util.List<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface> nics) { nics = removeLoopbacks(nics); nics.forEach(nics); nics.remove(this.filterIpv6Addresses); nics.remove(this.filterIpv6Addresses); return nics; }
private void filterIpv6Addresses(org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface nic) { nic.setIpv6Addresses(nic.getIpv6Addresses().map(nic.getIpv6Address().get(0)); }
protected void destroyVm() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue actionReturnValue = runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVdsId())); if (((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) && ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())!= null)) { runVdsCommand(VDSCommandType.DestroyVm, buildDestroyVmVDSCommandParameters(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getMigratingToVds())); } setActionReturnValue(actionReturnValue); }
private void initButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, org.ovirt.engine.ui.common.widget.action.ActionButton button, int order) { button.setText(buttonDef.getText()); java.lang.String buttonId = buttonDef.getUniqueId(); if (button == null) { button.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), buttonId)); } actionFormGroup.remove(actionKebab); if (order < (actionFormGroup.getWidgetCount())) { java.util.List<com.google.gwt.user.client.ui.Widget> currentButtons = new java.util.ArrayList<>(); for (int i = 0; i < (actionFormGroup.getWidgetCount()); i++) { currentButtons.add(action, button.asWidget()); currentButtons.add(actionKeb); currentButtons.add(actionKebab); } actionFormGroup.add(button); actionFormGroup.add(button); } actionItemMap.put(button); }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownComboolean(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButton; if ((buttonDef.getIcon()) instanceof org.ovirt.engine.ui.common.widget.action.DropdownActionButton.getIcon())) { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } else { dropdownActionButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButton(subActions, selectedItemsProvider, true, null); } initButton(buttonDef, dropdownActionButton, java.lang.Integer.MAX_VALUE); return dropdownActionButton; }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId!= null) { menuItem.asWidget().getElement().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, orderItem); actionKebabb.addMenuItem(menuItem, order); return menuItem; }
public org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order) { org.ovirt.engine.ui.common.widget.action.SimpleActionButton newActionButton = createNewActionButton(buttonDef); initButton(buttonDef, order); return newActionButton; }
public void addMenuItem(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton, int order) { if (order > (KeabuiBabMenu.getWidgetCount()) {KeabMenu.add(actionButton.asWidget(), order); } else {Keabui.insert(actionButton.asWidget(), order); } }
org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef, int order);
public void addDetailPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType mainTabEntityType, org.ovirt.engine.ui.webadmin.plugin.api.Plugin actionButtonInterface) { java.lang.String historyToken = mainTabEntityType.getSubTabHistoryToken(subTabEntityType); if (historyToken!= null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent event = createButtonDefinition(this, historyToken, actionButtonInterface); } }
public org.ovirt.engine.ui.common.widget.action.ActionButton addDropdownActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T>> subActions, org.ovirt.engine.ui.common.widget.action.DropdownActionButton.SelectedItemsProvider<T> selectedItemsProvider) { org.ovirt.engine.ui.common.widget.action.DropdownActionButton<T> dropdownActionButtonButton = new org.ovirt.engine.ui.common.widget.action.DropdownActionButtonButton(subActions, selectedItemsProvider); initButton(buttonDef, dropdownActionButton, java.lang.Integer.MAX_VALUE); return dropdownActionButton; }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { addActionButton(buttonDef, null); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getActionPanelPresenterWidget())!= null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>>) (buttonDef))); } } }
public java.lang.Double getPriority() { return getValueAsDouble("priority", java.lang.Double.MAX_VALUE); }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if (hasActionPanelPresenterWidget()) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMaintenanceListPresenter.getActionPanelPresenterWidget().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }
double getPriority();
public void addMenuPlaceActionButton(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface) { java.lang.String historyToken = entityType.getMainHistoryToken(); if (historyToken!= null) { org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> actionButton = createButtonDefinition(label, actionButtonInterface); actionButton.setPriority(actionButtonInterface); org.ovirt.engine.ui.common.presenter.AddActionButtonEvent event = org.ovirt.engine.ui.common.presenter.AddActionButtonEvent.fire(this, historyToken, actionButton); } }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButton actionButton) { notificationKebabebb.addMenuItem(actionButton, java.lang.Integer.MAX_VALUE); notificationKebb.setVisible(((notificationKeb.getWidgetCount()) > 0)); }
public void addMenuListItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { addMenuListItem(menuItemDefinedItemDef, org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> value); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef, int order);
@org.junit.Before public void setUp() throws org.ovirt.engine.core.common.utils.exceptions.InitializationException { vm = createVm(); validator = new org.ovirt.engine.core.bll.validator.VmValidator(vm); mockVmPropertiesUtils(); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao()).thenReturn(vmNetworkInterfaceDao); when(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao()).thenReturn(vnicProfileDao); }
public void setLabel(java.lang.String label) { this.label = label; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); returnValue = executeVdsFenceAction(vdsId, sessionId, actionType.StopVds); if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsCommand(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(vdsId, true); } if (returnValue.getSucceeded()) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); returnValue = executeVdsFenceAction(vdsId, sessionId); setVdsStatus(VDSStatus.NonResponsive); return; } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } }
private void alertActionSkippedAlreadyInStatus(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceActionType, org.ovirt.engine.core.common.businessentities.pm.PowerStatus fenceStatus) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogable auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogable.addCustomValue("HostName", fencedHost.getName()); auditLogable.addCustomValue("AgentStatus", fenceStatus.name()); auditLogDirector.log(auditLogable, AuditLogType.VDS_ALREADY_IN_REQUESTED_STATUS); }
protected org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult fence(org.ovirt.engine.core.common.businessentities.pm.FenceActionType fenceAction, java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents) { org.ovirt.engine.core.bll.pm.PowerManagementHelper.AgentsIterator iterator = createFenceAgentsIterator(fenceAgents); org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult result = null; while (iterator.hasNext()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> agents = iterator.next(); if (fenceAction!= (org.ovirt.engine.core.common.businessentities.pm.FenceActionType.STATUS)) { result = createFenceActionExecutor(agents).fence(FenceActionType.STATUS); if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) && (iterator.hasNext())) { if (((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) && ((result.getPowerStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { alertActionSkippedAlreadyInStatus(fenceAction, getRequestedPowerStatus(fenceAction)); return result; } } } result = createFenceActionExecutor(agents).fence(fenceAction); if ((result.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS)) { break; } } return result; }
public static java.util.Map<java.lang.String, java.lang.Long> ioTuneMapFrom(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { java.util.Map<java.lang.String, java.lang.Long> ioTuneMap = new java.util.LinkedHashMap<>(); ioTuneMap.put(VdsProperties.ReadBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.ReadIopsSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxReadThroughput())); ioTuneMap.put(VdsProperties.TotalBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); ioTuneMap.put(VdsProperties.WriteBytesSec, org.ovirt.engine.core.vdsbroker.vdsbroker.vdsbroker.IoTuneUtils.convertThroughput(storageQos.getMaxWriteThroughput())); return ioTuneMap; }
java.lang.String ACTION_TYPE_FAILED_TEMPLATE_ALREADY_EXISTS();
protected boolean checkIfNeedToBeOverride() { if ((((isTemplate()) && (isCopyOperation())) && (!(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getForceOverride()))) && (getImage().getStorageIds().contains(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getId()))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_IMAGE_ALREADY_EXISTS); } return true; }
public java.lang.Boolean call() throws java.lang.Exception { _deploy.getParser().cliEnvironmentSet(VdsmEnv.ENGINE_HOST_CLUSTER_VERSION, clusterVersion.getValue()); return true; }
public boolean isSearchUsingTags() { return ((origText.contains("tag")) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_POOL_NAME))) || (getCrossRefObjList().contains(SearchObjects.VDC_STORAGE_DOMAIN_OB_NAME)); }
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); if (cpuFlagsManager!= null) { return cpuFlagsManager!= null; } return cpuFlagsManager!= null? cpuFlagsManager.getCpuNameByCpuId(name + ", getCpuFlagsManager() : null; }
private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmXmlRpcBuilder builder = new org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugNicVDSCommand.getVds().getId(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmInfoBuildUtils, (nic.isPassthrough()? org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringBuilder.emptyMap() : org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String libvirtXml = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.prettify(libvirtXml); if (prettyLibvirtXml!= null) { printedLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prectils.prettify(libvirtXml); if (prettyLibvirtXml!= null) { log.info("hot-set: {}", custom libvirtXmlRpmXml); } return libvirtXml; }
@org.junit.Test public void searchUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "User and vm.id=123:123: vm.id=123"); for (java.lang.String searchText : searchTexts) { assertTrue(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Users:", "User:", "Vms:", "Vms:", "Vms:", "Clusters:", "Clusters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String slaveKey, long convertRate) { java.util.Map<java.lang.String, java.lang.Long> parameters = ((java.util.Map<java.lang.String, java.lang.Long>>) (entry.get(currvdsProperties.HOST_QOS_AVERAGE))); if (parameters == null) { return null; } java.lang.Object avg = parameters.get(VdsProperties.HOST_QOS_AVERAGE); java.lang.Long avg = ((java.lang.Long) (avax.ws.rs.core.Long) (avgwt.core.longValue.HOST_QOS_AVERAGE); return ((int) (average / java.lang.Long.valueOf(java.lang.String.valueOf(avgwt.core.server.getValue())))); }
public java.lang.String buildHotplugDisk() { writer.writeStartElement("hotplug"); writer.writeStartElement("hotplug"); writeDisk(device, disk, disk, dve, dev, 0); writeDisk(device, disk, disk, dev, 0); writer.writeStartElement("metadata"); writeDisk(device, disk, dve, dev, dev, 0); writer.writeStartElement("metadata"); writeDisk(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_PREFIX, org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI); writer.writeNamespace(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeStartElement(org.ovirt.engine.core.vdsbroker.vdsbroker.LibvirtVmXmlBuilder.OVIRT_VM_URI, "vm"); writeDiskMetadata(); writer.writeEndElement(); writer.writeEndElement(); return writer.getStringXML(); }
java.lang.String hideVfLabel();
public void toggleView() { if (isDefault) { setDefault(secondIcon); setIcon(secondIcon); } else { setText(defaultIcon); } }
@java.lang.Override public void setIcon(org.ovirt.engine.ui.webadmin.section.main.view.popup.cluster.ScheduledCommand) { if (icon.getSmallPair().isEmpty()) { super.setIcon(icon); } }
public abstract void handleOnClick(com.google.gwt.event.dom.client.ClickEvent event, boolean isDefault);
private int getWarningLowConfirmIndicatorValue() { if (isNewStorage()) { return ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigValues.WarningLowSpaceIndicator))); } return getStorage().getStorageStaticData().getWarningLowConfirmWindow(); }
@java.lang.Override protected java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.vdsbroker.xmlrpc.LibvirtVmXmlRpcBuilder builder = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotUnplugNicVDSCommand.getVds().getId(), nic, vmInfoBuildUtils, java.util.Collections.emptyMap()); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String libvirtXml = builder.buildHotplicate(libvirtXml); if (libvirtXmlXmlRIC hotplug) { if (libvirtXml!= null) { long libvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (libvirtXmlXmlXml.isHotplugCpu(libvirtXml); } } return libvirtXml; }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getParameters().getNextStep()) == null) { return false; } switch (org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.getParameters().getNextStep()) { case GEO_REP : org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterVolumeGeoRepSessionParameters(getSession().getMasterVolumeId(), getSession().getId()); parameters.setEndProcedure(EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.storage.gluster.GlusterStorageSyncCommand.getActionType()); org.ovirt.engine.core.common.action.ActionReturnValue vdcRetValue = runInternalActionWithTasksContext(ActionType.GlusterStorageGeoRepSyncInternal, parameters); if (!(vdcRetValue.getSucceeded())) { endWithFailure(); } org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TEMNTS : removeDRSnapshots(); break; case REMOVE_TEMPTY : removeDRSnapshots(); org.ovirt.engine.core.bll.storage.GlusterStorageSyncCommand.persistCommandIfNeeded(); break; case REMOVE_TEMNTS : removeDRSnapshots(); break; case END_TRSnap snapshots : removeDRSnapshots(); break; case END_TRSnap snapshots : removeDRSnapshots(); break; case END_TRSnap snapshots : removeDRSnapshots(); break; } return true; }
